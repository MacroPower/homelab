---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  ARGO_NS: argocd
  ARGO_PORT_FORWARD: true
  ARGO_LOG_LEVEL: warn # info and below are verbose enough to destroy your shell, be warned
  REPO_ROOT_DIR: "{{.REPO_ROOT_DIR | default .ROOT_DIR}}"

includes:
  helm: "../helm/Taskfile.yaml"

tasks:
  login:
    desc: Login to ArgoCD
    summary: |
      Args:
        PORT_FORWARD: kubectl proxy enabled (default: {{.ARGO_PORT_FORWARD}})
    vars:
      PORT_FORWARD: "{{.PORT_FORWARD | default .ARGO_PORT_FORWARD}}"
      PASSWORD:
        sh: kubectl -n {{.ARGO_NS}} get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
    preconditions:
      - &requireArgoCdCli
        sh: command -v argocd
        msg: |
          ArgoCD CLI not found, you can install it with:

          brew install argocd
    status:
      - argocd app list -l foo=bar
    cmds:
      - cmd: |
          echo "Logging in to ArgoCD, port-forward:{{.PORT_FORWARD}}"
        silent: true
      - cmd: >-
          argocd login
          --username=admin
          --password="{{.PASSWORD}}"
          --loglevel="{{.ARGO_LOG_LEVEL}}"
          {{ if .PORT_FORWARD -}}
          --port-forward
          --port-forward-namespace="{{.ARGO_NS}}"
          --grpc-web
          --plaintext
          {{- end -}}
        silent: true

  logout:
    desc: Logout from ArgoCD
    summary: |
      Args:
        PROXY: kubectl proxy enabled (default: {{.ARGO_PROXY}})
    vars:
      PROXY: "{{.PROXY | default .ARGO_PROXY}}"
    preconditions:
      - *requireArgoCdCli
    cmds:
      - argocd logout {{- if .ARGO_PROXY }} port-forward {{- end }}

  refresh:
    desc: Refresh ArgoCD Application
    requires:
      vars: [APP]
    preconditions:
      - *requireArgoCdCli
    deps:
      - task: login
    cmds:
      - argocd app get --refresh {{.APP}}

  pause:
    desc: Pause ArgoCD Application
    requires:
      vars: [APP]
    preconditions:
      - *requireArgoCdCli
    deps:
      - task: login
    status:
      - >-
        ! argocd app get {{.APP}} -o json | jq '.spec.syncPolicy.automated' --exit-status
    cmds:
      - >-
        argocd app patch {{.APP}}
        --patch='[{"op": "remove", "path": "/spec/syncPolicy/automated"}]'

  resume:
    desc: Resume ArgoCD Application
    requires:
      vars: [APP]
    preconditions:
      - *requireArgoCdCli
    deps:
      - task: login
    cmds:
      - >-
        argocd app patch {{.APP}}
        --patch='[{"op": "add", "path": "/spec/syncPolicy/automated", "value": {"selfHeal": true}}]' > /dev/null

  local-diff:
    desc: Diff ArgoCD Application
    summary: |
      Args:
        APP: Application to diff (required)
    requires:
      vars: [APP]
    preconditions:
      - *requireArgoCdCli
    deps:
      - task: login
    cmds:
      - >-
        argocd app diff {{.APP}}
        --server-side-generate
        --exit-code=false
        --loglevel={{.ARGO_LOG_LEVEL}}
        --local="{{.REPO_ROOT_DIR}}"

  sync:
    desc: Sync ArgoCD Application
    summary: |
      Args:
        APP: Application to sync (required)
        PREVIEW: Preview changes before syncing (default: true)
        DRY_RUN: Dry run (default: false)
    requires:
      vars: [APP]
    vars:
      PREVIEW: '{{.PREVIEW | default "true"}}'
      DRY_RUN: '{{.DRY_RUN | default "false"}}'
    preconditions:
      - *requireArgoCdCli
    deps:
      - task: login
    cmds:
      - >-
        argocd app sync {{.APP}}
        --server-side
        --loglevel={{.ARGO_LOG_LEVEL}}
        {{- if eq .DRY_RUN "true" }}
        --dry-run
        {{- else if eq .PREVIEW "true" }}
        --preview-changes
        {{- end }}

  local-sync:
    desc: Sync ArgoCD Application from local path
    summary: |
      Args:
        APP: Application to sync (required)
        PREVIEW: Preview changes before syncing (default: true)
        DRY_RUN: Dry run (default: false)
    requires:
      vars: [APP]
    vars:
      PATH:
        sh: argocd app get {{.APP}} -o json | jq -r '.spec.source.path'
      PREVIEW: '{{.PREVIEW | default "true"}}'
      DRY_RUN: '{{.DRY_RUN | default "false"}}'
    preconditions:
      - *requireArgoCdCli
      - sh: argocd app get {{.APP}}
        msg: Application "{{.APP}}" not found
    deps:
      - task: pause
        vars: { APP: "{{.APP}}" }
    cmds:
      - >-
        argocd app sync {{.APP}}
        --server-side
        --loglevel={{.ARGO_LOG_LEVEL}}
        {{- if eq .DRY_RUN "true" }}
        --dry-run
        {{- else if eq .PREVIEW "true" }}
        --preview-changes
        {{- end }}
        --local {{.PATH}}
        --local-repo-root {{.REPO_ROOT_DIR}}

  watch:
    desc: Watch ArgoCD Application
    requires:
      vars: [APP]
    vars:
      PATH:
        sh: argocd app get {{.APP}} -o json | jq -r '.spec.source.path'
    sources:
      - "{{.PATH}}/**/*"
    watch: true
    ignore_error: true
    preconditions:
      - *requireArgoCdCli
    deps:
      - task: login
    cmds:
      - task: local-diff
        vars: { APP: "{{.APP}}" }

  lint:
    desc: Lint ArgoCD Application
    summary: |
      Args:
        APP: Application to lint (required)
        APP_PATH: Path to application (default: pulled from ArgoCD)
    requires:
      vars: [APP]
    vars:
      APP_PATH:
        sh: |
          { argocd app get {{.APP}} -o json | jq -r '.spec.source.path' --exit-status; } || \
            echo "{{.APP_PATH}}"
    sources:
      - "{{.APP_PATH}}/**/*"
      - exclude: "{{.APP_PATH}}/charts/**/*"
      - exclude: "{{.APP_PATH}}/.task/**/*"
    preconditions:
      - *requireArgoCdCli
    deps:
      - task: login
    cmds:
      - cmd: >-
          echo "Linting ArgoCD Application: {{.APP}}, Path: {{.APP_PATH}}"
        silent: true
      - task: helm:lint-chart
        vars:
          CHART_PATH: "{{.APP_PATH}}"
          PARAMS: >-
            --set=config.create=true
            --set=config.name={{.APP}}
            --set=policy.create=true
            --set=policy.name={{.APP}}
