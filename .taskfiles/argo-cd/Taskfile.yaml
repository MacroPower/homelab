---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  REPO_ROOT_DIR: { sh: pwd }
  ARGO_NS: argocd
  ARGO_PORT_FORWARD: "false"
  ARGO_LOG_LEVEL: warn # info and below are verbose enough to destroy your shell, be warned
  ARGO_CONFIG: "{{.HOME}}/.config/argocd/config"
  ARGO_COMMON_ARGS: >-
    --grpc-web
    --loglevel="{{.ARGO_LOG_LEVEL}}"
    --config="{{.ARGO_CONFIG}}"
    {{- if eq .ARGO_PORT_FORWARD "true" }}
    --port-forward
    --port-forward-namespace="{{.ARGO_NS}}"
    --plaintext
    {{- end }}
  DOPPLER_PROJECT: argo-cd
  DOPPLER_CONFIG: home
  DOPPLER_CMD: doppler run -p {{.DOPPLER_PROJECT}} -c {{.DOPPLER_CONFIG}}

includes:
  helm: "../helm/Taskfile.yaml"

tasks:
  bootstrap:
    desc: Bootstrap ArgoCD
    prompt: "Apply ArgoCD bootstrap using the current context?"
    cmds:
      - |-
        {{.DOPPLER_CMD}} -- \
          bash -c 'cd konfig/bootstrap && kcl run' | kubectl apply -f -

  login:
    desc: Login to ArgoCD
    vars:
      SERVER:
        sh: |
          {{- if ne .ARGO_PORT_FORWARD "true" -}}
            kubectl -n {{.ARGO_NS}} get ingress argocd-ingress \
              -o jsonpath="{.spec.rules[0].host}"
          {{- else -}}
            echo "port-forward"
          {{- end -}}
      PASSWORD:
        sh: |
          kubectl -n {{.ARGO_NS}} get secret argocd-initial-admin-secret \
            -o jsonpath="{.data.password}" | base64 -d
    preconditions:
      - &requireArgoCdCli
        sh: command -v argocd
        msg: |
          ArgoCD CLI not found, you can install it with:

          brew install argocd
    status:
      - argocd app list {{.ARGO_COMMON_ARGS}} -l foo=bar
    cmds:
      - cmd: |
          echo "Logging in to ArgoCD {{.SERVER}}, args: {{.ARGO_COMMON_ARGS}}"
        silent: true
      - cmd: >-
          argocd login
          {{- if ne .ARGO_PORT_FORWARD "true" }}
          {{.SERVER}}
          {{- end }}
          --username=admin
          --password="{{.PASSWORD}}"
          {{.ARGO_COMMON_ARGS}}
        silent: true

  logout:
    desc: Logout from ArgoCD
    summary: |
      Args:
        PORT_FORWARD: kubectl proxy enabled (default: {{.ARGO_PORT_FORWARD}})
    vars:
      PORT_FORWARD: "{{.PORT_FORWARD | default .ARGO_PORT_FORWARD}}"
    preconditions:
      - *requireArgoCdCli
    cmds:
      - argocd logout {{- if .PORT_FORWARD }} port-forward {{- end }}

  get:
    desc: Get ArgoCD Application
    requires:
      vars: [APP]
    preconditions:
      - *requireArgoCdCli
    deps:
      - task: login
    cmds:
      - argocd app get {{.APP}} {{.ARGO_COMMON_ARGS}}

  refresh:
    desc: Refresh ArgoCD Application
    requires:
      vars: [APP]
    preconditions:
      - *requireArgoCdCli
    deps:
      - task: login
    cmds:
      - argocd app get --refresh {{.APP}} {{.ARGO_COMMON_ARGS}}

  pause:
    desc: Pause ArgoCD Application
    requires:
      vars: [APP]
    preconditions:
      - *requireArgoCdCli
    deps:
      - task: login
    status:
      - >-
        ! argocd app get {{.APP}} {{.ARGO_COMMON_ARGS}} -o json | jq '.spec.syncPolicy.automated' --exit-status
    cmds:
      - >-
        argocd app patch {{.APP}} {{.ARGO_COMMON_ARGS}}
        --patch='[{"op": "remove", "path": "/spec/syncPolicy/automated"}]'

  resume:
    desc: Resume ArgoCD Application
    requires:
      vars: [APP]
    preconditions:
      - *requireArgoCdCli
    deps:
      - task: login
    cmds:
      - >-
        argocd app patch {{.APP}} {{.ARGO_COMMON_ARGS}}
        --patch='[{"op": "add", "path": "/spec/syncPolicy/automated", "value": {"selfHeal": true}}]' > /dev/null

  diff:r:
    desc: Diff ArgoCD Application (remote only)
    summary: |
      Args:
        APP: Application to diff (required)
    requires:
      vars: [APP]
    preconditions:
      - *requireArgoCdCli
    deps:
      - task: login
    cmds:
      - >-
        argocd app diff {{.APP}}
        --server-side-generate
        --exit-code=false
        {{.ARGO_COMMON_ARGS}}

  diff:
    desc: Diff ArgoCD Application
    summary: |
      Args:
        APP: Application to diff (required)
    requires:
      vars: [APP]
    vars:
      APP_PATH: &appPath
        sh: |
          if [ -d "{{.APP_PATH}}" ]; then
            echo "{{.APP_PATH}}"
          else
            argocd app get {{.APP}} {{.ARGO_COMMON_ARGS}} -o json | jq -r '.spec.source.path' --exit-status;
          fi
    preconditions:
      - *requireArgoCdCli
    deps:
      - task: login
    cmds:
      - >-
        argocd app diff {{.APP}}
        --server-side-generate
        --exit-code=false
        --local="{{.APP_PATH}}"
        --local-repo-root="{{.REPO_ROOT_DIR}}"
        {{.ARGO_COMMON_ARGS}}

  sync:r:
    desc: Sync ArgoCD Application (remote only)
    summary: |
      Args:
        APP: Application to sync (required)
        PREVIEW: Preview changes before syncing (default: true)
        DRY_RUN: Dry run (default: false)
    requires:
      vars: [APP]
    vars:
      PREVIEW: '{{.PREVIEW | default "true"}}'
      DRY_RUN: '{{.DRY_RUN | default "false"}}'
    preconditions:
      - *requireArgoCdCli
    deps:
      - task: login
    cmds:
      - >-
        argocd app sync {{.APP}}
        --server-side
        {{- if eq .DRY_RUN "true" }}
        --dry-run
        {{- else if eq .PREVIEW "true" }}
        --preview-changes
        {{- end }}
        {{.ARGO_COMMON_ARGS}}

  sync:
    desc: Sync ArgoCD Application
    summary: |
      Args:
        APP: Application to sync (required)
        PREVIEW: Preview changes before syncing (default: true)
        DRY_RUN: Dry run (default: false)
    requires:
      vars: [APP]
    vars:
      APP_PATH: *appPath
      PREVIEW: '{{.PREVIEW | default "true"}}'
      DRY_RUN: '{{.DRY_RUN | default "false"}}'
    preconditions:
      - *requireArgoCdCli
      - sh: argocd app get {{.APP}}
        msg: Application "{{.APP}}" not found
    deps:
      - task: pause
        vars: { APP: "{{.APP}}" }
    cmds:
      - >-
        argocd app sync {{.APP}}
        --server-side
        {{- if eq .DRY_RUN "true" }}
        --dry-run
        {{- else if eq .PREVIEW "true" }}
        --preview-changes
        {{- end }}
        --local="{{.APP_PATH}}"
        --local-repo-root="{{.REPO_ROOT_DIR}}"
        {{.ARGO_COMMON_ARGS}}

  watch:
    desc: Watch ArgoCD Application
    requires:
      vars: [APP]
    vars:
      APP_PATH: *appPath
    sources:
      - "{{.APP_PATH}}/**/*"
    watch: true
    ignore_error: true
    preconditions:
      - *requireArgoCdCli
    deps:
      - task: login
    cmds:
      - task: diff
        vars: { APP_PATH: "{{.APP_PATH}}" }

  lint:
    desc: Lint ArgoCD Application
    summary: |
      Args:
        APP: Application to lint (required)
        APP_PATH: Path to application (default: pulled from ArgoCD)
    requires:
      vars: [APP]
    vars:
      APP_PATH: *appPath
    sources:
      - "{{.APP_PATH}}/**/*"
      - exclude: "{{.APP_PATH}}/charts/**/*"
      - exclude: "{{.APP_PATH}}/.task/**/*"
    preconditions:
      - *requireArgoCdCli
    deps:
      - task: login
    cmds:
      - cmd: >-
          echo "Linting ArgoCD Application: {{.APP}}, Path: {{.APP_PATH}}"
        silent: true
      - task: helm:lint
        vars:
          CHART_PATH: "{{.APP_PATH}}"
          PARAMS: >-
            --set=config.create=true
            --set=config.name={{.APP}}
            --set=policy.create=true
            --set=policy.name={{.APP}}
