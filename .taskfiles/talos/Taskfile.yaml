---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  TALOS_SCRIPTS_DIR: "{{.ROOT_DIR}}/.taskfiles/talos/scripts"
  EXTRAS_DIR: "{{.ROOT_DIR}}/hack/extra"
  CLUSTER_DOMAIN: cin.macro.network
  CLUSTER_ENDPOINT: kmgmt.cin.macro.network
  DOPPLER_PROJECT: talhelper
  DOPPLER_ENV: mgmt
  DOPPLER_CMD: doppler run -p {{.DOPPLER_PROJECT}} -c {{.DOPPLER_ENV}}
  TALOS_DIR: "{{.TALOS_DIR}}"

tasks:
  build:
    desc: Build Talos config
    dir: "{{.TALOS_DIR}}"
    cmds:
      #- "{{.DOPPLER_CMD}} -- talhelper validate talconfig"
      - "{{.DOPPLER_CMD}} -- talhelper genconfig --no-gitignore"
    sources:
      - "*.yaml"
    generates:
      - "clusterconfig/*"

  apply:
    desc: Apply Talos config
    summary: |
      Args:
        MODE: Apply mode [auto, interactive, no-reboot, reboot, staged, try] (default: no-reboot)
        NODE: Target node (default: all nodes)
    dir: "{{.TALOS_DIR}}"
    vars:
      MODE: '{{.MODE | default "no-reboot"}}'
      NODE: '{{.NODE | default ""}}'
    cmds:
      - task: build
      - |-
        eval $({{.DOPPLER_CMD}} -- \
          talhelper gencommand apply \
          {{- if ne .NODE "" }}
          --node {{.NODE}}.{{.CLUSTER_DOMAIN}} \
          {{- end }}
          --extra-flags "--mode={{.MODE}}")

  apply-insecure:
    desc: Apply Talos config insecurely
    summary: |
      Args:
        CLUSTER: Cluster name (required)
        NODE: Target node (required)
    requires:
      vars: [CLUSTER, NODE]
    dir: "{{.TALOS_DIR}}"
    cmds:
      - task: build
      - |-
        talosctl apply-config --insecure \
          -n {{.NODE}} -f clusterconfig/{{.CLUSTER}}-{{.NODE}}.{{.CLUSTER_DOMAIN}}.yaml

  talconfig:
    desc: Generate Talos config
    dir: "{{.TALOS_DIR}}"
    cmds:
      - task: build
      - talosctl config merge ./clusterconfig/talosconfig

  kubeconfig:
    desc: Generate kubeconfig
    dir: "{{.TALOS_DIR}}"
    cmds:
      - task: talconfig
      - talosctl kubeconfig -e {{.CLUSTER_ENDPOINT}} -n {{.CLUSTER_ENDPOINT}}

  approve-csr:
    desc: Approve certificate signing requests
    cmds:
      - |-
        kubectl certificate approve \
          $(kubectl get csr --sort-by=.metadata.creationTimestamp | grep Pending | awk '{print $1}')

  apply-extras:
    desc: Apply extra resources
    cmds:
      - for: { var: APPS }
        task: apply-extra
        vars:
          APP: "{{.ITEM}}"
    vars:
      APPS: cilium doppler kubelet-csr-approver

  upgrade:
    desc: Upgrade Talos cluster
    requires:
      vars: [NODES]
    cmds:
      - for: { var: NODES }
        task: upgrade-node
        vars:
          NODE: "{{.ITEM}}"

  upgrade-k8s:
    desc: Upgrade K8s on Talos cluster
    requires:
      vars: [NODES]
    cmds:
      - for: { var: NODES }
        task: upgrade-k8s-node
        vars:
          NODE: "{{.ITEM}}"

  reset:
    desc: Reset Talos cluster
    requires:
      vars: [NODES]
    cmds:
      - for: { var: NODES }
        task: reset-node
        vars:
          NODE: "{{.ITEM}}"

  bootstrap:
    desc: Bootstrap Talos cluster
    summary: |
      Args:
        INITIAL_NODE: Node to bootstrap (default: knode01.{{.CLUSTER_DOMAIN}})
        RECOVERY_SNAPSHOT: Snapshot to recover from (default: "")
    dir: "{{.TALOS_DIR}}"
    vars:
      INITIAL_NODE: '{{.INITIAL_NODE | default (print "knode01." .CLUSTER_DOMAIN)}}'
    cmds:
      - task: talconfig
      - task: apply-insecure
        vars: { NODE: "{{.INITIAL_NODE}}" }
      - cmd: echo "Applied config to {{.INITIAL_NODE}}, waiting..."
        silent: true
      - sleep 60
      - |
        talosctl bootstrap \
          {{if ne .RECOVERY_SNAPSHOT ""}}--recover-from {{.RECOVERY_SNAPSHOT}} \{{end}}
          -e {{.INITIAL_NODE}} -n {{.INITIAL_NODE}}
      - cmd: echo "Issued bootstrap to {{.INITIAL_NODE}}, waiting..."
        silent: true
      - sleep 60
      - task: kubeconfig
      - task: apply-extras
      - sleep 20
      - task: approve-csr
      - talosctl health -n {{.INITIAL_NODE}}
      - task: apply

  reset-node:
    desc: Reset a Talos node
    summary: |
      Args:
        NODE: Node to reset (required)
    cmds:
      - |-
        talosctl reset --graceful=false --reboot \
          -e {{.NODE}}.{{.CLUSTER_DOMAIN}} \
          -n {{.NODE}}.{{.CLUSTER_DOMAIN}} \
          --wipe-mode system-disk \
          --system-labels-to-wipe STATE \
          --system-labels-to-wipe EPHEMERAL
    requires:
      vars: [NODE]

  upgrade-node:
    desc: Upgrade a Talos node
    summary: |
      Args:
        NODE: Node to upgrade (required)
    dir: "{{.TALOS_DIR}}"
    cmds:
      - |
        eval $({{.DOPPLER_CMD}} -- \
          talhelper gencommand upgrade -n {{.NODE}}.{{.CLUSTER_DOMAIN}})
      - sleep 120
    requires:
      vars: [NODE]

  upgrade-k8s-node:
    desc: Upgrade K8s on a Talos node
    summary: |
      Args:
        NODE: Node to upgrade (required)
    dir: "{{.TALOS_DIR}}"
    cmds:
      - |
        eval $({{.DOPPLER_CMD}} -- \
          talhelper gencommand upgrade-k8s -n {{.NODE}}.{{.CLUSTER_DOMAIN}})
      - sleep 120
    requires:
      vars: [NODE]

  apply-extra:
    internal: true
    dir: "{{.EXTRAS_DIR}}/{{.APP}}"
    cmds:
      - |-
        {{.DOPPLER_CMD}} -- \
          envsubst < <(kubectl kustomize --enable-helm .) | \
          kubectl apply --server-side --filename -
      - defer: rm -rf ./charts
    requires:
      vars: [APP]

  support:
    desc: Download support bundle
    summary: |
      Args:
        NODE: Node to download support bundle from (required)
    requires:
      vars: [NODE]
    dir: "{{.TALOS_DIR}}"
    cmds:
      - rm -rf {{.NODE}}.{{.CLUSTER_DOMAIN}}/ cluster/
      - defer: unzip support.zip && rm support.zip
      - talosctl support -n {{.NODE}}.{{.CLUSTER_DOMAIN}} -e {{.NODE}}.{{.CLUSTER_DOMAIN}}

  etcd-snapshot:
    desc: Take an etcd snapshot
    summary: |
      Args:
        NODE: Node to take snapshot from (required)
        FILENAME: Filename to save snapshot as (default: db.snapshot)
    requires:
      vars: [NODE]
    vars:
      FILENAME: '{{.FILENAME | default "db.snapshot"}}'
    dir: "{{.TALOS_DIR}}"
    cmds:
      - talosctl etcd snapshot -n {{.NODE}}.{{.CLUSTER_DOMAIN}} -e {{.NODE}}.{{.CLUSTER_DOMAIN}} {{.FILENAME}}
