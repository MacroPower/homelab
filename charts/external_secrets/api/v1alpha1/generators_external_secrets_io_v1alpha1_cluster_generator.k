"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""

import regex
import k8s.apimachinery.pkg.apis.meta.v1

_regex_match = regex.match

schema ClusterGenerator:
    r"""
    ClusterGenerator represents a cluster-wide generator which can be referenced as part of `generatorRef` fields.

    Attributes
    ----------
    apiVersion : str, default is "generators.external-secrets.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "ClusterGenerator", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpec, default is Undefined, optional
        spec
    """
    apiVersion: "generators.external-secrets.io/v1alpha1" = "generators.external-secrets.io/v1alpha1"

    kind: "ClusterGenerator" = "ClusterGenerator"

    metadata?: v1.ObjectMeta
    spec?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpec

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpec:
    r"""
    generators external secrets io v1alpha1 cluster generator spec

    Attributes
    ----------
    generator : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGenerator, default is Undefined, required
        generator
    kind : str, default is Undefined, required
        Kind the kind of this generator.
    """
    generator: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGenerator

    kind: "ACRAccessToken" | "CloudsmithAccessToken" | "ECRAuthorizationToken" | "Fake" | "GCRAccessToken" | "GithubAccessToken" | "QuayAccessToken" | "Password" | "SSHKey" | "STSSessionToken" | "UUID" | "VaultDynamicSecret" | "Webhook" | "Grafana"

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGenerator:
    r"""
    Generator the spec for this generator, must match the kind.

    Attributes
    ----------
    acrAccessTokenSpec : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpec, default is Undefined, optional
        acr access token spec
    cloudsmithAccessTokenSpec : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorCloudsmithAccessTokenSpec, default is Undefined, optional
        cloudsmith access token spec
    ecrAuthorizationTokenSpec : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpec, default is Undefined, optional
        ecr authorization token spec
    fakeSpec : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorFakeSpec, default is Undefined, optional
        fake spec
    gcrAccessTokenSpec : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpec, default is Undefined, optional
        gcr access token spec
    githubAccessTokenSpec : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGithubAccessTokenSpec, default is Undefined, optional
        github access token spec
    grafanaSpec : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGrafanaSpec, default is Undefined, optional
        grafana spec
    mfaSpec : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorMfaSpec, default is Undefined, optional
        mfa spec
    passwordSpec : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorPasswordSpec, default is Undefined, optional
        password spec
    quayAccessTokenSpec : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorQuayAccessTokenSpec, default is Undefined, optional
        quay access token spec
    sshKeySpec : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorSSHKeySpec, default is Undefined, optional
        ssh key spec
    stsSessionTokenSpec : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpec, default is Undefined, optional
        sts session token spec
    uuidSpec : any, default is Undefined, optional
        UUIDSpec controls the behavior of the uuid generator.
    vaultDynamicSecretSpec : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpec, default is Undefined, optional
        vault dynamic secret spec
    webhookSpec : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpec, default is Undefined, optional
        webhook spec
    """
    acrAccessTokenSpec?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpec
    cloudsmithAccessTokenSpec?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorCloudsmithAccessTokenSpec
    ecrAuthorizationTokenSpec?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpec
    fakeSpec?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorFakeSpec
    gcrAccessTokenSpec?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpec
    githubAccessTokenSpec?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGithubAccessTokenSpec
    grafanaSpec?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGrafanaSpec
    mfaSpec?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorMfaSpec
    passwordSpec?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorPasswordSpec
    quayAccessTokenSpec?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorQuayAccessTokenSpec
    sshKeySpec?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorSSHKeySpec
    stsSessionTokenSpec?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpec
    uuidSpec?: any
    vaultDynamicSecretSpec?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpec
    webhookSpec?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpec

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpec:
    r"""
    ACRAccessTokenSpec defines how to generate the access token
    e.g. how to authenticate and which registry to use.
    see: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md#overview

    Attributes
    ----------
    auth : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuth, default is Undefined, required
        auth
    environmentType : str, default is "PublicCloud", optional
        EnvironmentType specifies the Azure cloud environment endpoints to use for
        connecting and authenticating with Azure. By default it points to the public cloud AAD endpoint.
        The following endpoints are available, also see here: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152
        PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud
    registry : str, default is Undefined, required
        the domain name of the ACR registry
        e.g. foobarexample.azurecr.io
    scope : str, default is Undefined, optional
        Define the scope for the access token, e.g. pull/push access for a repository.
        if not provided it will return a refresh token that has full scope.
        Note: you need to pin it down to the repository level, there is no wildcard available.

        examples:
        repository:my-repository:pull,push
        repository:my-repository:pull

        see docs for details: https://docs.docker.com/registry/spec/auth/scope/
    tenantId : str, default is Undefined, optional
        TenantID configures the Azure Tenant to send requests to. Required for ServicePrincipal auth type.
    """
    auth: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuth

    environmentType?: "PublicCloud" | "USGovernmentCloud" | "ChinaCloud" | "GermanCloud" | "AzureStackCloud" = "PublicCloud"
    registry: str

    scope?: str
    tenantId?: str

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuth:
    r"""
    generators external secrets io v1alpha1 cluster generator spec generator acr access token spec auth

    Attributes
    ----------
    managedIdentity : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuthManagedIdentity, default is Undefined, optional
        managed identity
    servicePrincipal : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuthServicePrincipal, default is Undefined, optional
        service principal
    workloadIdentity : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuthWorkloadIdentity, default is Undefined, optional
        workload identity
    """
    managedIdentity?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuthManagedIdentity
    servicePrincipal?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuthServicePrincipal
    workloadIdentity?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuthWorkloadIdentity

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuthManagedIdentity:
    r"""
    ManagedIdentity uses Azure Managed Identity to authenticate with Azure.

    Attributes
    ----------
    identityId : str, default is Undefined, optional
        If multiple Managed Identity is assigned to the pod, you can select the one to be used
    """
    identityId?: str

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuthServicePrincipal:
    r"""
    ServicePrincipal uses Azure Service Principal credentials to authenticate with Azure.

    Attributes
    ----------
    secretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuthServicePrincipalSecretRef, default is Undefined, required
        secret ref
    """
    secretRef: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuthServicePrincipalSecretRef

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuthServicePrincipalSecretRef:
    r"""
    Configuration used to authenticate with Azure using static
    credentials stored in a Kind=Secret.

    Attributes
    ----------
    clientId : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuthServicePrincipalSecretRefClientID, default is Undefined, optional
        client Id
    clientSecret : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuthServicePrincipalSecretRefClientSecret, default is Undefined, optional
        client secret
    """
    clientId?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuthServicePrincipalSecretRefClientID
    clientSecret?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuthServicePrincipalSecretRefClientSecret

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuthServicePrincipalSecretRefClientID:
    r"""
    The Azure clientId of the service principle used for authentication.

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuthServicePrincipalSecretRefClientSecret:
    r"""
    The Azure ClientSecret of the service principle used for authentication.

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuthWorkloadIdentity:
    r"""
    WorkloadIdentity uses Azure Workload Identity to authenticate with Azure.

    Attributes
    ----------
    serviceAccountRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuthWorkloadIdentityServiceAccountRef, default is Undefined, optional
        service account ref
    """
    serviceAccountRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuthWorkloadIdentityServiceAccountRef

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorAcrAccessTokenSpecAuthWorkloadIdentityServiceAccountRef:
    r"""
    ServiceAccountRef specified the service account
    that should be used when authenticating with WorkloadIdentity.

    Attributes
    ----------
    audiences : [str], default is Undefined, optional
        Audience specifies the `aud` claim for the service account token
        If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
        then this audiences will be appended to the list
    name : str, default is Undefined, required
        The name of the ServiceAccount resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    audiences?: [str]
    name: str

    namespace?: str

    check:
        len(name) <= 253
        len(name) >= 1
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$")
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorCloudsmithAccessTokenSpec:
    r"""
    generators external secrets io v1alpha1 cluster generator spec generator cloudsmith access token spec

    Attributes
    ----------
    apiUrl : str, default is Undefined, optional
        APIURL configures the Cloudsmith API URL. Defaults to https://api.cloudsmith.io.
    orgSlug : str, default is Undefined, required
        OrgSlug is the organization slug in Cloudsmith
    serviceAccountRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorCloudsmithAccessTokenSpecServiceAccountRef, default is Undefined, required
        service account ref
    serviceSlug : str, default is Undefined, required
        ServiceSlug is the service slug in Cloudsmith for OIDC authentication
    """
    apiUrl?: str
    orgSlug: str

    serviceAccountRef: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorCloudsmithAccessTokenSpecServiceAccountRef

    serviceSlug: str

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorCloudsmithAccessTokenSpecServiceAccountRef:
    r"""
    Name of the service account you are federating with

    Attributes
    ----------
    audiences : [str], default is Undefined, optional
        Audience specifies the `aud` claim for the service account token
        If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
        then this audiences will be appended to the list
    name : str, default is Undefined, required
        The name of the ServiceAccount resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    audiences?: [str]
    name: str

    namespace?: str

    check:
        len(name) <= 253
        len(name) >= 1
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$")
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpec:
    r"""
    generators external secrets io v1alpha1 cluster generator spec generator ecr authorization token spec

    Attributes
    ----------
    auth : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpecAuth, default is Undefined, optional
        auth
    region : str, default is Undefined, required
        Region specifies the region to operate in.
    role : str, default is Undefined, optional
        You can assume a role before making calls to the
        desired AWS service.
    scope : str, default is Undefined, optional
        Scope specifies the ECR service scope.
        Valid options are private and public.
    """
    auth?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpecAuth
    region: str

    role?: str
    scope?: str

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpecAuth:
    r"""
    Auth defines how to authenticate with AWS

    Attributes
    ----------
    jwt : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpecAuthJwt, default is Undefined, optional
        jwt
    secretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpecAuthSecretRef, default is Undefined, optional
        secret ref
    """
    jwt?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpecAuthJwt
    secretRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpecAuthSecretRef

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpecAuthJwt:
    r"""
    Authenticate against AWS using service account tokens.

    Attributes
    ----------
    serviceAccountRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpecAuthJwtServiceAccountRef, default is Undefined, optional
        service account ref
    """
    serviceAccountRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpecAuthJwtServiceAccountRef

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpecAuthJwtServiceAccountRef:
    r"""
    A reference to a ServiceAccount resource.

    Attributes
    ----------
    audiences : [str], default is Undefined, optional
        Audience specifies the `aud` claim for the service account token
        If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
        then this audiences will be appended to the list
    name : str, default is Undefined, required
        The name of the ServiceAccount resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    audiences?: [str]
    name: str

    namespace?: str

    check:
        len(name) <= 253
        len(name) >= 1
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$")
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpecAuthSecretRef:
    r"""
    AWSAuthSecretRef holds secret references for AWS credentials
    both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.

    Attributes
    ----------
    accessKeyIDSecretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRef, default is Undefined, optional
        access key ID secret ref
    secretAccessKeySecretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef, default is Undefined, optional
        secret access key secret ref
    sessionTokenSecretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef, default is Undefined, optional
        session token secret ref
    """
    accessKeyIDSecretRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRef
    secretAccessKeySecretRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef
    sessionTokenSecretRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpecAuthSecretRefAccessKeyIDSecretRef:
    r"""
    The AccessKeyID is used for authentication

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef:
    r"""
    The SecretAccessKey is used for authentication

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorEcrAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef:
    r"""
    The SessionToken used for authentication
    This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
    see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorFakeSpec:
    r"""
    FakeSpec contains the static data.

    Attributes
    ----------
    controller : str, default is Undefined, optional
        Used to select the correct ESO controller (think: ingress.ingressClassName)
        The ESO controller is instantiated with a specific controller name and filters VDS based on this property
    data : {str:str}, default is Undefined, optional
        Data defines the static data returned
        by this generator.
    """
    controller?: str
    data?: {str:str}

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpec:
    r"""
    generators external secrets io v1alpha1 cluster generator spec generator gcr access token spec

    Attributes
    ----------
    auth : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuth, default is Undefined, required
        auth
    projectID : str, default is Undefined, required
        ProjectID defines which project to use to authenticate with
    """
    auth: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuth

    projectID: str

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuth:
    r"""
    Auth defines the means for authenticating with GCP

    Attributes
    ----------
    secretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthSecretRef, default is Undefined, optional
        secret ref
    workloadIdentity : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthWorkloadIdentity, default is Undefined, optional
        workload identity
    workloadIdentityFederation : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthWorkloadIdentityFederation, default is Undefined, optional
        workload identity federation
    """
    secretRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthSecretRef
    workloadIdentity?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthWorkloadIdentity
    workloadIdentityFederation?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthWorkloadIdentityFederation

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthSecretRef:
    r"""
    generators external secrets io v1alpha1 cluster generator spec generator gcr access token spec auth secret ref

    Attributes
    ----------
    secretAccessKeySecretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef, default is Undefined, optional
        secret access key secret ref
    """
    secretAccessKeySecretRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef:
    r"""
    The SecretAccessKey is used for authentication

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthWorkloadIdentity:
    r"""
    generators external secrets io v1alpha1 cluster generator spec generator gcr access token spec auth workload identity

    Attributes
    ----------
    clusterLocation : str, default is Undefined, required
        cluster location
    clusterName : str, default is Undefined, required
        cluster name
    clusterProjectID : str, default is Undefined, optional
        cluster project ID
    serviceAccountRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthWorkloadIdentityServiceAccountRef, default is Undefined, required
        service account ref
    """
    clusterLocation: str

    clusterName: str

    clusterProjectID?: str
    serviceAccountRef: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthWorkloadIdentityServiceAccountRef

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthWorkloadIdentityFederation:
    r"""
    GCPWorkloadIdentityFederation holds the configurations required for generating federated access tokens.

    Attributes
    ----------
    audience : str, default is Undefined, optional
        audience is the Secure Token Service (STS) audience which contains the resource name for the workload identity pool and the provider identifier in that pool.
        If specified, Audience found in the external account credential config will be overridden with the configured value.
        audience must be provided when serviceAccountRef or awsSecurityCredentials is configured.
    awsSecurityCredentials : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthWorkloadIdentityFederationAwsSecurityCredentials, default is Undefined, optional
        aws security credentials
    credConfig : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthWorkloadIdentityFederationCredConfig, default is Undefined, optional
        cred config
    externalTokenEndpoint : str, default is Undefined, optional
        externalTokenEndpoint is the endpoint explicitly set up to provide tokens, which will be matched against the
        credential_source.url in the provided credConfig. This field is merely to double-check the external token source
        URL is having the expected value.
    serviceAccountRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthWorkloadIdentityFederationServiceAccountRef, default is Undefined, optional
        service account ref
    """
    audience?: str
    awsSecurityCredentials?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthWorkloadIdentityFederationAwsSecurityCredentials
    credConfig?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthWorkloadIdentityFederationCredConfig
    externalTokenEndpoint?: str
    serviceAccountRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthWorkloadIdentityFederationServiceAccountRef

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthWorkloadIdentityFederationAwsSecurityCredentials:
    r"""
    awsSecurityCredentials is for configuring AWS region and credentials to use for obtaining the access token,
    when using the AWS metadata server is not an option.

    Attributes
    ----------
    awsCredentialsSecretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthWorkloadIdentityFederationAwsSecurityCredentialsAwsCredentialsSecretRef, default is Undefined, required
        aws credentials secret ref
    region : str, default is Undefined, required
        region is for configuring the AWS region to be used.
    """
    awsCredentialsSecretRef: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthWorkloadIdentityFederationAwsSecurityCredentialsAwsCredentialsSecretRef

    region: str

    check:
        len(region) <= 50
        len(region) >= 1
        _regex_match(str(region), r"^[a-z0-9-]+$")

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthWorkloadIdentityFederationAwsSecurityCredentialsAwsCredentialsSecretRef:
    r"""
    awsCredentialsSecretRef is the reference to the secret which holds the AWS credentials.
    Secret should be created with below names for keys
    - aws_access_key_id: Access Key ID, which is the unique identifier for the AWS account or the IAM user.
    - aws_secret_access_key: Secret Access Key, which is used to authenticate requests made to AWS services.
    - aws_session_token: Session Token, is the short-lived token to authenticate requests made to AWS services.

    Attributes
    ----------
    name : str, default is Undefined, required
        name of the secret.
    namespace : str, default is Undefined, optional
        namespace in which the secret exists. If empty, secret will looked up in local namespace.
    """
    name: str

    namespace?: str

    check:
        len(name) <= 253
        len(name) >= 1
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$")
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthWorkloadIdentityFederationCredConfig:
    r"""
    credConfig holds the configmap reference containing the GCP external account credential configuration in JSON format and the key name containing the json data.
    For using Kubernetes cluster as the identity provider, use serviceAccountRef instead. Operators mounted serviceaccount token cannot be used as the token source, instead
    serviceAccountRef must be used by providing operators service account details.

    Attributes
    ----------
    key : str, default is Undefined, required
        key name holding the external account credential config.
    name : str, default is Undefined, required
        name of the configmap.
    namespace : str, default is Undefined, optional
        namespace in which the configmap exists. If empty, configmap will looked up in local namespace.
    """
    key: str

    name: str

    namespace?: str

    check:
        len(key) <= 253
        len(key) >= 1
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$")
        len(name) <= 253
        len(name) >= 1
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$")
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthWorkloadIdentityFederationServiceAccountRef:
    r"""
    serviceAccountRef is the reference to the kubernetes ServiceAccount to be used for obtaining the tokens,
    when Kubernetes is configured as provider in workload identity pool.

    Attributes
    ----------
    audiences : [str], default is Undefined, optional
        Audience specifies the `aud` claim for the service account token
        If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
        then this audiences will be appended to the list
    name : str, default is Undefined, required
        The name of the ServiceAccount resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    audiences?: [str]
    name: str

    namespace?: str

    check:
        len(name) <= 253
        len(name) >= 1
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$")
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGcrAccessTokenSpecAuthWorkloadIdentityServiceAccountRef:
    r"""
    A reference to a ServiceAccount resource.

    Attributes
    ----------
    audiences : [str], default is Undefined, optional
        Audience specifies the `aud` claim for the service account token
        If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
        then this audiences will be appended to the list
    name : str, default is Undefined, required
        The name of the ServiceAccount resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    audiences?: [str]
    name: str

    namespace?: str

    check:
        len(name) <= 253
        len(name) >= 1
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$")
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGithubAccessTokenSpec:
    r"""
    generators external secrets io v1alpha1 cluster generator spec generator github access token spec

    Attributes
    ----------
    appID : str, default is Undefined, required
        app ID
    auth : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGithubAccessTokenSpecAuth, default is Undefined, required
        auth
    installID : str, default is Undefined, required
        install ID
    permissions : {str:str}, default is Undefined, optional
        Map of permissions the token will have. If omitted, defaults to all permissions the GitHub App has.
    repositories : [str], default is Undefined, optional
        List of repositories the token will have access to. If omitted, defaults to all repositories the GitHub App
        is installed to.
    url : str, default is Undefined, optional
        URL configures the Github instance URL. Defaults to https://github.com/.
    """
    appID: str

    auth: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGithubAccessTokenSpecAuth

    installID: str

    permissions?: {str:str}
    repositories?: [str]
    url?: str

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGithubAccessTokenSpecAuth:
    r"""
    Auth configures how ESO authenticates with a Github instance.

    Attributes
    ----------
    privateKey : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGithubAccessTokenSpecAuthPrivateKey, default is Undefined, required
        private key
    """
    privateKey: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGithubAccessTokenSpecAuthPrivateKey

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGithubAccessTokenSpecAuthPrivateKey:
    r"""
    generators external secrets io v1alpha1 cluster generator spec generator github access token spec auth private key

    Attributes
    ----------
    secretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGithubAccessTokenSpecAuthPrivateKeySecretRef, default is Undefined, required
        secret ref
    """
    secretRef: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGithubAccessTokenSpecAuthPrivateKeySecretRef

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGithubAccessTokenSpecAuthPrivateKeySecretRef:
    r"""
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGrafanaSpec:
    r"""
    GrafanaSpec controls the behavior of the grafana generator.

    Attributes
    ----------
    auth : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGrafanaSpecAuth, default is Undefined, required
        auth
    serviceAccount : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGrafanaSpecServiceAccount, default is Undefined, required
        service account
    url : str, default is Undefined, required
        URL is the URL of the Grafana instance.
    """
    auth: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGrafanaSpecAuth

    serviceAccount: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGrafanaSpecServiceAccount

    url: str

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGrafanaSpecAuth:
    r"""
    Auth is the authentication configuration to authenticate
    against the Grafana instance.

    Attributes
    ----------
    basic : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGrafanaSpecAuthBasic, default is Undefined, optional
        basic
    token : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGrafanaSpecAuthToken, default is Undefined, optional
        token
    """
    basic?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGrafanaSpecAuthBasic
    token?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGrafanaSpecAuthToken

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGrafanaSpecAuthBasic:
    r"""
    Basic auth credentials used to authenticate against the Grafana instance.
    Note: you need a token which has elevated permissions to create service accounts.
    See here for the documentation on basic roles offered by Grafana:
    https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/

    Attributes
    ----------
    password : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGrafanaSpecAuthBasicPassword, default is Undefined, required
        password
    username : str, default is Undefined, required
        A basic auth username used to authenticate against the Grafana instance.
    """
    password: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGrafanaSpecAuthBasicPassword

    username: str

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGrafanaSpecAuthBasicPassword:
    r"""
    A basic auth password used to authenticate against the Grafana instance.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key where the token is found.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    """
    key?: str
    name?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGrafanaSpecAuthToken:
    r"""
    A service account token used to authenticate against the Grafana instance.
    Note: you need a token which has elevated permissions to create service accounts.
    See here for the documentation on basic roles offered by Grafana:
    https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key where the token is found.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    """
    key?: str
    name?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorGrafanaSpecServiceAccount:
    r"""
    ServiceAccount is the configuration for the service account that
    is supposed to be generated by the generator.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the service account that will be created by ESO.
    role : str, default is Undefined, required
        Role is the role of the service account.
        See here for the documentation on basic roles offered by Grafana:
        https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/rbac-fixed-basic-role-definitions/
    """
    name: str

    role: str

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorMfaSpec:
    r"""
    MFASpec controls the behavior of the mfa generator.

    Attributes
    ----------
    algorithm : str, default is Undefined, optional
        Algorithm to use for encoding. Defaults to SHA1 as per the RFC.
    length : int, default is Undefined, optional
        Length defines the token length. Defaults to 6 characters.
    secret : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorMfaSpecSecret, default is Undefined, required
        secret
    timePeriod : int, default is Undefined, optional
        TimePeriod defines how long the token can be active. Defaults to 30 seconds.
    when : str, default is Undefined, optional
        When defines a time parameter that can be used to pin the origin time of the generated token.
    """
    algorithm?: str
    length?: int
    secret: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorMfaSpecSecret

    timePeriod?: int
    when?: str

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorMfaSpecSecret:
    r"""
    Secret is a secret selector to a secret containing the seed secret to generate the TOTP value from.

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorPasswordSpec:
    r"""
    PasswordSpec controls the behavior of the password generator.

    Attributes
    ----------
    allowRepeat : bool, default is Undefined, required
        set AllowRepeat to true to allow repeating characters.
    digits : int, default is Undefined, optional
        Digits specifies the number of digits in the generated
        password. If omitted it defaults to 25% of the length of the password
    length : int, default is 24, required
        Length of the password to be generated.
        Defaults to 24
    noUpper : bool, default is Undefined, required
        Set NoUpper to disable uppercase characters
    symbolCharacters : str, default is Undefined, optional
        SymbolCharacters specifies the special characters that should be used
        in the generated password.
    symbols : int, default is Undefined, optional
        Symbols specifies the number of symbol characters in the generated
        password. If omitted it defaults to 25% of the length of the password
    """
    allowRepeat: bool = False

    digits?: int
    length: int = 24

    noUpper: bool = False

    symbolCharacters?: str
    symbols?: int

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorQuayAccessTokenSpec:
    r"""
    generators external secrets io v1alpha1 cluster generator spec generator quay access token spec

    Attributes
    ----------
    robotAccount : str, default is Undefined, required
        Name of the robot account you are federating with
    serviceAccountRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorQuayAccessTokenSpecServiceAccountRef, default is Undefined, required
        service account ref
    url : str, default is Undefined, optional
        URL configures the Quay instance URL. Defaults to quay.io.
    """
    robotAccount: str

    serviceAccountRef: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorQuayAccessTokenSpecServiceAccountRef

    url?: str

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorQuayAccessTokenSpecServiceAccountRef:
    r"""
    Name of the service account you are federating with

    Attributes
    ----------
    audiences : [str], default is Undefined, optional
        Audience specifies the `aud` claim for the service account token
        If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
        then this audiences will be appended to the list
    name : str, default is Undefined, required
        The name of the ServiceAccount resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    audiences?: [str]
    name: str

    namespace?: str

    check:
        len(name) <= 253
        len(name) >= 1
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$")
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorSSHKeySpec:
    r"""
    SSHKeySpec controls the behavior of the ssh key generator.

    Attributes
    ----------
    comment : str, default is Undefined, optional
        Comment specifies an optional comment for the SSH key
    keySize : int, default is Undefined, optional
        KeySize specifies the key size for RSA keys (default: 2048)
        For RSA keys: 2048, 3072, 4096
        Ignored for ed25519 keys
    keyType : str, default is "rsa", optional
        KeyType specifies the SSH key type (rsa, ed25519)
    """
    comment?: str
    keySize?: int
    keyType?: "rsa" | "ed25519" = "rsa"

    check:
        keySize <= 8192 if keySize not in [None, Undefined]
        keySize >= 256 if keySize not in [None, Undefined]

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpec:
    r"""
    generators external secrets io v1alpha1 cluster generator spec generator sts session token spec

    Attributes
    ----------
    auth : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecAuth, default is Undefined, optional
        auth
    region : str, default is Undefined, required
        Region specifies the region to operate in.
    requestParameters : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecRequestParameters, default is Undefined, optional
        request parameters
    role : str, default is Undefined, optional
        You can assume a role before making calls to the
        desired AWS service.
    """
    auth?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecAuth
    region: str

    requestParameters?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecRequestParameters
    role?: str

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecAuth:
    r"""
    Auth defines how to authenticate with AWS

    Attributes
    ----------
    jwt : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecAuthJwt, default is Undefined, optional
        jwt
    secretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecAuthSecretRef, default is Undefined, optional
        secret ref
    """
    jwt?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecAuthJwt
    secretRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecAuthSecretRef

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecAuthJwt:
    r"""
    Authenticate against AWS using service account tokens.

    Attributes
    ----------
    serviceAccountRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecAuthJwtServiceAccountRef, default is Undefined, optional
        service account ref
    """
    serviceAccountRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecAuthJwtServiceAccountRef

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecAuthJwtServiceAccountRef:
    r"""
    A reference to a ServiceAccount resource.

    Attributes
    ----------
    audiences : [str], default is Undefined, optional
        Audience specifies the `aud` claim for the service account token
        If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
        then this audiences will be appended to the list
    name : str, default is Undefined, required
        The name of the ServiceAccount resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    audiences?: [str]
    name: str

    namespace?: str

    check:
        len(name) <= 253
        len(name) >= 1
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$")
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecAuthSecretRef:
    r"""
    AWSAuthSecretRef holds secret references for AWS credentials
    both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.

    Attributes
    ----------
    accessKeyIDSecretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecAuthSecretRefAccessKeyIDSecretRef, default is Undefined, optional
        access key ID secret ref
    secretAccessKeySecretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecAuthSecretRefSecretAccessKeySecretRef, default is Undefined, optional
        secret access key secret ref
    sessionTokenSecretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecAuthSecretRefSessionTokenSecretRef, default is Undefined, optional
        session token secret ref
    """
    accessKeyIDSecretRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecAuthSecretRefAccessKeyIDSecretRef
    secretAccessKeySecretRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecAuthSecretRefSecretAccessKeySecretRef
    sessionTokenSecretRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecAuthSecretRefSessionTokenSecretRef

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecAuthSecretRefAccessKeyIDSecretRef:
    r"""
    The AccessKeyID is used for authentication

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecAuthSecretRefSecretAccessKeySecretRef:
    r"""
    The SecretAccessKey is used for authentication

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecAuthSecretRefSessionTokenSecretRef:
    r"""
    The SessionToken used for authentication
    This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
    see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorStsSessionTokenSpecRequestParameters:
    r"""
    RequestParameters contains parameters that can be passed to the STS service.

    Attributes
    ----------
    serialNumber : str, default is Undefined, optional
        SerialNumber is the identification number of the MFA device that is associated with the IAM user who is making
        the GetSessionToken call.
        Possible values: hardware device (such as GAHT12345678) or an Amazon Resource Name (ARN) for a virtual device
        (such as arn:aws:iam::123456789012:mfa/user)
    sessionDuration : int, default is Undefined, optional
        session duration
    tokenCode : str, default is Undefined, optional
        TokenCode is the value provided by the MFA device, if MFA is required.
    """
    serialNumber?: str
    sessionDuration?: int
    tokenCode?: str

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpec:
    r"""
    generators external secrets io v1alpha1 cluster generator spec generator vault dynamic secret spec

    Attributes
    ----------
    allowEmptyResponse : bool, default is Undefined, optional
        Do not fail if no secrets are found. Useful for requests where no data is expected.
    controller : str, default is Undefined, optional
        Used to select the correct ESO controller (think: ingress.ingressClassName)
        The ESO controller is instantiated with a specific controller name and filters VDS based on this property
    method : str, default is Undefined, optional
        Vault API method to use (GET/POST/other)
    parameters : any, default is Undefined, optional
        Parameters to pass to Vault write (for non-GET methods)
    path : str, default is Undefined, required
        Vault path to obtain the dynamic secret from
    provider : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProvider, default is Undefined, required
        provider
    resultType : str, default is "Data", optional
        Result type defines which data is returned from the generator.
        By default it is the "data" section of the Vault API response.
        When using e.g. /auth/token/create the "data" section is empty but
        the "auth" section contains the generated token.
        Please refer to the vault docs regarding the result data structure.
        Additionally, accessing the raw response is possibly by using "Raw" result type.
    retrySettings : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecRetrySettings, default is Undefined, optional
        retry settings
    """
    allowEmptyResponse?: bool = False
    controller?: str
    method?: str
    parameters?: any
    path: str

    provider: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProvider

    resultType?: "Data" | "Auth" | "Raw" = "Data"
    retrySettings?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecRetrySettings

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProvider:
    r"""
    Vault provider common spec

    Attributes
    ----------
    auth : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuth, default is Undefined, optional
        auth
    caBundle : str, default is Undefined, optional
        PEM encoded CA bundle used to validate Vault server certificate. Only used
        if the Server URL is using HTTPS protocol. This parameter is ignored for
        plain HTTP protocol connection. If not set the system root certificates
        are used to validate the TLS connection.
    caProvider : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderCaProvider, default is Undefined, optional
        ca provider
    checkAndSet : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderCheckAndSet, default is Undefined, optional
        check and set
    forwardInconsistent : bool, default is Undefined, optional
        ForwardInconsistent tells Vault to forward read-after-write requests to the Vault
        leader instead of simply retrying within a loop. This can increase performance if
        the option is enabled serverside.
        https://www.vaultproject.io/docs/configuration/replication#allow_forwarding_via_header
    headers : {str:str}, default is Undefined, optional
        Headers to be added in Vault request
    namespace : str, default is Undefined, optional
        Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows
        Vault environments to support Secure Multi-tenancy. e.g: "ns1".
        More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
    path : str, default is Undefined, optional
        Path is the mount path of the Vault KV backend endpoint, e.g:
        "secret". The v2 KV secret engine version specific "/data" path suffix
        for fetching secrets from Vault is optional and will be appended
        if not present in specified path.
    readYourWrites : bool, default is Undefined, optional
        ReadYourWrites ensures isolated read-after-write semantics by
        providing discovered cluster replication states in each request.
        More information about eventual consistency in Vault can be found here
        https://www.vaultproject.io/docs/enterprise/consistency
    server : str, default is Undefined, required
        Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
    tls : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderTLS, default is Undefined, optional
        tls
    version : str, default is "v2", optional
        Version is the Vault KV secret engine version. This can be either "v1" or
        "v2". Version defaults to "v2".
    """
    auth?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuth
    caBundle?: str
    caProvider?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderCaProvider
    checkAndSet?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderCheckAndSet
    forwardInconsistent?: bool
    headers?: {str:str}
    namespace?: str
    path?: str
    readYourWrites?: bool
    server: str

    tls?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderTLS
    version?: "v1" | "v2" = "v2"

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuth:
    r"""
    Auth configures how secret-manager authenticates with the Vault server.

    Attributes
    ----------
    appRole : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthAppRole, default is Undefined, optional
        app role
    cert : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthCert, default is Undefined, optional
        cert
    iam : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthIam, default is Undefined, optional
        iam
    jwt : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthJwt, default is Undefined, optional
        jwt
    kubernetes : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthKubernetes, default is Undefined, optional
        kubernetes
    ldap : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthLdap, default is Undefined, optional
        ldap
    namespace : str, default is Undefined, optional
        Name of the vault namespace to authenticate to. This can be different than the namespace your secret is in.
        Namespaces is a set of features within Vault Enterprise that allows
        Vault environments to support Secure Multi-tenancy. e.g: "ns1".
        More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
        This will default to Vault.Namespace field if set, or empty otherwise
    tokenSecretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthTokenSecretRef, default is Undefined, optional
        token secret ref
    userPass : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthUserPass, default is Undefined, optional
        user pass
    """
    appRole?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthAppRole
    cert?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthCert
    iam?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthIam
    jwt?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthJwt
    kubernetes?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthKubernetes
    ldap?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthLdap
    namespace?: str
    tokenSecretRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthTokenSecretRef
    userPass?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthUserPass

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthAppRole:
    r"""
    AppRole authenticates with Vault using the App Role auth mechanism,
    with the role and secret stored in a Kubernetes Secret resource.

    Attributes
    ----------
    path : str, default is "approle", required
        Path where the App Role authentication backend is mounted
        in Vault, e.g: "approle"
    roleId : str, default is Undefined, optional
        RoleID configured in the App Role authentication backend when setting
        up the authentication backend in Vault.
    roleRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthAppRoleRoleRef, default is Undefined, optional
        role ref
    secretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthAppRoleSecretRef, default is Undefined, required
        secret ref
    """
    path: str = "approle"

    roleId?: str
    roleRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthAppRoleRoleRef
    secretRef: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthAppRoleSecretRef

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthAppRoleRoleRef:
    r"""
    Reference to a key in a Secret that contains the App Role ID used
    to authenticate with Vault.
    The `key` field must be specified and denotes which entry within the Secret
    resource is used as the app role id.

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthAppRoleSecretRef:
    r"""
    Reference to a key in a Secret that contains the App Role secret used
    to authenticate with Vault.
    The `key` field must be specified and denotes which entry within the Secret
    resource is used as the app role secret.

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthCert:
    r"""
    Cert authenticates with TLS Certificates by passing client certificate, private key and ca certificate
    Cert authentication method

    Attributes
    ----------
    clientCert : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthCertClientCert, default is Undefined, optional
        client cert
    secretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthCertSecretRef, default is Undefined, optional
        secret ref
    """
    clientCert?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthCertClientCert
    secretRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthCertSecretRef

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthCertClientCert:
    r"""
    ClientCert is a certificate to authenticate using the Cert Vault
    authentication method

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthCertSecretRef:
    r"""
    SecretRef to a key in a Secret resource containing client private key to
    authenticate with Vault using the Cert authentication method

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthIam:
    r"""
    Iam authenticates with vault by passing a special AWS request signed with AWS IAM credentials
    AWS IAM authentication method

    Attributes
    ----------
    externalID : str, default is Undefined, optional
        AWS External ID set on assumed IAM roles
    jwt : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthIamJwt, default is Undefined, optional
        jwt
    path : str, default is Undefined, optional
        Path where the AWS auth method is enabled in Vault, e.g: "aws"
    region : str, default is Undefined, optional
        AWS region
    role : str, default is Undefined, optional
        This is the AWS role to be assumed before talking to vault
    secretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthIamSecretRef, default is Undefined, optional
        secret ref
    vaultAwsIamServerID : str, default is Undefined, optional
        X-Vault-AWS-IAM-Server-ID is an additional header used by Vault IAM auth method to mitigate against different types of replay attacks. More details here: https://developer.hashicorp.com/vault/docs/auth/aws
    vaultRole : str, default is Undefined, required
        Vault Role. In vault, a role describes an identity with a set of permissions, groups, or policies you want to attach a user of the secrets engine
    """
    externalID?: str
    jwt?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthIamJwt
    path?: str
    region?: str
    role?: str
    secretRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthIamSecretRef
    vaultAwsIamServerID?: str
    vaultRole: str

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthIamJwt:
    r"""
    Specify a service account with IRSA enabled

    Attributes
    ----------
    serviceAccountRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef, default is Undefined, optional
        service account ref
    """
    serviceAccountRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef:
    r"""
    A reference to a ServiceAccount resource.

    Attributes
    ----------
    audiences : [str], default is Undefined, optional
        Audience specifies the `aud` claim for the service account token
        If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
        then this audiences will be appended to the list
    name : str, default is Undefined, required
        The name of the ServiceAccount resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    audiences?: [str]
    name: str

    namespace?: str

    check:
        len(name) <= 253
        len(name) >= 1
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$")
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthIamSecretRef:
    r"""
    Specify credentials in a Secret object

    Attributes
    ----------
    accessKeyIDSecretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef, default is Undefined, optional
        access key ID secret ref
    secretAccessKeySecretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef, default is Undefined, optional
        secret access key secret ref
    sessionTokenSecretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef, default is Undefined, optional
        session token secret ref
    """
    accessKeyIDSecretRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef
    secretAccessKeySecretRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef
    sessionTokenSecretRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef:
    r"""
    The AccessKeyID is used for authentication

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef:
    r"""
    The SecretAccessKey is used for authentication

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef:
    r"""
    The SessionToken used for authentication
    This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
    see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthJwt:
    r"""
    Jwt authenticates with Vault by passing role and JWT token using the
    JWT/OIDC authentication method

    Attributes
    ----------
    kubernetesServiceAccountToken : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken, default is Undefined, optional
        kubernetes service account token
    path : str, default is "jwt", required
        Path where the JWT authentication backend is mounted
        in Vault, e.g: "jwt"
    role : str, default is Undefined, optional
        Role is a JWT role to authenticate using the JWT/OIDC Vault
        authentication method
    secretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthJwtSecretRef, default is Undefined, optional
        secret ref
    """
    kubernetesServiceAccountToken?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken
    path: str = "jwt"

    role?: str
    secretRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthJwtSecretRef

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken:
    r"""
    Optional ServiceAccountToken specifies the Kubernetes service account for which to request
    a token for with the `TokenRequest` API.

    Attributes
    ----------
    audiences : [str], default is Undefined, optional
        Optional audiences field that will be used to request a temporary Kubernetes service
        account token for the service account referenced by `serviceAccountRef`.
        Defaults to a single audience `vault` it not specified.
        Deprecated: use serviceAccountRef.Audiences instead
    expirationSeconds : int, default is Undefined, optional
        Optional expiration time in seconds that will be used to request a temporary
        Kubernetes service account token for the service account referenced by
        `serviceAccountRef`.
        Deprecated: this will be removed in the future.
        Defaults to 10 minutes.
    serviceAccountRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef, default is Undefined, required
        service account ref
    """
    audiences?: [str]
    expirationSeconds?: int
    serviceAccountRef: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef:
    r"""
    Service account field containing the name of a kubernetes ServiceAccount.

    Attributes
    ----------
    audiences : [str], default is Undefined, optional
        Audience specifies the `aud` claim for the service account token
        If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
        then this audiences will be appended to the list
    name : str, default is Undefined, required
        The name of the ServiceAccount resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    audiences?: [str]
    name: str

    namespace?: str

    check:
        len(name) <= 253
        len(name) >= 1
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$")
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthJwtSecretRef:
    r"""
    Optional SecretRef that refers to a key in a Secret resource containing JWT token to
    authenticate with Vault using the JWT/OIDC authentication method.

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthKubernetes:
    r"""
    Kubernetes authenticates with Vault by passing the ServiceAccount
    token stored in the named Secret resource to the Vault server.

    Attributes
    ----------
    mountPath : str, default is "kubernetes", required
        Path where the Kubernetes authentication backend is mounted in Vault, e.g:
        "kubernetes"
    role : str, default is Undefined, required
        A required field containing the Vault Role to assume. A Role binds a
        Kubernetes ServiceAccount with a set of Vault policies.
    secretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthKubernetesSecretRef, default is Undefined, optional
        secret ref
    serviceAccountRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef, default is Undefined, optional
        service account ref
    """
    mountPath: str = "kubernetes"

    role: str

    secretRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthKubernetesSecretRef
    serviceAccountRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthKubernetesSecretRef:
    r"""
    Optional secret field containing a Kubernetes ServiceAccount JWT used
    for authenticating with Vault. If a name is specified without a key,
    `token` is the default. If one is not specified, the one bound to
    the controller will be used.

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef:
    r"""
    Optional service account field containing the name of a kubernetes ServiceAccount.
    If the service account is specified, the service account secret token JWT will be used
    for authenticating with Vault. If the service account selector is not supplied,
    the secretRef will be used instead.

    Attributes
    ----------
    audiences : [str], default is Undefined, optional
        Audience specifies the `aud` claim for the service account token
        If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
        then this audiences will be appended to the list
    name : str, default is Undefined, required
        The name of the ServiceAccount resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    audiences?: [str]
    name: str

    namespace?: str

    check:
        len(name) <= 253
        len(name) >= 1
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$")
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthLdap:
    r"""
    Ldap authenticates with Vault by passing username/password pair using
    the LDAP authentication method

    Attributes
    ----------
    path : str, default is "ldap", required
        Path where the LDAP authentication backend is mounted
        in Vault, e.g: "ldap"
    secretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthLdapSecretRef, default is Undefined, optional
        secret ref
    username : str, default is Undefined, required
        Username is an LDAP username used to authenticate using the LDAP Vault
        authentication method
    """
    path: str = "ldap"

    secretRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthLdapSecretRef
    username: str

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthLdapSecretRef:
    r"""
    SecretRef to a key in a Secret resource containing password for the LDAP
    user used to authenticate with Vault using the LDAP authentication
    method

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthTokenSecretRef:
    r"""
    TokenSecretRef authenticates with Vault by presenting a token.

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthUserPass:
    r"""
    UserPass authenticates with Vault by passing username/password pair

    Attributes
    ----------
    path : str, default is "userpass", required
        Path where the UserPassword authentication backend is mounted
        in Vault, e.g: "userpass"
    secretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthUserPassSecretRef, default is Undefined, optional
        secret ref
    username : str, default is Undefined, required
        Username is a username used to authenticate using the UserPass Vault
        authentication method
    """
    path: str = "userpass"

    secretRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthUserPassSecretRef
    username: str

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderAuthUserPassSecretRef:
    r"""
    SecretRef to a key in a Secret resource containing password for the
    user used to authenticate with Vault using the UserPass authentication
    method

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderCaProvider:
    r"""
    The provider for the CA bundle to use to validate Vault server certificate.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key where the CA certificate can be found in the Secret or ConfigMap.
    name : str, default is Undefined, required
        The name of the object located at the provider type.
    namespace : str, default is Undefined, optional
        The namespace the Provider type is in.
        Can only be defined when used in a ClusterSecretStore.
    $type : str, default is Undefined, required
        The type of provider to use such as "Secret", or "ConfigMap".
    """
    key?: str
    name: str

    namespace?: str
    $type: "Secret" | "ConfigMap"

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253
        len(name) >= 1
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$")
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderCheckAndSet:
    r"""
    CheckAndSet defines the Check-And-Set (CAS) settings for PushSecret operations.
    Only applies to Vault KV v2 stores. When enabled, write operations must include
    the current version of the secret to prevent unintentional overwrites.

    Attributes
    ----------
    required : bool, default is Undefined, optional
        Required when true, all write operations must include a check-and-set parameter.
        This helps prevent unintentional overwrites of secrets.
    """
    required?: bool

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderTLS:
    r"""
    The configuration used for client side related TLS communication, when the Vault server
    requires mutual authentication. Only used if the Server URL is using HTTPS protocol.
    This parameter is ignored for plain HTTP protocol connection.
    It's worth noting this configuration is different from the "TLS certificates auth method",
    which is available under the `auth.cert` section.

    Attributes
    ----------
    certSecretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderTLSCertSecretRef, default is Undefined, optional
        cert secret ref
    keySecretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderTLSKeySecretRef, default is Undefined, optional
        key secret ref
    """
    certSecretRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderTLSCertSecretRef
    keySecretRef?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderTLSKeySecretRef

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderTLSCertSecretRef:
    r"""
    CertSecretRef is a certificate added to the transport layer
    when communicating with the Vault server.
    If no key for the Secret is specified, external-secret will default to 'tls.crt'.

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecProviderTLSKeySecretRef:
    r"""
    KeySecretRef to a key in a Secret resource containing client private key
    added to the transport layer when communicating with the Vault server.
    If no key for the Secret is specified, external-secret will default to 'tls.key'.

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorVaultDynamicSecretSpecRetrySettings:
    r"""
    Used to configure http retries if failed

    Attributes
    ----------
    maxRetries : int, default is Undefined, optional
        max retries
    retryInterval : str, default is Undefined, optional
        retry interval
    """
    maxRetries?: int
    retryInterval?: str

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpec:
    r"""
    WebhookSpec controls the behavior of the external generator. Any body parameters should be passed to the server through the parameters field.

    Attributes
    ----------
    auth : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecAuth, default is Undefined, optional
        auth
    body : str, default is Undefined, optional
        Body
    caBundle : str, default is Undefined, optional
        PEM encoded CA bundle used to validate webhook server certificate. Only used
        if the Server URL is using HTTPS protocol. This parameter is ignored for
        plain HTTP protocol connection. If not set the system root certificates
        are used to validate the TLS connection.
    caProvider : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecCaProvider, default is Undefined, optional
        ca provider
    headers : {str:str}, default is Undefined, optional
        Headers
    method : str, default is Undefined, optional
        Webhook Method
    result : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecResult, default is Undefined, required
        result
    secrets : [GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecSecretsItems0], default is Undefined, optional
        Secrets to fill in templates
        These secrets will be passed to the templating function as key value pairs under the given name
    timeout : str, default is Undefined, optional
        Timeout
    url : str, default is Undefined, required
        Webhook url to call
    """
    auth?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecAuth
    body?: str
    caBundle?: str
    caProvider?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecCaProvider
    headers?: {str:str}
    method?: str
    result: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecResult

    secrets?: [GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecSecretsItems0]
    timeout?: str
    url: str

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecAuth:
    r"""
    Auth specifies a authorization protocol. Only one protocol may be set.

    Attributes
    ----------
    ntlm : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecAuthNtlm, default is Undefined, optional
        ntlm
    """
    ntlm?: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecAuthNtlm

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecAuthNtlm:
    r"""
    NTLMProtocol configures the store to use NTLM for auth

    Attributes
    ----------
    passwordSecret : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecAuthNtlmPasswordSecret, default is Undefined, required
        password secret
    usernameSecret : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecAuthNtlmUsernameSecret, default is Undefined, required
        username secret
    """
    passwordSecret: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecAuthNtlmPasswordSecret

    usernameSecret: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecAuthNtlmUsernameSecret

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecAuthNtlmPasswordSecret:
    r"""
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecAuthNtlmUsernameSecret:
    r"""
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.

    Attributes
    ----------
    key : str, default is Undefined, optional
        A key in the referenced Secret.
        Some instances of this field may be defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        The namespace of the Secret resource being referred to.
        Ignored if referent is not cluster-scoped, otherwise defaults to the namespace of the referent.
    """
    key?: str
    name?: str
    namespace?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecCaProvider:
    r"""
    The provider for the CA bundle to use to validate webhook server certificate.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key where the CA certificate can be found in the Secret or ConfigMap.
    name : str, default is Undefined, required
        The name of the object located at the provider type.
    namespace : str, default is Undefined, optional
        The namespace the Provider type is in.
    $type : str, default is Undefined, required
        The type of provider to use such as "Secret", or "ConfigMap".
    """
    key?: str
    name: str

    namespace?: str
    $type: "Secret" | "ConfigMap"

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253
        len(name) >= 1
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$")
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecResult:
    r"""
    Result formatting

    Attributes
    ----------
    jsonPath : str, default is Undefined, optional
        Json path of return value
    """
    jsonPath?: str

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecSecretsItems0:
    r"""
    generators external secrets io v1alpha1 cluster generator spec generator webhook spec secrets items0

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of this secret in templates
    secretRef : GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecSecretsItems0SecretRef, default is Undefined, required
        secret ref
    """
    name: str

    secretRef: GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecSecretsItems0SecretRef

schema GeneratorsExternalSecretsIoV1alpha1ClusterGeneratorSpecGeneratorWebhookSpecSecretsItems0SecretRef:
    r"""
    Secret ref to fill in credentials

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key where the token is found.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    """
    key?: str
    name?: str

    check:
        len(key) <= 253 if key
        len(key) >= 1 if key
        _regex_match(str(key), r"^[-._a-zA-Z0-9]+$") if key
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name

