{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "additionalProperties": true,
  "properties": {
    "additionalAffinities": {
      "additionalProperties": true,
      "description": "Additional affinities to add to the Redis server pods.\n# Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity",
      "required": [],
      "title": "additionalAffinities",
      "type": "object"
    },
    "affinity": {
      "default": "",
      "description": "Override all other affinity settings for the Redis server pods with a string.",
      "required": [],
      "title": "affinity",
      "type": "string"
    },
    "apiVersionOverrides": {
      "additionalProperties": true,
      "description": "Override APIVersions\nIf you want to template helm charts but cannot access k8s API server\nyou can set api versions here",
      "required": [],
      "title": "apiVersionOverrides",
      "type": "object"
    },
    "applicationSet": {
      "additionalProperties": true,
      "description": "# ApplicationSet controller",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Assign custom [affinity] rules",
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "allowAnyNamespace": {
          "default": false,
          "description": "Enable ApplicationSet in any namespace feature",
          "required": [],
          "title": "allowAnyNamespace",
          "type": "boolean"
        },
        "automountServiceAccountToken": {
          "default": true,
          "description": "Automount API credentials for the Service Account into the pod.",
          "required": [],
          "title": "automountServiceAccountToken",
          "type": "boolean"
        },
        "certificate": {
          "additionalProperties": true,
          "description": "TLS certificate configuration via cert-manager\n# Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#tls-configuration",
          "properties": {
            "additionalHosts": {
              "description": "Certificate Subject Alternate Names (SANs)",
              "items": {
                "required": []
              },
              "required": [],
              "title": "additionalHosts",
              "type": "array"
            },
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations to be applied to the ApplicationSet Certificate",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "domain": {
              "default": "",
              "description": "Certificate primary domain (commonName)",
              "required": [],
              "title": "domain",
              "type": "string"
            },
            "duration": {
              "default": "",
              "description": "The requested 'duration' (i.e. lifetime) of the certificate.\n# Ref: https://cert-manager.io/docs/usage/certificate/#renewal",
              "required": [],
              "title": "duration",
              "type": "string"
            },
            "enabled": {
              "default": false,
              "description": "Deploy a Certificate resource (requires cert-manager)",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "issuer": {
              "additionalProperties": true,
              "description": "Certificate issuer\n# Ref: https://cert-manager.io/docs/concepts/issuer",
              "properties": {
                "group": {
                  "default": "",
                  "description": "Certificate issuer group. Set if using an external issuer. Eg. `cert-manager.io`",
                  "required": [],
                  "title": "group",
                  "type": "string"
                },
                "kind": {
                  "default": "",
                  "description": "Certificate issuer kind. Either `Issuer` or `ClusterIssuer`",
                  "required": [],
                  "title": "kind",
                  "type": "string"
                },
                "name": {
                  "default": "",
                  "description": "Certificate issuer name. Eg. `letsencrypt`",
                  "required": [],
                  "title": "name",
                  "type": "string"
                }
              },
              "required": [],
              "title": "issuer",
              "type": "object"
            },
            "privateKey": {
              "additionalProperties": true,
              "description": "Private key of the certificate",
              "properties": {
                "algorithm": {
                  "default": "RSA",
                  "description": "Algorithm used to generate certificate private key. One of: `RSA`, `Ed25519` or `ECDSA`",
                  "required": [],
                  "title": "algorithm",
                  "type": "string"
                },
                "encoding": {
                  "default": "PKCS1",
                  "description": "The private key cryptography standards (PKCS) encoding for private key. Either: `PCKS1` or `PKCS8`",
                  "required": [],
                  "title": "encoding",
                  "type": "string"
                },
                "rotationPolicy": {
                  "default": "Never",
                  "description": "Rotation policy of private key when certificate is re-issued. Either: `Never` or `Always`",
                  "required": [],
                  "title": "rotationPolicy",
                  "type": "string"
                },
                "size": {
                  "default": 2048,
                  "description": "Key bit size of the private key. If algorithm is set to `Ed25519`, size is ignored.",
                  "required": [],
                  "title": "size",
                  "type": "integer"
                }
              },
              "required": [],
              "title": "privateKey",
              "type": "object"
            },
            "renewBefore": {
              "default": "",
              "description": "How long before the expiry a certificate should be renewed.\n# Ref: https://cert-manager.io/docs/usage/certificate/#renewal",
              "required": [],
              "title": "renewBefore",
              "type": "string"
            }
          },
          "required": [],
          "title": "certificate",
          "type": "object"
        },
        "containerPorts": {
          "additionalProperties": true,
          "description": "ApplicationSet controller container ports",
          "properties": {
            "metrics": {
              "default": 8080,
              "description": "Metrics container port",
              "required": [],
              "title": "metrics",
              "type": "integer"
            },
            "probe": {
              "default": 8081,
              "description": "Probe container port",
              "required": [],
              "title": "probe",
              "type": "integer"
            },
            "webhook": {
              "default": 7000,
              "description": "Webhook container port",
              "required": [],
              "title": "webhook",
              "type": "integer"
            }
          },
          "required": [],
          "title": "containerPorts",
          "type": "object"
        },
        "containerSecurityContext": {
          "additionalProperties": true,
          "description": "ApplicationSet controller container-level security context",
          "properties": {
            "allowPrivilegeEscalation": {
              "default": false,
              "required": [],
              "title": "allowPrivilegeEscalation",
              "type": "boolean"
            },
            "capabilities": {
              "additionalProperties": true,
              "properties": {
                "drop": {
                  "items": {
                    "required": [],
                    "type": "string"
                  },
                  "required": [],
                  "title": "drop",
                  "type": "array"
                }
              },
              "required": [],
              "title": "capabilities",
              "type": "object"
            },
            "readOnlyRootFilesystem": {
              "default": true,
              "required": [],
              "title": "readOnlyRootFilesystem",
              "type": "boolean"
            },
            "runAsNonRoot": {
              "default": true,
              "required": [],
              "title": "runAsNonRoot",
              "type": "boolean"
            },
            "seccompProfile": {
              "additionalProperties": true,
              "properties": {
                "type": {
                  "default": "RuntimeDefault",
                  "required": [],
                  "title": "type",
                  "type": "string"
                }
              },
              "required": [],
              "title": "seccompProfile",
              "type": "object"
            }
          },
          "required": [],
          "title": "containerSecurityContext",
          "type": "object"
        },
        "deploymentAnnotations": {
          "additionalProperties": true,
          "description": "Annotations to be added to ApplicationSet controller Deployment",
          "required": [],
          "title": "deploymentAnnotations",
          "type": "object"
        },
        "deploymentLabels": {
          "additionalProperties": true,
          "description": "Labels for the ApplicationSet controller Deployment",
          "required": [],
          "title": "deploymentLabels",
          "type": "object"
        },
        "deploymentStrategy": {
          "additionalProperties": true,
          "description": "Deployment strategy to be added to the ApplicationSet controller Deployment",
          "required": [],
          "title": "deploymentStrategy",
          "type": "object"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "[DNS configuration]",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "dnsPolicy": {
          "default": "ClusterFirst",
          "description": "Alternative DNS policy for ApplicationSet controller pods",
          "required": [],
          "title": "dnsPolicy",
          "type": "string"
        },
        "emptyDir": {
          "additionalProperties": true,
          "description": "# ApplicationSet controller emptyDir volumes",
          "properties": {
            "sizeLimit": {
              "default": "",
              "description": "EmptyDir size limit for applicationSet controller",
              "required": [],
              "title": "sizeLimit",
              "type": "string"
            }
          },
          "required": [],
          "title": "emptyDir",
          "type": "object"
        },
        "extraArgs": {
          "description": "ApplicationSet controller command line flags",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Additional containers to be added to the ApplicationSet controller pod\n# Note: Supports use of custom Helm templates",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraEnv": {
          "description": "Environment variables to pass to the ApplicationSet controller",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "envFrom to pass to the ApplicationSet controller",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "List of extra mounts to add (normally used with extraVolumes)",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "List of extra volumes to add",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "image": {
          "additionalProperties": true,
          "description": "# ApplicationSet controller image",
          "properties": {
            "imagePullPolicy": {
              "default": "",
              "description": "Image pull policy for the ApplicationSet controller",
              "required": [],
              "title": "imagePullPolicy",
              "type": "string"
            },
            "repository": {
              "default": "",
              "description": "Repository to use for the ApplicationSet controller",
              "required": [],
              "title": "repository",
              "type": "string"
            },
            "tag": {
              "default": "",
              "description": "Tag to use for the ApplicationSet controller",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "imagePullSecrets": {
          "description": "If defined, uses a Secret to pull an image from a private Docker registry or repository.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "imagePullSecrets",
          "type": "array"
        },
        "ingress": {
          "additionalProperties": true,
          "description": "# Ingress for the Git Generator webhook\n# Ref: https://argocd-applicationset.readthedocs.io/en/master/Generators-Git/#webhook-configuration)",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Additional ingress annotations",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Enable an ingress resource for ApplicationSet webhook",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "extraHosts": {
              "description": "The list of additional hostnames to be covered by ingress record",
              "items": {
                "required": []
              },
              "required": [],
              "title": "extraHosts",
              "type": "array"
            },
            "extraPaths": {
              "description": "Additional ingress paths",
              "items": {
                "required": []
              },
              "required": [],
              "title": "extraPaths",
              "type": "array"
            },
            "extraRules": {
              "description": "Additional ingress rules\n# Note: Supports use of custom Helm templates",
              "items": {
                "required": []
              },
              "required": [],
              "title": "extraRules",
              "type": "array"
            },
            "extraTls": {
              "description": "Additional ingress TLS configuration",
              "items": {
                "required": []
              },
              "required": [],
              "title": "extraTls",
              "type": "array"
            },
            "hostname": {
              "default": "",
              "description": "Argo CD ApplicationSet hostname",
              "required": [],
              "title": "hostname",
              "type": "string"
            },
            "ingressClassName": {
              "default": "",
              "description": "Defines which ingress ApplicationSet controller will implement the resource",
              "required": [],
              "title": "ingressClassName",
              "type": "string"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Additional ingress labels",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "path": {
              "default": "/api/webhook",
              "description": "List of ingress paths",
              "required": [],
              "title": "path",
              "type": "string"
            },
            "pathType": {
              "default": "Prefix",
              "description": "Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`",
              "required": [],
              "title": "pathType",
              "type": "string"
            },
            "tls": {
              "default": false,
              "description": "Enable TLS configuration for the hostname defined at `applicationSet.webhook.ingress.hostname`\n# TLS certificate will be retrieved from a TLS secret with name:`argocd-applicationset-controller-tls`",
              "required": [],
              "title": "tls",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "ingress",
          "type": "object"
        },
        "initContainers": {
          "description": "Init containers to add to the ApplicationSet controller pod\n# Note: Supports use of custom Helm templates",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "livenessProbe": {
          "additionalProperties": true,
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enable Kubernetes liveness probe for ApplicationSet controller",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "failureThreshold": {
              "default": 3,
              "description": "Minimum consecutive failures for the [probe] to be considered failed after having succeeded",
              "required": [],
              "title": "failureThreshold",
              "type": "integer"
            },
            "initialDelaySeconds": {
              "default": 10,
              "description": "Number of seconds after the container has started before [probe] is initiated",
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 10,
              "description": "How often (in seconds) to perform the [probe]",
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "successThreshold": {
              "default": 1,
              "description": "Minimum consecutive successes for the [probe] to be considered successful after having failed",
              "required": [],
              "title": "successThreshold",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 1,
              "description": "Number of seconds after which the [probe] times out",
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "livenessProbe",
          "type": "object"
        },
        "metrics": {
          "additionalProperties": true,
          "description": "# Metrics service configuration",
          "properties": {
            "enabled": {
              "default": false,
              "description": "Deploy metrics service",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "service": {
              "additionalProperties": true,
              "properties": {
                "annotations": {
                  "additionalProperties": true,
                  "description": "Metrics service annotations",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "clusterIP": {
                  "default": "",
                  "description": "Metrics service clusterIP. `None` makes a \"headless service\" (no virtual IP)",
                  "required": [],
                  "title": "clusterIP",
                  "type": "string"
                },
                "labels": {
                  "additionalProperties": true,
                  "description": "Metrics service labels",
                  "required": [],
                  "title": "labels",
                  "type": "object"
                },
                "portName": {
                  "default": "http-metrics",
                  "description": "Metrics service port name",
                  "required": [],
                  "title": "portName",
                  "type": "string"
                },
                "servicePort": {
                  "default": 8080,
                  "description": "Metrics service port",
                  "required": [],
                  "title": "servicePort",
                  "type": "integer"
                },
                "type": {
                  "default": "ClusterIP",
                  "description": "Metrics service type",
                  "required": [],
                  "title": "type",
                  "type": "string"
                }
              },
              "required": [],
              "title": "service",
              "type": "object"
            },
            "serviceMonitor": {
              "additionalProperties": true,
              "properties": {
                "additionalLabels": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor labels",
                  "required": [],
                  "title": "additionalLabels",
                  "type": "object"
                },
                "annotations": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor annotations",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "enabled": {
                  "default": false,
                  "description": "Enable a prometheus ServiceMonitor",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "honorLabels": {
                  "default": false,
                  "description": "When true, honorLabels preserves the metric’s labels when they collide with the target’s labels.",
                  "required": [],
                  "title": "honorLabels",
                  "type": "boolean"
                },
                "interval": {
                  "default": "30s",
                  "description": "Prometheus ServiceMonitor interval",
                  "required": [],
                  "title": "interval",
                  "type": "string"
                },
                "metricRelabelings": {
                  "description": "Prometheus [MetricRelabelConfigs] to apply to samples before ingestion",
                  "items": {
                    "required": []
                  },
                  "required": [],
                  "title": "metricRelabelings",
                  "type": "array"
                },
                "namespace": {
                  "default": "",
                  "description": "Prometheus ServiceMonitor namespace",
                  "required": [],
                  "title": "namespace",
                  "type": "string"
                },
                "relabelings": {
                  "description": "Prometheus [RelabelConfigs] to apply to samples before scraping",
                  "items": {
                    "required": []
                  },
                  "required": [],
                  "title": "relabelings",
                  "type": "array"
                },
                "scheme": {
                  "default": "",
                  "description": "Prometheus ServiceMonitor scheme",
                  "required": [],
                  "title": "scheme",
                  "type": "string"
                },
                "scrapeTimeout": {
                  "default": "",
                  "description": "Prometheus ServiceMonitor scrapeTimeout. If empty, Prometheus uses the global scrape timeout unless it is less than the target's scrape interval value in which the latter is used.",
                  "required": [],
                  "title": "scrapeTimeout",
                  "type": "string"
                },
                "selector": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor selector",
                  "required": [],
                  "title": "selector",
                  "type": "object"
                },
                "tlsConfig": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor tlsConfig",
                  "required": [],
                  "title": "tlsConfig",
                  "type": "object"
                }
              },
              "required": [],
              "title": "serviceMonitor",
              "type": "object"
            }
          },
          "required": [],
          "title": "metrics",
          "type": "object"
        },
        "name": {
          "default": "applicationset-controller",
          "description": "ApplicationSet controller name string",
          "required": [],
          "title": "name",
          "type": "string"
        },
        "networkPolicy": {
          "additionalProperties": true,
          "description": "Default ApplicationSet controller's network policy",
          "properties": {
            "create": {
              "default": false,
              "description": "Default network policy rules used by ApplicationSet controller",
              "required": [],
              "title": "create",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "networkPolicy",
          "type": "object"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "[Node selector]",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "pdb": {
          "additionalProperties": true,
          "description": "# ApplicationSet controller Pod Disruption Budget\n# Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations to be added to ApplicationSet controller pdb",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Deploy a [PodDisruptionBudget] for the ApplicationSet controller",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels to be added to ApplicationSet controller pdb",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "maxUnavailable": {
              "default": "",
              "description": "Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).\n# Has higher precedence over `applicationSet.pdb.minAvailable`",
              "required": [],
              "title": "maxUnavailable",
              "type": "string"
            },
            "minAvailable": {
              "default": "",
              "description": "Number of pods that are available after eviction as number or percentage (eg.: 50%)",
              "required": [],
              "title": "minAvailable",
              "type": "string"
            }
          },
          "required": [],
          "title": "pdb",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for the ApplicationSet controller pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels for the ApplicationSet controller pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "",
          "description": "Priority class for the ApplicationSet controller pods",
          "required": [],
          "title": "priorityClassName",
          "type": "string"
        },
        "readinessProbe": {
          "additionalProperties": true,
          "description": "# Probes for ApplicationSet controller (optional)\n# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enable Kubernetes liveness probe for ApplicationSet controller",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "failureThreshold": {
              "default": 3,
              "description": "Minimum consecutive failures for the [probe] to be considered failed after having succeeded",
              "required": [],
              "title": "failureThreshold",
              "type": "integer"
            },
            "initialDelaySeconds": {
              "default": 10,
              "description": "Number of seconds after the container has started before [probe] is initiated",
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 10,
              "description": "How often (in seconds) to perform the [probe]",
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "successThreshold": {
              "default": 1,
              "description": "Minimum consecutive successes for the [probe] to be considered successful after having failed",
              "required": [],
              "title": "successThreshold",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 1,
              "description": "Number of seconds after which the [probe] times out",
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "readinessProbe",
          "type": "object"
        },
        "replicas": {
          "default": 1,
          "description": "The number of ApplicationSet controller pods to run",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource limits and requests for the ApplicationSet controller pods.",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "runtimeClassName": {
          "default": "",
          "description": "Runtime class name for the ApplicationSet controller",
          "required": [],
          "title": "runtimeClassName",
          "type": "string"
        },
        "service": {
          "additionalProperties": true,
          "description": "# ApplicationSet service configuration",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "ApplicationSet service annotations",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "labels": {
              "additionalProperties": true,
              "description": "ApplicationSet service labels",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "port": {
              "default": 7000,
              "description": "ApplicationSet service port",
              "required": [],
              "title": "port",
              "type": "integer"
            },
            "portName": {
              "default": "http-webhook",
              "description": "ApplicationSet service port name",
              "required": [],
              "title": "portName",
              "type": "string"
            },
            "type": {
              "default": "ClusterIP",
              "description": "ApplicationSet service type",
              "required": [],
              "title": "type",
              "type": "string"
            }
          },
          "required": [],
          "title": "service",
          "type": "object"
        },
        "serviceAccount": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations applied to created service account",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "automountServiceAccountToken": {
              "default": true,
              "description": "Automount API credentials for the Service Account",
              "required": [],
              "title": "automountServiceAccountToken",
              "type": "boolean"
            },
            "create": {
              "default": true,
              "description": "Create ApplicationSet controller service account",
              "required": [],
              "title": "create",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels applied to created service account",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "name": {
              "default": "argocd-applicationset-controller",
              "description": "ApplicationSet controller service account name",
              "required": [],
              "title": "name",
              "type": "string"
            }
          },
          "required": [],
          "title": "serviceAccount",
          "type": "object"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "terminationGracePeriodSeconds for container lifecycle hook",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "[Tolerations] for use with node taints",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "Assign custom [TopologySpreadConstraints] rules to the ApplicationSet controller\n# Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\n# If labelSelector is left out, it will default to the labelSelector configuration of the deployment",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        }
      },
      "required": [],
      "title": "applicationSet",
      "type": "object"
    },
    "auth": {
      "default": false,
      "description": "Configures redis with AUTH (requirepass \u0026 masterauth conf params)",
      "required": [],
      "title": "auth",
      "type": "boolean"
    },
    "authKey": {
      "default": "auth",
      "description": "Defines the key holding the redis password in existing secret.",
      "required": [],
      "title": "authKey",
      "type": "string"
    },
    "commitServer": {
      "additionalProperties": true,
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Assign custom [affinity] rules",
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "automountServiceAccountToken": {
          "default": false,
          "description": "Automount API credentials for the Service Account into the pod.",
          "required": [],
          "title": "automountServiceAccountToken",
          "type": "boolean"
        },
        "containerSecurityContext": {
          "additionalProperties": true,
          "description": "commit server container-level security context",
          "properties": {
            "allowPrivilegeEscalation": {
              "default": false,
              "required": [],
              "title": "allowPrivilegeEscalation",
              "type": "boolean"
            },
            "capabilities": {
              "additionalProperties": true,
              "properties": {
                "drop": {
                  "items": {
                    "required": [],
                    "type": "string"
                  },
                  "required": [],
                  "title": "drop",
                  "type": "array"
                }
              },
              "required": [],
              "title": "capabilities",
              "type": "object"
            },
            "readOnlyRootFilesystem": {
              "default": true,
              "required": [],
              "title": "readOnlyRootFilesystem",
              "type": "boolean"
            },
            "runAsNonRoot": {
              "default": true,
              "required": [],
              "title": "runAsNonRoot",
              "type": "boolean"
            },
            "seccompProfile": {
              "additionalProperties": true,
              "properties": {
                "type": {
                  "default": "RuntimeDefault",
                  "required": [],
                  "title": "type",
                  "type": "string"
                }
              },
              "required": [],
              "title": "seccompProfile",
              "type": "object"
            }
          },
          "required": [],
          "title": "containerSecurityContext",
          "type": "object"
        },
        "deploymentAnnotations": {
          "additionalProperties": true,
          "description": "Annotations to be added to commit server Deployment",
          "required": [],
          "title": "deploymentAnnotations",
          "type": "object"
        },
        "deploymentLabels": {
          "additionalProperties": true,
          "description": "Labels for the commit server Deployment",
          "required": [],
          "title": "deploymentLabels",
          "type": "object"
        },
        "deploymentStrategy": {
          "additionalProperties": true,
          "description": "Deployment strategy to be added to the commit server Deployment",
          "required": [],
          "title": "deploymentStrategy",
          "type": "object"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "[DNS configuration]",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "dnsPolicy": {
          "default": "ClusterFirst",
          "description": "Alternative DNS policy for commit server pods",
          "required": [],
          "title": "dnsPolicy",
          "type": "string"
        },
        "enabled": {
          "default": false,
          "description": "Enable commit server",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "extraArgs": {
          "description": "commit server command line flags",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraEnv": {
          "description": "Environment variables to pass to the commit server",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "envFrom to pass to the commit server",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "List of extra mounts to add (normally used with extraVolumes)",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "List of extra volumes to add",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "image": {
          "additionalProperties": true,
          "description": "# commit server controller image",
          "properties": {
            "imagePullPolicy": {
              "default": "",
              "description": "Image pull policy for the commit server",
              "required": [],
              "title": "imagePullPolicy",
              "type": "string"
            },
            "repository": {
              "default": "",
              "description": "Repository to use for the commit server",
              "required": [],
              "title": "repository",
              "type": "string"
            },
            "tag": {
              "default": "",
              "description": "Tag to use for the commit server",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "livenessProbe": {
          "additionalProperties": true,
          "properties": {
            "enabled": {
              "default": true,
              "description": "Enable Kubernetes liveness probe for commit server",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "failureThreshold": {
              "default": 3,
              "description": "Minimum consecutive failures for the [probe] to be considered failed after having succeeded",
              "required": [],
              "title": "failureThreshold",
              "type": "integer"
            },
            "initialDelaySeconds": {
              "default": 30,
              "description": "Number of seconds after the container has started before [probe] is initiated",
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 30,
              "description": "How often (in seconds) to perform the [probe]",
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 5,
              "description": "Number of seconds after which the [probe] times out",
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "livenessProbe",
          "type": "object"
        },
        "metrics": {
          "additionalProperties": true,
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enables prometheus metrics server",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "service": {
              "additionalProperties": true,
              "properties": {
                "annotations": {
                  "additionalProperties": true,
                  "description": "Metrics service annotations",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "clusterIP": {
                  "default": "",
                  "description": "Metrics service clusterIP. `None` makes a \"headless service\" (no virtual IP)",
                  "required": [],
                  "title": "clusterIP",
                  "type": "string"
                },
                "labels": {
                  "additionalProperties": true,
                  "description": "Metrics service labels",
                  "required": [],
                  "title": "labels",
                  "type": "object"
                },
                "portName": {
                  "default": "metrics",
                  "description": "Metrics service port name",
                  "required": [],
                  "title": "portName",
                  "type": "string"
                },
                "servicePort": {
                  "default": 8087,
                  "description": "Metrics service port",
                  "required": [],
                  "title": "servicePort",
                  "type": "integer"
                },
                "type": {
                  "default": "ClusterIP",
                  "description": "Metrics service type",
                  "required": [],
                  "title": "type",
                  "type": "string"
                }
              },
              "required": [],
              "title": "service",
              "type": "object"
            }
          },
          "required": [],
          "title": "metrics",
          "type": "object"
        },
        "name": {
          "default": "commit-server",
          "description": "Commit server name",
          "required": [],
          "title": "name",
          "type": "string"
        },
        "networkPolicy": {
          "additionalProperties": true,
          "description": "Default commit server's network policy",
          "properties": {
            "create": {
              "default": false,
              "description": "Default network policy rules used by commit server",
              "required": [],
              "title": "create",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "networkPolicy",
          "type": "object"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "[Node selector]",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for the commit server pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels for the commit server pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "",
          "description": "Priority class for the commit server pods",
          "required": [],
          "title": "priorityClassName",
          "type": "string"
        },
        "readinessProbe": {
          "additionalProperties": true,
          "description": "# Probes for commit server (optional)\n# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "properties": {
            "enabled": {
              "default": true,
              "description": "Enable Kubernetes liveness probe for commit server",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "failureThreshold": {
              "default": 3,
              "description": "Minimum consecutive failures for the [probe] to be considered failed after having succeeded",
              "required": [],
              "title": "failureThreshold",
              "type": "integer"
            },
            "initialDelaySeconds": {
              "default": 5,
              "description": "Number of seconds after the container has started before [probe] is initiated",
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 10,
              "description": "How often (in seconds) to perform the [probe]",
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 1,
              "description": "Number of seconds after which the [probe] times out",
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "readinessProbe",
          "type": "object"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource limits and requests for the commit server pods.",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "runtimeClassName": {
          "default": "",
          "description": "Runtime class name for the commit server",
          "required": [],
          "title": "runtimeClassName",
          "type": "string"
        },
        "service": {
          "additionalProperties": true,
          "description": "# commit server service configuration",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "commit server service annotations",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "labels": {
              "additionalProperties": true,
              "description": "commit server service labels",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "port": {
              "default": 8086,
              "description": "commit server service port",
              "required": [],
              "title": "port",
              "type": "integer"
            },
            "portName": {
              "default": "server",
              "description": "commit server service port name",
              "required": [],
              "title": "portName",
              "type": "string"
            }
          },
          "required": [],
          "title": "service",
          "type": "object"
        },
        "serviceAccount": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations applied to created service account",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "automountServiceAccountToken": {
              "default": true,
              "description": "Automount API credentials for the Service Account",
              "required": [],
              "title": "automountServiceAccountToken",
              "type": "boolean"
            },
            "create": {
              "default": true,
              "description": "Create commit server service account",
              "required": [],
              "title": "create",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels applied to created service account",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "name": {
              "default": "argocd-commit-server",
              "description": "commit server service account name",
              "required": [],
              "title": "name",
              "type": "string"
            }
          },
          "required": [],
          "title": "serviceAccount",
          "type": "object"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "terminationGracePeriodSeconds for container lifecycle hook",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "[Tolerations] for use with node taints",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "Assign custom [TopologySpreadConstraints] rules to the commit server\n# Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\n# If labelSelector is left out, it will default to the labelSelector configuration of the deployment",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        }
      },
      "required": [],
      "title": "commitServer",
      "type": "object"
    },
    "configmap": {
      "additionalProperties": true,
      "description": "# Custom labels for the redis configmap",
      "properties": {
        "labels": {
          "additionalProperties": true,
          "description": "Custom labels for the redis configmap",
          "required": [],
          "title": "labels",
          "type": "object"
        }
      },
      "required": [],
      "title": "configmap",
      "type": "object"
    },
    "configmapTest": {
      "additionalProperties": true,
      "description": "# ConfigMap Test Parameters",
      "properties": {
        "image": {
          "additionalProperties": true,
          "description": "Image for redis-ha-configmap-test hook",
          "properties": {
            "repository": {
              "default": "koalaman/shellcheck",
              "description": "Repository of the configmap shellcheck test image.",
              "required": [],
              "title": "repository",
              "type": "string"
            },
            "tag": {
              "default": "v0.10.0",
              "description": "Tag of the configmap shellcheck test image.",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resources for the ConfigMap test pod",
          "required": [],
          "title": "resources",
          "type": "object"
        }
      },
      "required": [],
      "title": "configmapTest",
      "type": "object"
    },
    "configs": {
      "additionalProperties": true,
      "description": "# Argo Configs",
      "properties": {
        "clusterCredentials": {
          "additionalProperties": true,
          "description": "Provide one or multiple [external cluster credentials]\n# Ref:\n# - https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#clusters\n# - https://argo-cd.readthedocs.io/en/stable/operator-manual/security/#external-cluster-credentials\n# - https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters",
          "required": [],
          "title": "clusterCredentials",
          "type": "object"
        },
        "cm": {
          "additionalProperties": true,
          "description": "General Argo CD configuration. Any values you put under `.configs.cm` are passed to argocd-cm ConfigMap.\n# Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml",
          "properties": {
            "admin.enabled": {
              "default": true,
              "description": "Enable local admin user\n# Ref: https://argo-cd.readthedocs.io/en/latest/faq/#how-to-disable-admin-user",
              "required": [],
              "title": "admin.enabled",
              "type": "boolean"
            },
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations to be added to argocd-cm configmap",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "application.instanceLabelKey": {
              "default": "argocd.argoproj.io/instance",
              "description": "The name of tracking label used by Argo CD for resource pruning",
              "required": [],
              "title": "application.instanceLabelKey",
              "type": "string"
            },
            "application.sync.impersonation.enabled": {
              "default": false,
              "description": "Enable control of the service account used for the sync operation (alpha)\n# Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/app-sync-using-impersonation/",
              "required": [],
              "title": "application.sync.impersonation.enabled",
              "type": "boolean"
            },
            "create": {
              "default": true,
              "description": "Create the argocd-cm configmap for [declarative setup]",
              "required": [],
              "title": "create",
              "type": "boolean"
            },
            "exec.enabled": {
              "default": false,
              "description": "Enable exec feature in Argo UI\n# Ref: https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac/#exec-resource",
              "required": [],
              "title": "exec.enabled",
              "type": "boolean"
            },
            "resource.customizations.ignoreResourceUpdates.ConfigMap": {
              "default": "jqPathExpressions:\n  # Ignore the cluster-autoscaler status\n  - '.metadata.annotations.\"cluster-autoscaler.kubernetes.io/last-updated\"'\n  # Ignore the annotation of the legacy Leases election\n  - '.metadata.annotations.\"control-plane.alpha.kubernetes.io/leader\"'\n",
              "description": "Ignore the cluster-autoscaler status",
              "required": [],
              "title": "resource.customizations.ignoreResourceUpdates.ConfigMap",
              "type": "string"
            },
            "resource.customizations.ignoreResourceUpdates.Endpoints": {
              "default": "jsonPointers:\n  - /metadata\n  - /subsets\n",
              "description": "Ignores update if Endpoints is not excluded globally",
              "required": [],
              "title": "resource.customizations.ignoreResourceUpdates.Endpoints",
              "type": "string"
            },
            "resource.customizations.ignoreResourceUpdates.all": {
              "default": "jsonPointers:\n  - /status\n",
              "description": "Ignoring status for all resources. An update will still be sent if the status update causes the health to change.",
              "required": [],
              "title": "resource.customizations.ignoreResourceUpdates.all",
              "type": "string"
            },
            "resource.customizations.ignoreResourceUpdates.apps_ReplicaSet": {
              "default": "jqPathExpressions:\n  - '.metadata.annotations.\"deployment.kubernetes.io/desired-replicas\"'\n  - '.metadata.annotations.\"deployment.kubernetes.io/max-replicas\"'\n  - '.metadata.annotations.\"rollout.argoproj.io/desired-replicas\"'\n",
              "description": "Ignore the common scaling annotations",
              "required": [],
              "title": "resource.customizations.ignoreResourceUpdates.apps_ReplicaSet",
              "type": "string"
            },
            "resource.customizations.ignoreResourceUpdates.argoproj.io_Application": {
              "default": "jqPathExpressions:\n  - '.metadata.annotations.\"notified.notifications.argoproj.io\"'\n  - '.metadata.annotations.\"argocd.argoproj.io/refresh\"'\n  - '.metadata.annotations.\"argocd.argoproj.io/hydrate\"'\n  - '.operation'\n",
              "description": "Some Application fields are generated and not related to the application updates itself\n# The Application itself is already watched by the controller lister, but this configuration is applied for apps of apps",
              "required": [],
              "title": "resource.customizations.ignoreResourceUpdates.argoproj.io_Application",
              "type": "string"
            },
            "resource.customizations.ignoreResourceUpdates.argoproj.io_Rollout": {
              "default": "jqPathExpressions:\n  - '.metadata.annotations.\"notified.notifications.argoproj.io\"'\n",
              "description": "Ignore Argo Rollouts generated fields",
              "required": [],
              "title": "resource.customizations.ignoreResourceUpdates.argoproj.io_Rollout",
              "type": "string"
            },
            "resource.customizations.ignoreResourceUpdates.autoscaling_HorizontalPodAutoscaler": {
              "default": "jqPathExpressions:\n  - '.metadata.annotations.\"autoscaling.alpha.kubernetes.io/behavior\"'\n  - '.metadata.annotations.\"autoscaling.alpha.kubernetes.io/conditions\"'\n  - '.metadata.annotations.\"autoscaling.alpha.kubernetes.io/metrics\"'\n  - '.metadata.annotations.\"autoscaling.alpha.kubernetes.io/current-metrics\"'\n",
              "description": "Legacy annotations used on HPA autoscaling/v1",
              "required": [],
              "title": "resource.customizations.ignoreResourceUpdates.autoscaling_HorizontalPodAutoscaler",
              "type": "string"
            },
            "resource.customizations.ignoreResourceUpdates.discovery.k8s.io_EndpointSlice": {
              "default": "jsonPointers:\n  - /metadata\n  - /endpoints\n  - /ports\n",
              "description": "Ignores update if EndpointSlice is not excluded globally",
              "required": [],
              "title": "resource.customizations.ignoreResourceUpdates.discovery.k8s.io_EndpointSlice",
              "type": "string"
            },
            "resource.exclusions": {
              "default": "### Network resources created by the Kubernetes control plane and excluded to reduce the number of watched events and UI clutter\n- apiGroups:\n  - ''\n  - discovery.k8s.io\n  kinds:\n  - Endpoints\n  - EndpointSlice\n### Internal Kubernetes resources excluded reduce the number of watched events\n- apiGroups:\n  - coordination.k8s.io\n  kinds:\n  - Lease\n### Internal Kubernetes Authz/Authn resources excluded reduce the number of watched events\n- apiGroups:\n  - authentication.k8s.io\n  - authorization.k8s.io\n  kinds:\n  - SelfSubjectReview\n  - TokenReview\n  - LocalSubjectAccessReview\n  - SelfSubjectAccessReview\n  - SelfSubjectRulesReview\n  - SubjectAccessReview\n### Intermediate Certificate Request excluded reduce the number of watched events\n- apiGroups:\n  - certificates.k8s.io\n  kinds:\n  - CertificateSigningRequest\n- apiGroups:\n  - cert-manager.io\n  kinds:\n  - CertificateRequest\n### Cilium internal resources excluded reduce the number of watched events and UI Clutter\n- apiGroups:\n  - cilium.io\n  kinds:\n  - CiliumIdentity\n  - CiliumEndpoint\n  - CiliumEndpointSlice\n### Kyverno intermediate and reporting resources excluded reduce the number of watched events and improve performance\n- apiGroups:\n  - kyverno.io\n  - reports.kyverno.io\n  - wgpolicyk8s.io\n  kinds:\n  - PolicyReport\n  - ClusterPolicyReport\n  - EphemeralReport\n  - ClusterEphemeralReport\n  - AdmissionReport\n  - ClusterAdmissionReport\n  - BackgroundScanReport\n  - ClusterBackgroundScanReport\n  - UpdateRequest\n",
              "description": "Resource Exclusion/Inclusion",
              "required": [],
              "title": "resource.exclusions",
              "type": "string"
            },
            "server.rbac.log.enforce.enable": {
              "default": false,
              "description": "Enable logs RBAC enforcement\n# Ref: https://argo-cd.readthedocs.io/en/latest/operator-manual/upgrading/2.3-2.4/#enable-logs-rbac-enforcement",
              "required": [],
              "title": "server.rbac.log.enforce.enable",
              "type": "boolean"
            },
            "statusbadge.enabled": {
              "default": false,
              "description": "Enable Status Badge\n# Ref: https://argo-cd.readthedocs.io/en/stable/user-guide/status-badge/",
              "required": [],
              "title": "statusbadge.enabled",
              "type": "boolean"
            },
            "timeout.hard.reconciliation": {
              "default": "0s",
              "description": "Timeout to refresh application data as well as target manifests cache",
              "required": [],
              "title": "timeout.hard.reconciliation",
              "type": "string"
            },
            "timeout.reconciliation": {
              "default": "180s",
              "description": "Timeout to discover if a new manifests version got published to the repository",
              "required": [],
              "title": "timeout.reconciliation",
              "type": "string"
            }
          },
          "required": [],
          "title": "cm",
          "type": "object"
        },
        "cmp": {
          "additionalProperties": true,
          "description": "ConfigMap for Config Management Plugins\nRef: https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations to be added to argocd-cmp-cm configmap",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "create": {
              "default": false,
              "description": "Create the argocd-cmp-cm configmap",
              "required": [],
              "title": "create",
              "type": "boolean"
            },
            "plugins": {
              "additionalProperties": true,
              "description": "Plugin yaml files to be added to argocd-cmp-cm",
              "required": [],
              "title": "plugins",
              "type": "object"
            }
          },
          "required": [],
          "title": "cmp",
          "type": "object"
        },
        "credentialTemplates": {
          "additionalProperties": true,
          "description": "Repository credentials to be used as Templates for other repos\n# Creates a secret for each key/value specified below to create repository credentials",
          "required": [],
          "title": "credentialTemplates",
          "type": "object"
        },
        "credentialTemplatesAnnotations": {
          "additionalProperties": true,
          "description": "Annotations to be added to `configs.credentialTemplates` Secret",
          "required": [],
          "title": "credentialTemplatesAnnotations",
          "type": "object"
        },
        "gpg": {
          "additionalProperties": true,
          "description": "GnuPG public keys for commit verification\n# Ref: https://argo-cd.readthedocs.io/en/stable/user-guide/gpg-verification/",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations to be added to argocd-gpg-keys-cm configmap",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "keys": {
              "additionalProperties": true,
              "description": "[GnuPG] public keys to add to the keyring\n# Note: Public keys should be exported with `gpg --export --armor \u003cKEY\u003e`",
              "required": [],
              "title": "keys",
              "type": "object"
            }
          },
          "required": [],
          "title": "gpg",
          "type": "object"
        },
        "params": {
          "additionalProperties": true,
          "description": "Argo CD configuration parameters\n# Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cmd-params-cm.yaml",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations to be added to the argocd-cmd-params-cm ConfigMap",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "application.namespaces": {
              "default": "",
              "description": "Enables [Applications in any namespace]\n# List of additional namespaces where applications may be created in and reconciled from.\n# The namespace where Argo CD is installed to will always be allowed.\n# Set comma-separated list. (e.g. app-team-one, app-team-two)",
              "required": [],
              "title": "application.namespaces",
              "type": "string"
            },
            "applicationsetcontroller.enable.progressive.syncs": {
              "default": false,
              "description": "Enables use of the Progressive Syncs capability",
              "required": [],
              "title": "applicationsetcontroller.enable.progressive.syncs",
              "type": "boolean"
            },
            "applicationsetcontroller.namespaces": {
              "default": "",
              "description": "A list of glob patterns specifying where to look for ApplicationSet resources. (e.g. `\"argocd,argocd-appsets-*\"`)\n# For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Appset-Any-Namespace/",
              "required": [],
              "title": "applicationsetcontroller.namespaces",
              "type": "string"
            },
            "applicationsetcontroller.policy": {
              "default": "sync",
              "description": "# ApplicationSet Properties\nModify how application is synced between the generator and the cluster. One of: `sync`, `create-only`, `create-update`, `create-delete`",
              "required": [],
              "title": "applicationsetcontroller.policy",
              "type": "string"
            },
            "controller.ignore.normalizer.jq.timeout": {
              "default": "1s",
              "description": "JQ Path expression timeout\n# By default, the evaluation of a JQPathExpression is limited to one second.\n# If you encounter a \"JQ patch execution timed out\" error message due to a complex JQPathExpression\n# that requires more time to evaluate, you can extend the timeout period.",
              "required": [],
              "title": "controller.ignore.normalizer.jq.timeout",
              "type": "string"
            },
            "controller.operation.processors": {
              "default": 10,
              "description": "Number of application operation processors",
              "required": [],
              "title": "controller.operation.processors",
              "type": "integer"
            },
            "controller.repo.server.timeout.seconds": {
              "default": 60,
              "description": "Repo server RPC call timeout seconds.",
              "required": [],
              "title": "controller.repo.server.timeout.seconds",
              "type": "integer"
            },
            "controller.self.heal.timeout.seconds": {
              "default": 5,
              "description": "Specifies timeout between application self heal attempts",
              "required": [],
              "title": "controller.self.heal.timeout.seconds",
              "type": "integer"
            },
            "controller.status.processors": {
              "default": 20,
              "description": "# Controller Properties\nNumber of application status processors",
              "required": [],
              "title": "controller.status.processors",
              "type": "integer"
            },
            "controller.sync.timeout.seconds": {
              "default": 0,
              "description": "Specifies the timeout after which a sync would be terminated. 0 means no timeout",
              "required": [],
              "title": "controller.sync.timeout.seconds",
              "type": "integer"
            },
            "create": {
              "default": true,
              "description": "Create the argocd-cmd-params-cm configmap\nIf false, it is expected the configmap will be created by something else.",
              "required": [],
              "title": "create",
              "type": "boolean"
            },
            "hydrator.enabled": {
              "default": false,
              "description": "Enable the hydrator feature (hydrator is in Alpha phase)",
              "required": [],
              "title": "hydrator.enabled",
              "type": "boolean"
            },
            "otlp.address": {
              "default": "",
              "description": "# Generic parameters\nOpen-Telemetry collector address: (e.g. \"otel-collector:4317\")",
              "required": [],
              "title": "otlp.address",
              "type": "string"
            },
            "reposerver.parallelism.limit": {
              "default": 0,
              "description": "# Repo-server properties\nLimit on number of concurrent manifests generate requests. Any value less the 1 means no limit.",
              "required": [],
              "title": "reposerver.parallelism.limit",
              "type": "integer"
            },
            "server.basehref": {
              "default": "/",
              "description": "Value for base href in index.html. Used if Argo CD is running behind reverse proxy under subpath different from /",
              "required": [],
              "title": "server.basehref",
              "type": "string"
            },
            "server.disable.auth": {
              "default": false,
              "description": "Disable Argo CD RBAC for user authentication",
              "required": [],
              "title": "server.disable.auth",
              "type": "boolean"
            },
            "server.enable.gzip": {
              "default": true,
              "description": "Enable GZIP compression",
              "required": [],
              "title": "server.enable.gzip",
              "type": "boolean"
            },
            "server.enable.proxy.extension": {
              "default": false,
              "description": "Enable proxy extension feature. (proxy extension is in Alpha phase)",
              "required": [],
              "title": "server.enable.proxy.extension",
              "type": "boolean"
            },
            "server.insecure": {
              "default": false,
              "description": "# Server properties\nRun server without TLS\n# NOTE: This value should be set when you generate params by other means as it changes ports used by ingress template.",
              "required": [],
              "title": "server.insecure",
              "type": "boolean"
            },
            "server.rootpath": {
              "default": "",
              "description": "Used if Argo CD is running behind reverse proxy under subpath different from /",
              "required": [],
              "title": "server.rootpath",
              "type": "string"
            },
            "server.staticassets": {
              "default": "/shared/app",
              "description": "Directory path that contains additional static assets",
              "required": [],
              "title": "server.staticassets",
              "type": "string"
            },
            "server.x.frame.options": {
              "default": "sameorigin",
              "description": "Set X-Frame-Options header in HTTP responses to value. To disable, set to \"\".",
              "required": [],
              "title": "server.x.frame.options",
              "type": "string"
            }
          },
          "required": [],
          "title": "params",
          "type": "object"
        },
        "rbac": {
          "additionalProperties": true,
          "description": "Argo CD RBAC policy configuration\n# Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations to be added to argocd-rbac-cm configmap",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "create": {
              "default": true,
              "description": "Create the argocd-rbac-cm configmap with ([Argo CD RBAC policy]) definitions.\nIf false, it is expected the configmap will be created by something else.\nArgo CD will not work if there is no configmap created with the name above.",
              "required": [],
              "title": "create",
              "type": "boolean"
            },
            "policy.csv": {
              "default": "",
              "description": "File containing user-defined policies and role definitions.",
              "required": [],
              "title": "policy.csv",
              "type": "string"
            },
            "policy.default": {
              "default": "",
              "description": "The name of the default role which Argo CD will falls back to, when authorizing API requests (optional).\nIf omitted or empty, users may be still be able to login, but will see no apps, projects, etc...",
              "required": [],
              "title": "policy.default",
              "type": "string"
            },
            "policy.matchMode": {
              "default": "glob",
              "description": "Matcher function for Casbin, `glob` for glob matcher and `regex` for regex matcher.",
              "required": [],
              "title": "policy.matchMode",
              "type": "string"
            },
            "scopes": {
              "default": "[groups]",
              "description": "OIDC scopes to examine during rbac enforcement (in addition to `sub` scope).\nThe scope value can be a string, or a list of strings.",
              "required": [],
              "title": "scopes",
              "type": "string"
            }
          },
          "required": [],
          "title": "rbac",
          "type": "object"
        },
        "repositories": {
          "additionalProperties": true,
          "description": "Repositories list to be used by applications\n# Creates a secret for each key/value specified below to create repositories\n# Note: the last example in the list would use a repository credential template, configured under \"configs.credentialTemplates\".",
          "required": [],
          "title": "repositories",
          "type": "object"
        },
        "repositoriesAnnotations": {
          "additionalProperties": true,
          "description": "Annotations to be added to `configs.repositories` Secret",
          "required": [],
          "title": "repositoriesAnnotations",
          "type": "object"
        },
        "secret": {
          "additionalProperties": true,
          "description": "Argo CD sensitive data\nRef: https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sensitive-data-and-sso-client-secrets",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations to be added to argocd-secret",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "argocdServerAdminPassword": {
              "default": "",
              "description": "Bcrypt hashed admin password\n# Argo expects the password in the secret to be bcrypt hashed. You can create this hash with\n# `htpasswd -nbBC 10 \"\" $ARGO_PWD | tr -d ':\\n' | sed 's/$2y/$2a/'`",
              "required": [],
              "title": "argocdServerAdminPassword",
              "type": "string"
            },
            "argocdServerAdminPasswordMtime": {
              "default": "",
              "description": "Admin password modification time. Eg. `\"2006-01-02T15:04:05Z\"`",
              "required": [],
              "title": "argocdServerAdminPasswordMtime",
              "type": "string"
            },
            "azureDevops": {
              "additionalProperties": true,
              "description": "# Azure DevOps",
              "properties": {
                "password": {
                  "default": "",
                  "description": "Shared secret password for authenticating Azure DevOps webhook events",
                  "required": [],
                  "title": "password",
                  "type": "string"
                },
                "username": {
                  "default": "",
                  "description": "Shared secret username for authenticating Azure DevOps webhook events",
                  "required": [],
                  "title": "username",
                  "type": "string"
                }
              },
              "required": [],
              "title": "azureDevops",
              "type": "object"
            },
            "bitbucketServerSecret": {
              "default": "",
              "description": "Shared secret for authenticating BitbucketServer webhook events",
              "required": [],
              "title": "bitbucketServerSecret",
              "type": "string"
            },
            "bitbucketUUID": {
              "default": "",
              "description": "UUID for authenticating Bitbucket webhook events",
              "required": [],
              "title": "bitbucketUUID",
              "type": "string"
            },
            "createSecret": {
              "default": true,
              "description": "Create the argocd-secret",
              "required": [],
              "title": "createSecret",
              "type": "boolean"
            },
            "extra": {
              "additionalProperties": true,
              "description": "add additional secrets to be added to argocd-secret\n# Custom secrets. Useful for injecting SSO secrets into environment variables.\n# Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sensitive-data-and-sso-client-secrets\n# Note that all values must be non-empty.",
              "required": [],
              "title": "extra",
              "type": "object"
            },
            "githubSecret": {
              "default": "",
              "description": "Shared secret for authenticating GitHub webhook events",
              "required": [],
              "title": "githubSecret",
              "type": "string"
            },
            "gitlabSecret": {
              "default": "",
              "description": "Shared secret for authenticating GitLab webhook events",
              "required": [],
              "title": "gitlabSecret",
              "type": "string"
            },
            "gogsSecret": {
              "default": "",
              "description": "Shared secret for authenticating Gogs webhook events",
              "required": [],
              "title": "gogsSecret",
              "type": "string"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels to be added to argocd-secret",
              "required": [],
              "title": "labels",
              "type": "object"
            }
          },
          "required": [],
          "title": "secret",
          "type": "object"
        },
        "ssh": {
          "additionalProperties": true,
          "description": "SSH known hosts for Git repositories\n# Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#ssh-known-host-public-keys",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations to be added to argocd-ssh-known-hosts-cm configmap",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "create": {
              "default": true,
              "description": "Specifies if the argocd-ssh-known-hosts-cm configmap should be created by Helm.",
              "required": [],
              "title": "create",
              "type": "boolean"
            },
            "extraHosts": {
              "default": "",
              "description": "Additional known hosts for private repositories",
              "required": [],
              "title": "extraHosts",
              "type": "string"
            },
            "knownHosts": {
              "default": "[ssh.github.com]:443 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=\n[ssh.github.com]:443 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl\n[ssh.github.com]:443 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=\nbitbucket.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPIQmuzMBuKdWeF4+a2sjSSpBK0iqitSQ+5BM9KhpexuGt20JpTVM7u5BDZngncgrqDMbWdxMWWOGtZ9UgbqgZE=\nbitbucket.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIazEu89wgQZ4bqs3d63QSMzYVa0MuJ2e2gKTKqu+UUO\nbitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDQeJzhupRu0u0cdegZIa8e86EG2qOCsIsD1Xw0xSeiPDlCr7kq97NLmMbpKTX6Esc30NuoqEEHCuc7yWtwp8dI76EEEB1VqY9QJq6vk+aySyboD5QF61I/1WeTwu+deCbgKMGbUijeXhtfbxSxm6JwGrXrhBdofTsbKRUsrN1WoNgUa8uqN1Vx6WAJw1JHPhglEGGHea6QICwJOAr/6mrui/oB7pkaWKHj3z7d1IC4KWLtY47elvjbaTlkN04Kc/5LFEirorGYVbt15kAUlqGM65pk6ZBxtaO3+30LVlORZkxOh+LKL/BvbZ/iRNhItLqNyieoQj/uh/7Iv4uyH/cV/0b4WDSd3DptigWq84lJubb9t/DnZlrJazxyDCulTmKdOR7vs9gMTo+uoIrPSb8ScTtvw65+odKAlBj59dhnVp9zd7QUojOpXlL62Aw56U4oO+FALuevvMjiWeavKhJqlR7i5n9srYcrNV7ttmDw7kf/97P5zauIhxcjX+xHv4M=\ngithub.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=\ngithub.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl\ngithub.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=\ngitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\ngitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\ngitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\nssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\nvs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\n",
              "description": "Known hosts to be added to the known host list by default.",
              "required": [],
              "title": "knownHosts",
              "type": "string"
            }
          },
          "required": [],
          "title": "ssh",
          "type": "object"
        },
        "styles": {
          "default": "",
          "description": "Define custom [CSS styles] for your argo instance.\nThis setting will automatically mount the provided CSS and reference it in the argo configuration.\n# Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/custom-styles/",
          "required": [],
          "title": "styles",
          "type": "string"
        },
        "tls": {
          "additionalProperties": true,
          "description": "Repository TLS certificates\nRef: https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#repositories-using-self-signed-tls-certificates-or-are-signed-by-custom-ca",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations to be added to argocd-tls-certs-cm configmap",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "certificates": {
              "additionalProperties": true,
              "description": "TLS certificates for Git repositories",
              "required": [],
              "title": "certificates",
              "type": "object"
            },
            "create": {
              "default": true,
              "description": "Specifies if the argocd-tls-certs-cm configmap should be created by Helm.",
              "required": [],
              "title": "create",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "tls",
          "type": "object"
        }
      },
      "required": [],
      "title": "configs",
      "type": "object"
    },
    "containerSecurityContext": {
      "additionalProperties": true,
      "description": "Security context to be added to the Redis containers.",
      "properties": {
        "allowPrivilegeEscalation": {
          "default": false,
          "required": [],
          "title": "allowPrivilegeEscalation",
          "type": "boolean"
        },
        "capabilities": {
          "additionalProperties": true,
          "properties": {
            "drop": {
              "items": {
                "required": [],
                "type": "string"
              },
              "required": [],
              "title": "drop",
              "type": "array"
            }
          },
          "required": [],
          "title": "capabilities",
          "type": "object"
        },
        "runAsNonRoot": {
          "default": true,
          "required": [],
          "title": "runAsNonRoot",
          "type": "boolean"
        },
        "runAsUser": {
          "default": 1000,
          "required": [],
          "title": "runAsUser",
          "type": "integer"
        },
        "seccompProfile": {
          "additionalProperties": true,
          "properties": {
            "type": {
              "default": "RuntimeDefault",
              "required": [],
              "title": "type",
              "type": "string"
            }
          },
          "required": [],
          "title": "seccompProfile",
          "type": "object"
        }
      },
      "required": [],
      "title": "containerSecurityContext",
      "type": "object"
    },
    "controller": {
      "additionalProperties": true,
      "description": "# Application controller",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Assign custom [affinity] rules to the deployment",
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "automountServiceAccountToken": {
          "default": true,
          "description": "Automount API credentials for the Service Account into the pod.",
          "required": [],
          "title": "automountServiceAccountToken",
          "type": "boolean"
        },
        "clusterRoleRules": {
          "additionalProperties": true,
          "description": "# Enable this and set the rules: to whatever custom rules you want for the Cluster Role resource.\n# Defaults to off",
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enable custom rules for the application controller's ClusterRole resource",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "rules": {
              "description": "List of custom rules for the application controller's ClusterRole resource",
              "items": {
                "required": []
              },
              "required": [],
              "title": "rules",
              "type": "array"
            }
          },
          "required": [],
          "title": "clusterRoleRules",
          "type": "object"
        },
        "containerPorts": {
          "additionalProperties": true,
          "description": "Application controller container ports",
          "properties": {
            "metrics": {
              "default": 8082,
              "description": "Metrics container port",
              "required": [],
              "title": "metrics",
              "type": "integer"
            }
          },
          "required": [],
          "title": "containerPorts",
          "type": "object"
        },
        "containerSecurityContext": {
          "additionalProperties": true,
          "description": "Application controller container-level security context",
          "properties": {
            "allowPrivilegeEscalation": {
              "default": false,
              "required": [],
              "title": "allowPrivilegeEscalation",
              "type": "boolean"
            },
            "capabilities": {
              "additionalProperties": true,
              "properties": {
                "drop": {
                  "items": {
                    "required": [],
                    "type": "string"
                  },
                  "required": [],
                  "title": "drop",
                  "type": "array"
                }
              },
              "required": [],
              "title": "capabilities",
              "type": "object"
            },
            "readOnlyRootFilesystem": {
              "default": true,
              "required": [],
              "title": "readOnlyRootFilesystem",
              "type": "boolean"
            },
            "runAsNonRoot": {
              "default": true,
              "required": [],
              "title": "runAsNonRoot",
              "type": "boolean"
            },
            "seccompProfile": {
              "additionalProperties": true,
              "properties": {
                "type": {
                  "default": "RuntimeDefault",
                  "required": [],
                  "title": "type",
                  "type": "string"
                }
              },
              "required": [],
              "title": "seccompProfile",
              "type": "object"
            }
          },
          "required": [],
          "title": "containerSecurityContext",
          "type": "object"
        },
        "deploymentAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for the application controller Deployment",
          "required": [],
          "title": "deploymentAnnotations",
          "type": "object"
        },
        "deploymentLabels": {
          "additionalProperties": true,
          "description": "Labels for the application controller Deployment",
          "required": [],
          "title": "deploymentLabels",
          "type": "object"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "[DNS configuration]",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "dnsPolicy": {
          "default": "ClusterFirst",
          "description": "Alternative DNS policy for application controller pods",
          "required": [],
          "title": "dnsPolicy",
          "type": "string"
        },
        "dynamicClusterDistribution": {
          "default": false,
          "description": "Enable dynamic cluster distribution (alpha)\nRef: https://argo-cd.readthedocs.io/en/stable/operator-manual/dynamic-cluster-distribution\n# This is done using a deployment instead of a statefulSet\n# When replicas are added or removed, the sharding algorithm is re-run to ensure that the\n# clusters are distributed according to the algorithm. If the algorithm is well-balanced,\n# like round-robin, then the shards will be well-balanced.",
          "required": [],
          "title": "dynamicClusterDistribution",
          "type": "boolean"
        },
        "emptyDir": {
          "additionalProperties": true,
          "description": "# Application controller emptyDir volumes",
          "properties": {
            "sizeLimit": {
              "default": "",
              "description": "EmptyDir size limit for application controller",
              "required": [],
              "title": "sizeLimit",
              "type": "string"
            }
          },
          "required": [],
          "title": "emptyDir",
          "type": "object"
        },
        "env": {
          "description": "Environment variables to pass to application controller",
          "items": {
            "required": []
          },
          "required": [],
          "title": "env",
          "type": "array"
        },
        "envFrom": {
          "description": "envFrom to pass to application controller",
          "items": {
            "required": []
          },
          "required": [],
          "title": "envFrom",
          "type": "array"
        },
        "extraArgs": {
          "description": "Additional command line arguments to pass to application controller",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Additional containers to be added to the application controller pod\n# Note: Supports use of custom Helm templates",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "heartbeatTime": {
          "default": 10,
          "description": "Application controller heartbeat time\nRef: https://argo-cd.readthedocs.io/en/stable/operator-manual/dynamic-cluster-distribution/#working-of-dynamic-distribution",
          "required": [],
          "title": "heartbeatTime",
          "type": "integer"
        },
        "hostNetwork": {
          "default": false,
          "description": "Host Network for application controller pods",
          "required": [],
          "title": "hostNetwork",
          "type": "boolean"
        },
        "image": {
          "additionalProperties": true,
          "description": "# Application controller image",
          "properties": {
            "imagePullPolicy": {
              "default": "",
              "description": "Image pull policy for the application controller",
              "required": [],
              "title": "imagePullPolicy",
              "type": "string"
            },
            "repository": {
              "default": "",
              "description": "Repository to use for the application controller",
              "required": [],
              "title": "repository",
              "type": "string"
            },
            "tag": {
              "default": "",
              "description": "Tag to use for the application controller",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "imagePullSecrets": {
          "description": "Secrets with credentials to pull images from a private registry",
          "items": {
            "required": []
          },
          "required": [],
          "title": "imagePullSecrets",
          "type": "array"
        },
        "initContainers": {
          "description": "Init containers to add to the application controller pod\n# If your target Kubernetes cluster(s) require a custom credential (exec) plugin\n# you could use this (and the same in the server pod) to provide such executable\n# Ref: https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins\n# Note: Supports use of custom Helm templates",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "metrics": {
          "additionalProperties": true,
          "description": "# Application controller metrics configuration",
          "properties": {
            "applicationLabels": {
              "additionalProperties": true,
              "properties": {
                "enabled": {
                  "default": false,
                  "description": "Enables additional labels in argocd_app_labels metric",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "labels": {
                  "description": "Additional labels",
                  "items": {
                    "required": []
                  },
                  "required": [],
                  "title": "labels",
                  "type": "array"
                }
              },
              "required": [],
              "title": "applicationLabels",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Deploy metrics service",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "rules": {
              "additionalProperties": true,
              "properties": {
                "additionalLabels": {
                  "additionalProperties": true,
                  "description": "PrometheusRule labels",
                  "required": [],
                  "title": "additionalLabels",
                  "type": "object"
                },
                "annotations": {
                  "additionalProperties": true,
                  "description": "PrometheusRule annotations",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "enabled": {
                  "default": false,
                  "description": "Deploy a PrometheusRule for the application controller",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "namespace": {
                  "default": "",
                  "description": "PrometheusRule namespace",
                  "required": [],
                  "title": "namespace",
                  "type": "string"
                },
                "selector": {
                  "additionalProperties": true,
                  "description": "PrometheusRule selector",
                  "required": [],
                  "title": "selector",
                  "type": "object"
                },
                "spec": {
                  "description": "PrometheusRule.Spec for the application controller",
                  "items": {
                    "required": []
                  },
                  "required": [],
                  "title": "spec",
                  "type": "array"
                }
              },
              "required": [],
              "title": "rules",
              "type": "object"
            },
            "scrapeTimeout": {
              "default": "",
              "description": "Prometheus ServiceMonitor scrapeTimeout. If empty, Prometheus uses the global scrape timeout unless it is less than the target's scrape interval value in which the latter is used.",
              "required": [],
              "title": "scrapeTimeout",
              "type": "string"
            },
            "service": {
              "additionalProperties": true,
              "properties": {
                "annotations": {
                  "additionalProperties": true,
                  "description": "Metrics service annotations",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "clusterIP": {
                  "default": "",
                  "description": "Metrics service clusterIP. `None` makes a \"headless service\" (no virtual IP)",
                  "required": [],
                  "title": "clusterIP",
                  "type": "string"
                },
                "labels": {
                  "additionalProperties": true,
                  "description": "Metrics service labels",
                  "required": [],
                  "title": "labels",
                  "type": "object"
                },
                "portName": {
                  "default": "http-metrics",
                  "description": "Metrics service port name",
                  "required": [],
                  "title": "portName",
                  "type": "string"
                },
                "servicePort": {
                  "default": 8082,
                  "description": "Metrics service port",
                  "required": [],
                  "title": "servicePort",
                  "type": "integer"
                },
                "type": {
                  "default": "ClusterIP",
                  "description": "Metrics service type",
                  "required": [],
                  "title": "type",
                  "type": "string"
                }
              },
              "required": [],
              "title": "service",
              "type": "object"
            },
            "serviceMonitor": {
              "additionalProperties": true,
              "properties": {
                "additionalLabels": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor labels",
                  "required": [],
                  "title": "additionalLabels",
                  "type": "object"
                },
                "annotations": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor annotations",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "enabled": {
                  "default": false,
                  "description": "Enable a prometheus ServiceMonitor",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "honorLabels": {
                  "default": false,
                  "description": "When true, honorLabels preserves the metric’s labels when they collide with the target’s labels.",
                  "required": [],
                  "title": "honorLabels",
                  "type": "boolean"
                },
                "interval": {
                  "default": "30s",
                  "description": "Prometheus ServiceMonitor interval",
                  "required": [],
                  "title": "interval",
                  "type": "string"
                },
                "metricRelabelings": {
                  "description": "Prometheus [MetricRelabelConfigs] to apply to samples before ingestion",
                  "items": {
                    "required": []
                  },
                  "required": [],
                  "title": "metricRelabelings",
                  "type": "array"
                },
                "namespace": {
                  "default": "",
                  "description": "Prometheus ServiceMonitor namespace",
                  "required": [],
                  "title": "namespace",
                  "type": "string"
                },
                "relabelings": {
                  "description": "Prometheus [RelabelConfigs] to apply to samples before scraping",
                  "items": {
                    "required": []
                  },
                  "required": [],
                  "title": "relabelings",
                  "type": "array"
                },
                "scheme": {
                  "default": "",
                  "description": "Prometheus ServiceMonitor scheme",
                  "required": [],
                  "title": "scheme",
                  "type": "string"
                },
                "selector": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor selector",
                  "required": [],
                  "title": "selector",
                  "type": "object"
                },
                "tlsConfig": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor tlsConfig",
                  "required": [],
                  "title": "tlsConfig",
                  "type": "object"
                }
              },
              "required": [],
              "title": "serviceMonitor",
              "type": "object"
            }
          },
          "required": [],
          "title": "metrics",
          "type": "object"
        },
        "name": {
          "default": "application-controller",
          "description": "Application controller name string",
          "required": [],
          "title": "name",
          "type": "string"
        },
        "networkPolicy": {
          "additionalProperties": true,
          "description": "Default application controller's network policy",
          "properties": {
            "create": {
              "default": false,
              "description": "Default network policy rules used by application controller",
              "required": [],
              "title": "create",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "networkPolicy",
          "type": "object"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "[Node selector]",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "pdb": {
          "additionalProperties": true,
          "description": "# Application controller Pod Disruption Budget\n# Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations to be added to application controller pdb",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Deploy a [PodDisruptionBudget] for the application controller",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels to be added to application controller pdb",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "maxUnavailable": {
              "default": "",
              "description": "Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).\n# Has higher precedence over `controller.pdb.minAvailable`",
              "required": [],
              "title": "maxUnavailable",
              "type": "string"
            },
            "minAvailable": {
              "default": "",
              "description": "Number of pods that are available after eviction as number or percentage (eg.: 50%)",
              "required": [],
              "title": "minAvailable",
              "type": "string"
            }
          },
          "required": [],
          "title": "pdb",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations to be added to application controller pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels to be added to application controller pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "",
          "description": "Priority class for the application controller pods",
          "required": [],
          "title": "priorityClassName",
          "type": "string"
        },
        "readinessProbe": {
          "additionalProperties": true,
          "description": "Readiness probe for application controller\n# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "properties": {
            "failureThreshold": {
              "default": 3,
              "description": "Minimum consecutive failures for the [probe] to be considered failed after having succeeded",
              "required": [],
              "title": "failureThreshold",
              "type": "integer"
            },
            "initialDelaySeconds": {
              "default": 10,
              "description": "Number of seconds after the container has started before [probe] is initiated",
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 10,
              "description": "How often (in seconds) to perform the [probe]",
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "successThreshold": {
              "default": 1,
              "description": "Minimum consecutive successes for the [probe] to be considered successful after having failed",
              "required": [],
              "title": "successThreshold",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 1,
              "description": "Number of seconds after which the [probe] times out",
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "readinessProbe",
          "type": "object"
        },
        "replicas": {
          "default": 1,
          "description": "The number of application controller pods to run.\nAdditional replicas will cause sharding of managed clusters across number of replicas.\n# With dynamic cluster distribution turned on, sharding of the clusters will gracefully\n# rebalance if the number of replica's changes or one becomes unhealthy. (alpha)",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource limits and requests for the application controller pods",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "revisionHistoryLimit": {
          "default": 5,
          "description": "Maximum number of controller revisions that will be maintained in StatefulSet history",
          "required": [],
          "title": "revisionHistoryLimit",
          "type": "integer"
        },
        "roleRules": {
          "description": "# Enable this and set the rules: to whatever custom rules you want for the Role resource.\n# Defaults to off\nList of custom rules for the application controller's Role resource",
          "items": {
            "required": []
          },
          "required": [],
          "title": "roleRules",
          "type": "array"
        },
        "runtimeClassName": {
          "default": "",
          "description": "Runtime class name for the application controller",
          "required": [],
          "title": "runtimeClassName",
          "type": "string"
        },
        "serviceAccount": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations applied to created service account",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "automountServiceAccountToken": {
              "default": true,
              "description": "Automount API credentials for the Service Account",
              "required": [],
              "title": "automountServiceAccountToken",
              "type": "boolean"
            },
            "create": {
              "default": true,
              "description": "Create a service account for the application controller",
              "required": [],
              "title": "create",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels applied to created service account",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "name": {
              "default": "argocd-application-controller",
              "description": "Service account name",
              "required": [],
              "title": "name",
              "type": "string"
            }
          },
          "required": [],
          "title": "serviceAccount",
          "type": "object"
        },
        "statefulsetAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for the application controller StatefulSet",
          "required": [],
          "title": "statefulsetAnnotations",
          "type": "object"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "terminationGracePeriodSeconds for container lifecycle hook",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "[Tolerations] for use with node taints",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "Assign custom [TopologySpreadConstraints] rules to the application controller\n# Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/\n# If labelSelector is left out, it will default to the labelSelector configuration of the deployment",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        },
        "volumeMounts": {
          "description": "Additional volumeMounts to the application controller main container",
          "items": {
            "required": []
          },
          "required": [],
          "title": "volumeMounts",
          "type": "array"
        },
        "volumes": {
          "description": "Additional volumes to the application controller pod",
          "items": {
            "required": []
          },
          "required": [],
          "title": "volumes",
          "type": "array"
        },
        "vpa": {
          "additionalProperties": true,
          "description": "# Application controller Vertical Pod Autoscaler\n# Ref: https://kubernetes.io/docs/concepts/workloads/autoscaling/#scaling-workloads-vertically/",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations to be added to application controller vpa",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "containerPolicy": {
              "additionalProperties": true,
              "description": "Controls how VPA computes the recommended resources for application controller container\n# Ref: https://github.com/kubernetes/autoscaler/blob/master/vertical-pod-autoscaler/examples/hamster.yaml",
              "required": [],
              "title": "containerPolicy",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Deploy a [VerticalPodAutoscaler](https://kubernetes.io/docs/concepts/workloads/autoscaling/#scaling-workloads-vertically/) for the application controller",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels to be added to application controller vpa",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "updateMode": {
              "default": "Initial",
              "description": "One of the VPA operation modes\n# Ref: https://kubernetes.io/docs/concepts/workloads/autoscaling/#scaling-workloads-vertically\n# Note: Recreate update mode requires more than one replica unless the min-replicas VPA controller flag is overridden",
              "required": [],
              "title": "updateMode",
              "type": "string"
            }
          },
          "required": [],
          "title": "vpa",
          "type": "object"
        }
      },
      "required": [],
      "title": "controller",
      "type": "object"
    },
    "crds": {
      "additionalProperties": true,
      "description": "# Custom resource configuration",
      "properties": {
        "additionalLabels": {
          "additionalProperties": true,
          "description": "Additional labels to be added to all CRDs",
          "required": [],
          "title": "additionalLabels",
          "type": "object"
        },
        "annotations": {
          "additionalProperties": true,
          "description": "Annotations to be added to all CRDs",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "install": {
          "default": true,
          "description": "Install and upgrade CRDs",
          "required": [],
          "title": "install",
          "type": "boolean"
        },
        "keep": {
          "default": true,
          "description": "Keep CRDs on chart uninstall",
          "required": [],
          "title": "keep",
          "type": "boolean"
        }
      },
      "required": [],
      "title": "crds",
      "type": "object"
    },
    "createAggregateRoles": {
      "default": false,
      "description": "Create aggregated roles that extend existing cluster roles to interact with argo-cd resources\n# Ref: https://kubernetes.io/docs/reference/access-authn-authz/rbac/#aggregated-clusterroles",
      "required": [],
      "title": "createAggregateRoles",
      "type": "boolean"
    },
    "createClusterRoles": {
      "default": true,
      "description": "Create cluster roles for cluster-wide installation.\n# Used when you manage applications in the same cluster where Argo CD runs",
      "required": [],
      "title": "createClusterRoles",
      "type": "boolean"
    },
    "dex": {
      "additionalProperties": true,
      "description": "# Dex",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Assign custom [affinity] rules to the deployment",
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "automountServiceAccountToken": {
          "default": true,
          "description": "Automount API credentials for the Service Account into the pod.",
          "required": [],
          "title": "automountServiceAccountToken",
          "type": "boolean"
        },
        "certificateSecret": {
          "additionalProperties": true,
          "description": "TLS certificate configuration via Secret\n# Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#configuring-tls-to-argocd-dex-server\n# Note: Issuing certificates via cert-manager in not supported right now because it's not possible to restart Dex automatically without extra controllers.",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations to be added to argocd-dex-server-tls secret",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "ca": {
              "default": "",
              "description": "Certificate authority. Required for self-signed certificates.",
              "required": [],
              "title": "ca",
              "type": "string"
            },
            "crt": {
              "default": "",
              "description": "Certificate data. Must contain SANs of Dex service (ie: argocd-dex-server, argocd-dex-server.argo-cd.svc)",
              "required": [],
              "title": "crt",
              "type": "string"
            },
            "enabled": {
              "default": false,
              "description": "Create argocd-dex-server-tls secret",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "key": {
              "default": "",
              "description": "Certificate private key",
              "required": [],
              "title": "key",
              "type": "string"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels to be added to argocd-dex-server-tls secret",
              "required": [],
              "title": "labels",
              "type": "object"
            }
          },
          "required": [],
          "title": "certificateSecret",
          "type": "object"
        },
        "containerPorts": {
          "additionalProperties": true,
          "description": "Dex container ports\nNOTE: These ports are currently hardcoded and cannot be changed",
          "properties": {
            "grpc": {
              "default": 5557,
              "description": "gRPC container port",
              "required": [],
              "title": "grpc",
              "type": "integer"
            },
            "http": {
              "default": 5556,
              "description": "HTTP container port",
              "required": [],
              "title": "http",
              "type": "integer"
            },
            "metrics": {
              "default": 5558,
              "description": "Metrics container port",
              "required": [],
              "title": "metrics",
              "type": "integer"
            }
          },
          "required": [],
          "title": "containerPorts",
          "type": "object"
        },
        "containerSecurityContext": {
          "additionalProperties": true,
          "description": "Dex container-level security context",
          "properties": {
            "allowPrivilegeEscalation": {
              "default": false,
              "required": [],
              "title": "allowPrivilegeEscalation",
              "type": "boolean"
            },
            "capabilities": {
              "additionalProperties": true,
              "properties": {
                "drop": {
                  "items": {
                    "required": [],
                    "type": "string"
                  },
                  "required": [],
                  "title": "drop",
                  "type": "array"
                }
              },
              "required": [],
              "title": "capabilities",
              "type": "object"
            },
            "readOnlyRootFilesystem": {
              "default": true,
              "required": [],
              "title": "readOnlyRootFilesystem",
              "type": "boolean"
            },
            "runAsNonRoot": {
              "default": true,
              "required": [],
              "title": "runAsNonRoot",
              "type": "boolean"
            },
            "seccompProfile": {
              "additionalProperties": true,
              "properties": {
                "type": {
                  "default": "RuntimeDefault",
                  "required": [],
                  "title": "type",
                  "type": "string"
                }
              },
              "required": [],
              "title": "seccompProfile",
              "type": "object"
            }
          },
          "required": [],
          "title": "containerSecurityContext",
          "type": "object"
        },
        "deploymentAnnotations": {
          "additionalProperties": true,
          "description": "Annotations to be added to the Dex server Deployment",
          "required": [],
          "title": "deploymentAnnotations",
          "type": "object"
        },
        "deploymentLabels": {
          "additionalProperties": true,
          "description": "Labels for the Dex server Deployment",
          "required": [],
          "title": "deploymentLabels",
          "type": "object"
        },
        "deploymentStrategy": {
          "additionalProperties": true,
          "description": "Deployment strategy to be added to the Dex server Deployment",
          "required": [],
          "title": "deploymentStrategy",
          "type": "object"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "[DNS configuration]",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "dnsPolicy": {
          "default": "ClusterFirst",
          "description": "Alternative DNS policy for Dex server pods",
          "required": [],
          "title": "dnsPolicy",
          "type": "string"
        },
        "emptyDir": {
          "additionalProperties": true,
          "description": "# Dex server emptyDir volumes",
          "properties": {
            "sizeLimit": {
              "default": "",
              "description": "EmptyDir size limit for Dex server",
              "required": [],
              "title": "sizeLimit",
              "type": "string"
            }
          },
          "required": [],
          "title": "emptyDir",
          "type": "object"
        },
        "enabled": {
          "default": true,
          "description": "Enable dex",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "env": {
          "description": "Environment variables to pass to the Dex server",
          "items": {
            "required": []
          },
          "required": [],
          "title": "env",
          "type": "array"
        },
        "envFrom": {
          "description": "envFrom to pass to the Dex server",
          "items": {
            "required": []
          },
          "required": [],
          "title": "envFrom",
          "type": "array"
        },
        "extraArgs": {
          "description": "Additional command line arguments to pass to the Dex server",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Additional containers to be added to the dex pod\n# Note: Supports use of custom Helm templates",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "image": {
          "additionalProperties": true,
          "description": "# Dex image",
          "properties": {
            "imagePullPolicy": {
              "default": "",
              "description": "Dex imagePullPolicy",
              "required": [],
              "title": "imagePullPolicy",
              "type": "string"
            },
            "repository": {
              "default": "ghcr.io/dexidp/dex",
              "description": "Dex image repository",
              "required": [],
              "title": "repository",
              "type": "string"
            },
            "tag": {
              "default": "v2.44.0",
              "description": "Dex image tag",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "imagePullSecrets": {
          "description": "Secrets with credentials to pull images from a private registry",
          "items": {
            "required": []
          },
          "required": [],
          "title": "imagePullSecrets",
          "type": "array"
        },
        "initContainers": {
          "description": "Init containers to add to the dex pod\n# Note: Supports use of custom Helm templates",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "initImage": {
          "additionalProperties": true,
          "description": "Argo CD init image that creates Dex config",
          "properties": {
            "imagePullPolicy": {
              "default": "",
              "description": "Argo CD init image imagePullPolicy",
              "required": [],
              "title": "imagePullPolicy",
              "type": "string"
            },
            "repository": {
              "default": "",
              "description": "Argo CD init image repository",
              "required": [],
              "title": "repository",
              "type": "string"
            },
            "resources": {
              "additionalProperties": true,
              "description": "Argo CD init image resources",
              "required": [],
              "title": "resources",
              "type": "object"
            },
            "tag": {
              "default": "",
              "description": "Argo CD init image tag",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [],
          "title": "initImage",
          "type": "object"
        },
        "livenessProbe": {
          "additionalProperties": true,
          "description": "# Probes for Dex server\n# Supported from Dex \u003e= 2.28.0",
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enable Kubernetes liveness probe for Dex \u003e= 2.28.0",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "failureThreshold": {
              "default": 3,
              "description": "Minimum consecutive failures for the [probe] to be considered failed after having succeeded",
              "required": [],
              "title": "failureThreshold",
              "type": "integer"
            },
            "httpPath": {
              "default": "/healthz/live",
              "description": "Http path to use for the liveness probe",
              "required": [],
              "title": "httpPath",
              "type": "string"
            },
            "httpPort": {
              "default": "metrics",
              "description": "Http port to use for the liveness probe",
              "required": [],
              "title": "httpPort",
              "type": "string"
            },
            "httpScheme": {
              "default": "HTTP",
              "description": "Scheme to use for for the liveness probe (can be HTTP or HTTPS)",
              "required": [],
              "title": "httpScheme",
              "type": "string"
            },
            "initialDelaySeconds": {
              "default": 10,
              "description": "Number of seconds after the container has started before [probe] is initiated",
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 10,
              "description": "How often (in seconds) to perform the [probe]",
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "successThreshold": {
              "default": 1,
              "description": "Minimum consecutive successes for the [probe] to be considered successful after having failed",
              "required": [],
              "title": "successThreshold",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 1,
              "description": "Number of seconds after which the [probe] times out",
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "livenessProbe",
          "type": "object"
        },
        "metrics": {
          "additionalProperties": true,
          "properties": {
            "enabled": {
              "default": false,
              "description": "Deploy metrics service",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "service": {
              "additionalProperties": true,
              "properties": {
                "annotations": {
                  "additionalProperties": true,
                  "description": "Metrics service annotations",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": true,
                  "description": "Metrics service labels",
                  "required": [],
                  "title": "labels",
                  "type": "object"
                },
                "portName": {
                  "default": "http-metrics",
                  "description": "Metrics service port name",
                  "required": [],
                  "title": "portName",
                  "type": "string"
                }
              },
              "required": [],
              "title": "service",
              "type": "object"
            },
            "serviceMonitor": {
              "additionalProperties": true,
              "properties": {
                "additionalLabels": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor labels",
                  "required": [],
                  "title": "additionalLabels",
                  "type": "object"
                },
                "annotations": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor annotations",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "enabled": {
                  "default": false,
                  "description": "Enable a prometheus ServiceMonitor",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "honorLabels": {
                  "default": false,
                  "description": "When true, honorLabels preserves the metric’s labels when they collide with the target’s labels.",
                  "required": [],
                  "title": "honorLabels",
                  "type": "boolean"
                },
                "interval": {
                  "default": "30s",
                  "description": "Prometheus ServiceMonitor interval",
                  "required": [],
                  "title": "interval",
                  "type": "string"
                },
                "metricRelabelings": {
                  "description": "Prometheus [MetricRelabelConfigs] to apply to samples before ingestion",
                  "items": {
                    "required": []
                  },
                  "required": [],
                  "title": "metricRelabelings",
                  "type": "array"
                },
                "namespace": {
                  "default": "",
                  "description": "Prometheus ServiceMonitor namespace",
                  "required": [],
                  "title": "namespace",
                  "type": "string"
                },
                "relabelings": {
                  "description": "Prometheus [RelabelConfigs] to apply to samples before scraping",
                  "items": {
                    "required": []
                  },
                  "required": [],
                  "title": "relabelings",
                  "type": "array"
                },
                "scheme": {
                  "default": "",
                  "description": "Prometheus ServiceMonitor scheme",
                  "required": [],
                  "title": "scheme",
                  "type": "string"
                },
                "selector": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor selector",
                  "required": [],
                  "title": "selector",
                  "type": "object"
                },
                "tlsConfig": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor tlsConfig",
                  "required": [],
                  "title": "tlsConfig",
                  "type": "object"
                }
              },
              "required": [],
              "title": "serviceMonitor",
              "type": "object"
            }
          },
          "required": [],
          "title": "metrics",
          "type": "object"
        },
        "name": {
          "default": "dex-server",
          "description": "Dex name",
          "required": [],
          "title": "name",
          "type": "string"
        },
        "networkPolicy": {
          "additionalProperties": true,
          "description": "Default Dex server's network policy",
          "properties": {
            "create": {
              "default": false,
              "description": "Default network policy rules used by Dex server",
              "required": [],
              "title": "create",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "networkPolicy",
          "type": "object"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "[Node selector]",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "pdb": {
          "additionalProperties": true,
          "description": "# Dex Pod Disruption Budget\n# Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations to be added to Dex server pdb",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Deploy a [PodDisruptionBudget] for the Dex server",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels to be added to Dex server pdb",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "maxUnavailable": {
              "default": "",
              "description": "Number of pods that are unavailble after eviction as number or percentage (eg.: 50%).\n# Has higher precedence over `dex.pdb.minAvailable`",
              "required": [],
              "title": "maxUnavailable",
              "type": "string"
            },
            "minAvailable": {
              "default": "",
              "description": "Number of pods that are available after eviction as number or percentage (eg.: 50%)",
              "required": [],
              "title": "minAvailable",
              "type": "string"
            }
          },
          "required": [],
          "title": "pdb",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations to be added to the Dex server pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels to be added to the Dex server pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "",
          "description": "Priority class for the dex pods",
          "required": [],
          "title": "priorityClassName",
          "type": "string"
        },
        "readinessProbe": {
          "additionalProperties": true,
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enable Kubernetes readiness probe for Dex \u003e= 2.28.0",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "failureThreshold": {
              "default": 3,
              "description": "Minimum consecutive failures for the [probe] to be considered failed after having succeeded",
              "required": [],
              "title": "failureThreshold",
              "type": "integer"
            },
            "httpPath": {
              "default": "/healthz/ready",
              "description": "Http path to use for the readiness probe",
              "required": [],
              "title": "httpPath",
              "type": "string"
            },
            "httpPort": {
              "default": "metrics",
              "description": "Http port to use for the readiness probe",
              "required": [],
              "title": "httpPort",
              "type": "string"
            },
            "httpScheme": {
              "default": "HTTP",
              "description": "Scheme to use for for the liveness probe (can be HTTP or HTTPS)",
              "required": [],
              "title": "httpScheme",
              "type": "string"
            },
            "initialDelaySeconds": {
              "default": 10,
              "description": "Number of seconds after the container has started before [probe] is initiated",
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 10,
              "description": "How often (in seconds) to perform the [probe]",
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "successThreshold": {
              "default": 1,
              "description": "Minimum consecutive successes for the [probe] to be considered successful after having failed",
              "required": [],
              "title": "successThreshold",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 1,
              "description": "Number of seconds after which the [probe] times out",
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "readinessProbe",
          "type": "object"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource limits and requests for dex",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "runtimeClassName": {
          "default": "",
          "description": "Runtime class name for Dex",
          "required": [],
          "title": "runtimeClassName",
          "type": "string"
        },
        "serviceAccount": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations applied to created service account",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "automountServiceAccountToken": {
              "default": true,
              "description": "Automount API credentials for the Service Account",
              "required": [],
              "title": "automountServiceAccountToken",
              "type": "boolean"
            },
            "create": {
              "default": true,
              "description": "Create dex service account",
              "required": [],
              "title": "create",
              "type": "boolean"
            },
            "name": {
              "default": "argocd-dex-server",
              "description": "Dex service account name",
              "required": [],
              "title": "name",
              "type": "string"
            }
          },
          "required": [],
          "title": "serviceAccount",
          "type": "object"
        },
        "servicePortGrpc": {
          "default": 5557,
          "description": "Service port for gRPC access",
          "required": [],
          "title": "servicePortGrpc",
          "type": "integer"
        },
        "servicePortGrpcName": {
          "default": "grpc",
          "description": "Service port name for gRPC access",
          "required": [],
          "title": "servicePortGrpcName",
          "type": "string"
        },
        "servicePortHttp": {
          "default": 5556,
          "description": "Service port for HTTP access",
          "required": [],
          "title": "servicePortHttp",
          "type": "integer"
        },
        "servicePortHttpName": {
          "default": "http",
          "description": "Service port name for HTTP access",
          "required": [],
          "title": "servicePortHttpName",
          "type": "string"
        },
        "servicePortMetrics": {
          "default": 5558,
          "description": "Service port for metrics access",
          "required": [],
          "title": "servicePortMetrics",
          "type": "integer"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "terminationGracePeriodSeconds for container lifecycle hook",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "[Tolerations] for use with node taints",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "Assign custom [TopologySpreadConstraints] rules to dex\n# Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/\n# If labelSelector is left out, it will default to the labelSelector configuration of the deployment",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        },
        "volumeMounts": {
          "description": "Additional volumeMounts to the dex main container",
          "items": {
            "required": []
          },
          "required": [],
          "title": "volumeMounts",
          "type": "array"
        },
        "volumes": {
          "description": "Additional volumes to the dex pod",
          "items": {
            "required": []
          },
          "required": [],
          "title": "volumes",
          "type": "array"
        }
      },
      "required": [],
      "title": "dex",
      "type": "object"
    },
    "emptyDir": {
      "additionalProperties": true,
      "description": "Configuration of `emptyDir`, used only if persistentVolume is disabled and no hostPath specified",
      "required": [],
      "title": "emptyDir",
      "type": "object"
    },
    "existingSecret": {
      "default": "~",
      "description": "# Use existing secret containing key `authKey` (ignores redisPassword)\n# Can also store AWS S3 or SSH secrets in this secret\nAn existing secret containing a key defined by `authKey` that configures `requirepass` and `masterauth` in the conf\nparameters (Requires `auth: enabled`, cannot be used in conjunction with `.Values.redisPassword`)",
      "required": [],
      "title": "existingSecret",
      "type": "null"
    },
    "exporter": {
      "additionalProperties": true,
      "description": "Prometheus exporter specific configuration options",
      "properties": {
        "address": {
          "default": "localhost",
          "description": "Address/Host for Redis instance.\nExists to circumvent issues with IPv6 dns resolution that occurs on certain environments",
          "required": [],
          "title": "address",
          "type": "string"
        },
        "enabled": {
          "default": false,
          "description": "If `true`, the prometheus exporter sidecar is enabled",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "extraArgs": {
          "additionalProperties": true,
          "description": "Additional args for redis exporter",
          "required": [],
          "title": "extraArgs",
          "type": "object"
        },
        "image": {
          "default": "quay.io/oliver006/redis_exporter",
          "description": "Exporter image",
          "required": [],
          "title": "image",
          "type": "string"
        },
        "livenessProbe": {
          "additionalProperties": true,
          "description": "prometheus exporter SCANS redis db which can take some time\nallow different probe settings to not let container crashloop",
          "properties": {
            "httpGet": {
              "additionalProperties": true,
              "properties": {
                "path": {
                  "default": "/metrics",
                  "description": "Exporter liveness probe httpGet path",
                  "required": [],
                  "title": "path",
                  "type": "string"
                },
                "port": {
                  "default": 9121,
                  "description": "Exporter liveness probe httpGet port",
                  "required": [],
                  "title": "port",
                  "type": "integer"
                }
              },
              "required": [],
              "title": "httpGet",
              "type": "object"
            },
            "initialDelaySeconds": {
              "default": 15,
              "description": "Initial delay in seconds for liveness probe of exporter",
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 15,
              "description": "Period in seconds after which liveness probe will be repeated",
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 3,
              "description": "Timeout seconds for liveness probe of exporter",
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "livenessProbe",
          "type": "object"
        },
        "port": {
          "default": 9121,
          "description": "Exporter port",
          "required": [],
          "title": "port",
          "type": "integer"
        },
        "portName": {
          "default": "exporter-port",
          "description": "Exporter port name",
          "required": [],
          "title": "portName",
          "type": "string"
        },
        "pullPolicy": {
          "default": "IfNotPresent",
          "description": "Exporter image pullPolicy",
          "required": [],
          "title": "pullPolicy",
          "type": "string"
        },
        "readinessProbe": {
          "additionalProperties": true,
          "properties": {
            "httpGet": {
              "additionalProperties": true,
              "properties": {
                "path": {
                  "default": "/metrics",
                  "description": "Exporter readiness probe httpGet path",
                  "required": [],
                  "title": "path",
                  "type": "string"
                },
                "port": {
                  "default": 9121,
                  "description": "Exporter readiness probe httpGet port",
                  "required": [],
                  "title": "port",
                  "type": "integer"
                }
              },
              "required": [],
              "title": "httpGet",
              "type": "object"
            },
            "initialDelaySeconds": {
              "default": 15,
              "description": "Initial delay in seconds for readiness probe of exporter",
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 15,
              "description": "Period in seconds after which readiness probe will be repeated",
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "successThreshold": {
              "default": 2,
              "description": "Success threshold for readiness probe of exporter",
              "required": [],
              "title": "successThreshold",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 3,
              "description": "Timeout seconds for readiness probe of exporter",
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "readinessProbe",
          "type": "object"
        },
        "resources": {
          "additionalProperties": true,
          "description": "cpu/memory resource limits/requests",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "scrapePath": {
          "default": "/metrics",
          "description": "Exporter scrape path",
          "required": [],
          "title": "scrapePath",
          "type": "string"
        },
        "script": {
          "default": "",
          "description": " A custom custom Lua script that will be mounted to exporter for collection of custom metrics.\nCreates a ConfigMap and sets env var `REDIS_EXPORTER_SCRIPT`.",
          "required": [],
          "title": "script",
          "type": "string"
        },
        "serviceMonitor": {
          "additionalProperties": true,
          "properties": {
            "disableAPICheck": {
              "default": false,
              "description": "Disable API Check on ServiceMonitor",
              "required": [],
              "title": "disableAPICheck",
              "type": "boolean"
            },
            "enabled": {
              "default": false,
              "description": "When set true then use a ServiceMonitor to configure scraping",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "endpointAdditionalProperties": {
              "additionalProperties": true,
              "description": "Set additional properties for the ServiceMonitor endpoints such as relabeling, scrapeTimeout, tlsConfig, and more.",
              "required": [],
              "title": "endpointAdditionalProperties",
              "type": "object"
            },
            "interval": {
              "default": "",
              "description": "Set how frequently Prometheus should scrape (default is 30s)",
              "required": [],
              "title": "interval",
              "type": "string"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Set labels for the ServiceMonitor, use this to define your scrape label for Prometheus Operator",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "namespace": {
              "default": "",
              "description": "Set the namespace the ServiceMonitor should be deployed",
              "required": [],
              "title": "namespace",
              "type": "string"
            },
            "telemetryPath": {
              "default": "",
              "description": "Set path to redis-exporter telemtery-path (default is /metrics)",
              "required": [],
              "title": "telemetryPath",
              "type": "string"
            },
            "timeout": {
              "default": "",
              "description": "Set timeout for scrape (default is 10s)",
              "required": [],
              "title": "timeout",
              "type": "string"
            }
          },
          "required": [],
          "title": "serviceMonitor",
          "type": "object"
        },
        "tag": {
          "default": "v1.67.0",
          "description": "Exporter image tag",
          "required": [],
          "title": "tag",
          "type": "string"
        }
      },
      "required": [],
      "title": "exporter",
      "type": "object"
    },
    "externalRedis": {
      "additionalProperties": true,
      "description": "External Redis parameters",
      "properties": {
        "existingSecret": {
          "default": "",
          "description": "The name of an existing secret with Redis (must contain key `redis-password`. And should contain `redis-username` if username is not `default`) and Sentinel credentials.\nWhen it's set, the `externalRedis.username` and `externalRedis.password` parameters are ignored",
          "required": [],
          "title": "existingSecret",
          "type": "string"
        },
        "host": {
          "default": "",
          "description": "External Redis server host",
          "required": [],
          "title": "host",
          "type": "string"
        },
        "password": {
          "default": "",
          "description": "External Redis password",
          "required": [],
          "title": "password",
          "type": "string"
        },
        "port": {
          "default": 6379,
          "description": "External Redis server port",
          "required": [],
          "title": "port",
          "type": "integer"
        },
        "secretAnnotations": {
          "additionalProperties": true,
          "description": "External Redis Secret annotations",
          "required": [],
          "title": "secretAnnotations",
          "type": "object"
        },
        "username": {
          "default": "",
          "description": "External Redis username",
          "required": [],
          "title": "username",
          "type": "string"
        }
      },
      "required": [],
      "title": "externalRedis",
      "type": "object"
    },
    "extraContainers": {
      "description": "Extra containers to include in StatefulSet",
      "items": {
        "required": []
      },
      "required": [],
      "title": "extraContainers",
      "type": "array"
    },
    "extraInitContainers": {
      "description": "Extra init containers to include in StatefulSet",
      "items": {
        "required": []
      },
      "required": [],
      "title": "extraInitContainers",
      "type": "array"
    },
    "extraLabels": {
      "additionalProperties": true,
      "description": "Labels added here are applied to all created resources",
      "required": [],
      "title": "extraLabels",
      "type": "object"
    },
    "extraObjects": {
      "description": "Array of extra K8s manifests to deploy\n# Note: Supports use of custom Helm templates",
      "items": {
        "required": []
      },
      "required": [],
      "title": "extraObjects",
      "type": "array"
    },
    "extraVolumes": {
      "description": "Extra volumes to include in StatefulSet",
      "items": {
        "required": []
      },
      "required": [],
      "title": "extraVolumes",
      "type": "array"
    },
    "fullnameOverride": {
      "default": "",
      "description": "String to fully override `\"argo-cd.fullname\"`",
      "required": [],
      "title": "fullnameOverride",
      "type": "string"
    },
    "global": {
      "additionalProperties": true,
      "description": "# Globally shared configuration",
      "properties": {
        "addPrometheusAnnotations": {
          "default": false,
          "description": "Add Prometheus scrape annotations to all metrics services. This can be used as an alternative to the ServiceMonitors.",
          "required": [],
          "title": "addPrometheusAnnotations",
          "type": "boolean"
        },
        "additionalLabels": {
          "additionalProperties": true,
          "description": "Common labels for the all resources",
          "required": [],
          "title": "additionalLabels",
          "type": "object"
        },
        "affinity": {
          "additionalProperties": true,
          "description": "Default affinity preset for all components",
          "properties": {
            "nodeAffinity": {
              "additionalProperties": true,
              "description": "Node affinity rules",
              "properties": {
                "matchExpressions": {
                  "description": "Default match expressions for node affinity",
                  "items": {
                    "required": []
                  },
                  "required": [],
                  "title": "matchExpressions",
                  "type": "array"
                },
                "type": {
                  "default": "hard",
                  "description": "Default node affinity rules. Either: `none`, `soft` or `hard`",
                  "required": [],
                  "title": "type",
                  "type": "string"
                }
              },
              "required": [],
              "title": "nodeAffinity",
              "type": "object"
            },
            "podAntiAffinity": {
              "default": "soft",
              "description": "Default pod anti-affinity rules. Either: `none`, `soft` or `hard`",
              "required": [],
              "title": "podAntiAffinity",
              "type": "string"
            }
          },
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "certificateAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for the all deployed Certificates",
          "required": [],
          "title": "certificateAnnotations",
          "type": "object"
        },
        "compatibility": {
          "additionalProperties": true,
          "description": "Openshift compatibility options",
          "properties": {
            "openshift": {
              "additionalProperties": true,
              "properties": {
                "adaptSecurityContext": {
                  "default": "auto",
                  "required": [],
                  "title": "adaptSecurityContext",
                  "type": "string"
                }
              },
              "required": [],
              "title": "openshift",
              "type": "object"
            }
          },
          "required": [],
          "title": "compatibility",
          "type": "object"
        },
        "deploymentAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for the all deployed Deployments",
          "required": [],
          "title": "deploymentAnnotations",
          "type": "object"
        },
        "deploymentLabels": {
          "additionalProperties": true,
          "description": "Labels for the all deployed Deployments",
          "required": [],
          "title": "deploymentLabels",
          "type": "object"
        },
        "deploymentStrategy": {
          "additionalProperties": true,
          "description": "Deployment strategy for the all deployed Deployments",
          "required": [],
          "title": "deploymentStrategy",
          "type": "object"
        },
        "domain": {
          "default": "argocd.example.com",
          "description": "Default domain used by all components\n# Used for ingresses, certificates, SSO, notifications, etc.",
          "required": [],
          "title": "domain",
          "type": "string"
        },
        "dualStack": {
          "additionalProperties": true,
          "description": "Configure dual-stack used by all component services",
          "properties": {
            "ipFamilies": {
              "description": "IP families that should be supported and the order in which they should be applied to ClusterIP as well. Can be IPv4 and/or IPv6.",
              "items": {
                "required": []
              },
              "required": [],
              "title": "ipFamilies",
              "type": "array"
            },
            "ipFamilyPolicy": {
              "default": "",
              "description": "IP family policy to configure dual-stack see [Configure dual-stack](https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services)",
              "required": [],
              "title": "ipFamilyPolicy",
              "type": "string"
            }
          },
          "required": [],
          "title": "dualStack",
          "type": "object"
        },
        "env": {
          "description": "Environment variables to pass to all deployed Deployments",
          "items": {
            "required": []
          },
          "required": [],
          "title": "env",
          "type": "array"
        },
        "hostAliases": {
          "description": "Mapping between IP and hostnames that will be injected as entries in the pod's hosts files",
          "items": {
            "required": []
          },
          "required": [],
          "title": "hostAliases",
          "type": "array"
        },
        "image": {
          "additionalProperties": true,
          "description": "Default image used by all components",
          "properties": {
            "imagePullPolicy": {
              "default": "IfNotPresent",
              "description": "If defined, a imagePullPolicy applied to all Argo CD deployments",
              "required": [],
              "title": "imagePullPolicy",
              "type": "string"
            },
            "repository": {
              "default": "quay.io/argoproj/argocd",
              "description": "If defined, a repository applied to all Argo CD deployments",
              "required": [],
              "title": "repository",
              "type": "string"
            },
            "tag": {
              "default": "",
              "description": "Overrides the global Argo CD image tag whose default is the chart appVersion",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "imagePullSecrets": {
          "description": "Secrets with credentials to pull images from a private registry",
          "items": {
            "required": []
          },
          "required": [],
          "title": "imagePullSecrets",
          "type": "array"
        },
        "logging": {
          "additionalProperties": true,
          "description": "Default logging options used by all components",
          "properties": {
            "format": {
              "default": "text",
              "description": "Set the global logging format. Either: `text` or `json`",
              "required": [],
              "title": "format",
              "type": "string"
            },
            "level": {
              "default": "info",
              "description": "Set the global logging level. One of: `debug`, `info`, `warn` or `error`",
              "required": [],
              "title": "level",
              "type": "string"
            }
          },
          "required": [],
          "title": "logging",
          "type": "object"
        },
        "networkPolicy": {
          "additionalProperties": true,
          "description": "Default network policy rules used by all components",
          "properties": {
            "create": {
              "default": false,
              "description": "Create NetworkPolicy objects for all components",
              "required": [],
              "title": "create",
              "type": "boolean"
            },
            "defaultDenyIngress": {
              "default": false,
              "description": "Default deny all ingress traffic",
              "required": [],
              "title": "defaultDenyIngress",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "networkPolicy",
          "type": "object"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Default node selector for all components",
          "properties": {
            "kubernetes.io/os": {
              "default": "linux",
              "required": [],
              "title": "kubernetes.io/os",
              "type": "string"
            }
          },
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for the all deployed pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels for the all deployed pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "",
          "description": "Default priority class for all components",
          "required": [],
          "title": "priorityClassName",
          "type": "string"
        },
        "revisionHistoryLimit": {
          "default": 3,
          "description": "Number of old deployment ReplicaSets to retain. The rest will be garbage collected.",
          "required": [],
          "title": "revisionHistoryLimit",
          "type": "integer"
        },
        "runtimeClassName": {
          "default": "",
          "description": "Runtime class name for all components",
          "required": [],
          "title": "runtimeClassName",
          "type": "string"
        },
        "securityContext": {
          "additionalProperties": true,
          "description": "Toggle and define pod-level security context.",
          "required": [],
          "title": "securityContext",
          "type": "object"
        },
        "statefulsetAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for the all deployed Statefulsets",
          "required": [],
          "title": "statefulsetAnnotations",
          "type": "object"
        },
        "tolerations": {
          "description": "Default tolerations for all components",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "Default [TopologySpreadConstraints] rules for all components\n# Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/\n# If labelSelector is left out, it will default to the labelSelector of the component",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        }
      },
      "required": [],
      "title": "global",
      "type": "object"
    },
    "haproxy": {
      "additionalProperties": true,
      "description": "# Enables a HA Proxy for better LoadBalancing / Sentinel Master support. Automatically proxies to Redis master.\n# Recommend for externally exposed Redis clusters.\n# ref: https://cbonte.github.io/haproxy-dconv/1.9/intro.html",
      "properties": {
        "IPv6": {
          "additionalProperties": true,
          "description": "# Enable HAProxy parameters to bind and consume IPv6 addresses. Enabled by default.",
          "properties": {
            "enabled": {
              "default": true,
              "description": "Enable HAProxy parameters to bind and consume IPv6 addresses. Enabled by default.",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "IPv6",
          "type": "object"
        },
        "additionalAffinities": {
          "additionalProperties": true,
          "description": "Additional affinities to add to the haproxy pods.",
          "required": [],
          "title": "additionalAffinities",
          "type": "object"
        },
        "affinity": {
          "default": "",
          "description": "Override all other affinity settings for the haproxy pods with a string.",
          "required": [],
          "title": "affinity",
          "type": "string"
        },
        "annotations": {
          "additionalProperties": true,
          "description": "HAProxy template annotations",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "checkFall": {
          "default": 1,
          "description": "haproxy.cfg `check fall` setting",
          "required": [],
          "title": "checkFall",
          "type": "integer"
        },
        "checkInterval": {
          "default": "1s",
          "description": "haproxy.cfg `check inter` setting",
          "required": [],
          "title": "checkInterval",
          "type": "string"
        },
        "containerPort": {
          "default": 6379,
          "description": "Modify HAProxy deployment container port",
          "required": [],
          "title": "containerPort",
          "type": "integer"
        },
        "containerSecurityContext": {
          "additionalProperties": true,
          "description": "Security context to be added to the HAProxy containers.",
          "properties": {
            "allowPrivilegeEscalation": {
              "default": false,
              "required": [],
              "title": "allowPrivilegeEscalation",
              "type": "boolean"
            },
            "capabilities": {
              "additionalProperties": true,
              "properties": {
                "drop": {
                  "items": {
                    "required": [],
                    "type": "string"
                  },
                  "required": [],
                  "title": "drop",
                  "type": "array"
                }
              },
              "required": [],
              "title": "capabilities",
              "type": "object"
            },
            "runAsNonRoot": {
              "default": true,
              "required": [],
              "title": "runAsNonRoot",
              "type": "boolean"
            },
            "seccompProfile": {
              "additionalProperties": true,
              "properties": {
                "type": {
                  "default": "RuntimeDefault",
                  "required": [],
                  "title": "type",
                  "type": "string"
                }
              },
              "required": [],
              "title": "seccompProfile",
              "type": "object"
            }
          },
          "required": [],
          "title": "containerSecurityContext",
          "type": "object"
        },
        "customConfig": {
          "default": "~",
          "description": "# Custom config-haproxy.cfg files used to override default settings. If this file is\n# specified then the config-haproxy.cfg above will be ignored.\n(string) Allows for custom config-haproxy.cfg file to be applied. If this is used then default config will be overwriten",
          "required": [],
          "title": "customConfig",
          "type": "null"
        },
        "deploymentStrategy": {
          "additionalProperties": true,
          "description": "Deployment strategy for the haproxy deployment",
          "properties": {
            "type": {
              "default": "RollingUpdate",
              "required": [],
              "title": "type",
              "type": "string"
            }
          },
          "required": [],
          "title": "deploymentStrategy",
          "type": "object"
        },
        "emptyDir": {
          "additionalProperties": true,
          "description": "Configuration of `emptyDir`",
          "required": [],
          "title": "emptyDir",
          "type": "object"
        },
        "enabled": {
          "default": false,
          "description": "Enabled HAProxy LoadBalancing/Proxy",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "extraConfig": {
          "default": "~",
          "description": "# Place any additional configuration section to add to the default config-haproxy.cfg\n(string) Allows to place any additional configuration section to add to the default config-haproxy.cfg",
          "required": [],
          "title": "extraConfig",
          "type": "null"
        },
        "hardAntiAffinity": {
          "default": true,
          "description": "Whether the haproxy pods should be forced to run on separate nodes.",
          "required": [],
          "title": "hardAntiAffinity",
          "type": "boolean"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "pullPolicy": {
              "default": "IfNotPresent",
              "description": "HAProxy Image PullPolicy",
              "required": [],
              "title": "pullPolicy",
              "type": "string"
            },
            "repository": {
              "default": "public.ecr.aws/docker/library/haproxy",
              "description": "HAProxy Image Repository",
              "required": [],
              "title": "repository",
              "type": "string"
            },
            "tag": {
              "default": "3.0.8-alpine",
              "description": "HAProxy Image Tag",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "imagePullSecrets": {
          "description": "Reference to one or more secrets to be used when pulling images\nref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/",
          "items": {
            "required": []
          },
          "required": [],
          "title": "imagePullSecrets",
          "type": "array"
        },
        "init": {
          "additionalProperties": true,
          "properties": {
            "resources": {
              "additionalProperties": true,
              "description": "Extra init resources",
              "required": [],
              "title": "resources",
              "type": "object"
            }
          },
          "required": [],
          "title": "init",
          "type": "object"
        },
        "labels": {
          "additionalProperties": true,
          "description": "Custom labels for the haproxy pod",
          "required": [],
          "title": "labels",
          "type": "object"
        },
        "lifecycle": {
          "additionalProperties": true,
          "description": "Container lifecycle hooks.\nRef: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/",
          "required": [],
          "title": "lifecycle",
          "type": "object"
        },
        "metrics": {
          "additionalProperties": true,
          "description": "# Official HAProxy embedded prometheus metrics settings.\n# Ref: https://github.com/haproxy/haproxy/tree/master/contrib/prometheus-exporter\n#",
          "properties": {
            "enabled": {
              "default": false,
              "description": "HAProxy enable prometheus metric scraping",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "port": {
              "default": 9101,
              "description": "HAProxy prometheus metrics scraping port",
              "required": [],
              "title": "port",
              "type": "integer"
            },
            "portName": {
              "default": "http-exporter-port",
              "description": "HAProxy metrics scraping port name",
              "required": [],
              "title": "portName",
              "type": "string"
            },
            "scrapePath": {
              "default": "/metrics",
              "description": "HAProxy prometheus metrics scraping path",
              "required": [],
              "title": "scrapePath",
              "type": "string"
            },
            "serviceMonitor": {
              "additionalProperties": true,
              "properties": {
                "disableAPICheck": {
                  "default": false,
                  "description": "Disable API Check on ServiceMonitor",
                  "required": [],
                  "title": "disableAPICheck",
                  "type": "boolean"
                },
                "enabled": {
                  "default": false,
                  "description": "When set true then use a ServiceMonitor to configure scraping",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "endpointAdditionalProperties": {
                  "additionalProperties": true,
                  "description": "Set additional properties for the ServiceMonitor endpoints such as relabeling, scrapeTimeout, tlsConfig, and more.",
                  "required": [],
                  "title": "endpointAdditionalProperties",
                  "type": "object"
                },
                "interval": {
                  "default": "",
                  "description": "Set how frequently Prometheus should scrape (default is 30s)",
                  "required": [],
                  "title": "interval",
                  "type": "string"
                },
                "labels": {
                  "additionalProperties": true,
                  "description": "Set labels for the ServiceMonitor, use this to define your scrape label for Prometheus Operator",
                  "required": [],
                  "title": "labels",
                  "type": "object"
                },
                "namespace": {
                  "default": "",
                  "description": "Set the namespace the ServiceMonitor should be deployed",
                  "required": [],
                  "title": "namespace",
                  "type": "string"
                },
                "telemetryPath": {
                  "default": "",
                  "description": "Set path to redis-exporter telemtery-path (default is /metrics)",
                  "required": [],
                  "title": "telemetryPath",
                  "type": "string"
                },
                "timeout": {
                  "default": "",
                  "description": "Set timeout for scrape (default is 10s)",
                  "required": [],
                  "title": "timeout",
                  "type": "string"
                }
              },
              "required": [],
              "title": "serviceMonitor",
              "type": "object"
            }
          },
          "required": [],
          "title": "metrics",
          "type": "object"
        },
        "networkPolicy": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations for Haproxy NetworkPolicy",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "egressRules": {
              "description": "user can define egress rules too, uses the same structure as ingressRules",
              "items": {
                "required": []
              },
              "required": [],
              "title": "egressRules",
              "type": "array"
            },
            "enabled": {
              "default": false,
              "description": "whether NetworkPolicy for Haproxy should be created",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "ingressRules": {
              "description": "user defined ingress rules that Haproxy should permit into.\nuses the format defined in https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
              "items": {
                "required": []
              },
              "required": [],
              "title": "ingressRules",
              "type": "array"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels for Haproxy NetworkPolicy",
              "required": [],
              "title": "labels",
              "type": "object"
            }
          },
          "required": [],
          "title": "networkPolicy",
          "type": "object"
        },
        "podDisruptionBudget": {
          "additionalProperties": true,
          "description": "Pod Disruption Budget\nref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/",
          "required": [],
          "title": "podDisruptionBudget",
          "type": "object"
        },
        "priorityClassName": {
          "default": "",
          "description": "Kubernetes priorityClass name for the haproxy pod",
          "required": [],
          "title": "priorityClassName",
          "type": "string"
        },
        "readOnly": {
          "additionalProperties": true,
          "description": "Enable read-only redis-slaves",
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enable if you want a dedicated port in haproxy for redis-slaves",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "port": {
              "default": 6380,
              "description": "Port for the read-only redis-slaves",
              "required": [],
              "title": "port",
              "type": "integer"
            }
          },
          "required": [],
          "title": "readOnly",
          "type": "object"
        },
        "replicas": {
          "default": 3,
          "description": "Number of HAProxy instances",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "HAProxy resources",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "securityContext": {
          "additionalProperties": true,
          "description": "Security context to be added to the HAProxy deployment.",
          "properties": {
            "fsGroup": {
              "default": 99,
              "required": [],
              "title": "fsGroup",
              "type": "integer"
            },
            "runAsNonRoot": {
              "default": true,
              "required": [],
              "title": "runAsNonRoot",
              "type": "boolean"
            },
            "runAsUser": {
              "default": 99,
              "required": [],
              "title": "runAsUser",
              "type": "integer"
            }
          },
          "required": [],
          "title": "securityContext",
          "type": "object"
        },
        "service": {
          "additionalProperties": true,
          "description": "# Service for HAProxy",
          "properties": {
            "annotations": {
              "default": "null",
              "description": "HAProxy service annotations",
              "required": [],
              "title": "annotations",
              "type": "null"
            },
            "externalIPs": {
              "additionalProperties": true,
              "description": "HAProxy external IPs",
              "required": [],
              "title": "externalIPs",
              "type": "object"
            },
            "externalTrafficPolicy": {
              "default": "~",
              "description": "(string) HAProxy service externalTrafficPolicy value (haproxy.service.type must be LoadBalancer)",
              "required": [],
              "title": "externalTrafficPolicy",
              "type": "null"
            },
            "labels": {
              "additionalProperties": true,
              "description": "HAProxy service labels",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "loadBalancerIP": {
              "default": "",
              "description": "HAProxy service loadbalancer IP",
              "required": [],
              "title": "loadBalancerIP",
              "type": "null"
            },
            "loadBalancerSourceRanges": {
              "description": "List of CIDR's allowed to connect to LoadBalancer",
              "items": {
                "required": []
              },
              "required": [],
              "title": "loadBalancerSourceRanges",
              "type": "array"
            },
            "nodePort": {
              "default": "~",
              "description": "(int) HAProxy service nodePort value (haproxy.service.type must be NodePort)",
              "required": [],
              "title": "nodePort",
              "type": "null"
            },
            "type": {
              "default": "ClusterIP",
              "description": "HAProxy service type \"ClusterIP\", \"LoadBalancer\" or \"NodePort\"",
              "required": [],
              "title": "type",
              "type": "string"
            }
          },
          "required": [],
          "title": "service",
          "type": "object"
        },
        "serviceAccount": {
          "additionalProperties": true,
          "properties": {
            "automountToken": {
              "default": true,
              "required": [],
              "title": "automountToken",
              "type": "boolean"
            },
            "create": {
              "default": true,
              "description": "Specifies whether a ServiceAccount should be created",
              "required": [],
              "title": "create",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "serviceAccount",
          "type": "object"
        },
        "serviceAccountName": {
          "default": "redis-sa",
          "description": "HAProxy serviceAccountName",
          "required": [],
          "title": "serviceAccountName",
          "type": "string"
        },
        "servicePort": {
          "default": 6379,
          "description": "Modify HAProxy service port",
          "required": [],
          "title": "servicePort",
          "type": "integer"
        },
        "stickyBalancing": {
          "default": false,
          "description": "# Enable sticky sessions to Redis nodes via HAProxy\n# Very useful for long-living connections as in case of Sentry for example\nHAProxy sticky load balancing to Redis nodes. Helps with connections shutdown.",
          "required": [],
          "title": "stickyBalancing",
          "type": "boolean"
        },
        "tests": {
          "additionalProperties": true,
          "description": "# HAProxy test related options",
          "properties": {
            "resources": {
              "additionalProperties": true,
              "description": "Pod resources for the tests against HAProxy.",
              "required": [],
              "title": "resources",
              "type": "object"
            }
          },
          "required": [],
          "title": "tests",
          "type": "object"
        },
        "timeout": {
          "additionalProperties": true,
          "properties": {
            "check": {
              "default": "2s",
              "description": "haproxy.cfg `timeout check` setting",
              "required": [],
              "title": "check",
              "type": "string"
            },
            "client": {
              "default": "330s",
              "description": "haproxy.cfg `timeout client` setting",
              "required": [],
              "title": "client",
              "type": "string"
            },
            "connect": {
              "default": "4s",
              "description": "haproxy.cfg `timeout connect` setting",
              "required": [],
              "title": "connect",
              "type": "string"
            },
            "server": {
              "default": "330s",
              "description": "haproxy.cfg `timeout server` setting",
              "required": [],
              "title": "server",
              "type": "string"
            }
          },
          "required": [],
          "title": "timeout",
          "type": "object"
        },
        "tls": {
          "additionalProperties": true,
          "description": "Enable TLS termination on HAproxy, This will create a volume mount",
          "properties": {
            "certMountPath": {
              "default": "/tmp/",
              "description": "Path to mount the secret that contains the certificates. haproxy",
              "required": [],
              "title": "certMountPath",
              "type": "string"
            },
            "enabled": {
              "default": false,
              "description": "If \"true\" this will enable TLS termination on haproxy",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "keyName": {
              "default": "",
              "description": "Key file name",
              "required": [],
              "title": "keyName",
              "type": "null"
            },
            "secretName": {
              "default": "",
              "description": "Secret containing the .pem file",
              "required": [],
              "title": "secretName",
              "type": "string"
            }
          },
          "required": [],
          "title": "tls",
          "type": "object"
        }
      },
      "required": [],
      "title": "haproxy",
      "type": "object"
    },
    "hardAntiAffinity": {
      "default": true,
      "description": "Whether the Redis server pods should be forced to run on separate nodes.\n# This is accomplished by setting their AntiAffinity with requiredDuringSchedulingIgnoredDuringExecution as opposed to preferred.\n# Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity-beta-feature",
      "required": [],
      "title": "hardAntiAffinity",
      "type": "boolean"
    },
    "hostPath": {
      "additionalProperties": true,
      "description": "To use a hostPath for data, set persistentVolume.enabled to false\nand define hostPath.path.\nWarning: this might overwrite existing folders on the host system!",
      "properties": {
        "chown": {
          "default": true,
          "description": "if chown is true, an init-container with root permissions is launched to\nchange the owner of the hostPath folder to the user defined in the\nsecurity context",
          "required": [],
          "title": "chown",
          "type": "boolean"
        },
        "path": {
          "default": "",
          "description": "Use this path on the host for data storage.\npath is evaluated as template so placeholders are replaced",
          "required": [],
          "title": "path",
          "type": "string"
        }
      },
      "required": [],
      "title": "hostPath",
      "type": "object"
    },
    "image": {
      "additionalProperties": true,
      "description": "# -- Image information for Redis HA\n# ref: http://kubernetes.io/docs/user-guide/compute-resources/\n#",
      "properties": {
        "pullPolicy": {
          "default": "IfNotPresent",
          "description": "Redis image pull policy",
          "required": [],
          "title": "pullPolicy",
          "type": "string"
        },
        "repository": {
          "default": "public.ecr.aws/docker/library/redis",
          "description": "Redis image repository",
          "required": [],
          "title": "repository",
          "type": "string"
        },
        "tag": {
          "default": "7.2.7-alpine",
          "description": "Redis image tag",
          "required": [],
          "title": "tag",
          "type": "string"
        }
      },
      "required": [],
      "title": "image",
      "type": "object"
    },
    "imagePullSecrets": {
      "description": "# Reference to one or more secrets to be used when pulling images\n# ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\n# This imagePullSecrets is only for redis images\n#\nReference to one or more secrets to be used when pulling redis images",
      "items": {
        "required": []
      },
      "required": [],
      "title": "imagePullSecrets",
      "type": "array"
    },
    "init": {
      "additionalProperties": true,
      "properties": {
        "resources": {
          "additionalProperties": true,
          "description": "Extra init resources",
          "required": [],
          "title": "resources",
          "type": "object"
        }
      },
      "required": [],
      "title": "init",
      "type": "object"
    },
    "kubeVersionOverride": {
      "default": "",
      "description": "Override the Kubernetes version, which is used to evaluate certain manifests",
      "required": [],
      "title": "kubeVersionOverride",
      "type": "string"
    },
    "labels": {
      "additionalProperties": true,
      "description": "Custom labels for the redis pod",
      "required": [],
      "title": "labels",
      "type": "object"
    },
    "nameOverride": {
      "default": "argocd",
      "description": "Provide a name in place of `argocd`",
      "required": [],
      "title": "nameOverride",
      "type": "string"
    },
    "namespaceOverride": {
      "default": "",
      "description": "Override the namespace",
      "required": [],
      "title": "namespaceOverride",
      "type": "string"
    },
    "networkPolicy": {
      "additionalProperties": true,
      "properties": {
        "annotations": {
          "additionalProperties": true,
          "description": "Annotations for NetworkPolicy",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "egressRules": {
          "description": "user can define egress rules too, uses the same structure as ingressRules",
          "items": {
            "additionalProperties": true,
            "properties": {
              "ports": {
                "items": {
                  "additionalProperties": true,
                  "properties": {
                    "port": {
                      "default": 53,
                      "required": [],
                      "title": "port",
                      "type": "integer"
                    },
                    "protocol": {
                      "default": "TCP",
                      "required": [],
                      "title": "protocol",
                      "type": "string"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "required": [],
                "title": "ports",
                "type": "array"
              },
              "selectors": {
                "items": {
                  "additionalProperties": true,
                  "properties": {
                    "ipBlock": {
                      "additionalProperties": true,
                      "properties": {
                        "cidr": {
                          "default": "169.254.0.0/16",
                          "description": "Cloud Provider often uses the local link local range to host managed DNS resolvers.\nWe need to allow this range to ensure that the Redis pods can resolve DNS.\nExample architecture for GCP Cloud DNS: https://cloud.google.com/kubernetes-engine/docs/how-to/cloud-dns#architecture",
                          "required": [],
                          "title": "cidr",
                          "type": "string"
                        }
                      },
                      "required": [],
                      "title": "ipBlock",
                      "type": "object"
                    },
                    "namespaceSelector": {
                      "additionalProperties": true,
                      "required": [],
                      "title": "namespaceSelector",
                      "type": "object"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "required": [],
                "title": "selectors",
                "type": "array"
              }
            },
            "required": [],
            "type": "object"
          },
          "required": [],
          "title": "egressRules",
          "type": "array"
        },
        "enabled": {
          "default": false,
          "description": "whether NetworkPolicy for Redis StatefulSets should be created.\nwhen enabled, inter-Redis connectivity is created",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "ingressRules": {
          "description": "User defined ingress rules that Redis should permit into.\nUses the format defined in https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "items": {
            "required": []
          },
          "required": [],
          "title": "ingressRules",
          "type": "array"
        },
        "labels": {
          "additionalProperties": true,
          "description": "Labels for NetworkPolicy",
          "required": [],
          "title": "labels",
          "type": "object"
        }
      },
      "required": [],
      "title": "networkPolicy",
      "type": "object"
    },
    "nodeSelector": {
      "additionalProperties": true,
      "description": "# Node labels, affinity, and tolerations for pod assignment\n# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector\n# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature\n# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity\nNode labels for pod assignment",
      "required": [],
      "title": "nodeSelector",
      "type": "object"
    },
    "notifications": {
      "additionalProperties": true,
      "description": "# Notifications controller",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Assign custom [affinity] rules",
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "argocdUrl": {
          "default": "",
          "description": "Argo CD dashboard url; used in place of {{.context.argocdUrl}} in templates",
          "required": [],
          "title": "argocdUrl",
          "type": "string"
        },
        "automountServiceAccountToken": {
          "default": true,
          "description": "Automount API credentials for the Service Account into the pod.",
          "required": [],
          "title": "automountServiceAccountToken",
          "type": "boolean"
        },
        "clusterRoleRules": {
          "additionalProperties": true,
          "description": "# Enable this and set the rules: to whatever custom rules you want for the Cluster Role resource.\n# Defaults to off",
          "properties": {
            "rules": {
              "description": "List of custom rules for the notifications controller's ClusterRole resource",
              "items": {
                "required": []
              },
              "required": [],
              "title": "rules",
              "type": "array"
            }
          },
          "required": [],
          "title": "clusterRoleRules",
          "type": "object"
        },
        "cm": {
          "additionalProperties": true,
          "properties": {
            "create": {
              "default": true,
              "description": "Whether helm chart creates notifications controller config map",
              "required": [],
              "title": "create",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "cm",
          "type": "object"
        },
        "containerPorts": {
          "additionalProperties": true,
          "description": "Notification controller container ports",
          "properties": {
            "metrics": {
              "default": 9001,
              "description": "Metrics container port",
              "required": [],
              "title": "metrics",
              "type": "integer"
            }
          },
          "required": [],
          "title": "containerPorts",
          "type": "object"
        },
        "containerSecurityContext": {
          "additionalProperties": true,
          "description": "Notification controller container-level security Context",
          "properties": {
            "allowPrivilegeEscalation": {
              "default": false,
              "required": [],
              "title": "allowPrivilegeEscalation",
              "type": "boolean"
            },
            "capabilities": {
              "additionalProperties": true,
              "properties": {
                "drop": {
                  "items": {
                    "required": [],
                    "type": "string"
                  },
                  "required": [],
                  "title": "drop",
                  "type": "array"
                }
              },
              "required": [],
              "title": "capabilities",
              "type": "object"
            },
            "readOnlyRootFilesystem": {
              "default": true,
              "required": [],
              "title": "readOnlyRootFilesystem",
              "type": "boolean"
            },
            "runAsNonRoot": {
              "default": true,
              "required": [],
              "title": "runAsNonRoot",
              "type": "boolean"
            },
            "seccompProfile": {
              "additionalProperties": true,
              "properties": {
                "type": {
                  "default": "RuntimeDefault",
                  "required": [],
                  "title": "type",
                  "type": "string"
                }
              },
              "required": [],
              "title": "seccompProfile",
              "type": "object"
            }
          },
          "required": [],
          "title": "containerSecurityContext",
          "type": "object"
        },
        "context": {
          "additionalProperties": true,
          "description": "Define user-defined context\n# For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/templates/#defining-user-defined-context",
          "required": [],
          "title": "context",
          "type": "object"
        },
        "deploymentAnnotations": {
          "additionalProperties": true,
          "description": "Annotations to be applied to the notifications controller Deployment",
          "required": [],
          "title": "deploymentAnnotations",
          "type": "object"
        },
        "deploymentLabels": {
          "additionalProperties": true,
          "description": "Labels for the notifications controller Deployment",
          "required": [],
          "title": "deploymentLabels",
          "type": "object"
        },
        "deploymentStrategy": {
          "additionalProperties": true,
          "description": "Deployment strategy to be added to the notifications controller Deployment",
          "properties": {
            "type": {
              "default": "Recreate",
              "required": [],
              "title": "type",
              "type": "string"
            }
          },
          "required": [],
          "title": "deploymentStrategy",
          "type": "object"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "[DNS configuration]",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "dnsPolicy": {
          "default": "ClusterFirst",
          "description": "Alternative DNS policy for notifications controller Pods",
          "required": [],
          "title": "dnsPolicy",
          "type": "string"
        },
        "enabled": {
          "default": true,
          "description": "Enable notifications controller",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "extraArgs": {
          "description": "Extra arguments to provide to the notifications controller",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Additional containers to be added to the notifications controller pod\n# Note: Supports use of custom Helm templates",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraEnv": {
          "description": "Additional container environment variables",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "envFrom to pass to the notifications controller",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "List of extra mounts to add (normally used with extraVolumes)",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "List of extra volumes to add",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "image": {
          "additionalProperties": true,
          "description": "# Notifications controller image",
          "properties": {
            "imagePullPolicy": {
              "default": "",
              "description": "Image pull policy for the notifications controller",
              "required": [],
              "title": "imagePullPolicy",
              "type": "string"
            },
            "repository": {
              "default": "",
              "description": "Repository to use for the notifications controller",
              "required": [],
              "title": "repository",
              "type": "string"
            },
            "tag": {
              "default": "",
              "description": "Tag to use for the notifications controller",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "imagePullSecrets": {
          "description": "Secrets with credentials to pull images from a private registry",
          "items": {
            "required": []
          },
          "required": [],
          "title": "imagePullSecrets",
          "type": "array"
        },
        "initContainers": {
          "description": "Init containers to add to the notifications controller pod\n# Note: Supports use of custom Helm templates",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "livenessProbe": {
          "additionalProperties": true,
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enable Kubernetes liveness probe for notifications controller Pods",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "failureThreshold": {
              "default": 3,
              "description": "Minimum consecutive failures for the [probe] to be considered failed after having succeeded",
              "required": [],
              "title": "failureThreshold",
              "type": "integer"
            },
            "initialDelaySeconds": {
              "default": 10,
              "description": "Number of seconds after the container has started before [probe] is initiated",
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 10,
              "description": "How often (in seconds) to perform the [probe]",
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "successThreshold": {
              "default": 1,
              "description": "Minimum consecutive successes for the [probe] to be considered successful after having failed",
              "required": [],
              "title": "successThreshold",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 1,
              "description": "Number of seconds after which the [probe] times out",
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "livenessProbe",
          "type": "object"
        },
        "metrics": {
          "additionalProperties": true,
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enables prometheus metrics server",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "port": {
              "default": 9001,
              "description": "Metrics port",
              "required": [],
              "title": "port",
              "type": "integer"
            },
            "service": {
              "additionalProperties": true,
              "properties": {
                "annotations": {
                  "additionalProperties": true,
                  "description": "Metrics service annotations",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "clusterIP": {
                  "default": "",
                  "description": "Metrics service clusterIP. `None` makes a \"headless service\" (no virtual IP)",
                  "required": [],
                  "title": "clusterIP",
                  "type": "string"
                },
                "labels": {
                  "additionalProperties": true,
                  "description": "Metrics service labels",
                  "required": [],
                  "title": "labels",
                  "type": "object"
                },
                "portName": {
                  "default": "http-metrics",
                  "description": "Metrics service port name",
                  "required": [],
                  "title": "portName",
                  "type": "string"
                },
                "type": {
                  "default": "ClusterIP",
                  "description": "Metrics service type",
                  "required": [],
                  "title": "type",
                  "type": "string"
                }
              },
              "required": [],
              "title": "service",
              "type": "object"
            },
            "serviceMonitor": {
              "additionalProperties": true,
              "properties": {
                "additionalLabels": {
                  "additionalProperties": true,
                  "description": "prometheus: kube-prometheus\nPrometheus ServiceMonitor labels",
                  "required": [],
                  "title": "additionalLabels",
                  "type": "object"
                },
                "annotations": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor annotations",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "enabled": {
                  "default": false,
                  "description": "Enable a prometheus ServiceMonitor",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "honorLabels": {
                  "default": false,
                  "description": "When true, honorLabels preserves the metric’s labels when they collide with the target’s labels.",
                  "required": [],
                  "title": "honorLabels",
                  "type": "boolean"
                },
                "metricRelabelings": {
                  "description": "Prometheus [MetricRelabelConfigs] to apply to samples before ingestion",
                  "items": {
                    "required": []
                  },
                  "required": [],
                  "title": "metricRelabelings",
                  "type": "array"
                },
                "relabelings": {
                  "description": "Prometheus [RelabelConfigs] to apply to samples before scraping",
                  "items": {
                    "required": []
                  },
                  "required": [],
                  "title": "relabelings",
                  "type": "array"
                },
                "scheme": {
                  "default": "",
                  "description": "namespace: monitoring\ninterval: 30s\nscrapeTimeout: 10s\nPrometheus ServiceMonitor scheme",
                  "required": [],
                  "title": "scheme",
                  "type": "string"
                },
                "selector": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor selector",
                  "required": [],
                  "title": "selector",
                  "type": "object"
                },
                "tlsConfig": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor tlsConfig",
                  "required": [],
                  "title": "tlsConfig",
                  "type": "object"
                }
              },
              "required": [],
              "title": "serviceMonitor",
              "type": "object"
            }
          },
          "required": [],
          "title": "metrics",
          "type": "object"
        },
        "name": {
          "default": "notifications-controller",
          "description": "Notifications controller name string",
          "required": [],
          "title": "name",
          "type": "string"
        },
        "networkPolicy": {
          "additionalProperties": true,
          "description": "Default notifications controller's network policy",
          "properties": {
            "create": {
              "default": false,
              "description": "Default network policy rules used by notifications controller",
              "required": [],
              "title": "create",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "networkPolicy",
          "type": "object"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "[Node selector]",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "notifiers": {
          "additionalProperties": true,
          "description": "Configures notification services such as slack, email or custom webhook\n# For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/overview/",
          "required": [],
          "title": "notifiers",
          "type": "object"
        },
        "pdb": {
          "additionalProperties": true,
          "description": "# Notifications controller Pod Disruption Budget\n# Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations to be added to notifications controller pdb",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Deploy a [PodDisruptionBudget] for the notifications controller",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels to be added to notifications controller pdb",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "maxUnavailable": {
              "default": "",
              "description": "Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).\n# Has higher precedence over `notifications.pdb.minAvailable`",
              "required": [],
              "title": "maxUnavailable",
              "type": "string"
            },
            "minAvailable": {
              "default": "",
              "description": "Number of pods that are available after eviction as number or percentage (eg.: 50%)",
              "required": [],
              "title": "minAvailable",
              "type": "string"
            }
          },
          "required": [],
          "title": "pdb",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations to be applied to the notifications controller Pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels to be applied to the notifications controller Pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "",
          "description": "Priority class for the notifications controller pods",
          "required": [],
          "title": "priorityClassName",
          "type": "string"
        },
        "readinessProbe": {
          "additionalProperties": true,
          "description": "# Probes for notifications controller Pods (optional)\n# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enable Kubernetes liveness probe for notifications controller Pods",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "failureThreshold": {
              "default": 3,
              "description": "Minimum consecutive failures for the [probe] to be considered failed after having succeeded",
              "required": [],
              "title": "failureThreshold",
              "type": "integer"
            },
            "initialDelaySeconds": {
              "default": 10,
              "description": "Number of seconds after the container has started before [probe] is initiated",
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 10,
              "description": "How often (in seconds) to perform the [probe]",
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "successThreshold": {
              "default": 1,
              "description": "Minimum consecutive successes for the [probe] to be considered successful after having failed",
              "required": [],
              "title": "successThreshold",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 1,
              "description": "Number of seconds after which the [probe] times out",
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "readinessProbe",
          "type": "object"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource limits and requests for the notifications controller",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "runtimeClassName": {
          "default": "",
          "description": "Runtime class name for the notifications controller",
          "required": [],
          "title": "runtimeClassName",
          "type": "string"
        },
        "secret": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "key:value pairs of annotations to be added to the secret",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "create": {
              "default": true,
              "description": "Whether helm chart creates notifications controller secret\n# If true, will create a secret with the name below. Otherwise, will assume existence of a secret with that name.",
              "required": [],
              "title": "create",
              "type": "boolean"
            },
            "items": {
              "additionalProperties": true,
              "description": "Generic key:value pairs to be inserted into the secret\n# Can be used for templates, notification services etc. Some examples given below.\n# For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/overview/",
              "required": [],
              "title": "items",
              "type": "object"
            },
            "labels": {
              "additionalProperties": true,
              "description": "key:value pairs of labels to be added to the secret",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "name": {
              "default": "argocd-notifications-secret",
              "description": "notifications controller Secret name",
              "required": [],
              "title": "name",
              "type": "string"
            }
          },
          "required": [],
          "title": "secret",
          "type": "object"
        },
        "serviceAccount": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations applied to created service account",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "automountServiceAccountToken": {
              "default": true,
              "description": "Automount API credentials for the Service Account",
              "required": [],
              "title": "automountServiceAccountToken",
              "type": "boolean"
            },
            "create": {
              "default": true,
              "description": "Create notifications controller service account",
              "required": [],
              "title": "create",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels applied to created service account",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "name": {
              "default": "argocd-notifications-controller",
              "description": "Notification controller service account name",
              "required": [],
              "title": "name",
              "type": "string"
            }
          },
          "required": [],
          "title": "serviceAccount",
          "type": "object"
        },
        "subscriptions": {
          "description": "Contains centrally managed global application subscriptions\n# For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/subscriptions/",
          "items": {
            "required": []
          },
          "required": [],
          "title": "subscriptions",
          "type": "array"
        },
        "templates": {
          "additionalProperties": true,
          "description": "The notification template is used to generate the notification content\n# For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/templates/",
          "required": [],
          "title": "templates",
          "type": "object"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "terminationGracePeriodSeconds for container lifecycle hook",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "[Tolerations] for use with node taints",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "Assign custom [TopologySpreadConstraints] rules to the application controller\n# Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/\n# If labelSelector is left out, it will default to the labelSelector configuration of the deployment",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        },
        "triggers": {
          "additionalProperties": true,
          "description": "The trigger defines the condition when the notification should be sent\n# For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/triggers/",
          "required": [],
          "title": "triggers",
          "type": "object"
        }
      },
      "required": [],
      "title": "notifications",
      "type": "object"
    },
    "openshift": {
      "additionalProperties": true,
      "properties": {
        "enabled": {
          "default": false,
          "description": "enables using arbitrary uid for argo repo server",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        }
      },
      "required": [],
      "title": "openshift",
      "type": "object"
    },
    "persistentVolume": {
      "additionalProperties": true,
      "properties": {
        "accessModes": {
          "description": "Persistent volume access modes",
          "items": {
            "required": [],
            "type": "string"
          },
          "required": [],
          "title": "accessModes",
          "type": "array"
        },
        "annotations": {
          "additionalProperties": true,
          "description": "Annotations for the volume",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "enabled": {
          "default": true,
          "description": "Enable persistent volume",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "labels": {
          "additionalProperties": true,
          "description": "Labels for the volume",
          "required": [],
          "title": "labels",
          "type": "object"
        },
        "size": {
          "default": "10Gi",
          "description": "Persistent volume size",
          "required": [],
          "title": "size",
          "type": "string"
        },
        "storageClass": {
          "default": "~",
          "description": "# redis-ha data Persistent Volume Storage Class\n# If defined, storageClassName: \u003cstorageClass\u003e\n# If set to \"-\", storageClassName: \"\", which disables dynamic provisioning\n# If undefined (the default) or set to null, no storageClassName spec is\n#   set, choosing the default provisioner.  (gp2 on AWS, standard on\n#   GKE, AWS \u0026 OpenStack)\n#\nstorageClass: \"-\"\nredis-ha data Persistent Volume Storage Class",
          "required": [],
          "title": "storageClass",
          "type": "null"
        }
      },
      "required": [],
      "title": "persistentVolume",
      "type": "object"
    },
    "podDisruptionBudget": {
      "additionalProperties": true,
      "description": "Pod Disruption Budget rules",
      "required": [],
      "title": "podDisruptionBudget",
      "type": "object"
    },
    "podManagementPolicy": {
      "default": "OrderedReady",
      "description": "# Customize the statefulset pod management policy:\n# ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies\nThe statefulset pod management policy",
      "required": [],
      "title": "podManagementPolicy",
      "type": "string"
    },
    "priorityClassName": {
      "default": "",
      "description": "Kubernetes priorityClass name for the redis-ha-server pod",
      "required": [],
      "title": "priorityClassName",
      "type": "string"
    },
    "prometheusRule": {
      "additionalProperties": true,
      "description": "# Custom PrometheusRule to be defined\n# The value is evaluated as a template, so, for example, the value can depend on .Release or .Chart\n# ref: https://github.com/coreos/prometheus-operator#customresourcedefinitions",
      "properties": {
        "additionalLabels": {
          "additionalProperties": true,
          "description": "Additional labels to be set in metadata.",
          "required": [],
          "title": "additionalLabels",
          "type": "object"
        },
        "enabled": {
          "default": false,
          "description": "If true, creates a Prometheus Operator PrometheusRule.",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "interval": {
          "default": "10s",
          "description": "How often rules in the group are evaluated (falls back to `global.evaluation_interval` if not set).",
          "required": [],
          "title": "interval",
          "type": "string"
        },
        "namespace": {
          "default": "",
          "description": "Namespace which Prometheus is running in.",
          "required": [],
          "title": "namespace",
          "type": "null"
        },
        "rules": {
          "description": "Rules spec template (see https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#rule).",
          "items": {
            "required": []
          },
          "required": [],
          "title": "rules",
          "type": "array"
        }
      },
      "required": [],
      "title": "prometheusRule",
      "type": "object"
    },
    "rbac": {
      "additionalProperties": true,
      "description": "# Role Based Access\n# Ref: https://kubernetes.io/docs/admin/authorization/rbac/\n#",
      "properties": {
        "create": {
          "default": true,
          "description": "Create and use RBAC resources",
          "required": [],
          "title": "create",
          "type": "boolean"
        }
      },
      "required": [],
      "title": "rbac",
      "type": "object"
    },
    "redis": {
      "additionalProperties": true,
      "description": "# Redis",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Assign custom [affinity] rules to the deployment",
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "annotations": {
          "additionalProperties": true,
          "description": "Annotations for the redis statefulset",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "authClients": {
          "default": "",
          "description": "It is possible to disable client side certificates authentication when \"authClients\" is set to \"no\"",
          "required": [],
          "title": "authClients",
          "type": "string"
        },
        "automountServiceAccountToken": {
          "default": true,
          "description": "Automount API credentials for the Service Account into the pod.",
          "required": [],
          "title": "automountServiceAccountToken",
          "type": "boolean"
        },
        "config": {
          "additionalProperties": true,
          "description": "Any valid redis config options in this section will be applied to each server, For multi-value configs use list instead of string (for example loadmodule) (see below)",
          "properties": {
            "maxmemory": {
              "default": "0",
              "description": "Max memory to use for each redis instance. Default is unlimited.",
              "required": [],
              "title": "maxmemory",
              "type": "string"
            },
            "maxmemory-policy": {
              "default": "volatile-lru",
              "description": "Max memory policy to use for each redis instance. Default is volatile-lru.",
              "required": [],
              "title": "maxmemory-policy",
              "type": "string"
            },
            "min-replicas-max-lag": {
              "default": 5,
              "description": "Value in seconds",
              "required": [],
              "title": "min-replicas-max-lag",
              "type": "integer"
            },
            "min-replicas-to-write": {
              "default": 1,
              "description": "# -- Additional redis conf options can be added below\n# -- For all available options see http://download.redis.io/redis-stable/redis.conf",
              "required": [],
              "title": "min-replicas-to-write",
              "type": "integer"
            },
            "rdbchecksum": {
              "default": "yes",
              "required": [],
              "title": "rdbchecksum",
              "type": "string"
            },
            "rdbcompression": {
              "default": "yes",
              "required": [],
              "title": "rdbcompression",
              "type": "string"
            },
            "repl-diskless-sync": {
              "default": "yes",
              "description": "When enabled, directly sends the RDB over the wire to slaves, without using the disk as intermediate storage. Default is false.",
              "required": [],
              "title": "repl-diskless-sync",
              "type": "string"
            },
            "save": {
              "default": "900 1",
              "description": "Determines if scheduled RDB backups are created. Default is false.\nPlease note that local (on-disk) RDBs will still be created when re-syncing with a new slave. The only way to prevent this is to enable diskless replication.",
              "required": [],
              "title": "save",
              "type": "string"
            }
          },
          "required": [],
          "title": "config",
          "type": "object"
        },
        "containerPorts": {
          "additionalProperties": true,
          "description": "Redis container ports",
          "properties": {
            "metrics": {
              "default": 9121,
              "description": "Metrics container port",
              "required": [],
              "title": "metrics",
              "type": "integer"
            },
            "redis": {
              "default": 6379,
              "description": "Redis container port",
              "required": [],
              "title": "redis",
              "type": "integer"
            }
          },
          "required": [],
          "title": "containerPorts",
          "type": "object"
        },
        "containerSecurityContext": {
          "additionalProperties": true,
          "description": "Redis container-level security context",
          "properties": {
            "allowPrivilegeEscalation": {
              "default": false,
              "required": [],
              "title": "allowPrivilegeEscalation",
              "type": "boolean"
            },
            "capabilities": {
              "additionalProperties": true,
              "properties": {
                "drop": {
                  "items": {
                    "required": [],
                    "type": "string"
                  },
                  "required": [],
                  "title": "drop",
                  "type": "array"
                }
              },
              "required": [],
              "title": "capabilities",
              "type": "object"
            },
            "readOnlyRootFilesystem": {
              "default": true,
              "required": [],
              "title": "readOnlyRootFilesystem",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "containerSecurityContext",
          "type": "object"
        },
        "customArgs": {
          "description": "Allows overriding the redis container arguments",
          "items": {
            "required": []
          },
          "required": [],
          "title": "customArgs",
          "type": "array"
        },
        "customCommand": {
          "description": "Allows overriding the redis container command",
          "items": {
            "required": []
          },
          "required": [],
          "title": "customCommand",
          "type": "array"
        },
        "customConfig": {
          "default": "~",
          "description": "(string) Allows for custom redis.conf files to be applied. If this is used then `redis.config` is ignored",
          "required": [],
          "title": "customConfig",
          "type": "null"
        },
        "deploymentAnnotations": {
          "additionalProperties": true,
          "description": "Annotations to be added to the Redis server Deployment",
          "required": [],
          "title": "deploymentAnnotations",
          "type": "object"
        },
        "deploymentLabels": {
          "additionalProperties": true,
          "description": "Labels for the Redis server Deployment",
          "required": [],
          "title": "deploymentLabels",
          "type": "object"
        },
        "disableCommands": {
          "description": "Array with commands to disable",
          "items": {
            "required": [],
            "type": "string"
          },
          "required": [],
          "title": "disableCommands",
          "type": "array"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "[DNS configuration]",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "dnsPolicy": {
          "default": "ClusterFirst",
          "description": "Alternative DNS policy for Redis server pods",
          "required": [],
          "title": "dnsPolicy",
          "type": "string"
        },
        "enabled": {
          "default": true,
          "description": "Enable redis",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "env": {
          "description": "Environment variables to pass to the Redis server",
          "items": {
            "required": []
          },
          "required": [],
          "title": "env",
          "type": "array"
        },
        "envFrom": {
          "description": "envFrom to pass to the Redis server",
          "items": {
            "required": []
          },
          "required": [],
          "title": "envFrom",
          "type": "array"
        },
        "exporter": {
          "additionalProperties": true,
          "description": "# Prometheus redis-exporter sidecar",
          "properties": {
            "containerSecurityContext": {
              "additionalProperties": true,
              "description": "Redis exporter security context",
              "properties": {
                "allowPrivilegeEscalation": {
                  "default": false,
                  "required": [],
                  "title": "allowPrivilegeEscalation",
                  "type": "boolean"
                },
                "capabilities": {
                  "additionalProperties": true,
                  "properties": {
                    "drop": {
                      "items": {
                        "required": [],
                        "type": "string"
                      },
                      "required": [],
                      "title": "drop",
                      "type": "array"
                    }
                  },
                  "required": [],
                  "title": "capabilities",
                  "type": "object"
                },
                "readOnlyRootFilesystem": {
                  "default": true,
                  "required": [],
                  "title": "readOnlyRootFilesystem",
                  "type": "boolean"
                },
                "runAsNonRoot": {
                  "default": true,
                  "required": [],
                  "title": "runAsNonRoot",
                  "type": "boolean"
                },
                "seccompProfile": {
                  "additionalProperties": true,
                  "properties": {
                    "type": {
                      "default": "RuntimeDefault",
                      "required": [],
                      "title": "type",
                      "type": "string"
                    }
                  },
                  "required": [],
                  "title": "seccompProfile",
                  "type": "object"
                }
              },
              "required": [],
              "title": "containerSecurityContext",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Enable Prometheus redis-exporter sidecar",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "env": {
              "description": "Environment variables to pass to the Redis exporter",
              "items": {
                "required": []
              },
              "required": [],
              "title": "env",
              "type": "array"
            },
            "image": {
              "additionalProperties": true,
              "description": "# Prometheus redis-exporter image",
              "properties": {
                "imagePullPolicy": {
                  "default": "",
                  "description": "Image pull policy for the redis-exporter",
                  "required": [],
                  "title": "imagePullPolicy",
                  "type": "string"
                },
                "repository": {
                  "default": "ghcr.io/oliver006/redis_exporter",
                  "description": "Repository to use for the redis-exporter",
                  "required": [],
                  "title": "repository",
                  "type": "string"
                },
                "tag": {
                  "default": "v1.78.0",
                  "description": "Tag to use for the redis-exporter",
                  "required": [],
                  "title": "tag",
                  "type": "string"
                }
              },
              "required": [],
              "title": "image",
              "type": "object"
            },
            "livenessProbe": {
              "additionalProperties": true,
              "properties": {
                "enabled": {
                  "default": false,
                  "description": "Enable Kubernetes liveness probe for Redis exporter",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "failureThreshold": {
                  "default": 5,
                  "description": "Minimum consecutive failures for the [probe] to be considered failed after having succeeded",
                  "required": [],
                  "title": "failureThreshold",
                  "type": "integer"
                },
                "initialDelaySeconds": {
                  "default": 30,
                  "description": "Number of seconds after the container has started before [probe] is initiated",
                  "required": [],
                  "title": "initialDelaySeconds",
                  "type": "integer"
                },
                "periodSeconds": {
                  "default": 15,
                  "description": "How often (in seconds) to perform the [probe]",
                  "required": [],
                  "title": "periodSeconds",
                  "type": "integer"
                },
                "successThreshold": {
                  "default": 1,
                  "description": "Minimum consecutive successes for the [probe] to be considered successful after having failed",
                  "required": [],
                  "title": "successThreshold",
                  "type": "integer"
                },
                "timeoutSeconds": {
                  "default": 15,
                  "description": "Number of seconds after which the [probe] times out",
                  "required": [],
                  "title": "timeoutSeconds",
                  "type": "integer"
                }
              },
              "required": [],
              "title": "livenessProbe",
              "type": "object"
            },
            "readinessProbe": {
              "additionalProperties": true,
              "description": "# Probes for Redis exporter (optional)\n# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
              "properties": {
                "enabled": {
                  "default": false,
                  "description": "Enable Kubernetes liveness probe for Redis exporter (optional)",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "failureThreshold": {
                  "default": 5,
                  "description": "Minimum consecutive failures for the [probe] to be considered failed after having succeeded",
                  "required": [],
                  "title": "failureThreshold",
                  "type": "integer"
                },
                "initialDelaySeconds": {
                  "default": 30,
                  "description": "Number of seconds after the container has started before [probe] is initiated",
                  "required": [],
                  "title": "initialDelaySeconds",
                  "type": "integer"
                },
                "periodSeconds": {
                  "default": 15,
                  "description": "How often (in seconds) to perform the [probe]",
                  "required": [],
                  "title": "periodSeconds",
                  "type": "integer"
                },
                "successThreshold": {
                  "default": 1,
                  "description": "Minimum consecutive successes for the [probe] to be considered successful after having failed",
                  "required": [],
                  "title": "successThreshold",
                  "type": "integer"
                },
                "timeoutSeconds": {
                  "default": 15,
                  "description": "Number of seconds after which the [probe] times out",
                  "required": [],
                  "title": "timeoutSeconds",
                  "type": "integer"
                }
              },
              "required": [],
              "title": "readinessProbe",
              "type": "object"
            },
            "resources": {
              "additionalProperties": true,
              "description": "Resource limits and requests for redis-exporter sidecar",
              "required": [],
              "title": "resources",
              "type": "object"
            }
          },
          "required": [],
          "title": "exporter",
          "type": "object"
        },
        "extraArgs": {
          "description": "Additional command line arguments to pass to redis-server",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Additional containers to be added to the redis pod\n# Note: Supports use of custom Helm templates",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "additional volumeMounts for Redis container",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "image": {
          "additionalProperties": true,
          "description": "# Redis image",
          "properties": {
            "imagePullPolicy": {
              "default": "",
              "description": "Redis image pull policy",
              "required": [],
              "title": "imagePullPolicy",
              "type": "string"
            },
            "repository": {
              "default": "ecr-public.aws.com/docker/library/redis",
              "description": "Redis repository",
              "required": [],
              "title": "repository",
              "type": "string"
            },
            "tag": {
              "default": "7.2.11-alpine",
              "description": "Redis tag\n# Do not upgrade to \u003e= 7.4.0, otherwise you are no longer using an open source version of Redis",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "imagePullSecrets": {
          "description": "Secrets with credentials to pull images from a private registry",
          "items": {
            "required": []
          },
          "required": [],
          "title": "imagePullSecrets",
          "type": "array"
        },
        "initContainers": {
          "description": "Init containers to add to the redis pod\n# Note: Supports use of custom Helm templates",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "lifecycle": {
          "additionalProperties": true,
          "description": "Container Lifecycle Hooks for redis container\nRef: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/",
          "properties": {
            "preStop": {
              "additionalProperties": true,
              "properties": {
                "exec": {
                  "additionalProperties": true,
                  "properties": {
                    "command": {
                      "items": {
                        "required": [],
                        "type": "string"
                      },
                      "required": [],
                      "title": "command",
                      "type": "array"
                    }
                  },
                  "required": [],
                  "title": "exec",
                  "type": "object"
                }
              },
              "required": [],
              "title": "preStop",
              "type": "object"
            }
          },
          "required": [],
          "title": "lifecycle",
          "type": "object"
        },
        "livenessProbe": {
          "additionalProperties": true,
          "description": "Liveness probe parameters for redis container",
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enable Kubernetes liveness probe for Redis server",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "failureThreshold": {
              "default": 5,
              "description": "Minimum consecutive failures for the [probe] to be considered failed after having succeeded",
              "required": [],
              "title": "failureThreshold",
              "type": "integer"
            },
            "initialDelaySeconds": {
              "default": 30,
              "description": "Number of seconds after the container has started before [probe] is initiated",
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 15,
              "description": "How often (in seconds) to perform the [probe]",
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "successThreshold": {
              "default": 1,
              "description": "Minimum consecutive successes for the [probe] to be considered successful after having failed",
              "required": [],
              "title": "successThreshold",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 15,
              "description": "Number of seconds after which the [probe] times out",
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "livenessProbe",
          "type": "object"
        },
        "masterGroupName": {
          "default": "mymaster",
          "description": "Redis convention for naming the cluster group: must match `^[\\\\w-\\\\.]+$` and can be templated",
          "required": [],
          "title": "masterGroupName",
          "type": "string"
        },
        "metrics": {
          "additionalProperties": true,
          "properties": {
            "enabled": {
              "default": false,
              "description": "Deploy metrics service",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "service": {
              "additionalProperties": true,
              "description": "Redis metrics service configuration",
              "properties": {
                "annotations": {
                  "additionalProperties": true,
                  "description": "Metrics service annotations",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "clusterIP": {
                  "default": "None",
                  "description": "Metrics service clusterIP. `None` makes a \"headless service\" (no virtual IP)",
                  "required": [],
                  "title": "clusterIP",
                  "type": "string"
                },
                "labels": {
                  "additionalProperties": true,
                  "description": "Metrics service labels",
                  "required": [],
                  "title": "labels",
                  "type": "object"
                },
                "portName": {
                  "default": "http-metrics",
                  "description": "Metrics service port name",
                  "required": [],
                  "title": "portName",
                  "type": "string"
                },
                "servicePort": {
                  "default": 9121,
                  "description": "Metrics service port",
                  "required": [],
                  "title": "servicePort",
                  "type": "integer"
                },
                "type": {
                  "default": "ClusterIP",
                  "description": "Metrics service type",
                  "required": [],
                  "title": "type",
                  "type": "string"
                }
              },
              "required": [],
              "title": "service",
              "type": "object"
            },
            "serviceMonitor": {
              "additionalProperties": true,
              "properties": {
                "additionalLabels": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor labels",
                  "required": [],
                  "title": "additionalLabels",
                  "type": "object"
                },
                "annotations": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor annotations",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "enabled": {
                  "default": false,
                  "description": "Enable a prometheus ServiceMonitor",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "honorLabels": {
                  "default": false,
                  "description": "When true, honorLabels preserves the metric’s labels when they collide with the target’s labels.",
                  "required": [],
                  "title": "honorLabels",
                  "type": "boolean"
                },
                "interval": {
                  "default": "30s",
                  "description": "Interval at which metrics should be scraped",
                  "required": [],
                  "title": "interval",
                  "type": "string"
                },
                "metricRelabelings": {
                  "description": "Prometheus [MetricRelabelConfigs] to apply to samples before ingestion",
                  "items": {
                    "required": []
                  },
                  "required": [],
                  "title": "metricRelabelings",
                  "type": "array"
                },
                "namespace": {
                  "default": "",
                  "description": "Prometheus ServiceMonitor namespace",
                  "required": [],
                  "title": "namespace",
                  "type": "string"
                },
                "relabelings": {
                  "description": "Prometheus [RelabelConfigs] to apply to samples before scraping",
                  "items": {
                    "required": []
                  },
                  "required": [],
                  "title": "relabelings",
                  "type": "array"
                },
                "scheme": {
                  "default": "",
                  "description": "Prometheus ServiceMonitor scheme",
                  "required": [],
                  "title": "scheme",
                  "type": "string"
                },
                "selector": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor selector",
                  "required": [],
                  "title": "selector",
                  "type": "object"
                },
                "tlsConfig": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor tlsConfig",
                  "required": [],
                  "title": "tlsConfig",
                  "type": "object"
                }
              },
              "required": [],
              "title": "serviceMonitor",
              "type": "object"
            }
          },
          "required": [],
          "title": "metrics",
          "type": "object"
        },
        "name": {
          "default": "redis",
          "description": "Redis name",
          "required": [],
          "title": "name",
          "type": "string"
        },
        "networkPolicy": {
          "additionalProperties": true,
          "description": "Default redis's network policy",
          "properties": {
            "create": {
              "default": false,
              "description": "Default network policy rules used by redis",
              "required": [],
              "title": "create",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "networkPolicy",
          "type": "object"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "[Node selector]",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "pdb": {
          "additionalProperties": true,
          "description": "# Redis Pod Disruption Budget\n# Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations to be added to Redis pdb",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Deploy a [PodDisruptionBudget] for the Redis",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels to be added to Redis pdb",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "maxUnavailable": {
              "default": "",
              "description": "Number of pods that are unavailble after eviction as number or percentage (eg.: 50%).\n# Has higher precedence over `redis.pdb.minAvailable`",
              "required": [],
              "title": "maxUnavailable",
              "type": "string"
            },
            "minAvailable": {
              "default": "",
              "description": "Number of pods that are available after eviction as number or percentage (eg.: 50%)",
              "required": [],
              "title": "minAvailable",
              "type": "string"
            }
          },
          "required": [],
          "title": "pdb",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations to be added to the Redis server pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels to be added to the Redis server pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "port": {
          "default": 6379,
          "description": "Port to access the redis service",
          "required": [],
          "title": "port",
          "type": "integer"
        },
        "priorityClassName": {
          "default": "",
          "description": "Priority class for redis pods",
          "required": [],
          "title": "priorityClassName",
          "type": "string"
        },
        "readinessProbe": {
          "additionalProperties": true,
          "description": "# Probes for Redis server (optional)\n# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enable Kubernetes liveness probe for Redis server",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "failureThreshold": {
              "default": 5,
              "description": "Minimum consecutive failures for the [probe] to be considered failed after having succeeded",
              "required": [],
              "title": "failureThreshold",
              "type": "integer"
            },
            "initialDelaySeconds": {
              "default": 30,
              "description": "Number of seconds after the container has started before [probe] is initiated",
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 15,
              "description": "How often (in seconds) to perform the [probe]",
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "successThreshold": {
              "default": 1,
              "description": "Minimum consecutive successes for the [probe] to be considered successful after having failed",
              "required": [],
              "title": "successThreshold",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 15,
              "description": "Number of seconds after which the [probe] times out",
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "readinessProbe",
          "type": "object"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource limits and requests for redis",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "runtimeClassName": {
          "default": "",
          "description": "Runtime class name for redis",
          "required": [],
          "title": "runtimeClassName",
          "type": "string"
        },
        "securityContext": {
          "additionalProperties": true,
          "description": "Redis pod-level security context",
          "properties": {
            "runAsNonRoot": {
              "default": true,
              "required": [],
              "title": "runAsNonRoot",
              "type": "boolean"
            },
            "runAsUser": {
              "default": 999,
              "required": [],
              "title": "runAsUser",
              "type": "integer"
            },
            "seccompProfile": {
              "additionalProperties": true,
              "properties": {
                "type": {
                  "default": "RuntimeDefault",
                  "required": [],
                  "title": "type",
                  "type": "string"
                }
              },
              "required": [],
              "title": "seccompProfile",
              "type": "object"
            }
          },
          "required": [],
          "title": "securityContext",
          "type": "object"
        },
        "service": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Redis service annotations",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Additional redis service labels",
              "required": [],
              "title": "labels",
              "type": "object"
            }
          },
          "required": [],
          "title": "service",
          "type": "object"
        },
        "serviceAccount": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations applied to created service account",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "automountServiceAccountToken": {
              "default": false,
              "description": "Automount API credentials for the Service Account",
              "required": [],
              "title": "automountServiceAccountToken",
              "type": "boolean"
            },
            "create": {
              "default": false,
              "description": "Create a service account for the redis pod",
              "required": [],
              "title": "create",
              "type": "boolean"
            },
            "name": {
              "default": "",
              "description": "Service account name for redis pod",
              "required": [],
              "title": "name",
              "type": "string"
            }
          },
          "required": [],
          "title": "serviceAccount",
          "type": "object"
        },
        "servicePort": {
          "default": 6379,
          "description": "Redis service port",
          "required": [],
          "title": "servicePort",
          "type": "integer"
        },
        "startupProbe": {
          "additionalProperties": true,
          "description": "Startup probe parameters for redis container",
          "properties": {
            "enabled": {
              "default": true,
              "description": "Enable Startup Probe",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "failureThreshold": {
              "default": 5,
              "description": "Failure threshold for startup probe",
              "required": [],
              "title": "failureThreshold",
              "type": "integer"
            },
            "initialDelaySeconds": {
              "default": 30,
              "description": "Initial delay in seconds for startup probe",
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 15,
              "description": "Period in seconds after which startup probe will be repeated",
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "successThreshold": {
              "default": 1,
              "description": "Success threshold for startup probe",
              "required": [],
              "title": "successThreshold",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 15,
              "description": "Timeout seconds for startup probe",
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "startupProbe",
          "type": "object"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "terminationGracePeriodSeconds for container lifecycle hook",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tlsPort": {
          "default": "~",
          "description": "# Configures redis with tls-port parameter\n(int) TLS Port to access the redis service",
          "required": [],
          "title": "tlsPort",
          "type": "null"
        },
        "tlsReplication": {
          "default": "~",
          "description": "(bool) Configures redis with tls-replication parameter, if true sets \"tls-replication yes\" in redis.conf",
          "required": [],
          "title": "tlsReplication",
          "type": "null"
        },
        "tolerations": {
          "description": "[Tolerations] for use with node taints",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "Assign custom [TopologySpreadConstraints] rules to redis\n# Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/\n# If labelSelector is left out, it will default to the labelSelector configuration of the deployment",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        },
        "updateStrategy": {
          "additionalProperties": true,
          "description": "Update strategy for Redis StatefulSet\n# ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies",
          "properties": {
            "type": {
              "default": "RollingUpdate",
              "required": [],
              "title": "type",
              "type": "string"
            }
          },
          "required": [],
          "title": "updateStrategy",
          "type": "object"
        },
        "volumeMounts": {
          "description": "Additional volumeMounts to the redis container",
          "items": {
            "required": []
          },
          "required": [],
          "title": "volumeMounts",
          "type": "array"
        },
        "volumes": {
          "description": "Additional volumes to the redis pod",
          "items": {
            "required": []
          },
          "required": [],
          "title": "volumes",
          "type": "array"
        }
      },
      "required": [],
      "title": "redis",
      "type": "object"
    },
    "redis-ha": {
      "additionalProperties": true,
      "description": "# Redis-HA subchart replaces custom redis deployment when `redis-ha.enabled=true`\nRef: https://github.com/DandyDeveloper/charts/blob/master/charts/redis-ha/values.yaml",
      "properties": {
        "additionalAffinities": {
          "additionalProperties": true,
          "description": "Additional affinities to add to the Redis server pods.",
          "required": [],
          "title": "additionalAffinities",
          "type": "object"
        },
        "affinity": {
          "default": "",
          "description": "Assign custom [affinity] rules to the Redis pods.",
          "required": [],
          "title": "affinity",
          "type": "string"
        },
        "auth": {
          "default": true,
          "description": "Configures redis-ha with AUTH",
          "required": [],
          "title": "auth",
          "type": "boolean"
        },
        "containerSecurityContext": {
          "additionalProperties": true,
          "description": "Redis HA statefulset container-level security context",
          "properties": {
            "readOnlyRootFilesystem": {
              "default": true,
              "required": [],
              "title": "readOnlyRootFilesystem",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "containerSecurityContext",
          "type": "object"
        },
        "enabled": {
          "default": false,
          "description": "Enables the Redis HA subchart and disables the custom Redis single node deployment",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "existingSecret": {
          "default": "argocd-redis",
          "description": "Existing Secret to use for redis-ha authentication.\nBy default the redis-secret-init Job is generating this Secret.",
          "required": [],
          "title": "existingSecret",
          "type": "string"
        },
        "exporter": {
          "additionalProperties": true,
          "description": "# Prometheus redis-exporter sidecar",
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enable Prometheus redis-exporter sidecar",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "image": {
              "default": "ghcr.io/oliver006/redis_exporter",
              "description": "Repository to use for the redis-exporter",
              "required": [],
              "title": "image",
              "type": "string"
            },
            "tag": {
              "default": "v1.75.0",
              "description": "Tag to use for the redis-exporter",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [],
          "title": "exporter",
          "type": "object"
        },
        "haproxy": {
          "additionalProperties": true,
          "description": "# Enables a HA Proxy for better LoadBalancing / Sentinel Master support. Automatically proxies to Redis master.",
          "properties": {
            "additionalAffinities": {
              "additionalProperties": true,
              "description": "Additional affinities to add to the haproxy pods.",
              "required": [],
              "title": "additionalAffinities",
              "type": "object"
            },
            "affinity": {
              "default": "",
              "description": "Assign custom [affinity] rules to the haproxy pods.",
              "required": [],
              "title": "affinity",
              "type": "string"
            },
            "containerSecurityContext": {
              "additionalProperties": true,
              "description": "HAProxy container-level security context",
              "properties": {
                "readOnlyRootFilesystem": {
                  "default": true,
                  "required": [],
                  "title": "readOnlyRootFilesystem",
                  "type": "boolean"
                }
              },
              "required": [],
              "title": "containerSecurityContext",
              "type": "object"
            },
            "enabled": {
              "default": true,
              "description": "Enabled HAProxy LoadBalancing/Proxy",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "hardAntiAffinity": {
              "default": true,
              "description": "Whether the haproxy pods should be forced to run on separate nodes.",
              "required": [],
              "title": "hardAntiAffinity",
              "type": "boolean"
            },
            "image": {
              "additionalProperties": true,
              "properties": {
                "repository": {
                  "default": "ecr-public.aws.com/docker/library/haproxy",
                  "description": "HAProxy Image Repository",
                  "required": [],
                  "title": "repository",
                  "type": "string"
                }
              },
              "required": [],
              "title": "image",
              "type": "object"
            },
            "labels": {
              "additionalProperties": true,
              "description": " Custom labels for the haproxy pod. This is relevant for Argo CD CLI.",
              "properties": {
                "app.kubernetes.io/name": {
                  "default": "argocd-redis-ha-haproxy",
                  "required": [],
                  "title": "app.kubernetes.io/name",
                  "type": "string"
                }
              },
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "metrics": {
              "additionalProperties": true,
              "properties": {
                "enabled": {
                  "default": true,
                  "description": "HAProxy enable prometheus metric scraping",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                }
              },
              "required": [],
              "title": "metrics",
              "type": "object"
            },
            "tolerations": {
              "description": "[Tolerations] for use with node taints for haproxy pods.",
              "items": {
                "required": []
              },
              "required": [],
              "title": "tolerations",
              "type": "array"
            }
          },
          "required": [],
          "title": "haproxy",
          "type": "object"
        },
        "hardAntiAffinity": {
          "default": true,
          "description": "Whether the Redis server pods should be forced to run on separate nodes.",
          "required": [],
          "title": "hardAntiAffinity",
          "type": "boolean"
        },
        "image": {
          "additionalProperties": true,
          "description": "# Redis image",
          "properties": {
            "repository": {
              "default": "ecr-public.aws.com/docker/library/redis",
              "description": "Redis repository",
              "required": [],
              "title": "repository",
              "type": "string"
            },
            "tag": {
              "default": "7.2.11-alpine",
              "description": "Redis tag\n# Do not upgrade to \u003e= 7.4.0, otherwise you are no longer using an open source version of Redis",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "persistentVolume": {
          "additionalProperties": true,
          "properties": {
            "enabled": {
              "default": false,
              "description": "Configures persistence on Redis nodes",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "persistentVolume",
          "type": "object"
        },
        "redis": {
          "additionalProperties": true,
          "description": "# Redis specific configuration options",
          "properties": {
            "config": {
              "additionalProperties": true,
              "description": "Any valid redis config options in this section will be applied to each server (see `redis-ha` chart)",
              "properties": {
                "save": {
                  "default": "\"\"",
                  "description": "Will save the DB if both the given number of seconds and the given number of write operations against the DB occurred. `\"\"`  is disabled",
                  "required": [],
                  "title": "save",
                  "type": "string"
                }
              },
              "required": [],
              "title": "config",
              "type": "object"
            },
            "masterGroupName": {
              "default": "argocd",
              "description": "Redis convention for naming the cluster group: must match `^[\\\\w-\\\\.]+$` and can be templated",
              "required": [],
              "title": "masterGroupName",
              "type": "string"
            }
          },
          "required": [],
          "title": "redis",
          "type": "object"
        },
        "tolerations": {
          "description": "[Tolerations] for use with node taints for Redis pods.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "additionalProperties": true,
          "description": "Assign custom [TopologySpreadConstraints] rules to the Redis pods.\n# https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/",
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enable Redis HA topology spread constraints",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "maxSkew": {
              "default": "",
              "description": "Max skew of pods tolerated",
              "required": [],
              "title": "maxSkew",
              "type": "string"
            },
            "topologyKey": {
              "default": "",
              "description": "Topology key for spread",
              "required": [],
              "title": "topologyKey",
              "type": "string"
            },
            "whenUnsatisfiable": {
              "default": "",
              "description": "Enforcement policy, hard or soft",
              "required": [],
              "title": "whenUnsatisfiable",
              "type": "string"
            }
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "object"
        }
      },
      "required": [],
      "title": "redis-ha",
      "type": "object"
    },
    "redisPassword": {
      "default": "~",
      "description": "(string) A password that configures a `requirepass` and `masterauth` in the conf parameters (Requires `auth: enabled`)",
      "required": [],
      "title": "redisPassword",
      "type": "null"
    },
    "redisSecretInit": {
      "additionalProperties": true,
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Assign custom [affinity] rules to the Redis secret-init Job",
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "containerSecurityContext": {
          "additionalProperties": true,
          "description": "Application controller container-level security context",
          "properties": {
            "allowPrivilegeEscalation": {
              "default": false,
              "required": [],
              "title": "allowPrivilegeEscalation",
              "type": "boolean"
            },
            "capabilities": {
              "additionalProperties": true,
              "properties": {
                "drop": {
                  "items": {
                    "required": [],
                    "type": "string"
                  },
                  "required": [],
                  "title": "drop",
                  "type": "array"
                }
              },
              "required": [],
              "title": "capabilities",
              "type": "object"
            },
            "readOnlyRootFilesystem": {
              "default": true,
              "required": [],
              "title": "readOnlyRootFilesystem",
              "type": "boolean"
            },
            "runAsNonRoot": {
              "default": true,
              "required": [],
              "title": "runAsNonRoot",
              "type": "boolean"
            },
            "seccompProfile": {
              "additionalProperties": true,
              "properties": {
                "type": {
                  "default": "RuntimeDefault",
                  "required": [],
                  "title": "type",
                  "type": "string"
                }
              },
              "required": [],
              "title": "seccompProfile",
              "type": "object"
            }
          },
          "required": [],
          "title": "containerSecurityContext",
          "type": "object"
        },
        "enabled": {
          "default": true,
          "description": "Enable Redis secret initialization. If disabled, secret must be provisioned by alternative methods",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "extraArgs": {
          "description": "Additional command line arguments for the Redis secret-init Job",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "imagePullPolicy": {
              "default": "",
              "description": "Image pull policy for the Redis secret-init Job",
              "required": [],
              "title": "imagePullPolicy",
              "type": "string"
            },
            "repository": {
              "default": "",
              "description": "Repository to use for the Redis secret-init Job",
              "required": [],
              "title": "repository",
              "type": "string"
            },
            "tag": {
              "default": "",
              "description": "Tag to use for the Redis secret-init Job",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "imagePullSecrets": {
          "description": "Secrets with credentials to pull images from a private registry",
          "items": {
            "required": []
          },
          "required": [],
          "title": "imagePullSecrets",
          "type": "array"
        },
        "jobAnnotations": {
          "additionalProperties": true,
          "description": "Annotations to be added to the Redis secret-init Job",
          "required": [],
          "title": "jobAnnotations",
          "type": "object"
        },
        "name": {
          "default": "redis-secret-init",
          "description": "Redis secret-init name",
          "required": [],
          "title": "name",
          "type": "string"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector to be added to the Redis secret-init Job",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations to be added to the Redis secret-init Job",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels to be added to the Redis secret-init Job",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "",
          "description": "Priority class for Redis secret-init Job",
          "required": [],
          "title": "priorityClassName",
          "type": "string"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource limits and requests for Redis secret-init Job",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "runtimeClassName": {
          "default": "",
          "description": "Runtime class name for the Redis secret-init Job",
          "required": [],
          "title": "runtimeClassName",
          "type": "string"
        },
        "securityContext": {
          "additionalProperties": true,
          "description": "Redis secret-init Job pod-level security context",
          "required": [],
          "title": "securityContext",
          "type": "object"
        },
        "serviceAccount": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations applied to created service account",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "automountServiceAccountToken": {
              "default": true,
              "description": "Automount API credentials for the Service Account",
              "required": [],
              "title": "automountServiceAccountToken",
              "type": "boolean"
            },
            "create": {
              "default": true,
              "description": "Create a service account for the redis pod",
              "required": [],
              "title": "create",
              "type": "boolean"
            },
            "name": {
              "default": "",
              "description": "Service account name for redis pod",
              "required": [],
              "title": "name",
              "type": "string"
            }
          },
          "required": [],
          "title": "serviceAccount",
          "type": "object"
        },
        "tolerations": {
          "description": "Tolerations to be added to the Redis secret-init Job",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        }
      },
      "required": [],
      "title": "redisSecretInit",
      "type": "object"
    },
    "replicas": {
      "default": 3,
      "description": "Number of redis master/slave",
      "required": [],
      "title": "replicas",
      "type": "integer"
    },
    "repoServer": {
      "additionalProperties": true,
      "description": "# Repo Server",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Assign custom [affinity] rules to the deployment",
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "automountServiceAccountToken": {
          "default": true,
          "description": "Automount API credentials for the Service Account into the pod.",
          "required": [],
          "title": "automountServiceAccountToken",
          "type": "boolean"
        },
        "autoscaling": {
          "additionalProperties": true,
          "description": "# Repo server Horizontal Pod Autoscaler",
          "properties": {
            "behavior": {
              "additionalProperties": true,
              "description": "Configures the scaling behavior of the target in both Up and Down directions.",
              "required": [],
              "title": "behavior",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Enable Horizontal Pod Autoscaler ([HPA]) for the repo server",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "maxReplicas": {
              "default": 5,
              "description": "Maximum number of replicas for the repo server [HPA]",
              "required": [],
              "title": "maxReplicas",
              "type": "integer"
            },
            "metrics": {
              "description": "scaleDown:\n stabilizationWindowSeconds: 300\n policies:\n  - type: Pods\n    value: 1\n    periodSeconds: 180\nscaleUp:\n  stabilizationWindowSeconds: 300\n  policies:\n  - type: Pods\n    value: 2\n    periodSeconds: 60\nConfigures custom HPA metrics for the Argo CD repo server\nRef: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/",
              "items": {
                "required": []
              },
              "required": [],
              "title": "metrics",
              "type": "array"
            },
            "minReplicas": {
              "default": 1,
              "description": "Minimum number of replicas for the repo server [HPA]",
              "required": [],
              "title": "minReplicas",
              "type": "integer"
            },
            "targetCPUUtilizationPercentage": {
              "default": 50,
              "description": "Average CPU utilization percentage for the repo server [HPA]",
              "required": [],
              "title": "targetCPUUtilizationPercentage",
              "type": "integer"
            },
            "targetMemoryUtilizationPercentage": {
              "default": 50,
              "description": "Average memory utilization percentage for the repo server [HPA]",
              "required": [],
              "title": "targetMemoryUtilizationPercentage",
              "type": "integer"
            }
          },
          "required": [],
          "title": "autoscaling",
          "type": "object"
        },
        "certificateSecret": {
          "additionalProperties": true,
          "description": "TLS certificate configuration via Secret\n# Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#configuring-tls-to-argocd-repo-server\n# Note: Issuing certificates via cert-manager in not supported right now because it's not possible to restart repo server automatically without extra controllers.",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations to be added to argocd-repo-server-tls secret",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "ca": {
              "default": "",
              "description": "Certificate authority. Required for self-signed certificates.",
              "required": [],
              "title": "ca",
              "type": "string"
            },
            "crt": {
              "default": "",
              "description": "Certificate data. Must contain SANs of Repo service (ie: argocd-repo-server, argocd-repo-server.argo-cd.svc)",
              "required": [],
              "title": "crt",
              "type": "string"
            },
            "enabled": {
              "default": false,
              "description": "Create argocd-repo-server-tls secret",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "key": {
              "default": "",
              "description": "Certificate private key",
              "required": [],
              "title": "key",
              "type": "string"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels to be added to argocd-repo-server-tls secret",
              "required": [],
              "title": "labels",
              "type": "object"
            }
          },
          "required": [],
          "title": "certificateSecret",
          "type": "object"
        },
        "clusterRoleRules": {
          "additionalProperties": true,
          "description": "# Enable Custom Rules for the Repo server's Cluster Role resource\n# Enable this and set the rules: to whatever custom rules you want for the Cluster Role resource.\n# Defaults to off",
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enable custom rules for the Repo server's Cluster Role resource",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "rules": {
              "description": "List of custom rules for the Repo server's Cluster Role resource",
              "items": {
                "required": []
              },
              "required": [],
              "title": "rules",
              "type": "array"
            }
          },
          "required": [],
          "title": "clusterRoleRules",
          "type": "object"
        },
        "containerPorts": {
          "additionalProperties": true,
          "description": "Repo server container ports",
          "properties": {
            "metrics": {
              "default": 8084,
              "description": "Metrics container port",
              "required": [],
              "title": "metrics",
              "type": "integer"
            },
            "server": {
              "default": 8081,
              "description": "Repo server container port",
              "required": [],
              "title": "server",
              "type": "integer"
            }
          },
          "required": [],
          "title": "containerPorts",
          "type": "object"
        },
        "containerSecurityContext": {
          "additionalProperties": true,
          "description": "Repo server container-level security context",
          "properties": {
            "allowPrivilegeEscalation": {
              "default": false,
              "required": [],
              "title": "allowPrivilegeEscalation",
              "type": "boolean"
            },
            "capabilities": {
              "additionalProperties": true,
              "properties": {
                "drop": {
                  "items": {
                    "required": [],
                    "type": "string"
                  },
                  "required": [],
                  "title": "drop",
                  "type": "array"
                }
              },
              "required": [],
              "title": "capabilities",
              "type": "object"
            },
            "readOnlyRootFilesystem": {
              "default": true,
              "required": [],
              "title": "readOnlyRootFilesystem",
              "type": "boolean"
            },
            "runAsNonRoot": {
              "default": true,
              "required": [],
              "title": "runAsNonRoot",
              "type": "boolean"
            },
            "seccompProfile": {
              "additionalProperties": true,
              "properties": {
                "type": {
                  "default": "RuntimeDefault",
                  "required": [],
                  "title": "type",
                  "type": "string"
                }
              },
              "required": [],
              "title": "seccompProfile",
              "type": "object"
            }
          },
          "required": [],
          "title": "containerSecurityContext",
          "type": "object"
        },
        "copyutil": {
          "additionalProperties": true,
          "properties": {
            "resources": {
              "additionalProperties": true,
              "description": "Resource limits and requests for the repo server copyutil initContainer",
              "required": [],
              "title": "resources",
              "type": "object"
            }
          },
          "required": [],
          "title": "copyutil",
          "type": "object"
        },
        "deploymentAnnotations": {
          "additionalProperties": true,
          "description": "Annotations to be added to repo server Deployment",
          "required": [],
          "title": "deploymentAnnotations",
          "type": "object"
        },
        "deploymentLabels": {
          "additionalProperties": true,
          "description": "Labels for the repo server Deployment",
          "required": [],
          "title": "deploymentLabels",
          "type": "object"
        },
        "deploymentStrategy": {
          "additionalProperties": true,
          "description": "Deployment strategy to be added to the repo server Deployment",
          "required": [],
          "title": "deploymentStrategy",
          "type": "object"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "[DNS configuration]",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "dnsPolicy": {
          "default": "ClusterFirst",
          "description": "Alternative DNS policy for Repo server pods",
          "required": [],
          "title": "dnsPolicy",
          "type": "string"
        },
        "emptyDir": {
          "additionalProperties": true,
          "description": "# RepoServer emptyDir volumes",
          "properties": {
            "sizeLimit": {
              "default": "",
              "description": "EmptyDir size limit for repo server",
              "required": [],
              "title": "sizeLimit",
              "type": "string"
            }
          },
          "required": [],
          "title": "emptyDir",
          "type": "object"
        },
        "env": {
          "description": "Environment variables to pass to repo server",
          "items": {
            "required": []
          },
          "required": [],
          "title": "env",
          "type": "array"
        },
        "envFrom": {
          "description": "envFrom to pass to repo server",
          "items": {
            "required": []
          },
          "required": [],
          "title": "envFrom",
          "type": "array"
        },
        "existingVolumes": {
          "additionalProperties": true,
          "description": "Volumes to be used in replacement of emptydir on default volumes",
          "required": [],
          "title": "existingVolumes",
          "type": "object"
        },
        "extraArgs": {
          "description": "Additional command line arguments to pass to repo server",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Additional containers to be added to the repo server pod\n# Ref: https://argo-cd.readthedocs.io/en/stable/user-guide/config-management-plugins/\n# Note: Supports use of custom Helm templates",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "hostNetwork": {
          "default": false,
          "description": "Host Network for Repo server pods",
          "required": [],
          "title": "hostNetwork",
          "type": "boolean"
        },
        "image": {
          "additionalProperties": true,
          "description": "# Repo server image",
          "properties": {
            "imagePullPolicy": {
              "default": "",
              "description": "Image pull policy for the repo server",
              "required": [],
              "title": "imagePullPolicy",
              "type": "string"
            },
            "repository": {
              "default": "",
              "description": "Repository to use for the repo server",
              "required": [],
              "title": "repository",
              "type": "string"
            },
            "tag": {
              "default": "",
              "description": "Tag to use for the repo server",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "imagePullSecrets": {
          "description": "Secrets with credentials to pull images from a private registry",
          "items": {
            "required": []
          },
          "required": [],
          "title": "imagePullSecrets",
          "type": "array"
        },
        "initContainers": {
          "description": "Init containers to add to the repo server pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "lifecycle": {
          "additionalProperties": true,
          "description": "Specify postStart and preStop lifecycle hooks for your argo-repo-server container",
          "required": [],
          "title": "lifecycle",
          "type": "object"
        },
        "livenessProbe": {
          "additionalProperties": true,
          "properties": {
            "failureThreshold": {
              "default": 3,
              "description": "Minimum consecutive failures for the [probe] to be considered failed after having succeeded",
              "required": [],
              "title": "failureThreshold",
              "type": "integer"
            },
            "initialDelaySeconds": {
              "default": 10,
              "description": "Number of seconds after the container has started before [probe] is initiated",
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 10,
              "description": "How often (in seconds) to perform the [probe]",
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "successThreshold": {
              "default": 1,
              "description": "Minimum consecutive successes for the [probe] to be considered successful after having failed",
              "required": [],
              "title": "successThreshold",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 1,
              "description": "Number of seconds after which the [probe] times out",
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "livenessProbe",
          "type": "object"
        },
        "metrics": {
          "additionalProperties": true,
          "description": "# Repo server metrics service configuration",
          "properties": {
            "enabled": {
              "default": false,
              "description": "Deploy metrics service",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "service": {
              "additionalProperties": true,
              "properties": {
                "annotations": {
                  "additionalProperties": true,
                  "description": "Metrics service annotations",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "clusterIP": {
                  "default": "",
                  "description": "Metrics service clusterIP. `None` makes a \"headless service\" (no virtual IP)",
                  "required": [],
                  "title": "clusterIP",
                  "type": "string"
                },
                "labels": {
                  "additionalProperties": true,
                  "description": "Metrics service labels",
                  "required": [],
                  "title": "labels",
                  "type": "object"
                },
                "portName": {
                  "default": "http-metrics",
                  "description": "Metrics service port name",
                  "required": [],
                  "title": "portName",
                  "type": "string"
                },
                "servicePort": {
                  "default": 8084,
                  "description": "Metrics service port",
                  "required": [],
                  "title": "servicePort",
                  "type": "integer"
                },
                "type": {
                  "default": "ClusterIP",
                  "description": "Metrics service type",
                  "required": [],
                  "title": "type",
                  "type": "string"
                }
              },
              "required": [],
              "title": "service",
              "type": "object"
            },
            "serviceMonitor": {
              "additionalProperties": true,
              "properties": {
                "additionalLabels": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor labels",
                  "required": [],
                  "title": "additionalLabels",
                  "type": "object"
                },
                "annotations": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor annotations",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "enabled": {
                  "default": false,
                  "description": "Enable a prometheus ServiceMonitor",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "honorLabels": {
                  "default": false,
                  "description": "When true, honorLabels preserves the metric’s labels when they collide with the target’s labels.",
                  "required": [],
                  "title": "honorLabels",
                  "type": "boolean"
                },
                "interval": {
                  "default": "30s",
                  "description": "Prometheus ServiceMonitor interval",
                  "required": [],
                  "title": "interval",
                  "type": "string"
                },
                "metricRelabelings": {
                  "description": "Prometheus [MetricRelabelConfigs] to apply to samples before ingestion",
                  "items": {
                    "required": []
                  },
                  "required": [],
                  "title": "metricRelabelings",
                  "type": "array"
                },
                "namespace": {
                  "default": "",
                  "description": "Prometheus ServiceMonitor namespace",
                  "required": [],
                  "title": "namespace",
                  "type": "string"
                },
                "relabelings": {
                  "description": "Prometheus [RelabelConfigs] to apply to samples before scraping",
                  "items": {
                    "required": []
                  },
                  "required": [],
                  "title": "relabelings",
                  "type": "array"
                },
                "scheme": {
                  "default": "",
                  "description": "Prometheus ServiceMonitor scheme",
                  "required": [],
                  "title": "scheme",
                  "type": "string"
                },
                "scrapeTimeout": {
                  "default": "",
                  "description": "Prometheus ServiceMonitor scrapeTimeout. If empty, Prometheus uses the global scrape timeout unless it is less than the target's scrape interval value in which the latter is used.",
                  "required": [],
                  "title": "scrapeTimeout",
                  "type": "string"
                },
                "selector": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor selector",
                  "required": [],
                  "title": "selector",
                  "type": "object"
                },
                "tlsConfig": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor tlsConfig",
                  "required": [],
                  "title": "tlsConfig",
                  "type": "object"
                }
              },
              "required": [],
              "title": "serviceMonitor",
              "type": "object"
            }
          },
          "required": [],
          "title": "metrics",
          "type": "object"
        },
        "name": {
          "default": "repo-server",
          "description": "Repo server name",
          "required": [],
          "title": "name",
          "type": "string"
        },
        "networkPolicy": {
          "additionalProperties": true,
          "description": "Default repo server's network policy",
          "properties": {
            "create": {
              "default": false,
              "description": "Default network policy rules used by repo server",
              "required": [],
              "title": "create",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "networkPolicy",
          "type": "object"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "[Node selector]",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "pdb": {
          "additionalProperties": true,
          "description": "# Repo server Pod Disruption Budget\n# Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations to be added to repo server pdb",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Deploy a [PodDisruptionBudget] for the repo server",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels to be added to repo server pdb",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "maxUnavailable": {
              "default": "",
              "description": "Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).\n# Has higher precedence over `repoServer.pdb.minAvailable`",
              "required": [],
              "title": "maxUnavailable",
              "type": "string"
            },
            "minAvailable": {
              "default": "",
              "description": "Number of pods that are available after eviction as number or percentage (eg.: 50%)",
              "required": [],
              "title": "minAvailable",
              "type": "string"
            }
          },
          "required": [],
          "title": "pdb",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations to be added to repo server pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels to be added to repo server pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "",
          "description": "Priority class for the repo server pods",
          "required": [],
          "title": "priorityClassName",
          "type": "string"
        },
        "rbac": {
          "description": "Repo server rbac rules",
          "items": {
            "required": []
          },
          "required": [],
          "title": "rbac",
          "type": "array"
        },
        "readinessProbe": {
          "additionalProperties": true,
          "description": "# Readiness and liveness probes for default backend\n# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "properties": {
            "failureThreshold": {
              "default": 3,
              "description": "Minimum consecutive failures for the [probe] to be considered failed after having succeeded",
              "required": [],
              "title": "failureThreshold",
              "type": "integer"
            },
            "initialDelaySeconds": {
              "default": 10,
              "description": "Number of seconds after the container has started before [probe] is initiated",
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 10,
              "description": "How often (in seconds) to perform the [probe]",
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "successThreshold": {
              "default": 1,
              "description": "Minimum consecutive successes for the [probe] to be considered successful after having failed",
              "required": [],
              "title": "successThreshold",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 1,
              "description": "Number of seconds after which the [probe] times out",
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "readinessProbe",
          "type": "object"
        },
        "replicas": {
          "default": 1,
          "description": "The number of repo server pods to run",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource limits and requests for the repo server pods",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "runtimeClassName": {
          "default": "",
          "description": "Runtime class name for the repo server",
          "required": [],
          "title": "runtimeClassName",
          "type": "string"
        },
        "service": {
          "additionalProperties": true,
          "description": "# Repo server service configuration",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Repo server service annotations",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Repo server service labels",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "port": {
              "default": 8081,
              "description": "Repo server service port",
              "required": [],
              "title": "port",
              "type": "integer"
            },
            "portName": {
              "default": "tcp-repo-server",
              "description": "Repo server service port name",
              "required": [],
              "title": "portName",
              "type": "string"
            },
            "trafficDistribution": {
              "default": "",
              "description": "Traffic distribution preference for the repo server service. If the field is not set, the implementation will apply its default routing strategy.",
              "required": [],
              "title": "trafficDistribution",
              "type": "string"
            }
          },
          "required": [],
          "title": "service",
          "type": "object"
        },
        "serviceAccount": {
          "additionalProperties": true,
          "description": "# Repo server service account\n# If create is set to true, make sure to uncomment the name and update the rbac section below",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations applied to created service account",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "automountServiceAccountToken": {
              "default": true,
              "description": "Automount API credentials for the Service Account",
              "required": [],
              "title": "automountServiceAccountToken",
              "type": "boolean"
            },
            "create": {
              "default": true,
              "description": "Create repo server service account",
              "required": [],
              "title": "create",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels applied to created service account",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "name": {
              "default": "",
              "description": "Repo server service account name",
              "required": [],
              "title": "name",
              "type": "string"
            }
          },
          "required": [],
          "title": "serviceAccount",
          "type": "object"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "terminationGracePeriodSeconds for container lifecycle hook",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "[Tolerations] for use with node taints",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "Assign custom [TopologySpreadConstraints] rules to the repo server\n# Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/\n# If labelSelector is left out, it will default to the labelSelector configuration of the deployment",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        },
        "useEphemeralHelmWorkingDir": {
          "default": true,
          "description": "Toggle the usage of a ephemeral Helm working directory",
          "required": [],
          "title": "useEphemeralHelmWorkingDir",
          "type": "boolean"
        },
        "volumeMounts": {
          "description": "Additional volumeMounts to the repo server main container",
          "items": {
            "required": []
          },
          "required": [],
          "title": "volumeMounts",
          "type": "array"
        },
        "volumes": {
          "description": "Additional volumes to the repo server pod",
          "items": {
            "required": []
          },
          "required": [],
          "title": "volumes",
          "type": "array"
        }
      },
      "required": [],
      "title": "repoServer",
      "type": "object"
    },
    "restore": {
      "additionalProperties": true,
      "description": "restore init container is executed if restore.[s3|ssh].source is not false\nrestore init container creates /data/dump.rdb_ from original if exists\nrestore init container overrides /data/dump.rdb\nsecrets are stored into environment of init container - stored encoded on k8s\nREQUIRED for s3 restore: AWS 'access_key' and 'secret_key' or stored in existingSecret\nEXAMPLE source for s3 restore: 's3://bucket/dump.rdb'\nREQUIRED for ssh restore: 'key' should be in one line including CR i.e. '-----BEGIN RSA PRIVATE KEY-----\\n...\\n...\\n...\\n-----END RSA PRIVATE KEY-----'\nEXAMPLE source for ssh restore: 'user\nREQUIRED for redis restore: 'source' should be in form of redis connection uri: 'redis://[username:password@]host:port[/db]'\nEXAMPLE source for redis restore: 'redis://username:password",
      "properties": {
        "existingSecret": {
          "default": false,
          "description": "Set existingSecret to true to use secret specified in existingSecret above",
          "required": [],
          "title": "existingSecret",
          "type": "boolean"
        },
        "redis": {
          "additionalProperties": true,
          "properties": {
            "source": {
              "default": "",
              "required": [],
              "title": "source",
              "type": "string"
            }
          },
          "required": [],
          "title": "redis",
          "type": "object"
        },
        "s3": {
          "additionalProperties": true,
          "properties": {
            "access_key": {
              "default": "",
              "description": "If using existingSecret, that secret must contain:\nAWS_SECRET_ACCESS_KEY: \u003cYOUR_ACCESS_KEY:\u003e\nAWS_ACCESS_KEY_ID: \u003cYOUR_KEY_ID\u003e\nIf not set the key and ID as strings below:\nRestore init container - AWS AWS_ACCESS_KEY_ID to access restore.s3.source",
              "required": [],
              "title": "access_key",
              "type": "string"
            },
            "region": {
              "default": "",
              "description": "Restore init container - AWS AWS_REGION to access restore.s3.source",
              "required": [],
              "title": "region",
              "type": "string"
            },
            "secret_key": {
              "default": "",
              "description": "Restore init container - AWS AWS_SECRET_ACCESS_KEY to access restore.s3.source",
              "required": [],
              "title": "secret_key",
              "type": "string"
            },
            "source": {
              "default": "",
              "description": "Restore init container - AWS S3 location of dump - i.e. s3://bucket/dump.rdb or false",
              "required": [],
              "title": "source",
              "type": "string"
            }
          },
          "required": [],
          "title": "s3",
          "type": "object"
        },
        "ssh": {
          "additionalProperties": true,
          "properties": {
            "key": {
              "default": "",
              "description": "Restore init container - SSH private key to scp restore.ssh.source to init container.\nKey should be in one line separated with \\n.\ni.e. `-----BEGIN RSA PRIVATE KEY-----\\n...\\n...\\n-----END RSA PRIVATE KEY-----`",
              "required": [],
              "title": "key",
              "type": "string"
            },
            "source": {
              "default": "",
              "description": "Restore init container - SSH scp location of dump - i.e. user",
              "required": [],
              "title": "source",
              "type": "string"
            }
          },
          "required": [],
          "title": "ssh",
          "type": "object"
        },
        "timeout": {
          "default": 600,
          "description": "Timeout for the restore",
          "required": [],
          "title": "timeout",
          "type": "integer"
        }
      },
      "required": [],
      "title": "restore",
      "type": "object"
    },
    "ro_replicas": {
      "default": "",
      "description": "# read-only replicas\n# indexed slaves get never promoted to be master\n# index starts with 0 - which is master on init\n# i.e. \"8,9\" means 8th and 9th slave will be replica with replica-priority=0\n# see also: https://redis.io/topics/sentinel\nComma separated list of slaves which never get promoted to be master.\nCount starts with 0. Allowed values 1-9. i.e. 3,4 - 3th and 4th redis slave never make it to be master, where master is index 0.",
      "required": [],
      "title": "ro_replicas",
      "type": "string"
    },
    "schedulerName": {
      "default": "",
      "description": "Use an alternate scheduler, e.g. \"stork\".\nref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/",
      "required": [],
      "title": "schedulerName",
      "type": "string"
    },
    "securityContext": {
      "additionalProperties": true,
      "description": "Security context to be added to the Redis StatefulSet.",
      "properties": {
        "fsGroup": {
          "default": 1000,
          "required": [],
          "title": "fsGroup",
          "type": "integer"
        },
        "runAsNonRoot": {
          "default": true,
          "required": [],
          "title": "runAsNonRoot",
          "type": "boolean"
        },
        "runAsUser": {
          "default": 1000,
          "required": [],
          "title": "runAsUser",
          "type": "integer"
        }
      },
      "required": [],
      "title": "securityContext",
      "type": "object"
    },
    "sentinel": {
      "additionalProperties": true,
      "description": "# Sentinel specific configuration options",
      "properties": {
        "auth": {
          "default": false,
          "description": "# Configures sentinel with AUTH (requirepass params)\nEnables or disables sentinel AUTH (Requires `sentinel.password` to be set)",
          "required": [],
          "title": "auth",
          "type": "boolean"
        },
        "authClients": {
          "default": "",
          "description": "It is possible to disable client side certificates authentication when \"authClients\" is set to \"no\"",
          "required": [],
          "title": "authClients",
          "type": "string"
        },
        "authKey": {
          "default": "sentinel-password",
          "description": "# Defines the key holding the sentinel password in existing secret.\nThe key holding the sentinel password in an existing secret.",
          "required": [],
          "title": "authKey",
          "type": "string"
        },
        "config": {
          "additionalProperties": true,
          "description": "Valid sentinel config options in this section will be applied as config options to each sentinel (see below)",
          "properties": {
            "down-after-milliseconds": {
              "default": 10000,
              "description": "# Additional sentinel conf options can be added below. Only options that\n# are expressed in the format simialar to 'sentinel xxx mymaster xxx' will\n# be properly templated expect maxclients option.\n# For available options see http://download.redis.io/redis-stable/sentinel.conf",
              "required": [],
              "title": "down-after-milliseconds",
              "type": "integer"
            },
            "failover-timeout": {
              "default": 180000,
              "description": "# Failover timeout value in milliseconds",
              "required": [],
              "title": "failover-timeout",
              "type": "integer"
            },
            "maxclients": {
              "default": 10000,
              "required": [],
              "title": "maxclients",
              "type": "integer"
            },
            "parallel-syncs": {
              "default": 5,
              "required": [],
              "title": "parallel-syncs",
              "type": "integer"
            }
          },
          "required": [],
          "title": "config",
          "type": "object"
        },
        "customArgs": {
          "items": {
            "required": []
          },
          "required": [],
          "title": "customArgs",
          "type": "array"
        },
        "customCommand": {
          "items": {
            "required": []
          },
          "required": [],
          "title": "customCommand",
          "type": "array"
        },
        "customConfig": {
          "default": "",
          "description": "# Custom sentinel.conf files used to override default settings. If this file is\n# specified then the sentinel.config above will be ignored.\nAllows for custom sentinel.conf files to be applied. If this is used then `sentinel.config` is ignored",
          "required": [],
          "title": "customConfig",
          "type": "string"
        },
        "existingSecret": {
          "default": "",
          "description": "An existing secret containing a key defined by `sentinel.authKey` that configures `requirepass`\nin the conf parameters (Requires `sentinel.auth: enabled`, cannot be used in conjunction with `.Values.sentinel.password`)",
          "required": [],
          "title": "existingSecret",
          "type": "string"
        },
        "extraVolumeMounts": {
          "description": "additional volumeMounts for Sentinel container",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "lifecycle": {
          "additionalProperties": true,
          "description": "Container Lifecycle Hooks for sentinel container.\nRef: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/",
          "required": [],
          "title": "lifecycle",
          "type": "object"
        },
        "livenessProbe": {
          "additionalProperties": true,
          "description": "liveness probe parameters for sentinel container",
          "properties": {
            "enabled": {
              "default": true,
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "failureThreshold": {
              "default": 5,
              "description": "Failure threshold for liveness probe",
              "required": [],
              "title": "failureThreshold",
              "type": "integer"
            },
            "initialDelaySeconds": {
              "default": 30,
              "description": "Initial delay in seconds for liveness probe",
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 15,
              "description": "Period in seconds after which liveness probe will be repeated",
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "successThreshold": {
              "default": 1,
              "description": "Success threshold for liveness probe",
              "required": [],
              "title": "successThreshold",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 15,
              "description": "Timeout seconds for liveness probe",
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "livenessProbe",
          "type": "object"
        },
        "password": {
          "default": "~",
          "description": "(string) A password that configures a `requirepass` in the conf parameters (Requires `sentinel.auth: enabled`)",
          "required": [],
          "title": "password",
          "type": "null"
        },
        "port": {
          "default": 26379,
          "description": "Port to access the sentinel service",
          "required": [],
          "title": "port",
          "type": "integer"
        },
        "quorum": {
          "default": 2,
          "description": "Minimum number of nodes expected to be live.",
          "required": [],
          "title": "quorum",
          "type": "integer"
        },
        "readinessProbe": {
          "additionalProperties": true,
          "description": "readiness probe parameters for sentinel container",
          "properties": {
            "enabled": {
              "default": true,
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "failureThreshold": {
              "default": 5,
              "description": "Failure threshold for readiness probe",
              "required": [],
              "title": "failureThreshold",
              "type": "integer"
            },
            "initialDelaySeconds": {
              "default": 30,
              "description": "Initial delay in seconds for readiness probe",
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 15,
              "description": "Period in seconds after which readiness probe will be repeated",
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "successThreshold": {
              "default": 3,
              "description": "Success threshold for readiness probe",
              "required": [],
              "title": "successThreshold",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 15,
              "description": "Timeout seconds for readiness probe",
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "readinessProbe",
          "type": "object"
        },
        "resources": {
          "additionalProperties": true,
          "description": "CPU/Memory for sentinel node resource requests/limits",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "startupProbe": {
          "additionalProperties": true,
          "description": "Startup probe parameters for redis container",
          "properties": {
            "enabled": {
              "default": true,
              "description": "Enable Startup Probe",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "failureThreshold": {
              "default": 3,
              "description": "Failure threshold for startup probe",
              "required": [],
              "title": "failureThreshold",
              "type": "integer"
            },
            "initialDelaySeconds": {
              "default": 5,
              "description": "Initial delay in seconds for startup probe",
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 10,
              "description": "Period in seconds after which startup probe will be repeated",
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "successThreshold": {
              "default": 1,
              "description": "Success threshold for startup probe",
              "required": [],
              "title": "successThreshold",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 15,
              "description": "Timeout seconds for startup probe",
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "startupProbe",
          "type": "object"
        },
        "tlsPort": {
          "default": "~",
          "description": "# Configures sentinel with tls-port parameter\n(int) TLS Port to access the sentinel service",
          "required": [],
          "title": "tlsPort",
          "type": "null"
        },
        "tlsReplication": {
          "default": "~",
          "description": "(bool) Configures sentinel with tls-replication parameter, if true sets \"tls-replication yes\" in sentinel.conf",
          "required": [],
          "title": "tlsReplication",
          "type": "null"
        }
      },
      "required": [],
      "title": "sentinel",
      "type": "object"
    },
    "server": {
      "additionalProperties": true,
      "description": "# Server",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Assign custom [affinity] rules to the deployment",
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "automountServiceAccountToken": {
          "default": true,
          "description": "Automount API credentials for the Service Account into the pod.",
          "required": [],
          "title": "automountServiceAccountToken",
          "type": "boolean"
        },
        "autoscaling": {
          "additionalProperties": true,
          "description": "# Argo CD server Horizontal Pod Autoscaler",
          "properties": {
            "behavior": {
              "additionalProperties": true,
              "description": "Configures the scaling behavior of the target in both Up and Down directions.",
              "required": [],
              "title": "behavior",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Enable Horizontal Pod Autoscaler ([HPA]) for the Argo CD server",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "maxReplicas": {
              "default": 5,
              "description": "Maximum number of replicas for the Argo CD server [HPA]",
              "required": [],
              "title": "maxReplicas",
              "type": "integer"
            },
            "metrics": {
              "description": "scaleDown:\n stabilizationWindowSeconds: 300\n policies:\n  - type: Pods\n    value: 1\n    periodSeconds: 180\nscaleUp:\n  stabilizationWindowSeconds: 300\n  policies:\n  - type: Pods\n    value: 2\n    periodSeconds: 60\nConfigures custom HPA metrics for the Argo CD server\nRef: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/",
              "items": {
                "required": []
              },
              "required": [],
              "title": "metrics",
              "type": "array"
            },
            "minReplicas": {
              "default": 1,
              "description": "Minimum number of replicas for the Argo CD server [HPA]",
              "required": [],
              "title": "minReplicas",
              "type": "integer"
            },
            "targetCPUUtilizationPercentage": {
              "default": 50,
              "description": "Average CPU utilization percentage for the Argo CD server [HPA]",
              "required": [],
              "title": "targetCPUUtilizationPercentage",
              "type": "integer"
            },
            "targetMemoryUtilizationPercentage": {
              "default": 50,
              "description": "Average memory utilization percentage for the Argo CD server [HPA]",
              "required": [],
              "title": "targetMemoryUtilizationPercentage",
              "type": "integer"
            }
          },
          "required": [],
          "title": "autoscaling",
          "type": "object"
        },
        "backendTLSPolicy": {
          "additionalProperties": true,
          "description": "Gateway API BackendTLSPolicy configuration\nNOTE: BackendTLSPolicy is in EXPERIMENTAL status (v1alpha3)\nRequired for HTTPS backends when using Gateway API\nNot all Gateway controllers support this resource (e.g., Cilium does not support it yet)",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Additional BackendTLSPolicy annotations",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Enable BackendTLSPolicy resource for Argo CD server (Gateway API)",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Additional BackendTLSPolicy labels",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "targetRefs": {
              "description": "Target references for the BackendTLSPolicy",
              "items": {
                "required": []
              },
              "required": [],
              "title": "targetRefs",
              "type": "array"
            },
            "validation": {
              "additionalProperties": true,
              "description": "- group: \"\"\n  kind: Service\n  name: argocd-server\n  sectionName: https\nTLS validation configuration",
              "required": [],
              "title": "validation",
              "type": "object"
            }
          },
          "required": [],
          "title": "backendTLSPolicy",
          "type": "object"
        },
        "certificate": {
          "additionalProperties": true,
          "description": "TLS certificate configuration via cert-manager\n# Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#tls-certificates-used-by-argocd-server",
          "properties": {
            "additionalHosts": {
              "description": "Certificate Subject Alternate Names (SANs)",
              "items": {
                "required": []
              },
              "required": [],
              "title": "additionalHosts",
              "type": "array"
            },
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations to be applied to the Server Certificate",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "domain": {
              "default": "",
              "description": "Certificate primary domain (commonName)",
              "required": [],
              "title": "domain",
              "type": "string"
            },
            "duration": {
              "default": "",
              "description": "The requested 'duration' (i.e. lifetime) of the certificate.\n# Ref: https://cert-manager.io/docs/usage/certificate/#renewal",
              "required": [],
              "title": "duration",
              "type": "string"
            },
            "enabled": {
              "default": false,
              "description": "Deploy a Certificate resource (requires cert-manager)",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "issuer": {
              "additionalProperties": true,
              "description": "Certificate issuer\n# Ref: https://cert-manager.io/docs/concepts/issuer",
              "properties": {
                "group": {
                  "default": "",
                  "description": "Certificate issuer group. Set if using an external issuer. Eg. `cert-manager.io`",
                  "required": [],
                  "title": "group",
                  "type": "string"
                },
                "kind": {
                  "default": "",
                  "description": "Certificate issuer kind. Either `Issuer` or `ClusterIssuer`",
                  "required": [],
                  "title": "kind",
                  "type": "string"
                },
                "name": {
                  "default": "",
                  "description": "Certificate issuer name. Eg. `letsencrypt`",
                  "required": [],
                  "title": "name",
                  "type": "string"
                }
              },
              "required": [],
              "title": "issuer",
              "type": "object"
            },
            "privateKey": {
              "additionalProperties": true,
              "description": "Private key of the certificate",
              "properties": {
                "algorithm": {
                  "default": "RSA",
                  "description": "Algorithm used to generate certificate private key. One of: `RSA`, `Ed25519` or `ECDSA`",
                  "required": [],
                  "title": "algorithm",
                  "type": "string"
                },
                "encoding": {
                  "default": "PKCS1",
                  "description": "The private key cryptography standards (PKCS) encoding for private key. Either: `PCKS1` or `PKCS8`",
                  "required": [],
                  "title": "encoding",
                  "type": "string"
                },
                "rotationPolicy": {
                  "default": "Never",
                  "description": "Rotation policy of private key when certificate is re-issued. Either: `Never` or `Always`",
                  "required": [],
                  "title": "rotationPolicy",
                  "type": "string"
                },
                "size": {
                  "default": 2048,
                  "description": "Key bit size of the private key. If algorithm is set to `Ed25519`, size is ignored.",
                  "required": [],
                  "title": "size",
                  "type": "integer"
                }
              },
              "required": [],
              "title": "privateKey",
              "type": "object"
            },
            "renewBefore": {
              "default": "",
              "description": "How long before the expiry a certificate should be renewed.\n# Ref: https://cert-manager.io/docs/usage/certificate/#renewal",
              "required": [],
              "title": "renewBefore",
              "type": "string"
            },
            "secretTemplateAnnotations": {
              "additionalProperties": true,
              "description": "Annotations that allow the certificate to be composed from data residing in existing Kubernetes Resources",
              "required": [],
              "title": "secretTemplateAnnotations",
              "type": "object"
            },
            "usages": {
              "description": "Usages for the certificate\n## Ref: https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.KeyUsage",
              "items": {
                "required": []
              },
              "required": [],
              "title": "usages",
              "type": "array"
            }
          },
          "required": [],
          "title": "certificate",
          "type": "object"
        },
        "certificateSecret": {
          "additionalProperties": true,
          "description": "TLS certificate configuration via Secret\n# Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#tls-certificates-used-by-argocd-server",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations to be added to argocd-server-tls secret",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "crt": {
              "default": "",
              "description": "Certificate data",
              "required": [],
              "title": "crt",
              "type": "string"
            },
            "enabled": {
              "default": false,
              "description": "Create argocd-server-tls secret",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "key": {
              "default": "",
              "description": "Private Key of the certificate",
              "required": [],
              "title": "key",
              "type": "string"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels to be added to argocd-server-tls secret",
              "required": [],
              "title": "labels",
              "type": "object"
            }
          },
          "required": [],
          "title": "certificateSecret",
          "type": "object"
        },
        "clusterRoleRules": {
          "additionalProperties": true,
          "description": "# Enable this and set the rules: to whatever custom rules you want for the Cluster Role resource.\n# Defaults to off",
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enable custom rules for the server's ClusterRole resource",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "rules": {
              "description": "List of custom rules for the server's ClusterRole resource",
              "items": {
                "required": []
              },
              "required": [],
              "title": "rules",
              "type": "array"
            }
          },
          "required": [],
          "title": "clusterRoleRules",
          "type": "object"
        },
        "containerPorts": {
          "additionalProperties": true,
          "description": "Server container ports",
          "properties": {
            "metrics": {
              "default": 8083,
              "description": "Metrics container port",
              "required": [],
              "title": "metrics",
              "type": "integer"
            },
            "server": {
              "default": 8080,
              "description": "Server container port",
              "required": [],
              "title": "server",
              "type": "integer"
            }
          },
          "required": [],
          "title": "containerPorts",
          "type": "object"
        },
        "containerSecurityContext": {
          "additionalProperties": true,
          "description": "Server container-level security context",
          "properties": {
            "allowPrivilegeEscalation": {
              "default": false,
              "required": [],
              "title": "allowPrivilegeEscalation",
              "type": "boolean"
            },
            "capabilities": {
              "additionalProperties": true,
              "properties": {
                "drop": {
                  "items": {
                    "required": [],
                    "type": "string"
                  },
                  "required": [],
                  "title": "drop",
                  "type": "array"
                }
              },
              "required": [],
              "title": "capabilities",
              "type": "object"
            },
            "readOnlyRootFilesystem": {
              "default": true,
              "required": [],
              "title": "readOnlyRootFilesystem",
              "type": "boolean"
            },
            "runAsNonRoot": {
              "default": true,
              "required": [],
              "title": "runAsNonRoot",
              "type": "boolean"
            },
            "seccompProfile": {
              "additionalProperties": true,
              "properties": {
                "type": {
                  "default": "RuntimeDefault",
                  "required": [],
                  "title": "type",
                  "type": "string"
                }
              },
              "required": [],
              "title": "seccompProfile",
              "type": "object"
            }
          },
          "required": [],
          "title": "containerSecurityContext",
          "type": "object"
        },
        "deploymentAnnotations": {
          "additionalProperties": true,
          "description": "Annotations to be added to server Deployment",
          "required": [],
          "title": "deploymentAnnotations",
          "type": "object"
        },
        "deploymentLabels": {
          "additionalProperties": true,
          "description": "Labels for the server Deployment",
          "required": [],
          "title": "deploymentLabels",
          "type": "object"
        },
        "deploymentStrategy": {
          "additionalProperties": true,
          "description": "Deployment strategy to be added to the server Deployment",
          "required": [],
          "title": "deploymentStrategy",
          "type": "object"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "[DNS configuration]",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "dnsPolicy": {
          "default": "ClusterFirst",
          "description": "Alternative DNS policy for Server pods",
          "required": [],
          "title": "dnsPolicy",
          "type": "string"
        },
        "emptyDir": {
          "additionalProperties": true,
          "description": "# Argo CD server emptyDir volumes",
          "properties": {
            "sizeLimit": {
              "default": "",
              "description": "EmptyDir size limit for the Argo CD server",
              "required": [],
              "title": "sizeLimit",
              "type": "string"
            }
          },
          "required": [],
          "title": "emptyDir",
          "type": "object"
        },
        "env": {
          "description": "Environment variables to pass to Argo CD server",
          "items": {
            "required": []
          },
          "required": [],
          "title": "env",
          "type": "array"
        },
        "envFrom": {
          "description": "envFrom to pass to Argo CD server",
          "items": {
            "required": []
          },
          "required": [],
          "title": "envFrom",
          "type": "array"
        },
        "extensions": {
          "additionalProperties": true,
          "description": "# Argo CD extensions\n# This function in tech preview stage, do expect instability or breaking changes in newer versions.\n# Ref: https://github.com/argoproj-labs/argocd-extension-installer\n# When you enable extensions, you need to configure RBAC of logged in Argo CD user.\n# Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/#the-extensions-resource",
          "properties": {
            "containerSecurityContext": {
              "additionalProperties": true,
              "description": "Server UI extensions container-level security context",
              "properties": {
                "allowPrivilegeEscalation": {
                  "default": false,
                  "required": [],
                  "title": "allowPrivilegeEscalation",
                  "type": "boolean"
                },
                "capabilities": {
                  "additionalProperties": true,
                  "properties": {
                    "drop": {
                      "items": {
                        "required": [],
                        "type": "string"
                      },
                      "required": [],
                      "title": "drop",
                      "type": "array"
                    }
                  },
                  "required": [],
                  "title": "capabilities",
                  "type": "object"
                },
                "readOnlyRootFilesystem": {
                  "default": true,
                  "required": [],
                  "title": "readOnlyRootFilesystem",
                  "type": "boolean"
                },
                "runAsNonRoot": {
                  "default": true,
                  "required": [],
                  "title": "runAsNonRoot",
                  "type": "boolean"
                },
                "runAsUser": {
                  "default": 1000,
                  "required": [],
                  "title": "runAsUser",
                  "type": "integer"
                },
                "seccompProfile": {
                  "additionalProperties": true,
                  "properties": {
                    "type": {
                      "default": "RuntimeDefault",
                      "required": [],
                      "title": "type",
                      "type": "string"
                    }
                  },
                  "required": [],
                  "title": "seccompProfile",
                  "type": "object"
                }
              },
              "required": [],
              "title": "containerSecurityContext",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Enable support for Argo CD extensions",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "extensionList": {
              "description": "Extensions for Argo CD\n# Ref: https://github.com/argoproj-labs/argocd-extension-metrics#install-ui-extension",
              "items": {
                "required": []
              },
              "required": [],
              "title": "extensionList",
              "type": "array"
            },
            "image": {
              "additionalProperties": true,
              "description": "# Argo CD extension installer image",
              "properties": {
                "imagePullPolicy": {
                  "default": "",
                  "description": "Image pull policy for extensions",
                  "required": [],
                  "title": "imagePullPolicy",
                  "type": "string"
                },
                "repository": {
                  "default": "quay.io/argoprojlabs/argocd-extension-installer",
                  "description": "Repository to use for extension installer image",
                  "required": [],
                  "title": "repository",
                  "type": "string"
                },
                "tag": {
                  "default": "v0.0.8",
                  "description": "Tag to use for extension installer image",
                  "required": [],
                  "title": "tag",
                  "type": "string"
                }
              },
              "required": [],
              "title": "image",
              "type": "object"
            },
            "resources": {
              "additionalProperties": true,
              "description": "Resource limits and requests for the argocd-extensions container",
              "required": [],
              "title": "resources",
              "type": "object"
            }
          },
          "required": [],
          "title": "extensions",
          "type": "object"
        },
        "extraArgs": {
          "description": "Additional command line arguments to pass to Argo CD server",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Additional containers to be added to the server pod\n# Note: Supports use of custom Helm templates",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "grpcroute": {
          "additionalProperties": true,
          "description": "Gateway API GRPCRoute configuration\nNOTE: Gateway API support is in EXPERIMENTAL status\nSupport depends on your Gateway controller implementation\nRefer to https://gateway-api.sigs.k8s.io/implementations/ for controller-specific details",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Additional GRPCRoute annotations",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Enable GRPCRoute resource for Argo CD server (Gateway API)",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "hostnames": {
              "description": "- name: example-gateway\n  namespace: example-gateway-namespace\n  sectionName: grpc\nList of hostnames for the GRPCRoute",
              "items": {
                "required": []
              },
              "required": [],
              "title": "hostnames",
              "type": "array"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Additional GRPCRoute labels",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "parentRefs": {
              "description": "Gateway API parentRefs for the GRPCRoute\n# Must reference an existing Gateway",
              "items": {
                "required": []
              },
              "required": [],
              "title": "parentRefs",
              "type": "array"
            },
            "rules": {
              "description": "- grpc.argocd.example.com\nGRPCRoute rules configuration",
              "items": {
                "additionalProperties": true,
                "properties": {
                  "matches": {
                    "items": {
                      "additionalProperties": true,
                      "properties": {
                        "method": {
                          "additionalProperties": true,
                          "properties": {
                            "type": {
                              "default": "Exact",
                              "required": [],
                              "title": "type",
                              "type": "string"
                            }
                          },
                          "required": [],
                          "title": "method",
                          "type": "object"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "required": [],
                    "title": "matches",
                    "type": "array"
                  }
                },
                "required": [],
                "type": "object"
              },
              "required": [],
              "title": "rules",
              "type": "array"
            }
          },
          "required": [],
          "title": "grpcroute",
          "type": "object"
        },
        "hostNetwork": {
          "default": false,
          "description": "Host Network for Server pods",
          "required": [],
          "title": "hostNetwork",
          "type": "boolean"
        },
        "httproute": {
          "additionalProperties": true,
          "description": "Gateway API HTTPRoute configuration\nNOTE: Gateway API support is in EXPERIMENTAL status\nSupport depends on your Gateway controller implementation\nSome controllers may require additional configuration (e.g., BackendTLSPolicy for HTTPS backends)\nRefer to https://gateway-api.sigs.k8s.io/implementations/ for controller-specific details",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Additional HTTPRoute annotations",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Enable HTTPRoute resource for Argo CD server (Gateway API)",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "hostnames": {
              "description": "- name: example-gateway\n  namespace: example-gateway-namespace\n  sectionName: https\nList of hostnames for the HTTPRoute",
              "items": {
                "required": []
              },
              "required": [],
              "title": "hostnames",
              "type": "array"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Additional HTTPRoute labels",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "parentRefs": {
              "description": "Gateway API parentRefs for the HTTPRoute\n# Must reference an existing Gateway",
              "items": {
                "required": []
              },
              "required": [],
              "title": "parentRefs",
              "type": "array"
            },
            "rules": {
              "description": "- argocd.example.com\nHTTPRoute rules configuration",
              "items": {
                "additionalProperties": true,
                "properties": {
                  "matches": {
                    "items": {
                      "additionalProperties": true,
                      "properties": {
                        "path": {
                          "additionalProperties": true,
                          "properties": {
                            "type": {
                              "default": "PathPrefix",
                              "required": [],
                              "title": "type",
                              "type": "string"
                            },
                            "value": {
                              "default": "/",
                              "required": [],
                              "title": "value",
                              "type": "string"
                            }
                          },
                          "required": [],
                          "title": "path",
                          "type": "object"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "required": [],
                    "title": "matches",
                    "type": "array"
                  }
                },
                "required": [],
                "type": "object"
              },
              "required": [],
              "title": "rules",
              "type": "array"
            }
          },
          "required": [],
          "title": "httproute",
          "type": "object"
        },
        "image": {
          "additionalProperties": true,
          "description": "# Argo CD server image",
          "properties": {
            "imagePullPolicy": {
              "default": "",
              "description": "Image pull policy for the Argo CD server",
              "required": [],
              "title": "imagePullPolicy",
              "type": "string"
            },
            "repository": {
              "default": "",
              "description": "Repository to use for the Argo CD server",
              "required": [],
              "title": "repository",
              "type": "string"
            },
            "tag": {
              "default": "",
              "description": "Tag to use for the Argo CD server",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "imagePullSecrets": {
          "description": "Secrets with credentials to pull images from a private registry",
          "items": {
            "required": []
          },
          "required": [],
          "title": "imagePullSecrets",
          "type": "array"
        },
        "ingress": {
          "additionalProperties": true,
          "description": "Argo CD server ingress configuration",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Additional ingress annotations\n# Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-1-ssl-passthrough",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "aws": {
              "additionalProperties": true,
              "description": "AWS specific options for Application Load Balancer\nApplies only when `serv.ingress.controller` is set to `aws`\n# Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#aws-application-load-balancers-albs-and-classic-elb-http-mode",
              "properties": {
                "backendProtocolVersion": {
                  "default": "GRPC",
                  "description": "Backend protocol version for the AWS ALB gRPC service\n# This tells AWS to send traffic from the ALB using gRPC.\n# For more information: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/target-group-health-checks.html#health-check-settings",
                  "required": [],
                  "title": "backendProtocolVersion",
                  "type": "string"
                },
                "serviceType": {
                  "default": "NodePort",
                  "description": "Service type for the AWS ALB gRPC service\n# Can be of type NodePort or ClusterIP depending on which mode you are running.\n# Instance mode needs type NodePort, IP mode needs type ClusterIP\n# Ref: https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/how-it-works/#ingress-traffic",
                  "required": [],
                  "title": "serviceType",
                  "type": "string"
                }
              },
              "required": [],
              "title": "aws",
              "type": "object"
            },
            "controller": {
              "default": "generic",
              "description": "Specific implementation for ingress controller. One of `generic`, `aws` or `gke`\n# Additional configuration might be required in related configuration sections",
              "required": [],
              "title": "controller",
              "type": "string"
            },
            "enabled": {
              "default": false,
              "description": "Enable an ingress resource for the Argo CD server",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "extraHosts": {
              "description": "The list of additional hostnames to be covered by ingress record",
              "items": {
                "required": []
              },
              "required": [],
              "title": "extraHosts",
              "type": "array"
            },
            "extraPaths": {
              "description": "Additional ingress paths\n# Note: Supports use of custom Helm templates",
              "items": {
                "required": []
              },
              "required": [],
              "title": "extraPaths",
              "type": "array"
            },
            "extraRules": {
              "description": "Additional ingress rules\n# Note: Supports use of custom Helm templates",
              "items": {
                "required": []
              },
              "required": [],
              "title": "extraRules",
              "type": "array"
            },
            "extraTls": {
              "description": "Additional TLS configuration",
              "items": {
                "required": []
              },
              "required": [],
              "title": "extraTls",
              "type": "array"
            },
            "gke": {
              "additionalProperties": true,
              "description": "Google specific options for Google Application Load Balancer\nApplies only when `server.ingress.controller` is set to `gke`\n# Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#google-cloud-load-balancers-with-kubernetes-ingress",
              "properties": {
                "backendConfig": {
                  "additionalProperties": true,
                  "description": "Google [BackendConfig] resource, for use with the GKE Ingress Controller\n# Ref: https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-features#configuring_ingress_features_through_frontendconfig_parameters",
                  "required": [],
                  "title": "backendConfig",
                  "type": "object"
                },
                "frontendConfig": {
                  "additionalProperties": true,
                  "description": "Google [FrontendConfig] resource, for use with the GKE Ingress Controller\n# Ref: https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-features#configuring_ingress_features_through_frontendconfig_parameters",
                  "required": [],
                  "title": "frontendConfig",
                  "type": "object"
                },
                "managedCertificate": {
                  "additionalProperties": true,
                  "description": "Managed GKE certificate for ingress hostname",
                  "properties": {
                    "create": {
                      "default": true,
                      "description": "Create ManagedCertificate resource and annotations for Google Load balancer\n# Ref: https://cloud.google.com/kubernetes-engine/docs/how-to/managed-certs",
                      "required": [],
                      "title": "create",
                      "type": "boolean"
                    },
                    "extraDomains": {
                      "description": "Additional domains for ManagedCertificate resource",
                      "items": {
                        "required": []
                      },
                      "required": [],
                      "title": "extraDomains",
                      "type": "array"
                    }
                  },
                  "required": [],
                  "title": "managedCertificate",
                  "type": "object"
                }
              },
              "required": [],
              "title": "gke",
              "type": "object"
            },
            "hostname": {
              "default": "",
              "description": "Argo CD server hostname",
              "required": [],
              "title": "hostname",
              "type": "string"
            },
            "ingressClassName": {
              "default": "",
              "description": "Defines which ingress controller will implement the resource",
              "required": [],
              "title": "ingressClassName",
              "type": "string"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Additional ingress labels",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "path": {
              "default": "/",
              "description": "The path to Argo CD server",
              "required": [],
              "title": "path",
              "type": "string"
            },
            "pathType": {
              "default": "Prefix",
              "description": "Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`",
              "required": [],
              "title": "pathType",
              "type": "string"
            },
            "tls": {
              "default": false,
              "description": "Enable TLS configuration for the hostname defined at `server.ingress.hostname`\n# TLS certificate will be retrieved from a TLS secret `argocd-server-tls`\n# You can create this secret via `certificate` or `certificateSecret` option",
              "required": [],
              "title": "tls",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "ingress",
          "type": "object"
        },
        "ingressGrpc": {
          "additionalProperties": true,
          "description": "Dedicated gRPC ingress for ingress controllers that supports only single backend protocol per Ingress resource\nRef: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-2-multiple-ingress-objects-and-hosts",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Additional ingress annotations for dedicated [gRPC-ingress]",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Enable an ingress resource for the Argo CD server for dedicated [gRPC-ingress]",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "extraHosts": {
              "description": "The list of additional hostnames to be covered by ingress record",
              "items": {
                "required": []
              },
              "required": [],
              "title": "extraHosts",
              "type": "array"
            },
            "extraPaths": {
              "description": "Additional ingress paths for dedicated [gRPC-ingress]\n# Note: Supports use of custom Helm templates",
              "items": {
                "required": []
              },
              "required": [],
              "title": "extraPaths",
              "type": "array"
            },
            "extraRules": {
              "description": "Additional ingress rules\n# Note: Supports use of custom Helm templates",
              "items": {
                "required": []
              },
              "required": [],
              "title": "extraRules",
              "type": "array"
            },
            "extraTls": {
              "description": "Additional TLS configuration for dedicated [gRPC-ingress]",
              "items": {
                "required": []
              },
              "required": [],
              "title": "extraTls",
              "type": "array"
            },
            "hostname": {
              "default": "",
              "description": "Argo CD server hostname for dedicated [gRPC-ingress]",
              "required": [],
              "title": "hostname",
              "type": "string"
            },
            "ingressClassName": {
              "default": "",
              "description": "Defines which ingress controller will implement the resource [gRPC-ingress]",
              "required": [],
              "title": "ingressClassName",
              "type": "string"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Additional ingress labels for dedicated [gRPC-ingress]",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "path": {
              "default": "/",
              "description": "Argo CD server ingress path for dedicated [gRPC-ingress]",
              "required": [],
              "title": "path",
              "type": "string"
            },
            "pathType": {
              "default": "Prefix",
              "description": "Ingress path type for dedicated [gRPC-ingress]. One of `Exact`, `Prefix` or `ImplementationSpecific`",
              "required": [],
              "title": "pathType",
              "type": "string"
            },
            "tls": {
              "default": false,
              "description": "Enable TLS configuration for the hostname defined at `server.ingressGrpc.hostname`\n# TLS certificate will be retrieved from a TLS secret with name: `argocd-server-grpc-tls`",
              "required": [],
              "title": "tls",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "ingressGrpc",
          "type": "object"
        },
        "initContainers": {
          "description": "Init containers to add to the server pod\n# If your target Kubernetes cluster(s) require a custom credential (exec) plugin\n# you could use this (and the same in the application controller pod) to provide such executable\n# Ref: https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "lifecycle": {
          "additionalProperties": true,
          "description": "Specify postStart and preStop lifecycle hooks for your argo-cd-server container",
          "required": [],
          "title": "lifecycle",
          "type": "object"
        },
        "livenessProbe": {
          "additionalProperties": true,
          "properties": {
            "failureThreshold": {
              "default": 3,
              "description": "Minimum consecutive failures for the [probe] to be considered failed after having succeeded",
              "required": [],
              "title": "failureThreshold",
              "type": "integer"
            },
            "initialDelaySeconds": {
              "default": 10,
              "description": "Number of seconds after the container has started before [probe] is initiated",
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 10,
              "description": "How often (in seconds) to perform the [probe]",
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "successThreshold": {
              "default": 1,
              "description": "Minimum consecutive successes for the [probe] to be considered successful after having failed",
              "required": [],
              "title": "successThreshold",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 1,
              "description": "Number of seconds after which the [probe] times out",
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "livenessProbe",
          "type": "object"
        },
        "metrics": {
          "additionalProperties": true,
          "description": "# Server metrics service configuration",
          "properties": {
            "enabled": {
              "default": false,
              "description": "Deploy metrics service",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "service": {
              "additionalProperties": true,
              "properties": {
                "annotations": {
                  "additionalProperties": true,
                  "description": "Metrics service annotations",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "clusterIP": {
                  "default": "",
                  "description": "Metrics service clusterIP. `None` makes a \"headless service\" (no virtual IP)",
                  "required": [],
                  "title": "clusterIP",
                  "type": "string"
                },
                "labels": {
                  "additionalProperties": true,
                  "description": "Metrics service labels",
                  "required": [],
                  "title": "labels",
                  "type": "object"
                },
                "portName": {
                  "default": "http-metrics",
                  "description": "Metrics service port name",
                  "required": [],
                  "title": "portName",
                  "type": "string"
                },
                "servicePort": {
                  "default": 8083,
                  "description": "Metrics service port",
                  "required": [],
                  "title": "servicePort",
                  "type": "integer"
                },
                "type": {
                  "default": "ClusterIP",
                  "description": "Metrics service type",
                  "required": [],
                  "title": "type",
                  "type": "string"
                }
              },
              "required": [],
              "title": "service",
              "type": "object"
            },
            "serviceMonitor": {
              "additionalProperties": true,
              "properties": {
                "additionalLabels": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor labels",
                  "required": [],
                  "title": "additionalLabels",
                  "type": "object"
                },
                "annotations": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor annotations",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "enabled": {
                  "default": false,
                  "description": "Enable a prometheus ServiceMonitor",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "honorLabels": {
                  "default": false,
                  "description": "When true, honorLabels preserves the metric’s labels when they collide with the target’s labels.",
                  "required": [],
                  "title": "honorLabels",
                  "type": "boolean"
                },
                "interval": {
                  "default": "30s",
                  "description": "Prometheus ServiceMonitor interval",
                  "required": [],
                  "title": "interval",
                  "type": "string"
                },
                "metricRelabelings": {
                  "description": "Prometheus [MetricRelabelConfigs] to apply to samples before ingestion",
                  "items": {
                    "required": []
                  },
                  "required": [],
                  "title": "metricRelabelings",
                  "type": "array"
                },
                "namespace": {
                  "default": "",
                  "description": "Prometheus ServiceMonitor namespace",
                  "required": [],
                  "title": "namespace",
                  "type": "string"
                },
                "relabelings": {
                  "description": "Prometheus [RelabelConfigs] to apply to samples before scraping",
                  "items": {
                    "required": []
                  },
                  "required": [],
                  "title": "relabelings",
                  "type": "array"
                },
                "scheme": {
                  "default": "",
                  "description": "Prometheus ServiceMonitor scheme",
                  "required": [],
                  "title": "scheme",
                  "type": "string"
                },
                "scrapeTimeout": {
                  "default": "",
                  "description": "Prometheus ServiceMonitor scrapeTimeout. If empty, Prometheus uses the global scrape timeout unless it is less than the target's scrape interval value in which the latter is used.",
                  "required": [],
                  "title": "scrapeTimeout",
                  "type": "string"
                },
                "selector": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor selector",
                  "required": [],
                  "title": "selector",
                  "type": "object"
                },
                "tlsConfig": {
                  "additionalProperties": true,
                  "description": "Prometheus ServiceMonitor tlsConfig",
                  "required": [],
                  "title": "tlsConfig",
                  "type": "object"
                }
              },
              "required": [],
              "title": "serviceMonitor",
              "type": "object"
            }
          },
          "required": [],
          "title": "metrics",
          "type": "object"
        },
        "name": {
          "default": "server",
          "description": "Argo CD server name",
          "required": [],
          "title": "name",
          "type": "string"
        },
        "networkPolicy": {
          "additionalProperties": true,
          "description": "Default ArgoCD Server's network policy",
          "properties": {
            "create": {
              "default": false,
              "description": "Default network policy rules used by ArgoCD Server",
              "required": [],
              "title": "create",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "networkPolicy",
          "type": "object"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "[Node selector]",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "pdb": {
          "additionalProperties": true,
          "description": "# Argo CD server Pod Disruption Budget\n# Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations to be added to Argo CD server pdb",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Deploy a [PodDisruptionBudget] for the Argo CD server",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels to be added to Argo CD server pdb",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "maxUnavailable": {
              "default": "",
              "description": "Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).\n# Has higher precedence over `server.pdb.minAvailable`",
              "required": [],
              "title": "maxUnavailable",
              "type": "string"
            },
            "minAvailable": {
              "default": "",
              "description": "Number of pods that are available after eviction as number or percentage (eg.: 50%)",
              "required": [],
              "title": "minAvailable",
              "type": "string"
            }
          },
          "required": [],
          "title": "pdb",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations to be added to server pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels to be added to server pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "",
          "description": "Priority class for the Argo CD server pods",
          "required": [],
          "title": "priorityClassName",
          "type": "string"
        },
        "readinessProbe": {
          "additionalProperties": true,
          "description": "# Readiness and liveness probes for default backend\n# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/",
          "properties": {
            "failureThreshold": {
              "default": 3,
              "description": "Minimum consecutive failures for the [probe] to be considered failed after having succeeded",
              "required": [],
              "title": "failureThreshold",
              "type": "integer"
            },
            "initialDelaySeconds": {
              "default": 10,
              "description": "Number of seconds after the container has started before [probe] is initiated",
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 10,
              "description": "How often (in seconds) to perform the [probe]",
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "successThreshold": {
              "default": 1,
              "description": "Minimum consecutive successes for the [probe] to be considered successful after having failed",
              "required": [],
              "title": "successThreshold",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 1,
              "description": "Number of seconds after which the [probe] times out",
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "readinessProbe",
          "type": "object"
        },
        "replicas": {
          "default": 1,
          "description": "The number of server pods to run",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource limits and requests for the Argo CD server",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "route": {
          "additionalProperties": true,
          "description": "Create a OpenShift Route with SSL passthrough for UI and CLI\nConsider setting 'hostname' e.g. https://argocd.apps-crc.testing/ using your Default Ingress Controller Domain\nFind your domain with: kubectl describe --namespace=openshift-ingress-operator ingresscontroller/default | grep Domain:\nIf 'hostname' is an empty string \"\" OpenShift will create a hostname for you.",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Openshift Route annotations",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Enable an OpenShift Route for the Argo CD server",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "hostname": {
              "default": "",
              "description": "Hostname of OpenShift Route",
              "required": [],
              "title": "hostname",
              "type": "string"
            },
            "termination_policy": {
              "default": "None",
              "description": "Termination policy of Openshift Route",
              "required": [],
              "title": "termination_policy",
              "type": "string"
            },
            "termination_type": {
              "default": "passthrough",
              "description": "Termination type of Openshift Route",
              "required": [],
              "title": "termination_type",
              "type": "string"
            }
          },
          "required": [],
          "title": "route",
          "type": "object"
        },
        "runtimeClassName": {
          "default": "",
          "description": "Runtime class name for the Argo CD server",
          "required": [],
          "title": "runtimeClassName",
          "type": "string"
        },
        "service": {
          "additionalProperties": true,
          "description": "# Server service configuration",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Server service annotations",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "externalIPs": {
              "description": "Server service external IPs",
              "items": {
                "required": []
              },
              "required": [],
              "title": "externalIPs",
              "type": "array"
            },
            "externalTrafficPolicy": {
              "default": "Cluster",
              "description": "Denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints\n# Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip",
              "required": [],
              "title": "externalTrafficPolicy",
              "type": "string"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Server service labels",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "loadBalancerClass": {
              "default": "",
              "description": "The class of the load balancer implementation",
              "required": [],
              "title": "loadBalancerClass",
              "type": "string"
            },
            "loadBalancerIP": {
              "default": "",
              "description": "LoadBalancer will get created with the IP specified in this field",
              "required": [],
              "title": "loadBalancerIP",
              "type": "string"
            },
            "loadBalancerSourceRanges": {
              "description": "Source IP ranges to allow access to service from\n# EKS Ref: https://repost.aws/knowledge-center/eks-cidr-ip-address-loadbalancer\n# GKE Ref: https://cloud.google.com/kubernetes-engine/docs/concepts/network-overview#limit-connectivity-ext-lb",
              "items": {
                "required": []
              },
              "required": [],
              "title": "loadBalancerSourceRanges",
              "type": "array"
            },
            "nodePortHttp": {
              "default": 30080,
              "description": "Server service http port for NodePort service type (only if `server.service.type` is set to \"NodePort\")",
              "required": [],
              "title": "nodePortHttp",
              "type": "integer"
            },
            "nodePortHttps": {
              "default": 30443,
              "description": "Server service https port for NodePort service type (only if `server.service.type` is set to \"NodePort\")",
              "required": [],
              "title": "nodePortHttps",
              "type": "integer"
            },
            "servicePortHttp": {
              "default": 80,
              "description": "Server service http port",
              "required": [],
              "title": "servicePortHttp",
              "type": "integer"
            },
            "servicePortHttpName": {
              "default": "http",
              "description": "Server service http port name, can be used to route traffic via istio",
              "required": [],
              "title": "servicePortHttpName",
              "type": "string"
            },
            "servicePortHttps": {
              "default": 443,
              "description": "Server service https port",
              "required": [],
              "title": "servicePortHttps",
              "type": "integer"
            },
            "servicePortHttpsAppProtocol": {
              "default": "",
              "description": "Server service https port appProtocol\n# Ref: https://kubernetes.io/docs/concepts/services-networking/service/#application-protocol",
              "required": [],
              "title": "servicePortHttpsAppProtocol",
              "type": "string"
            },
            "servicePortHttpsName": {
              "default": "https",
              "description": "Server service https port name, can be used to route traffic via istio",
              "required": [],
              "title": "servicePortHttpsName",
              "type": "string"
            },
            "sessionAffinity": {
              "default": "None",
              "description": "Used to maintain session affinity. Supports `ClientIP` and `None`\n# Ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
              "required": [],
              "title": "sessionAffinity",
              "type": "string"
            },
            "type": {
              "default": "ClusterIP",
              "description": "Server service type",
              "required": [],
              "title": "type",
              "type": "string"
            }
          },
          "required": [],
          "title": "service",
          "type": "object"
        },
        "serviceAccount": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations applied to created service account",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "automountServiceAccountToken": {
              "default": true,
              "description": "Automount API credentials for the Service Account",
              "required": [],
              "title": "automountServiceAccountToken",
              "type": "boolean"
            },
            "create": {
              "default": true,
              "description": "Create server service account",
              "required": [],
              "title": "create",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels applied to created service account",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "name": {
              "default": "argocd-server",
              "description": "Server service account name",
              "required": [],
              "title": "name",
              "type": "string"
            }
          },
          "required": [],
          "title": "serviceAccount",
          "type": "object"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "terminationGracePeriodSeconds for container lifecycle hook",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "[Tolerations] for use with node taints",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "Assign custom [TopologySpreadConstraints] rules to the Argo CD server\n# Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/\n# If labelSelector is left out, it will default to the labelSelector configuration of the deployment",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        },
        "volumeMounts": {
          "description": "Additional volumeMounts to the server main container",
          "items": {
            "required": []
          },
          "required": [],
          "title": "volumeMounts",
          "type": "array"
        },
        "volumes": {
          "description": "Additional volumes to the server pod",
          "items": {
            "required": []
          },
          "required": [],
          "title": "volumes",
          "type": "array"
        }
      },
      "required": [],
      "title": "server",
      "type": "object"
    },
    "serviceAccount": {
      "additionalProperties": true,
      "description": "# Pods Service Account\n# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
      "properties": {
        "annotations": {
          "additionalProperties": true,
          "description": "Annotations to be added to the service account for the redis statefulset",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "automountToken": {
          "default": false,
          "description": "opt in/out of automounting API credentials into container.\nRef: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
          "required": [],
          "title": "automountToken",
          "type": "boolean"
        },
        "create": {
          "default": true,
          "description": "Specifies whether a ServiceAccount should be created",
          "required": [],
          "title": "create",
          "type": "boolean"
        },
        "name": {
          "default": "",
          "description": "The name of the ServiceAccount to use.\nIf not set and create is true, a name is generated using the redis-ha.fullname template",
          "required": [],
          "title": "name",
          "type": "string"
        }
      },
      "required": [],
      "title": "serviceAccount",
      "type": "object"
    },
    "serviceLabels": {
      "additionalProperties": true,
      "description": "Custom labels for redis service",
      "required": [],
      "title": "serviceLabels",
      "type": "object"
    },
    "splitBrainDetection": {
      "additionalProperties": true,
      "properties": {
        "interval": {
          "default": 60,
          "description": "Interval between redis sentinel and server split brain checks (in seconds)",
          "required": [],
          "title": "interval",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "splitBrainDetection resources",
          "required": [],
          "title": "resources",
          "type": "object"
        }
      },
      "required": [],
      "title": "splitBrainDetection",
      "type": "object"
    },
    "sysctlImage": {
      "additionalProperties": true,
      "description": "NOT RECOMMENDED: Additional container in which you can execute arbitrary commands to update sysctl parameters\nYou can now use securityContext.sysctls to leverage this capability\nRef: https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/\n#",
      "properties": {
        "command": {
          "description": "sysctlImage command to execute",
          "items": {
            "required": []
          },
          "required": [],
          "title": "command",
          "type": "array"
        },
        "enabled": {
          "default": false,
          "description": "Enable an init container to modify Kernel settings",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "mountHostSys": {
          "default": false,
          "description": "Mount the host `/sys` folder to `/host-sys`",
          "required": [],
          "title": "mountHostSys",
          "type": "boolean"
        },
        "pullPolicy": {
          "default": "Always",
          "description": "sysctlImage Init container pull policy",
          "required": [],
          "title": "pullPolicy",
          "type": "string"
        },
        "registry": {
          "default": "public.ecr.aws/docker/library",
          "description": "sysctlImage Init container registry",
          "required": [],
          "title": "registry",
          "type": "string"
        },
        "repository": {
          "default": "busybox",
          "description": "sysctlImage Init container name",
          "required": [],
          "title": "repository",
          "type": "string"
        },
        "resources": {
          "additionalProperties": true,
          "description": "sysctlImage resources",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "tag": {
          "default": "1.34.1",
          "description": "sysctlImage Init container tag",
          "required": [],
          "title": "tag",
          "type": "string"
        }
      },
      "required": [],
      "title": "sysctlImage",
      "type": "object"
    },
    "tls": {
      "additionalProperties": true,
      "properties": {
        "caCertFile": {
          "default": "ca.crt",
          "description": "Name of CA certificate file",
          "required": [],
          "title": "caCertFile",
          "type": "string"
        },
        "certFile": {
          "default": "redis.crt",
          "description": "Name of certificate file",
          "required": [],
          "title": "certFile",
          "type": "string"
        },
        "dhParamsFile": {
          "default": "~",
          "description": "(string) Name of Diffie-Hellman (DH) key exchange parameters file (Example: redis.dh)",
          "required": [],
          "title": "dhParamsFile",
          "type": "null"
        },
        "keyFile": {
          "default": "redis.key",
          "description": "Name of key file",
          "required": [],
          "title": "keyFile",
          "type": "string"
        }
      },
      "required": [],
      "title": "tls",
      "type": "object"
    },
    "topologySpreadConstraints": {
      "additionalProperties": true,
      "description": "# https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/",
      "properties": {
        "enabled": {
          "default": false,
          "description": "Enable topology spread constraints",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "maxSkew": {
          "default": "",
          "description": "Max skew of pods tolerated",
          "required": [],
          "title": "maxSkew",
          "type": "string"
        },
        "topologyKey": {
          "default": "",
          "description": "Topology key for spread constraints",
          "required": [],
          "title": "topologyKey",
          "type": "string"
        },
        "whenUnsatisfiable": {
          "default": "",
          "description": "Enforcement policy, hard or soft",
          "required": [],
          "title": "whenUnsatisfiable",
          "type": "string"
        }
      },
      "required": [],
      "title": "topologySpreadConstraints",
      "type": "object"
    }
  },
  "required": [],
  "type": "object"
}