"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""

import k8s.apimachinery.pkg.apis.meta.v1

schema Composition:
    r"""
    A Composition defines a collection of managed resources or functions that
    Crossplane uses to create and manage new composite resources.

    Read the Crossplane documentation for
    [more information about Compositions](https://docs.crossplane.io/latest/concepts/compositions).

    Attributes
    ----------
    apiVersion : str, default is "apiextensions.crossplane.io/v1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Composition", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ApiextensionsCrossplaneIoV1CompositionSpec, default is Undefined, optional
        spec
    """
    apiVersion: "apiextensions.crossplane.io/v1" = "apiextensions.crossplane.io/v1"

    kind: "Composition" = "Composition"

    metadata?: v1.ObjectMeta
    spec?: ApiextensionsCrossplaneIoV1CompositionSpec

schema ApiextensionsCrossplaneIoV1CompositionSpec:
    r"""
    CompositionSpec specifies desired state of a composition.

    Attributes
    ----------
    compositeTypeRef : ApiextensionsCrossplaneIoV1CompositionSpecCompositeTypeRef, default is Undefined, required
        composite type ref
    mode : str, default is "Pipeline", optional
        Mode controls what type or "mode" of Composition will be used.

        "Pipeline" indicates that a Composition specifies a pipeline of
        functions, each of which is responsible for producing composed
        resources that Crossplane should create or update.
    pipeline : [ApiextensionsCrossplaneIoV1CompositionSpecPipelineItems0], default is Undefined, optional
        Pipeline is a list of composition function steps that will be used when a
        composite resource referring to this composition is created. One of
        resources and pipeline must be specified - you cannot specify both.

        The Pipeline is only used by the "Pipeline" mode of Composition. It is
        ignored by other modes.
    writeConnectionSecretsToNamespace : str, default is Undefined, optional
        WriteConnectionSecretsToNamespace specifies the namespace in which the
        connection secrets of composite resource dynamically provisioned using
        this composition will be created.
    """
    compositeTypeRef: ApiextensionsCrossplaneIoV1CompositionSpecCompositeTypeRef

    mode?: "Pipeline" = "Pipeline"
    pipeline?: [ApiextensionsCrossplaneIoV1CompositionSpecPipelineItems0]
    writeConnectionSecretsToNamespace?: str

    check:
        len(pipeline) >= 1 if pipeline
        len(pipeline) <= 99 if pipeline

schema ApiextensionsCrossplaneIoV1CompositionSpecCompositeTypeRef:
    r"""
    CompositeTypeRef specifies the type of composite resource that this
    composition is compatible with.

    Attributes
    ----------
    apiVersion : str, default is Undefined, required
        APIVersion of the type.
    kind : str, default is Undefined, required
        Kind of the type.
    """
    apiVersion: str

    kind: str

schema ApiextensionsCrossplaneIoV1CompositionSpecPipelineItems0:
    r"""
    A PipelineStep in a function pipeline.

    Attributes
    ----------
    credentials : [ApiextensionsCrossplaneIoV1CompositionSpecPipelineItems0CredentialsItems0], default is Undefined, optional
        Credentials are optional credentials that the function needs.
    functionRef : ApiextensionsCrossplaneIoV1CompositionSpecPipelineItems0FunctionRef, default is Undefined, required
        function ref
    input : any, default is Undefined, optional
        Input is an optional, arbitrary Kubernetes resource (i.e. a resource
        with an apiVersion and kind) that will be passed to the function as
        the 'input' of its RunFunctionRequest.
    requirements : ApiextensionsCrossplaneIoV1CompositionSpecPipelineItems0Requirements, default is Undefined, optional
        requirements
    step : str, default is Undefined, required
        Step name. Must be unique within its Pipeline.
    """
    credentials?: [ApiextensionsCrossplaneIoV1CompositionSpecPipelineItems0CredentialsItems0]
    functionRef: ApiextensionsCrossplaneIoV1CompositionSpecPipelineItems0FunctionRef

    input?: any
    requirements?: ApiextensionsCrossplaneIoV1CompositionSpecPipelineItems0Requirements
    step: str

schema ApiextensionsCrossplaneIoV1CompositionSpecPipelineItems0CredentialsItems0:
    r"""
    FunctionCredentials are optional credentials that a function
    needs to run.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of this set of credentials.
    secretRef : ApiextensionsCrossplaneIoV1CompositionSpecPipelineItems0CredentialsItems0SecretRef, default is Undefined, optional
        secret ref
    source : str, default is Undefined, required
        Source of the function credentials.
    """
    name: str

    secretRef?: ApiextensionsCrossplaneIoV1CompositionSpecPipelineItems0CredentialsItems0SecretRef
    source: "None" | "Secret"

schema ApiextensionsCrossplaneIoV1CompositionSpecPipelineItems0CredentialsItems0SecretRef:
    r"""
    A SecretRef is a reference to a secret containing credentials that should
    be supplied to the function.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """
    name: str

    namespace: str

schema ApiextensionsCrossplaneIoV1CompositionSpecPipelineItems0FunctionRef:
    r"""
    FunctionRef is a reference to the function this step should
    execute.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced Function.
    """
    name: str

schema ApiextensionsCrossplaneIoV1CompositionSpecPipelineItems0Requirements:
    r"""
    Requirements are resource requirements that will be satisfied before
    this pipeline step is called for the first time. This allows
    pre-populating required resources without requiring a function to
    request them first.

    Attributes
    ----------
    requiredResources : [ApiextensionsCrossplaneIoV1CompositionSpecPipelineItems0RequirementsRequiredResourcesItems0], default is Undefined, optional
        RequiredResources is a list of resources that must be fetched before
        this function is called.
    """
    requiredResources?: [ApiextensionsCrossplaneIoV1CompositionSpecPipelineItems0RequirementsRequiredResourcesItems0]

schema ApiextensionsCrossplaneIoV1CompositionSpecPipelineItems0RequirementsRequiredResourcesItems0:
    r"""
    RequiredResourceSelector selects a required resource.

    Attributes
    ----------
    apiVersion : str, default is Undefined, required
        APIVersion of the required resource.
    kind : str, default is Undefined, required
        Kind of the required resource.
    matchLabels : {str:str}, default is Undefined, optional
        MatchLabels specifies the set of labels to match for finding the
        required resource. When specified, Name is ignored.
    name : str, default is Undefined, optional
        Name of the required resource.
    namespace : str, default is Undefined, optional
        Namespace of the required resource if it is namespaced.
    requirementName : str, default is Undefined, required
        RequirementName is the unique name to identify this required resource
        in the Required Resources map in the function request.
    """
    apiVersion: str

    kind: str

    matchLabels?: {str:str}
    name?: str
    namespace?: str
    requirementName: str

