"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""

import k8s.apimachinery.pkg.apis.meta.v1

schema CompositeResourceDefinition:
    r"""
    A CompositeResourceDefinition defines the schema for a new custom Kubernetes
    API.

    Read the Crossplane documentation for
    [more information about CustomResourceDefinitions](https://docs.crossplane.io/latest/concepts/composite-resource-definitions).

    Attributes
    ----------
    apiVersion : str, default is "apiextensions.crossplane.io/v2", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "CompositeResourceDefinition", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpec, default is Undefined, optional
        spec
    status : ApiextensionsCrossplaneIoV2CompositeResourceDefinitionStatus, default is Undefined, optional
        status
    """
    apiVersion: "apiextensions.crossplane.io/v2" = "apiextensions.crossplane.io/v2"

    kind: "CompositeResourceDefinition" = "CompositeResourceDefinition"

    metadata?: v1.ObjectMeta
    spec?: ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpec
    status?: ApiextensionsCrossplaneIoV2CompositeResourceDefinitionStatus

schema ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpec:
    r"""
    CompositeResourceDefinitionSpec specifies the desired state of the definition.

    Attributes
    ----------
    claimNames : ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecClaimNames, default is Undefined, optional
        claim names
    connectionSecretKeys : [str], default is Undefined, optional
        ConnectionSecretKeys is the list of connection secret keys the
        defined XR can publish. If the list is empty, all keys will be
        published. If the list isn't empty, any connection secret keys that
        don't appear in the list will be filtered out. Only LegacyCluster XRs
        support connection secrets.

        Deprecated: XR connection secrets aren't supported in
        apiextensions.crossplane.io/v2. Compose a secret instead.
    conversion : ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecConversion, default is Undefined, optional
        conversion
    defaultCompositeDeletePolicy : str, default is Undefined, optional
        DefaultCompositeDeletePolicy is the policy used when deleting the Composite
        that is associated with the Claim if no policy has been specified.

        Deprecated: Claims aren't supported in apiextensions.crossplane.io/v2.
    defaultCompositionRef : ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecDefaultCompositionRef, default is Undefined, optional
        default composition ref
    defaultCompositionUpdatePolicy : str, default is "Automatic", optional
        DefaultCompositionUpdatePolicy is the policy used when updating composites after a new
        Composition Revision has been created if no policy has been specified on the composite.
    enforcedCompositionRef : ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecEnforcedCompositionRef, default is Undefined, optional
        enforced composition ref
    group : str, default is Undefined, required
        Group specifies the API group of the defined composite resource.
        Composite resources are served under `/apis/<group>/...`. Must match the
        name of the XRD (in the form `<names.plural>.<group>`).
    metadata : ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecMetadata, default is Undefined, optional
        metadata
    names : ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecNames, default is Undefined, required
        names
    scope : str, default is "Namespaced", optional
        Scope of the defined composite resource. Namespaced composite resources
        are scoped to a single namespace. Cluster scoped composite resource exist
        outside the scope of any namespace.
    versions : [ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecVersionsItems0], default is Undefined, required
        Versions is the list of all API versions of the defined composite
        resource. Version names are used to compute the order in which served
        versions are listed in API discovery. If the version string is
        "kube-like", it will sort above non "kube-like" version strings, which
        are ordered lexicographically. "Kube-like" versions start with a "v",
        then are followed by a number (the major version), then optionally the
        string "alpha" or "beta" and another number (the minor version). These
        are sorted first by GA > beta > alpha (where GA is a version with no
        suffix such as beta or alpha), and then by comparing major version, then
        minor version. An example sorted list of versions: v10, v2, v1, v11beta2,
        v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
    """
    claimNames?: ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecClaimNames
    connectionSecretKeys?: [str]
    conversion?: ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecConversion
    defaultCompositeDeletePolicy?: "Background" | "Foreground"
    defaultCompositionRef?: ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecDefaultCompositionRef
    defaultCompositionUpdatePolicy?: "Automatic" | "Manual" = "Automatic"
    enforcedCompositionRef?: ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecEnforcedCompositionRef
    group: str

    metadata?: ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecMetadata
    names: ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecNames

    scope?: "Namespaced" | "Cluster" = "Namespaced"
    versions: [ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecVersionsItems0]

schema ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecClaimNames:
    r"""
    ClaimNames specifies the names of an optional composite resource claim.
    When claim names are specified Crossplane will create a namespaced
    'composite resource claim' CRD that corresponds to the defined composite
    resource. This composite resource claim acts as a namespaced proxy for
    the composite resource; creating, updating, or deleting the claim will
    create, update, or delete a corresponding composite resource. You may add
    claim names to an existing CompositeResourceDefinition, but they cannot
    be changed or removed once they have been set.

    Deprecated: Claims aren't supported in apiextensions.crossplane.io/v2.

    Attributes
    ----------
    categories : [str], default is Undefined, optional
        categories is a list of grouped resources this custom resource belongs to (e.g. 'all').
        This is published in API discovery documents, and used by clients to support invocations like
        `kubectl get all`.
    kind : str, default is Undefined, required
        kind is the serialized kind of the resource. It is normally CamelCase and singular.
        Custom resource instances will use this value as the `kind` attribute in API calls.
    listKind : str, default is Undefined, optional
        listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
    plural : str, default is Undefined, required
        plural is the plural name of the resource to serve.
        The custom resources are served under `/apis/<group>/<version>/.../<plural>`.
        Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
        Must be all lowercase.
    shortNames : [str], default is Undefined, optional
        shortNames are short names for the resource, exposed in API discovery documents,
        and used by clients to support invocations like `kubectl get <shortname>`.
        It must be all lowercase.
    singular : str, default is Undefined, optional
        singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
    """
    categories?: [str]
    kind: str

    listKind?: str
    plural: str

    shortNames?: [str]
    singular?: str

schema ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecConversion:
    r"""
    Conversion defines all conversion settings for the defined Composite resource.

    Attributes
    ----------
    strategy : str, default is Undefined, required
        strategy specifies how custom resources are converted between versions. Allowed values are:
        - `"None"`: The converter only change the apiVersion and would not touch any other field in the custom resource.
        - `"Webhook"`: API Server will call to an external webhook to do the conversion. Additional information
          is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhook to be set.
    webhook : ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecConversionWebhook, default is Undefined, optional
        webhook
    """
    strategy: str

    webhook?: ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecConversionWebhook

schema ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecConversionWebhook:
    r"""
    webhook describes how to call the conversion webhook. Required when `strategy` is set to `"Webhook"`.

    Attributes
    ----------
    clientConfig : ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecConversionWebhookClientConfig, default is Undefined, optional
        client config
    conversionReviewVersions : [str], default is Undefined, required
        conversionReviewVersions is an ordered list of preferred `ConversionReview`
        versions the Webhook expects. The API server will use the first version in
        the list which it supports. If none of the versions specified in this list
        are supported by API server, conversion will fail for the custom resource.
        If a persisted Webhook configuration specifies allowed versions and does not
        include any versions known to the API Server, calls to the webhook will fail.
    """
    clientConfig?: ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecConversionWebhookClientConfig
    conversionReviewVersions: [str]

schema ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecConversionWebhookClientConfig:
    r"""
    clientConfig is the instructions for how to call the webhook if strategy is `Webhook`.

    Attributes
    ----------
    caBundle : str, default is Undefined, optional
        caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate.
        If unspecified, system trust roots on the apiserver are used.
    service : ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecConversionWebhookClientConfigService, default is Undefined, optional
        service
    url : str, default is Undefined, optional
        url gives the location of the webhook, in standard URL form
        (`scheme://host:port/path`). Exactly one of `url` or `service`
        must be specified.

        The `host` should not refer to a service running in the cluster; use
        the `service` field instead. The host might be resolved via external
        DNS in some apiservers (e.g., `kube-apiserver` cannot resolve
        in-cluster DNS as that would be a layering violation). `host` may
        also be an IP address.

        Please note that using `localhost` or `127.0.0.1` as a `host` is
        risky unless you take great care to run this webhook on all hosts
        which run an apiserver which might need to make calls to this
        webhook. Such installs are likely to be non-portable, i.e., not easy
        to turn up in a new cluster.

        The scheme must be "https"; the URL must begin with "https://".

        A path is optional, and if present may be any string permissible in
        a URL. You may use the path to pass an arbitrary string to the
        webhook, for example, a cluster identifier.

        Attempting to use a user or basic auth e.g. "user:password@" is not
        allowed. Fragments ("#...") and query parameters ("?...") are not
        allowed, either.
    """
    caBundle?: str
    service?: ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecConversionWebhookClientConfigService
    url?: str

schema ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecConversionWebhookClientConfigService:
    r"""
    service is a reference to the service for this webhook. Either
    service or url must be specified.

    If the webhook is running within the cluster, then you should use `service`.

    Attributes
    ----------
    name : str, default is Undefined, required
        name is the name of the service.
        Required
    namespace : str, default is Undefined, required
        namespace is the namespace of the service.
        Required
    path : str, default is Undefined, optional
        path is an optional URL path at which the webhook will be contacted.
    port : int, default is Undefined, optional
        port is an optional service port at which the webhook will be contacted.
        `port` should be a valid port number (1-65535, inclusive).
        Defaults to 443 for backward compatibility.
    """
    name: str

    namespace: str

    path?: str
    port?: int

schema ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecDefaultCompositionRef:
    r"""
    DefaultCompositionRef refers to the Composition resource that will be used
    in case no composition selector is given.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the Composition.
    """
    name: str

schema ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecEnforcedCompositionRef:
    r"""
    EnforcedCompositionRef refers to the Composition resource that will be used
    by all composite instances whose schema is defined by this definition.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the Composition.
    """
    name: str

schema ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecMetadata:
    r"""
    Metadata specifies the desired metadata for the defined composite resource and claim CRD's.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is an unstructured key value map stored with a resource that may be
        set by external tools to store and retrieve arbitrary metadata. They are not
        queryable and should be preserved when modifying objects.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
    labels : {str:str}, default is Undefined, optional
        Map of string keys and values that can be used to organize and categorize
        (scope and select) objects. May match selectors of replication controllers
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
        and services.
        These labels are added to the composite resource and claim CRD's in addition
        to any labels defined by `CompositionResourceDefinition` `metadata.labels`.
    """
    annotations?: {str:str}
    labels?: {str:str}

schema ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecNames:
    r"""
    Names specifies the resource and kind names of the defined composite
    resource.

    Attributes
    ----------
    categories : [str], default is Undefined, optional
        categories is a list of grouped resources this custom resource belongs to (e.g. 'all').
        This is published in API discovery documents, and used by clients to support invocations like
        `kubectl get all`.
    kind : str, default is Undefined, required
        kind is the serialized kind of the resource. It is normally CamelCase and singular.
        Custom resource instances will use this value as the `kind` attribute in API calls.
    listKind : str, default is Undefined, optional
        listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
    plural : str, default is Undefined, required
        plural is the plural name of the resource to serve.
        The custom resources are served under `/apis/<group>/<version>/.../<plural>`.
        Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
        Must be all lowercase.
    shortNames : [str], default is Undefined, optional
        shortNames are short names for the resource, exposed in API discovery documents,
        and used by clients to support invocations like `kubectl get <shortname>`.
        It must be all lowercase.
    singular : str, default is Undefined, optional
        singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
    """
    categories?: [str]
    kind: str

    listKind?: str
    plural: str

    shortNames?: [str]
    singular?: str

schema ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecVersionsItems0:
    r"""
    CompositeResourceDefinitionVersion describes a version of an XR.

    Attributes
    ----------
    additionalPrinterColumns : [ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecVersionsItems0AdditionalPrinterColumnsItems0], default is Undefined, optional
        AdditionalPrinterColumns specifies additional columns returned in Table
        output. If no columns are specified, a single column displaying the age
        of the custom resource is used. See the following link for details:
        https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables
    deprecated : bool, default is Undefined, optional
        The deprecated field specifies that this version is deprecated and should
        not be used.
    deprecationWarning : str, default is Undefined, optional
        DeprecationWarning specifies the message that should be shown to the user
        when using this version.
    name : str, default is Undefined, required
        Name of this version, e.g. “v1”, “v2beta1”, etc. Composite resources are
        served under this version at `/apis/<group>/<version>/...` if `served` is
        true.
    referenceable : bool, default is Undefined, required
        Referenceable specifies that this version may be referenced by a
        Composition in order to configure which resources an XR may be composed
        of. Exactly one version must be marked as referenceable; all Compositions
        must target only the referenceable version. The referenceable version
        must be served. It's mapped to the CRD's `spec.versions[*].storage` field.
    $schema : ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecVersionsItems0Schema, default is Undefined, optional
        schema
    served : bool, default is Undefined, required
        Served specifies that this version should be served via REST APIs.
    """
    additionalPrinterColumns?: [ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecVersionsItems0AdditionalPrinterColumnsItems0]
    deprecated?: bool
    deprecationWarning?: str
    name: str

    referenceable: bool

    $schema?: ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecVersionsItems0Schema
    served: bool

    check:
        len(deprecationWarning) <= 256 if deprecationWarning

schema ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecVersionsItems0AdditionalPrinterColumnsItems0:
    r"""
    CustomResourceColumnDefinition specifies a column for server side printing.

    Attributes
    ----------
    description : str, default is Undefined, optional
        description is a human readable description of this column.
    format : str, default is Undefined, optional
        format is an optional OpenAPI type definition for this column. The 'name' format is applied
        to the primary identifier column to assist in clients identifying column is the resource name.
        See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
    jsonPath : str, default is Undefined, required
        jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against
        each custom resource to produce the value for this column.
    name : str, default is Undefined, required
        name is a human readable name for the column.
    priority : int, default is Undefined, optional
        priority is an integer defining the relative importance of this column compared to others. Lower
        numbers are considered higher priority. Columns that may be omitted in limited space scenarios
        should be given a priority greater than 0.
    $type : str, default is Undefined, required
        type is an OpenAPI type definition for this column.
        See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
    """
    description?: str
    format?: str
    jsonPath: str

    name: str

    priority?: int
    $type: str

schema ApiextensionsCrossplaneIoV2CompositeResourceDefinitionSpecVersionsItems0Schema:
    r"""
    Schema describes the schema used for validation, pruning, and defaulting
    of this version of the defined composite resource. Fields required by all
    composite resources will be injected into this schema automatically, and
    will override equivalently named fields in this schema. Omitting this
    schema results in a schema that contains only the fields required by all
    composite resources.

    Attributes
    ----------
    openAPIV3Schema : any, default is Undefined, optional
        OpenAPIV3Schema is the OpenAPI v3 schema to use for validation and
        pruning.
    """
    openAPIV3Schema?: any

schema ApiextensionsCrossplaneIoV2CompositeResourceDefinitionStatus:
    r"""
    CompositeResourceDefinitionStatus shows the observed state of the definition.

    Attributes
    ----------
    conditions : [ApiextensionsCrossplaneIoV2CompositeResourceDefinitionStatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    controllers : ApiextensionsCrossplaneIoV2CompositeResourceDefinitionStatusControllers, default is Undefined, optional
        controllers
    """
    conditions?: [ApiextensionsCrossplaneIoV2CompositeResourceDefinitionStatusConditionsItems0]
    controllers?: ApiextensionsCrossplaneIoV2CompositeResourceDefinitionStatusControllers

schema ApiextensionsCrossplaneIoV2CompositeResourceDefinitionStatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """
    lastTransitionTime: str

    message?: str
    observedGeneration?: int
    reason: str

    status: str

    $type: str

schema ApiextensionsCrossplaneIoV2CompositeResourceDefinitionStatusControllers:
    r"""
    Controllers represents the status of the controllers that power this
    composite resource definition.

    Attributes
    ----------
    compositeResourceClaimType : ApiextensionsCrossplaneIoV2CompositeResourceDefinitionStatusControllersCompositeResourceClaimType, default is Undefined, optional
        composite resource claim type
    compositeResourceType : ApiextensionsCrossplaneIoV2CompositeResourceDefinitionStatusControllersCompositeResourceType, default is Undefined, optional
        composite resource type
    """
    compositeResourceClaimType?: ApiextensionsCrossplaneIoV2CompositeResourceDefinitionStatusControllersCompositeResourceClaimType
    compositeResourceType?: ApiextensionsCrossplaneIoV2CompositeResourceDefinitionStatusControllersCompositeResourceType

schema ApiextensionsCrossplaneIoV2CompositeResourceDefinitionStatusControllersCompositeResourceClaimType:
    r"""
    The CompositeResourceClaimTypeRef is the type of composite resource claim
    that Crossplane is currently reconciling for this definition. Its version
    will eventually become consistent with the definition's referenceable
    version. Note that clients may interact with any served type; this is
    simply the type that Crossplane interacts with.

    Attributes
    ----------
    apiVersion : str, default is Undefined, required
        APIVersion of the type.
    kind : str, default is Undefined, required
        Kind of the type.
    """
    apiVersion: str

    kind: str

schema ApiextensionsCrossplaneIoV2CompositeResourceDefinitionStatusControllersCompositeResourceType:
    r"""
    The CompositeResourceTypeRef is the type of composite resource that
    Crossplane is currently reconciling for this definition. Its version will
    eventually become consistent with the definition's referenceable version.
    Note that clients may interact with any served type; this is simply the
    type that Crossplane interacts with.

    Attributes
    ----------
    apiVersion : str, default is Undefined, required
        APIVersion of the type.
    kind : str, default is Undefined, required
        Kind of the type.
    """
    apiVersion: str

    kind: str

