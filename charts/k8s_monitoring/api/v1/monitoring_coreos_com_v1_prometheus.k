"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""

import regex
import k8s.apimachinery.pkg.apis.meta.v1

_regex_match = regex.match

schema Prometheus:
    r"""
    The `Prometheus` custom resource definition (CRD) defines a desired [Prometheus](https://prometheus.io/docs/prometheus) setup to run in a Kubernetes cluster. It allows to specify many options such as the number of replicas, persistent storage, and Alertmanagers where firing alerts should be sent and many more.

    For each `Prometheus` resource, the Operator deploys one or several `StatefulSet` objects in the same namespace. The number of StatefulSets is equal to the number of shards which is 1 by default.

    The resource defines via label and namespace selectors which `ServiceMonitor`, `PodMonitor`, `Probe` and `PrometheusRule` objects should be associated to the deployed Prometheus instances.

    The Operator continuously reconciles the scrape and rules configuration and a sidecar container running in the Prometheus pods triggers a reload of the configuration when needed.

    Attributes
    ----------
    apiVersion : str, default is "monitoring.coreos.com/v1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Prometheus", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : MonitoringCoreosComV1PrometheusSpec, default is Undefined, required
        spec
    status : MonitoringCoreosComV1PrometheusStatus, default is Undefined, optional
        status
    """
    apiVersion: "monitoring.coreos.com/v1" = "monitoring.coreos.com/v1"

    kind: "Prometheus" = "Prometheus"

    metadata?: v1.ObjectMeta
    spec: MonitoringCoreosComV1PrometheusSpec

    status?: MonitoringCoreosComV1PrometheusStatus

schema MonitoringCoreosComV1PrometheusSpec:
    r"""
    spec defines the specification of the desired behavior of the Prometheus cluster. More info:
    https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

    Attributes
    ----------
    additionalAlertManagerConfigs : MonitoringCoreosComV1PrometheusSpecAdditionalAlertManagerConfigs, default is Undefined, optional
        additional alert manager configs
    additionalAlertRelabelConfigs : MonitoringCoreosComV1PrometheusSpecAdditionalAlertRelabelConfigs, default is Undefined, optional
        additional alert relabel configs
    additionalArgs : [MonitoringCoreosComV1PrometheusSpecAdditionalArgsItems0], default is Undefined, optional
        additionalArgs allows setting additional arguments for the 'prometheus' container.

        It is intended for e.g. activating hidden flags which are not supported by
        the dedicated configuration options yet. The arguments are passed as-is to the
        Prometheus container which may cause issues if they are invalid or not supported
        by the given Prometheus version.

        In case of an argument conflict (e.g. an argument which is already set by the
        operator itself) or when providing an invalid argument, the reconciliation will
        fail and an error will be logged.
    additionalScrapeConfigs : MonitoringCoreosComV1PrometheusSpecAdditionalScrapeConfigs, default is Undefined, optional
        additional scrape configs
    affinity : MonitoringCoreosComV1PrometheusSpecAffinity, default is Undefined, optional
        affinity
    alerting : MonitoringCoreosComV1PrometheusSpecAlerting, default is Undefined, optional
        alerting
    allowOverlappingBlocks : bool, default is Undefined, optional
        allowOverlappingBlocks enables vertical compaction and vertical query
        merge in Prometheus.

        Deprecated: this flag has no effect for Prometheus >= 2.39.0 where overlapping blocks are enabled by default.
    apiserverConfig : MonitoringCoreosComV1PrometheusSpecApiserverConfig, default is Undefined, optional
        apiserver config
    arbitraryFSAccessThroughSMs : MonitoringCoreosComV1PrometheusSpecArbitraryFSAccessThroughSMs, default is Undefined, optional
        arbitrary f s access through s ms
    automountServiceAccountToken : bool, default is Undefined, optional
        automountServiceAccountToken defines whether a service account token should be automatically mounted in the pod.
        If the field isn't set, the operator mounts the service account token by default.

        **Warning:** be aware that by default, Prometheus requires the service account token for Kubernetes service discovery.
        It is possible to use strategic merge patch to project the service account token into the 'prometheus' container.
    baseImage : str, default is Undefined, optional
        baseImage is deprecated: use 'spec.image' instead.
    bodySizeLimit : str, default is Undefined, optional
        bodySizeLimit defines per-scrape on response body size.
        Only valid in Prometheus versions 2.45.0 and newer.

        Note that the global limit only applies to scrape objects that don't specify an explicit limit value.
        If you want to enforce a maximum limit for all scrape objects, refer to enforcedBodySizeLimit.
    configMaps : [str], default is Undefined, optional
        configMaps defines a list of ConfigMaps in the same namespace as the Prometheus
        object, which shall be mounted into the Prometheus Pods.
        Each ConfigMap is added to the StatefulSet definition as a volume named `configmap-<configmap-name>`.
        The ConfigMaps are mounted into /etc/prometheus/configmaps/<configmap-name> in the 'prometheus' container.
    containers : [MonitoringCoreosComV1PrometheusSpecContainersItems0], default is Undefined, optional
        containers allows injecting additional containers or modifying operator
        generated containers. This can be used to allow adding an authentication
        proxy to the Pods or to change the behavior of an operator generated
        container. Containers described here modify an operator generated
        container if they share the same name and modifications are done via a
        strategic merge patch.

        The names of containers managed by the operator are:
        * `prometheus`
        * `config-reloader`
        * `thanos-sidecar`

        Overriding containers is entirely outside the scope of what the
        maintainers will support and by doing so, you accept that this behaviour
        may break at any time without notice.
    convertClassicHistogramsToNHCB : bool, default is Undefined, optional
        convertClassicHistogramsToNHCB defines whether to convert all scraped classic histograms into a native
        histogram with custom buckets.

        It requires Prometheus >= v3.4.0.
    disableCompaction : bool, default is Undefined, optional
        disableCompaction when true, the Prometheus compaction is disabled.
        When `spec.thanos.objectStorageConfig` or `spec.objectStorageConfigFile` are defined, the operator automatically
        disables block compaction to avoid race conditions during block uploads (as the Thanos documentation recommends).
    dnsConfig : MonitoringCoreosComV1PrometheusSpecDNSConfig, default is Undefined, optional
        dns config
    dnsPolicy : str, default is Undefined, optional
        dnsPolicy defines the DNS policy for the pods.
    enableAdminAPI : bool, default is Undefined, optional
        enableAdminAPI defines access to the Prometheus web admin API.

        WARNING: Enabling the admin APIs enables mutating endpoints, to delete data,
        shutdown Prometheus, and more. Enabling this should be done with care and the
        user is advised to add additional authentication authorization via a proxy to
        ensure only clients authorized to perform these actions can do so.

        For more information:
        https://prometheus.io/docs/prometheus/latest/querying/api/#tsdb-admin-apis
    enableFeatures : [str], default is Undefined, optional
        enableFeatures enables access to Prometheus feature flags. By default, no features are enabled.

        Enabling features which are disabled by default is entirely outside the
        scope of what the maintainers will support and by doing so, you accept
        that this behaviour may break at any time without notice.

        For more information see https://prometheus.io/docs/prometheus/latest/feature_flags/
    enableOTLPReceiver : bool, default is Undefined, optional
        enableOTLPReceiver defines the Prometheus to be used as a receiver for the OTLP Metrics protocol.

        Note that the OTLP receiver endpoint is automatically enabled if `.spec.otlpConfig` is defined.

        It requires Prometheus >= v2.47.0.
    enableRemoteWriteReceiver : bool, default is Undefined, optional
        enableRemoteWriteReceiver defines the Prometheus to be used as a receiver for the Prometheus remote
        write protocol.

        WARNING: This is not considered an efficient way of ingesting samples.
        Use it with caution for specific low-volume use cases.
        It is not suitable for replacing the ingestion via scraping and turning
        Prometheus into a push-based metrics collection system.
        For more information see https://prometheus.io/docs/prometheus/latest/querying/api/#remote-write-receiver

        It requires Prometheus >= v2.33.0.
    enableServiceLinks : bool, default is Undefined, optional
        enableServiceLinks defines whether information about services should be injected into pod's environment variables
    enforcedBodySizeLimit : str, default is Undefined, optional
        enforcedBodySizeLimit when defined specifies a global limit on the size
        of uncompressed response body that will be accepted by Prometheus.
        Targets responding with a body larger than this many bytes will cause
        the scrape to fail.

        It requires Prometheus >= v2.28.0.

        When both `enforcedBodySizeLimit` and `bodySizeLimit` are defined and greater than zero, the following rules apply:
        * Scrape objects without a defined bodySizeLimit value will inherit the global bodySizeLimit value (Prometheus >= 2.45.0) or the enforcedBodySizeLimit value (Prometheus < v2.45.0).
          If Prometheus version is >= 2.45.0 and the `enforcedBodySizeLimit` is greater than the `bodySizeLimit`, the `bodySizeLimit` will be set to `enforcedBodySizeLimit`.
        * Scrape objects with a bodySizeLimit value less than or equal to enforcedBodySizeLimit keep their specific value.
        * Scrape objects with a bodySizeLimit value greater than enforcedBodySizeLimit are set to enforcedBodySizeLimit.
    enforcedKeepDroppedTargets : int, default is Undefined, optional
        enforcedKeepDroppedTargets when defined specifies a global limit on the number of targets
        dropped by relabeling that will be kept in memory. The value overrides
        any `spec.keepDroppedTargets` set by
        ServiceMonitor, PodMonitor, Probe objects unless `spec.keepDroppedTargets` is
        greater than zero and less than `spec.enforcedKeepDroppedTargets`.

        It requires Prometheus >= v2.47.0.

        When both `enforcedKeepDroppedTargets` and `keepDroppedTargets` are defined and greater than zero, the following rules apply:
        * Scrape objects without a defined keepDroppedTargets value will inherit the global keepDroppedTargets value (Prometheus >= 2.45.0) or the enforcedKeepDroppedTargets value (Prometheus < v2.45.0).
          If Prometheus version is >= 2.45.0 and the `enforcedKeepDroppedTargets` is greater than the `keepDroppedTargets`, the `keepDroppedTargets` will be set to `enforcedKeepDroppedTargets`.
        * Scrape objects with a keepDroppedTargets value less than or equal to enforcedKeepDroppedTargets keep their specific value.
        * Scrape objects with a keepDroppedTargets value greater than enforcedKeepDroppedTargets are set to enforcedKeepDroppedTargets.
    enforcedLabelLimit : int, default is Undefined, optional
        enforcedLabelLimit when defined specifies a global limit on the number
        of labels per sample. The value overrides any `spec.labelLimit` set by
        ServiceMonitor, PodMonitor, Probe objects unless `spec.labelLimit` is
        greater than zero and less than `spec.enforcedLabelLimit`.

        It requires Prometheus >= v2.27.0.

        When both `enforcedLabelLimit` and `labelLimit` are defined and greater than zero, the following rules apply:
        * Scrape objects without a defined labelLimit value will inherit the global labelLimit value (Prometheus >= 2.45.0) or the enforcedLabelLimit value (Prometheus < v2.45.0).
          If Prometheus version is >= 2.45.0 and the `enforcedLabelLimit` is greater than the `labelLimit`, the `labelLimit` will be set to `enforcedLabelLimit`.
        * Scrape objects with a labelLimit value less than or equal to enforcedLabelLimit keep their specific value.
        * Scrape objects with a labelLimit value greater than enforcedLabelLimit are set to enforcedLabelLimit.
    enforcedLabelNameLengthLimit : int, default is Undefined, optional
        enforcedLabelNameLengthLimit when defined specifies a global limit on the length
        of labels name per sample. The value overrides any `spec.labelNameLengthLimit` set by
        ServiceMonitor, PodMonitor, Probe objects unless `spec.labelNameLengthLimit` is
        greater than zero and less than `spec.enforcedLabelNameLengthLimit`.

        It requires Prometheus >= v2.27.0.

        When both `enforcedLabelNameLengthLimit` and `labelNameLengthLimit` are defined and greater than zero, the following rules apply:
        * Scrape objects without a defined labelNameLengthLimit value will inherit the global labelNameLengthLimit value (Prometheus >= 2.45.0) or the enforcedLabelNameLengthLimit value (Prometheus < v2.45.0).
          If Prometheus version is >= 2.45.0 and the `enforcedLabelNameLengthLimit` is greater than the `labelNameLengthLimit`, the `labelNameLengthLimit` will be set to `enforcedLabelNameLengthLimit`.
        * Scrape objects with a labelNameLengthLimit value less than or equal to enforcedLabelNameLengthLimit keep their specific value.
        * Scrape objects with a labelNameLengthLimit value greater than enforcedLabelNameLengthLimit are set to enforcedLabelNameLengthLimit.
    enforcedLabelValueLengthLimit : int, default is Undefined, optional
        enforcedLabelValueLengthLimit when not null defines a global limit on the length
        of labels value per sample. The value overrides any `spec.labelValueLengthLimit` set by
        ServiceMonitor, PodMonitor, Probe objects unless `spec.labelValueLengthLimit` is
        greater than zero and less than `spec.enforcedLabelValueLengthLimit`.

        It requires Prometheus >= v2.27.0.

        When both `enforcedLabelValueLengthLimit` and `labelValueLengthLimit` are defined and greater than zero, the following rules apply:
        * Scrape objects without a defined labelValueLengthLimit value will inherit the global labelValueLengthLimit value (Prometheus >= 2.45.0) or the enforcedLabelValueLengthLimit value (Prometheus < v2.45.0).
          If Prometheus version is >= 2.45.0 and the `enforcedLabelValueLengthLimit` is greater than the `labelValueLengthLimit`, the `labelValueLengthLimit` will be set to `enforcedLabelValueLengthLimit`.
        * Scrape objects with a labelValueLengthLimit value less than or equal to enforcedLabelValueLengthLimit keep their specific value.
        * Scrape objects with a labelValueLengthLimit value greater than enforcedLabelValueLengthLimit are set to enforcedLabelValueLengthLimit.
    enforcedNamespaceLabel : str, default is Undefined, optional
        enforcedNamespaceLabel when not empty, a label will be added to:

        1. All metrics scraped from `ServiceMonitor`, `PodMonitor`, `Probe` and `ScrapeConfig` objects.
        2. All metrics generated from recording rules defined in `PrometheusRule` objects.
        3. All alerts generated from alerting rules defined in `PrometheusRule` objects.
        4. All vector selectors of PromQL expressions defined in `PrometheusRule` objects.

        The label will not added for objects referenced in `spec.excludedFromEnforcement`.

        The label's name is this field's value.
        The label's value is the namespace of the `ServiceMonitor`,
        `PodMonitor`, `Probe`, `PrometheusRule` or `ScrapeConfig` object.
    enforcedSampleLimit : int, default is Undefined, optional
        enforcedSampleLimit when defined specifies a global limit on the number
        of scraped samples that will be accepted. This overrides any
        `spec.sampleLimit` set by ServiceMonitor, PodMonitor, Probe objects
        unless `spec.sampleLimit` is greater than zero and less than
        `spec.enforcedSampleLimit`.

        It is meant to be used by admins to keep the overall number of
        samples/series under a desired limit.

        When both `enforcedSampleLimit` and `sampleLimit` are defined and greater than zero, the following rules apply:
        * Scrape objects without a defined sampleLimit value will inherit the global sampleLimit value (Prometheus >= 2.45.0) or the enforcedSampleLimit value (Prometheus < v2.45.0).
          If Prometheus version is >= 2.45.0 and the `enforcedSampleLimit` is greater than the `sampleLimit`, the `sampleLimit` will be set to `enforcedSampleLimit`.
        * Scrape objects with a sampleLimit value less than or equal to enforcedSampleLimit keep their specific value.
        * Scrape objects with a sampleLimit value greater than enforcedSampleLimit are set to enforcedSampleLimit.
    enforcedTargetLimit : int, default is Undefined, optional
        enforcedTargetLimit when defined specifies a global limit on the number
        of scraped targets. The value overrides any `spec.targetLimit` set by
        ServiceMonitor, PodMonitor, Probe objects unless `spec.targetLimit` is
        greater than zero and less than `spec.enforcedTargetLimit`.

        It is meant to be used by admins to to keep the overall number of
        targets under a desired limit.

        When both `enforcedTargetLimit` and `targetLimit` are defined and greater than zero, the following rules apply:
        * Scrape objects without a defined targetLimit value will inherit the global targetLimit value (Prometheus >= 2.45.0) or the enforcedTargetLimit value (Prometheus < v2.45.0).
          If Prometheus version is >= 2.45.0 and the `enforcedTargetLimit` is greater than the `targetLimit`, the `targetLimit` will be set to `enforcedTargetLimit`.
        * Scrape objects with a targetLimit value less than or equal to enforcedTargetLimit keep their specific value.
        * Scrape objects with a targetLimit value greater than enforcedTargetLimit are set to enforcedTargetLimit.
    evaluationInterval : str, default is "30s", optional
        evaluationInterval defines the interval between rule evaluations.
        Default: "30s"
    excludedFromEnforcement : [MonitoringCoreosComV1PrometheusSpecExcludedFromEnforcementItems0], default is Undefined, optional
        excludedFromEnforcement defines the list of references to PodMonitor, ServiceMonitor, Probe and PrometheusRule objects
        to be excluded from enforcing a namespace label of origin.

        It is only applicable if `spec.enforcedNamespaceLabel` set to true.
    exemplars : MonitoringCoreosComV1PrometheusSpecExemplars, default is Undefined, optional
        exemplars
    externalLabels : {str:str}, default is Undefined, optional
        externalLabels defines the labels to add to any time series or alerts when communicating with
        external systems (federation, remote storage, Alertmanager).
        Labels defined by `spec.replicaExternalLabelName` and
        `spec.prometheusExternalLabelName` take precedence over this list.
    externalUrl : str, default is Undefined, optional
        externalUrl defines the external URL under which the Prometheus service is externally
        available. This is necessary to generate correct URLs (for instance if
        Prometheus is accessible behind an Ingress resource).
    hostAliases : [MonitoringCoreosComV1PrometheusSpecHostAliasesItems0], default is Undefined, optional
        hostAliases defines the optional list of hosts and IPs that will be injected into the Pod's
        hosts file if specified.
    hostNetwork : bool, default is Undefined, optional
        hostNetwork defines the host's network namespace if true.

        Make sure to understand the security implications if you want to enable
        it (https://kubernetes.io/docs/concepts/configuration/overview/ ).

        When hostNetwork is enabled, this will set the DNS policy to
        `ClusterFirstWithHostNet` automatically (unless `.spec.DNSPolicy` is set
        to a different value).
    hostUsers : bool, default is Undefined, optional
        hostUsers supports the user space in Kubernetes.

        More info: https://kubernetes.io/docs/tasks/configure-pod-container/user-namespaces/

        The feature requires at least Kubernetes 1.28 with the `UserNamespacesSupport` feature gate enabled.
        Starting Kubernetes 1.33, the feature is enabled by default.
    ignoreNamespaceSelectors : bool, default is Undefined, optional
        ignoreNamespaceSelectors when true, `spec.namespaceSelector` from all PodMonitor, ServiceMonitor
        and Probe objects will be ignored. They will only discover targets
        within the namespace of the PodMonitor, ServiceMonitor and Probe
        object.
    image : str, default is Undefined, optional
        image defines the container image name for Prometheus. If specified, it takes precedence
        over the `spec.baseImage`, `spec.tag` and `spec.sha` fields.

        Specifying `spec.version` is still necessary to ensure the Prometheus
        Operator knows which version of Prometheus is being configured.

        If neither `spec.image` nor `spec.baseImage` are defined, the operator
        will use the latest upstream version of Prometheus available at the time
        when the operator was released.
    imagePullPolicy : str, default is Undefined, optional
        imagePullPolicy defines the image pull policy for the 'prometheus', 'init-config-reloader' and 'config-reloader' containers.
        See https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy for more details.
    imagePullSecrets : [MonitoringCoreosComV1PrometheusSpecImagePullSecretsItems0], default is Undefined, optional
        imagePullSecrets defines an optional list of references to Secrets in the same namespace
        to use for pulling images from registries.
        See http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod
    initContainers : [MonitoringCoreosComV1PrometheusSpecInitContainersItems0], default is Undefined, optional
        initContainers allows injecting initContainers to the Pod definition. Those
        can be used to e.g.  fetch secrets for injection into the Prometheus
        configuration from external sources. Any errors during the execution of
        an initContainer will lead to a restart of the Pod. More info:
        https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
        InitContainers described here modify an operator generated init
        containers if they share the same name and modifications are done via a
        strategic merge patch.

        The names of init container name managed by the operator are:
        * `init-config-reloader`.

        Overriding init containers is entirely outside the scope of what the
        maintainers will support and by doing so, you accept that this behaviour
        may break at any time without notice.
    keepDroppedTargets : int, default is Undefined, optional
        keepDroppedTargets defines the per-scrape limit on the number of targets dropped by relabeling
        that will be kept in memory. 0 means no limit.

        It requires Prometheus >= v2.47.0.

        Note that the global limit only applies to scrape objects that don't specify an explicit limit value.
        If you want to enforce a maximum limit for all scrape objects, refer to enforcedKeepDroppedTargets.
    labelLimit : int, default is Undefined, optional
        labelLimit defines per-scrape limit on number of labels that will be accepted for a sample.
        Only valid in Prometheus versions 2.45.0 and newer.

        Note that the global limit only applies to scrape objects that don't specify an explicit limit value.
        If you want to enforce a maximum limit for all scrape objects, refer to enforcedLabelLimit.
    labelNameLengthLimit : int, default is Undefined, optional
        labelNameLengthLimit defines the per-scrape limit on length of labels name that will be accepted for a sample.
        Only valid in Prometheus versions 2.45.0 and newer.

        Note that the global limit only applies to scrape objects that don't specify an explicit limit value.
        If you want to enforce a maximum limit for all scrape objects, refer to enforcedLabelNameLengthLimit.
    labelValueLengthLimit : int, default is Undefined, optional
        labelValueLengthLimit defines the per-scrape limit on length of labels value that will be accepted for a sample.
        Only valid in Prometheus versions 2.45.0 and newer.

        Note that the global limit only applies to scrape objects that don't specify an explicit limit value.
        If you want to enforce a maximum limit for all scrape objects, refer to enforcedLabelValueLengthLimit.
    listenLocal : bool, default is Undefined, optional
        listenLocal when true, the Prometheus server listens on the loopback address
        instead of the Pod IP's address.
    logFormat : str, default is Undefined, optional
        logFormat for Log level for Prometheus and the config-reloader sidecar.
    logLevel : str, default is Undefined, optional
        logLevel for Prometheus and the config-reloader sidecar.
    maximumStartupDurationSeconds : int, default is Undefined, optional
        maximumStartupDurationSeconds defines the maximum time that the `prometheus` container's startup probe will wait before being considered failed. The startup probe will return success after the WAL replay is complete.
        If set, the value should be greater than 60 (seconds). Otherwise it will be equal to 900 seconds (15 minutes).
    minReadySeconds : int, default is Undefined, optional
        minReadySeconds defines the minimum number of seconds for which a newly created Pod should be ready
        without any of its container crashing for it to be considered available.

        If unset, pods will be considered available as soon as they are ready.
    nameEscapingScheme : str, default is Undefined, optional
        nameEscapingScheme defines the character escaping scheme that will be requested when scraping
        for metric and label names that do not conform to the legacy Prometheus
        character set.

        It requires Prometheus >= v3.4.0.
    nameValidationScheme : str, default is Undefined, optional
        nameValidationScheme defines the validation scheme for metric and label names.

        It requires Prometheus >= v2.55.0.
    nodeSelector : {str:str}, default is Undefined, optional
        nodeSelector defines on which Nodes the Pods are scheduled.
    otlp : MonitoringCoreosComV1PrometheusSpecOtlp, default is Undefined, optional
        otlp
    overrideHonorLabels : bool, default is Undefined, optional
        overrideHonorLabels when true, Prometheus resolves label conflicts by renaming the labels in the scraped data
         to “exported_” for all targets created from ServiceMonitor, PodMonitor and
        ScrapeConfig objects. Otherwise the HonorLabels field of the service or pod monitor applies.
        In practice,`OverrideHonorLabels:true` enforces `honorLabels:false`
        for all ServiceMonitor, PodMonitor and ScrapeConfig objects.
    overrideHonorTimestamps : bool, default is Undefined, optional
        overrideHonorTimestamps when true, Prometheus ignores the timestamps for all the targets created
        from service and pod monitors.
        Otherwise the HonorTimestamps field of the service or pod monitor applies.
    paused : bool, default is Undefined, optional
        paused defines when a Prometheus deployment is paused, no actions except for deletion
        will be performed on the underlying objects.
    persistentVolumeClaimRetentionPolicy : MonitoringCoreosComV1PrometheusSpecPersistentVolumeClaimRetentionPolicy, default is Undefined, optional
        persistent volume claim retention policy
    podMetadata : MonitoringCoreosComV1PrometheusSpecPodMetadata, default is Undefined, optional
        pod metadata
    podMonitorNamespaceSelector : MonitoringCoreosComV1PrometheusSpecPodMonitorNamespaceSelector, default is Undefined, optional
        pod monitor namespace selector
    podMonitorSelector : MonitoringCoreosComV1PrometheusSpecPodMonitorSelector, default is Undefined, optional
        pod monitor selector
    podTargetLabels : [str], default is Undefined, optional
        podTargetLabels are appended to the `spec.podTargetLabels` field of all
        PodMonitor and ServiceMonitor objects.
    portName : str, default is "web", optional
        portName used for the pods and governing service.
        Default: "web"
    priorityClassName : str, default is Undefined, optional
        priorityClassName assigned to the Pods.
    probeNamespaceSelector : MonitoringCoreosComV1PrometheusSpecProbeNamespaceSelector, default is Undefined, optional
        probe namespace selector
    probeSelector : MonitoringCoreosComV1PrometheusSpecProbeSelector, default is Undefined, optional
        probe selector
    prometheusExternalLabelName : str, default is Undefined, optional
        prometheusExternalLabelName defines the name of Prometheus external label used to denote the Prometheus instance
        name. The external label will _not_ be added when the field is set to
        the empty string (`""`).

        Default: "prometheus"
    prometheusRulesExcludedFromEnforce : [MonitoringCoreosComV1PrometheusSpecPrometheusRulesExcludedFromEnforceItems0], default is Undefined, optional
        prometheusRulesExcludedFromEnforce defines the list of PrometheusRule objects to which the namespace label
        enforcement doesn't apply.
        This is only relevant when `spec.enforcedNamespaceLabel` is set to true.
        Deprecated: use `spec.excludedFromEnforcement` instead.
    query : MonitoringCoreosComV1PrometheusSpecQuery, default is Undefined, optional
        query
    queryLogFile : str, default is Undefined, optional
        queryLogFile specifies where the file to which PromQL queries are logged.

        If the filename has an empty path, e.g. 'query.log', The Prometheus Pods
        will mount the file into an emptyDir volume at `/var/log/prometheus`.
        If a full path is provided, e.g. '/var/log/prometheus/query.log', you
        must mount a volume in the specified directory and it must be writable.
        This is because the prometheus container runs with a read-only root
        filesystem for security reasons.
        Alternatively, the location can be set to a standard I/O stream, e.g.
        `/dev/stdout`, to log query information to the default Prometheus log
        stream.
    reloadStrategy : str, default is Undefined, optional
        reloadStrategy defines the strategy used to reload the Prometheus configuration.
        If not specified, the configuration is reloaded using the /-/reload HTTP endpoint.
    remoteRead : [MonitoringCoreosComV1PrometheusSpecRemoteReadItems0], default is Undefined, optional
        remoteRead defines the list of remote read configurations.
    remoteWrite : [MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0], default is Undefined, optional
        remoteWrite defines the list of remote write configurations.
    remoteWriteReceiverMessageVersions : [str], default is Undefined, optional
        remoteWriteReceiverMessageVersions list of the protobuf message versions to accept when receiving the
        remote writes.

        It requires Prometheus >= v2.54.0.
    replicaExternalLabelName : str, default is Undefined, optional
        replicaExternalLabelName defines the name of Prometheus external label used to denote the replica name.
        The external label will _not_ be added when the field is set to the
        empty string (`""`).

        Default: "prometheus_replica"
    replicas : int, default is Undefined, optional
        replicas defines the number of replicas of each shard to deploy for a Prometheus deployment.
        `spec.replicas` multiplied by `spec.shards` is the total number of Pods
        created.

        Default: 1
    resources : MonitoringCoreosComV1PrometheusSpecResources, default is Undefined, optional
        resources
    retention : str, default is Undefined, optional
        retention defines how long to retain the Prometheus data.

        Default: "24h" if `spec.retention` and `spec.retentionSize` are empty.
    retentionSize : str, default is Undefined, optional
        retentionSize defines the maximum number of bytes used by the Prometheus data.
    routePrefix : str, default is Undefined, optional
        routePrefix defines the route prefix Prometheus registers HTTP handlers for.

        This is useful when using `spec.externalURL`, and a proxy is rewriting
        HTTP routes of a request, and the actual ExternalURL is still true, but
        the server serves requests under a different route prefix. For example
        for use with `kubectl proxy`.
    ruleNamespaceSelector : MonitoringCoreosComV1PrometheusSpecRuleNamespaceSelector, default is Undefined, optional
        rule namespace selector
    ruleQueryOffset : str, default is Undefined, optional
        ruleQueryOffset defines the offset the rule evaluation timestamp of this particular group by the specified duration into the past.
        It requires Prometheus >= v2.53.0.
    ruleSelector : MonitoringCoreosComV1PrometheusSpecRuleSelector, default is Undefined, optional
        rule selector
    rules : MonitoringCoreosComV1PrometheusSpecRules, default is Undefined, optional
        rules
    runtime : MonitoringCoreosComV1PrometheusSpecRuntime, default is Undefined, optional
        runtime
    sampleLimit : int, default is Undefined, optional
        sampleLimit defines per-scrape limit on number of scraped samples that will be accepted.
        Only valid in Prometheus versions 2.45.0 and newer.

        Note that the global limit only applies to scrape objects that don't specify an explicit limit value.
        If you want to enforce a maximum limit for all scrape objects, refer to enforcedSampleLimit.
    scrapeClasses : [MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0], default is Undefined, optional
        scrapeClasses defines the list of scrape classes to expose to scraping objects such as
        PodMonitors, ServiceMonitors, Probes and ScrapeConfigs.

        This is an *experimental feature*, it may change in any upcoming release
        in a breaking way.
    scrapeClassicHistograms : bool, default is Undefined, optional
        scrapeClassicHistograms defines whether to scrape a classic histogram that is also exposed as a native histogram.

        Notice: `scrapeClassicHistograms` corresponds to the `always_scrape_classic_histograms` field in the Prometheus configuration.

        It requires Prometheus >= v3.5.0.
    scrapeConfigNamespaceSelector : MonitoringCoreosComV1PrometheusSpecScrapeConfigNamespaceSelector, default is Undefined, optional
        scrape config namespace selector
    scrapeConfigSelector : MonitoringCoreosComV1PrometheusSpecScrapeConfigSelector, default is Undefined, optional
        scrape config selector
    scrapeFailureLogFile : str, default is Undefined, optional
        scrapeFailureLogFile defines the file to which scrape failures are logged.
        Reloading the configuration will reopen the file.

        If the filename has an empty path, e.g. 'file.log', The Prometheus Pods
        will mount the file into an emptyDir volume at `/var/log/prometheus`.
        If a full path is provided, e.g. '/var/log/prometheus/file.log', you
        must mount a volume in the specified directory and it must be writable.
        It requires Prometheus >= v2.55.0.
    scrapeInterval : str, default is "30s", optional
        scrapeInterval defines interval between consecutive scrapes.

        Default: "30s"
    scrapeProtocols : [str], default is Undefined, optional
        scrapeProtocols defines the protocols to negotiate during a scrape. It tells clients the
        protocols supported by Prometheus in order of preference (from most to least preferred).

        If unset, Prometheus uses its default value.

        It requires Prometheus >= v2.49.0.

        `PrometheusText1.0.0` requires Prometheus >= v3.0.0.
    scrapeTimeout : str, default is Undefined, optional
        scrapeTimeout defines the number of seconds to wait until a scrape request times out.
        The value cannot be greater than the scrape interval otherwise the operator will reject the resource.
    secrets : [str], default is Undefined, optional
        secrets defines a list of Secrets in the same namespace as the Prometheus
        object, which shall be mounted into the Prometheus Pods.
        Each Secret is added to the StatefulSet definition as a volume named `secret-<secret-name>`.
        The Secrets are mounted into /etc/prometheus/secrets/<secret-name> in the 'prometheus' container.
    securityContext : MonitoringCoreosComV1PrometheusSpecSecurityContext, default is Undefined, optional
        security context
    serviceAccountName : str, default is Undefined, optional
        serviceAccountName is the name of the ServiceAccount to use to run the
        Prometheus Pods.
    serviceDiscoveryRole : str, default is Undefined, optional
        serviceDiscoveryRole defines the service discovery role used to discover targets from
        `ServiceMonitor` objects and Alertmanager endpoints.

        If set, the value should be either "Endpoints" or "EndpointSlice".
        If unset, the operator assumes the "Endpoints" role.
    serviceMonitorNamespaceSelector : MonitoringCoreosComV1PrometheusSpecServiceMonitorNamespaceSelector, default is Undefined, optional
        service monitor namespace selector
    serviceMonitorSelector : MonitoringCoreosComV1PrometheusSpecServiceMonitorSelector, default is Undefined, optional
        service monitor selector
    serviceName : str, default is Undefined, optional
        serviceName defines the name of the service name used by the underlying StatefulSet(s) as the governing service.
        If defined, the Service  must be created before the Prometheus/PrometheusAgent resource in the same namespace and it must define a selector that matches the pod labels.
        If empty, the operator will create and manage a headless service named `prometheus-operated` for Prometheus resources,
        or `prometheus-agent-operated` for PrometheusAgent resources.
        When deploying multiple Prometheus/PrometheusAgent resources in the same namespace, it is recommended to specify a different value for each.
        See https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#stable-network-id for more details.
    sha : str, default is Undefined, optional
        sha is deprecated: use 'spec.image' instead. The image's digest can be specified as part of the image name.
    shardRetentionPolicy : MonitoringCoreosComV1PrometheusSpecShardRetentionPolicy, default is Undefined, optional
        shard retention policy
    shards : int, default is Undefined, optional
        shards defines the number of shards to distribute the scraped targets onto.

        `spec.replicas` multiplied by `spec.shards` is the total number of Pods
        being created.

        When not defined, the operator assumes only one shard.

        Note that scaling down shards will not reshard data onto the remaining
        instances, it must be manually moved. Increasing shards will not reshard
        data either but it will continue to be available from the same
        instances. To query globally, use either
        * Thanos sidecar + querier for query federation and Thanos Ruler for rules.
        * Remote-write to send metrics to a central location.

        By default, the sharding of targets is performed on:
        * The `__address__` target's metadata label for PodMonitor,
        ServiceMonitor and ScrapeConfig resources.
        * The `__param_target__` label for Probe resources.

        Users can define their own sharding implementation by setting the
        `__tmp_hash` label during the target discovery with relabeling
        configuration (either in the monitoring resources or via scrape class).

        You can also disable sharding on a specific target by setting the
        `__tmp_disable_sharding` label with relabeling configuration. When
        the label value isn't empty, all Prometheus shards will scrape the target.
    storage : MonitoringCoreosComV1PrometheusSpecStorage, default is Undefined, optional
        storage
    tag : str, default is Undefined, optional
        tag is deprecated: use 'spec.image' instead. The image's tag can be specified as part of the image name.
    targetLimit : int, default is Undefined, optional
        targetLimit defines a limit on the number of scraped targets that will be accepted.
        Only valid in Prometheus versions 2.45.0 and newer.

        Note that the global limit only applies to scrape objects that don't specify an explicit limit value.
        If you want to enforce a maximum limit for all scrape objects, refer to enforcedTargetLimit.
    terminationGracePeriodSeconds : int, default is Undefined, optional
        terminationGracePeriodSeconds defines the optional duration in seconds the pod needs to terminate gracefully.
        Value must be non-negative integer. The value zero indicates stop immediately via
        the kill signal (no opportunity to shut down) which may lead to data corruption.

        Defaults to 600 seconds.
    thanos : MonitoringCoreosComV1PrometheusSpecThanos, default is Undefined, optional
        thanos
    tolerations : [MonitoringCoreosComV1PrometheusSpecTolerationsItems0], default is Undefined, optional
        tolerations defines the Pods' tolerations if specified.
    topologySpreadConstraints : [MonitoringCoreosComV1PrometheusSpecTopologySpreadConstraintsItems0], default is Undefined, optional
        topologySpreadConstraints defines the pod's topology spread constraints if specified.
    tracingConfig : MonitoringCoreosComV1PrometheusSpecTracingConfig, default is Undefined, optional
        tracing config
    tsdb : MonitoringCoreosComV1PrometheusSpecTsdb, default is Undefined, optional
        tsdb
    version : str, default is Undefined, optional
        version of Prometheus being deployed. The operator uses this information
        to generate the Prometheus StatefulSet + configuration files.

        If not specified, the operator assumes the latest upstream version of
        Prometheus available at the time when the version of the operator was
        released.
    volumeMounts : [MonitoringCoreosComV1PrometheusSpecVolumeMountsItems0], default is Undefined, optional
        volumeMounts allows the configuration of additional VolumeMounts.

        VolumeMounts will be appended to other VolumeMounts in the 'prometheus'
        container, that are generated as a result of StorageSpec objects.
    volumes : [MonitoringCoreosComV1PrometheusSpecVolumesItems0], default is Undefined, optional
        volumes allows the configuration of additional volumes on the output
        StatefulSet definition. Volumes specified will be appended to other
        volumes that are generated as a result of StorageSpec objects.
    walCompression : bool, default is Undefined, optional
        walCompression defines the compression of the write-ahead log (WAL) using Snappy.

        WAL compression is enabled by default for Prometheus >= 2.20.0

        Requires Prometheus v2.11.0 and above.
    web : MonitoringCoreosComV1PrometheusSpecWeb, default is Undefined, optional
        web
    """
    additionalAlertManagerConfigs?: MonitoringCoreosComV1PrometheusSpecAdditionalAlertManagerConfigs
    additionalAlertRelabelConfigs?: MonitoringCoreosComV1PrometheusSpecAdditionalAlertRelabelConfigs
    additionalArgs?: [MonitoringCoreosComV1PrometheusSpecAdditionalArgsItems0]
    additionalScrapeConfigs?: MonitoringCoreosComV1PrometheusSpecAdditionalScrapeConfigs
    affinity?: MonitoringCoreosComV1PrometheusSpecAffinity
    alerting?: MonitoringCoreosComV1PrometheusSpecAlerting
    allowOverlappingBlocks?: bool
    apiserverConfig?: MonitoringCoreosComV1PrometheusSpecApiserverConfig
    arbitraryFSAccessThroughSMs?: MonitoringCoreosComV1PrometheusSpecArbitraryFSAccessThroughSMs
    automountServiceAccountToken?: bool
    baseImage?: str
    bodySizeLimit?: str
    configMaps?: [str]
    containers?: [MonitoringCoreosComV1PrometheusSpecContainersItems0]
    convertClassicHistogramsToNHCB?: bool
    disableCompaction?: bool
    dnsConfig?: MonitoringCoreosComV1PrometheusSpecDNSConfig
    dnsPolicy?: "ClusterFirstWithHostNet" | "ClusterFirst" | "Default" | "None"
    enableAdminAPI?: bool
    enableFeatures?: [str]
    enableOTLPReceiver?: bool
    enableRemoteWriteReceiver?: bool
    enableServiceLinks?: bool
    enforcedBodySizeLimit?: str
    enforcedKeepDroppedTargets?: int
    enforcedLabelLimit?: int
    enforcedLabelNameLengthLimit?: int
    enforcedLabelValueLengthLimit?: int
    enforcedNamespaceLabel?: str
    enforcedSampleLimit?: int
    enforcedTargetLimit?: int
    evaluationInterval?: str = "30s"
    excludedFromEnforcement?: [MonitoringCoreosComV1PrometheusSpecExcludedFromEnforcementItems0]
    exemplars?: MonitoringCoreosComV1PrometheusSpecExemplars
    externalLabels?: {str:str}
    externalUrl?: str
    hostAliases?: [MonitoringCoreosComV1PrometheusSpecHostAliasesItems0]
    hostNetwork?: bool
    hostUsers?: bool
    ignoreNamespaceSelectors?: bool
    image?: str
    imagePullPolicy?: "" | "Always" | "Never" | "IfNotPresent"
    imagePullSecrets?: [MonitoringCoreosComV1PrometheusSpecImagePullSecretsItems0]
    initContainers?: [MonitoringCoreosComV1PrometheusSpecInitContainersItems0]
    keepDroppedTargets?: int
    labelLimit?: int
    labelNameLengthLimit?: int
    labelValueLengthLimit?: int
    listenLocal?: bool
    logFormat?: "" | "logfmt" | "json"
    logLevel?: "" | "debug" | "info" | "warn" | "error"
    maximumStartupDurationSeconds?: int
    minReadySeconds?: int
    nameEscapingScheme?: "AllowUTF8" | "Underscores" | "Dots" | "Values"
    nameValidationScheme?: "UTF8" | "Legacy"
    nodeSelector?: {str:str}
    otlp?: MonitoringCoreosComV1PrometheusSpecOtlp
    overrideHonorLabels?: bool
    overrideHonorTimestamps?: bool
    paused?: bool
    persistentVolumeClaimRetentionPolicy?: MonitoringCoreosComV1PrometheusSpecPersistentVolumeClaimRetentionPolicy
    podMetadata?: MonitoringCoreosComV1PrometheusSpecPodMetadata
    podMonitorNamespaceSelector?: MonitoringCoreosComV1PrometheusSpecPodMonitorNamespaceSelector
    podMonitorSelector?: MonitoringCoreosComV1PrometheusSpecPodMonitorSelector
    podTargetLabels?: [str]
    portName?: str = "web"
    priorityClassName?: str
    probeNamespaceSelector?: MonitoringCoreosComV1PrometheusSpecProbeNamespaceSelector
    probeSelector?: MonitoringCoreosComV1PrometheusSpecProbeSelector
    prometheusExternalLabelName?: str
    prometheusRulesExcludedFromEnforce?: [MonitoringCoreosComV1PrometheusSpecPrometheusRulesExcludedFromEnforceItems0]
    query?: MonitoringCoreosComV1PrometheusSpecQuery
    queryLogFile?: str
    reloadStrategy?: "HTTP" | "ProcessSignal"
    remoteRead?: [MonitoringCoreosComV1PrometheusSpecRemoteReadItems0]
    remoteWrite?: [MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0]
    remoteWriteReceiverMessageVersions?: [str]
    replicaExternalLabelName?: str
    replicas?: int
    resources?: MonitoringCoreosComV1PrometheusSpecResources
    retention?: str
    retentionSize?: str
    routePrefix?: str
    ruleNamespaceSelector?: MonitoringCoreosComV1PrometheusSpecRuleNamespaceSelector
    ruleQueryOffset?: str
    ruleSelector?: MonitoringCoreosComV1PrometheusSpecRuleSelector
    rules?: MonitoringCoreosComV1PrometheusSpecRules
    runtime?: MonitoringCoreosComV1PrometheusSpecRuntime
    sampleLimit?: int
    scrapeClasses?: [MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0]
    scrapeClassicHistograms?: bool
    scrapeConfigNamespaceSelector?: MonitoringCoreosComV1PrometheusSpecScrapeConfigNamespaceSelector
    scrapeConfigSelector?: MonitoringCoreosComV1PrometheusSpecScrapeConfigSelector
    scrapeFailureLogFile?: str
    scrapeInterval?: str = "30s"
    scrapeProtocols?: [str]
    scrapeTimeout?: str
    secrets?: [str]
    securityContext?: MonitoringCoreosComV1PrometheusSpecSecurityContext
    serviceAccountName?: str
    serviceDiscoveryRole?: "Endpoints" | "EndpointSlice"
    serviceMonitorNamespaceSelector?: MonitoringCoreosComV1PrometheusSpecServiceMonitorNamespaceSelector
    serviceMonitorSelector?: MonitoringCoreosComV1PrometheusSpecServiceMonitorSelector
    serviceName?: str
    sha?: str
    shardRetentionPolicy?: MonitoringCoreosComV1PrometheusSpecShardRetentionPolicy
    shards?: int
    storage?: MonitoringCoreosComV1PrometheusSpecStorage
    tag?: str
    targetLimit?: int
    terminationGracePeriodSeconds?: int
    thanos?: MonitoringCoreosComV1PrometheusSpecThanos
    tolerations?: [MonitoringCoreosComV1PrometheusSpecTolerationsItems0]
    topologySpreadConstraints?: [MonitoringCoreosComV1PrometheusSpecTopologySpreadConstraintsItems0]
    tracingConfig?: MonitoringCoreosComV1PrometheusSpecTracingConfig
    tsdb?: MonitoringCoreosComV1PrometheusSpecTsdb
    version?: str
    volumeMounts?: [MonitoringCoreosComV1PrometheusSpecVolumeMountsItems0]
    volumes?: [MonitoringCoreosComV1PrometheusSpecVolumesItems0]
    walCompression?: bool
    web?: MonitoringCoreosComV1PrometheusSpecWeb

    check:
        _regex_match(str(bodySizeLimit), r"(^0|([0-9]*[.])?[0-9]+((K|M|G|T|E|P)i?)?B)$") if bodySizeLimit
        all enableFeatures in enableFeatures {len(enableFeatures) >= 1 if enableFeatures not in [None, Undefined]} if enableFeatures
        _regex_match(str(enforcedBodySizeLimit), r"(^0|([0-9]*[.])?[0-9]+((K|M|G|T|E|P)i?)?B)$") if enforcedBodySizeLimit
        _regex_match(str(evaluationInterval), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if evaluationInterval
        maximumStartupDurationSeconds >= 60 if maximumStartupDurationSeconds not in [None, Undefined]
        minReadySeconds >= 0 if minReadySeconds not in [None, Undefined]
        len(remoteWriteReceiverMessageVersions) >= 1 if remoteWriteReceiverMessageVersions
        _regex_match(str(retention), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if retention
        _regex_match(str(retentionSize), r"(^0|([0-9]*[.])?[0-9]+((K|M|G|T|E|P)i?)?B)$") if retentionSize
        _regex_match(str(ruleQueryOffset), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if ruleQueryOffset
        len(scrapeFailureLogFile) >= 1 if scrapeFailureLogFile
        _regex_match(str(scrapeInterval), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if scrapeInterval
        _regex_match(str(scrapeTimeout), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if scrapeTimeout
        len(serviceName) >= 1 if serviceName
        terminationGracePeriodSeconds >= 0 if terminationGracePeriodSeconds not in [None, Undefined]

schema MonitoringCoreosComV1PrometheusSpecAdditionalAlertManagerConfigs:
    r"""
    additionalAlertManagerConfigs defines a key of a Secret containing
    additional Prometheus Alertmanager configurations. The Alertmanager
    configurations are appended to the configuration generated by the
    Prometheus Operator. They must be formatted according to the official
    Prometheus documentation:

    https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alertmanager_config

    The user is responsible for making sure that the configurations are valid

    Note that using this feature may expose the possibility to break
    upgrades of Prometheus. It is advised to review Prometheus release notes
    to ensure that no incompatible AlertManager configs are going to break
    Prometheus after the upgrade.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecAdditionalAlertRelabelConfigs:
    r"""
    additionalAlertRelabelConfigs defines a key of a Secret containing
    additional Prometheus alert relabel configurations. The alert relabel
    configurations are appended to the configuration generated by the
    Prometheus Operator. They must be formatted according to the official
    Prometheus documentation:

    https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alert_relabel_configs

    The user is responsible for making sure that the configurations are valid

    Note that using this feature may expose the possibility to break
    upgrades of Prometheus. It is advised to review Prometheus release notes
    to ensure that no incompatible alert relabel configs are going to break
    Prometheus after the upgrade.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecAdditionalArgsItems0:
    r"""
    Argument as part of the AdditionalArgs list.

    Attributes
    ----------
    name : str, default is Undefined, required
        name of the argument, e.g. "scrape.discovery-reload-interval".
    value : str, default is Undefined, optional
        value defines the argument value, e.g. 30s. Can be empty for name-only arguments (e.g. --storage.tsdb.no-lockfile)
    """
    name: str

    value?: str

    check:
        len(name) >= 1

schema MonitoringCoreosComV1PrometheusSpecAdditionalScrapeConfigs:
    r"""
    additionalScrapeConfigs allows specifying a key of a Secret containing
    additional Prometheus scrape configurations. Scrape configurations
    specified are appended to the configurations generated by the Prometheus
    Operator. Job configurations specified must have the form as specified
    in the official Prometheus documentation:
    https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config.
    As scrape configs are appended, the user is responsible to make sure it
    is valid. Note that using this feature may expose the possibility to
    break upgrades of Prometheus. It is advised to review Prometheus release
    notes to ensure that no incompatible scrape configs are going to break
    Prometheus after the upgrade.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecAffinity:
    r"""
    affinity defines the Pods' affinity scheduling rules if specified.

    Attributes
    ----------
    nodeAffinity : MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinity, default is Undefined, optional
        node affinity
    podAffinity : MonitoringCoreosComV1PrometheusSpecAffinityPodAffinity, default is Undefined, optional
        pod affinity
    podAntiAffinity : MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinity, default is Undefined, optional
        pod anti affinity
    """
    nodeAffinity?: MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinity
    podAffinity?: MonitoringCoreosComV1PrometheusSpecAffinityPodAffinity
    podAntiAffinity?: MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinity

schema MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinity:
    r"""
    Describes node affinity scheduling rules for the pod.

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution, default is Undefined, optional
        required during scheduling ignored during execution
    """
    preferredDuringSchedulingIgnoredDuringExecution?: [MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]
    requiredDuringSchedulingIgnoredDuringExecution?: MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution

schema MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    An empty preferred scheduling term matches all objects with implicit weight 0
    (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).

    Attributes
    ----------
    preference : MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference, default is Undefined, required
        preference
    weight : int, default is Undefined, required
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
    """
    preference: MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference

    weight: int

schema MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference:
    r"""
    A node selector term, associated with the corresponding weight.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0], default is Undefined, optional
        A list of node selector requirements by node's labels.
    matchFields : [MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0], default is Undefined, optional
        A list of node selector requirements by node's fields.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0]
    matchFields?: [MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0]

schema MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution:
    r"""
    If the affinity requirements specified by this field are not met at
    scheduling time, the pod will not be scheduled onto the node.
    If the affinity requirements specified by this field cease to be met
    at some point during pod execution (e.g. due to an update), the system
    may or may not try to eventually evict the pod from its node.

    Attributes
    ----------
    nodeSelectorTerms : [MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0], default is Undefined, required
        Required. A list of node selector terms. The terms are ORed.
    """
    nodeSelectorTerms: [MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0]

schema MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0:
    r"""
    A null or empty node selector term matches no objects. The requirements of
    them are ANDed.
    The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0], default is Undefined, optional
        A list of node selector requirements by node's labels.
    matchFields : [MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0], default is Undefined, optional
        A list of node selector requirements by node's fields.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0]
    matchFields?: [MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0]

schema MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAffinity:
    r"""
    Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : [MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
    """
    preferredDuringSchedulingIgnoredDuringExecution?: [MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]
    requiredDuringSchedulingIgnoredDuringExecution?: [MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0]

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)

    Attributes
    ----------
    podAffinityTerm : MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm, default is Undefined, required
        pod affinity term
    weight : int, default is Undefined, required
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
    """
    podAffinityTerm: MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm

    weight: int

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm:
    r"""
    Required. A pod affinity term, associated with the corresponding weight.

    Attributes
    ----------
    labelSelector : MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
    namespaceSelector : MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """
    labelSelector?: MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    Defines a set of pods (namely those matching the labelSelector
    relative to the given namespace(s)) that this pod should be
    co-located (affinity) or not co-located (anti-affinity) with,
    where co-located is defined as running on a node whose value of
    the label with key <topologyKey> matches that of any node on which
    a pod of the set of pods is running

    Attributes
    ----------
    labelSelector : MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
    namespaceSelector : MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """
    labelSelector?: MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinity:
    r"""
    Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and subtracting
        "weight" from the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : [MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
    """
    preferredDuringSchedulingIgnoredDuringExecution?: [MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]
    requiredDuringSchedulingIgnoredDuringExecution?: [MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0]

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)

    Attributes
    ----------
    podAffinityTerm : MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm, default is Undefined, required
        pod affinity term
    weight : int, default is Undefined, required
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
    """
    podAffinityTerm: MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm

    weight: int

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm:
    r"""
    Required. A pod affinity term, associated with the corresponding weight.

    Attributes
    ----------
    labelSelector : MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
    namespaceSelector : MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """
    labelSelector?: MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    Defines a set of pods (namely those matching the labelSelector
    relative to the given namespace(s)) that this pod should be
    co-located (affinity) or not co-located (anti-affinity) with,
    where co-located is defined as running on a node whose value of
    the label with key <topologyKey> matches that of any node on which
    a pod of the set of pods is running

    Attributes
    ----------
    labelSelector : MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
    namespaceSelector : MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """
    labelSelector?: MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecAlerting:
    r"""
    alerting defines the settings related to Alertmanager.

    Attributes
    ----------
    alertmanagers : [MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0], default is Undefined, required
        alertmanagers endpoints where Prometheus should send alerts to.
    """
    alertmanagers: [MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0]

schema MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0:
    r"""
    AlertmanagerEndpoints defines a selection of a single Endpoints object
    containing Alertmanager IPs to fire alerts against.

    Attributes
    ----------
    alertRelabelings : [MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0AlertRelabelingsItems0], default is Undefined, optional
        alertRelabelings defines the relabeling configs applied before sending alerts to a specific Alertmanager.
        It requires Prometheus >= v2.51.0.
    apiVersion : str, default is Undefined, optional
        apiVersion defines the version of the Alertmanager API that Prometheus uses to send alerts.
        It can be "V1" or "V2".
        The field has no effect for Prometheus >= v3.0.0 because only the v2 API is supported.
    authorization : MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0Authorization, default is Undefined, optional
        authorization
    basicAuth : MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0BasicAuth, default is Undefined, optional
        basic auth
    bearerTokenFile : str, default is Undefined, optional
        bearerTokenFile defines the file to read bearer token for Alertmanager.

        Cannot be set at the same time as `basicAuth`, `authorization`, or `sigv4`.

        Deprecated: this will be removed in a future release. Prefer using `authorization`.
    enableHttp2 : bool, default is Undefined, optional
        enableHttp2 defines whether to enable HTTP2.
    name : str, default is Undefined, required
        name of the Endpoints object in the namespace.
    namespace : str, default is Undefined, optional
        namespace of the Endpoints object.

        If not set, the object will be discovered in the namespace of the
        Prometheus object.
    noProxy : str, default is Undefined, optional
        noProxy defines a comma-separated string that can contain IPs, CIDR notation, domain names
        that should be excluded from proxying. IP and domain names can
        contain port numbers.

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    pathPrefix : str, default is Undefined, optional
        pathPrefix defines the prefix for the HTTP path alerts are pushed to.
    port : int | str, default is Undefined, required
        port on which the Alertmanager API is exposed.
    proxyConnectHeader : {str:[MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0ProxyConnectHeaderItems0]}, default is Undefined, optional
        proxyConnectHeader optionally specifies headers to send to
        proxies during CONNECT requests.

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyFromEnvironment : bool, default is Undefined, optional
        proxyFromEnvironment defines whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyUrl : str, default is Undefined, optional
        proxyUrl defines the HTTP proxy server to use.
    relabelings : [MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0RelabelingsItems0], default is Undefined, optional
        relabelings defines the relabel configuration applied to the discovered Alertmanagers.
    scheme : str, default is Undefined, optional
        scheme to use when firing alerts.
    sigv4 : MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0Sigv4, default is Undefined, optional
        sigv4
    timeout : str, default is Undefined, optional
        timeout defines a per-target Alertmanager timeout when pushing alerts.
    tlsConfig : MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfig, default is Undefined, optional
        tls config
    """
    alertRelabelings?: [MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0AlertRelabelingsItems0]
    apiVersion?: "v1" | "V1" | "v2" | "V2"
    authorization?: MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0Authorization
    basicAuth?: MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0BasicAuth
    bearerTokenFile?: str
    enableHttp2?: bool
    name: str

    namespace?: str
    noProxy?: str
    pathPrefix?: str
    port: int | str

    proxyConnectHeader?: {str:[MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0ProxyConnectHeaderItems0]}
    proxyFromEnvironment?: bool
    proxyUrl?: str
    relabelings?: [MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0RelabelingsItems0]
    scheme?: str
    sigv4?: MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0Sigv4
    timeout?: str
    tlsConfig?: MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfig

    check:
        len(name) >= 1
        len(namespace) >= 1 if namespace
        _regex_match(str(proxyUrl), r"^(http|https|socks5)://.+$") if proxyUrl
        _regex_match(str(timeout), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if timeout

schema MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0AlertRelabelingsItems0:
    r"""
    RelabelConfig allows dynamic rewriting of the label set for targets, alerts,
    scraped samples and remote write samples.

    More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config

    Attributes
    ----------
    action : str, default is "replace", optional
        action to perform based on the regex matching.

        `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.
        `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.

        Default: "Replace"
    modulus : int, default is Undefined, optional
        modulus to take of the hash of the source label values.

        Only applicable when the action is `HashMod`.
    regex : str, default is Undefined, optional
        regex defines the regular expression against which the extracted value is matched.
    replacement : str, default is Undefined, optional
        replacement value against which a Replace action is performed if the
        regular expression matches.

        Regex capture groups are available.
    separator : str, default is Undefined, optional
        separator defines the string between concatenated SourceLabels.
    sourceLabels : [str], default is Undefined, optional
        sourceLabels defines the source labels select values from existing labels. Their content is
        concatenated using the configured Separator and matched against the
        configured regular expression.
    targetLabel : str, default is Undefined, optional
        targetLabel defines the label to which the resulting string is written in a replacement.

        It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,
        `KeepEqual` and `DropEqual` actions.

        Regex capture groups are available.
    """
    action?: "replace" | "Replace" | "keep" | "Keep" | "drop" | "Drop" | "hashmod" | "HashMod" | "labelmap" | "LabelMap" | "labeldrop" | "LabelDrop" | "labelkeep" | "LabelKeep" | "lowercase" | "Lowercase" | "uppercase" | "Uppercase" | "keepequal" | "KeepEqual" | "dropequal" | "DropEqual" = "replace"
    modulus?: int
    regex?: str
    replacement?: str
    separator?: str
    sourceLabels?: [str]
    targetLabel?: str

schema MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0Authorization:
    r"""
    authorization section for Alertmanager.

    Cannot be set at the same time as `basicAuth`, `bearerTokenFile` or `sigv4`.

    Attributes
    ----------
    credentials : MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0AuthorizationCredentials, default is Undefined, optional
        credentials
    $type : str, default is Undefined, optional
        type defines the authentication type. The value is case-insensitive.

        "Basic" is not a supported value.

        Default: "Bearer"
    """
    credentials?: MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0AuthorizationCredentials
    $type?: str

schema MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0AuthorizationCredentials:
    r"""
    credentials defines a key of a Secret in the namespace that contains the credentials for authentication.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0BasicAuth:
    r"""
    basicAuth configuration for Alertmanager.

    Cannot be set at the same time as `bearerTokenFile`, `authorization` or `sigv4`.

    Attributes
    ----------
    password : MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0BasicAuthPassword, default is Undefined, optional
        password
    username : MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0BasicAuthUsername, default is Undefined, optional
        username
    """
    password?: MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0BasicAuthPassword
    username?: MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0BasicAuthUsername

schema MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0BasicAuthPassword:
    r"""
    password defines a key of a Secret containing the password for
    authentication.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0BasicAuthUsername:
    r"""
    username defines a key of a Secret containing the username for
    authentication.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0ProxyConnectHeaderItems0:
    r"""
    SecretKeySelector selects a key of a Secret.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0RelabelingsItems0:
    r"""
    RelabelConfig allows dynamic rewriting of the label set for targets, alerts,
    scraped samples and remote write samples.

    More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config

    Attributes
    ----------
    action : str, default is "replace", optional
        action to perform based on the regex matching.

        `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.
        `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.

        Default: "Replace"
    modulus : int, default is Undefined, optional
        modulus to take of the hash of the source label values.

        Only applicable when the action is `HashMod`.
    regex : str, default is Undefined, optional
        regex defines the regular expression against which the extracted value is matched.
    replacement : str, default is Undefined, optional
        replacement value against which a Replace action is performed if the
        regular expression matches.

        Regex capture groups are available.
    separator : str, default is Undefined, optional
        separator defines the string between concatenated SourceLabels.
    sourceLabels : [str], default is Undefined, optional
        sourceLabels defines the source labels select values from existing labels. Their content is
        concatenated using the configured Separator and matched against the
        configured regular expression.
    targetLabel : str, default is Undefined, optional
        targetLabel defines the label to which the resulting string is written in a replacement.

        It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,
        `KeepEqual` and `DropEqual` actions.

        Regex capture groups are available.
    """
    action?: "replace" | "Replace" | "keep" | "Keep" | "drop" | "Drop" | "hashmod" | "HashMod" | "labelmap" | "LabelMap" | "labeldrop" | "LabelDrop" | "labelkeep" | "LabelKeep" | "lowercase" | "Lowercase" | "uppercase" | "Uppercase" | "keepequal" | "KeepEqual" | "dropequal" | "DropEqual" = "replace"
    modulus?: int
    regex?: str
    replacement?: str
    separator?: str
    sourceLabels?: [str]
    targetLabel?: str

schema MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0Sigv4:
    r"""
    sigv4 defines AWS's Signature Verification 4 for the URL.

    It requires Prometheus >= v2.48.0.

    Cannot be set at the same time as `basicAuth`, `bearerTokenFile` or `authorization`.

    Attributes
    ----------
    accessKey : MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0Sigv4AccessKey, default is Undefined, optional
        access key
    profile : str, default is Undefined, optional
        profile defines the named AWS profile used to authenticate.
    region : str, default is Undefined, optional
        region defines the AWS region. If blank, the region from the default credentials chain used.
    roleArn : str, default is Undefined, optional
        roleArn defines the named AWS profile used to authenticate.
    secretKey : MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0Sigv4SecretKey, default is Undefined, optional
        secret key
    useFIPSSTSEndpoint : bool, default is Undefined, optional
        useFIPSSTSEndpoint defines FIPS mode for AWS STS endpoint.
        It requires Prometheus >= v2.54.0.
    """
    accessKey?: MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0Sigv4AccessKey
    profile?: str
    region?: str
    roleArn?: str
    secretKey?: MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0Sigv4SecretKey
    useFIPSSTSEndpoint?: bool

schema MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0Sigv4AccessKey:
    r"""
    accessKey defines the AWS API key. If not specified, the environment variable
    `AWS_ACCESS_KEY_ID` is used.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0Sigv4SecretKey:
    r"""
    secretKey defines the AWS API secret. If not specified, the environment
    variable `AWS_SECRET_ACCESS_KEY` is used.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfig:
    r"""
    tlsConfig to use for Alertmanager.

    Attributes
    ----------
    ca : MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfigCa, default is Undefined, optional
        ca
    caFile : str, default is Undefined, optional
        caFile defines the path to the CA cert in the Prometheus container to use for the targets.
    cert : MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfigCert, default is Undefined, optional
        cert
    certFile : str, default is Undefined, optional
        certFile defines the path to the client cert file in the Prometheus container for the targets.
    insecureSkipVerify : bool, default is Undefined, optional
        insecureSkipVerify defines how to disable target certificate validation.
    keyFile : str, default is Undefined, optional
        keyFile defines the path to the client key file in the Prometheus container for the targets.
    keySecret : MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfigKeySecret, default is Undefined, optional
        key secret
    maxVersion : str, default is Undefined, optional
        maxVersion defines the maximum acceptable TLS version.

        It requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.
    minVersion : str, default is Undefined, optional
        minVersion defines the minimum acceptable TLS version.

        It requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.
    serverName : str, default is Undefined, optional
        serverName is used to verify the hostname for the targets.
    """
    ca?: MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfigCa
    caFile?: str
    cert?: MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfigCert
    certFile?: str
    insecureSkipVerify?: bool
    keyFile?: str
    keySecret?: MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfigKeySecret
    maxVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    minVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    serverName?: str

schema MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfigCa:
    r"""
    ca defines the Certificate authority used when verifying server certificates.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfigCaConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfigCaSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfigCaConfigMap
    secret?: MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfigCaSecret

schema MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfigCaConfigMap:
    r"""
    configMap defines the ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfigCaSecret:
    r"""
    secret defines the Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfigCert:
    r"""
    cert defines the Client certificate to present when doing client-authentication.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfigCertConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfigCertSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfigCertConfigMap
    secret?: MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfigCertSecret

schema MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfigCertConfigMap:
    r"""
    configMap defines the ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfigCertSecret:
    r"""
    secret defines the Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecAlertingAlertmanagersItems0TLSConfigKeySecret:
    r"""
    keySecret defines the Secret containing the client key file for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecApiserverConfig:
    r"""
    apiserverConfig allows specifying a host and auth methods to access the
    Kuberntees API server.
    If null, Prometheus is assumed to run inside of the cluster: it will
    discover the API servers automatically and use the Pod's CA certificate
    and bearer token file at /var/run/secrets/kubernetes.io/serviceaccount/.

    Attributes
    ----------
    authorization : MonitoringCoreosComV1PrometheusSpecApiserverConfigAuthorization, default is Undefined, optional
        authorization
    basicAuth : MonitoringCoreosComV1PrometheusSpecApiserverConfigBasicAuth, default is Undefined, optional
        basic auth
    bearerToken : str, default is Undefined, optional
        bearerToken is deprecated: this will be removed in a future release.
         *Warning: this field shouldn't be used because the token value appears
        in clear-text. Prefer using `authorization`.*
    bearerTokenFile : str, default is Undefined, optional
        bearerTokenFile defines the file to read bearer token for accessing apiserver.

        Cannot be set at the same time as `basicAuth`, `authorization`, or `bearerToken`.

        Deprecated: this will be removed in a future release. Prefer using `authorization`.
    host : str, default is Undefined, required
        host defines the Kubernetes API address consisting of a hostname or IP address followed
        by an optional port number.
    noProxy : str, default is Undefined, optional
        noProxy defines a comma-separated string that can contain IPs, CIDR notation, domain names
        that should be excluded from proxying. IP and domain names can
        contain port numbers.

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyConnectHeader : {str:[MonitoringCoreosComV1PrometheusSpecApiserverConfigProxyConnectHeaderItems0]}, default is Undefined, optional
        proxyConnectHeader optionally specifies headers to send to
        proxies during CONNECT requests.

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyFromEnvironment : bool, default is Undefined, optional
        proxyFromEnvironment defines whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyUrl : str, default is Undefined, optional
        proxyUrl defines the HTTP proxy server to use.
    tlsConfig : MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfig, default is Undefined, optional
        tls config
    """
    authorization?: MonitoringCoreosComV1PrometheusSpecApiserverConfigAuthorization
    basicAuth?: MonitoringCoreosComV1PrometheusSpecApiserverConfigBasicAuth
    bearerToken?: str
    bearerTokenFile?: str
    host: str

    noProxy?: str
    proxyConnectHeader?: {str:[MonitoringCoreosComV1PrometheusSpecApiserverConfigProxyConnectHeaderItems0]}
    proxyFromEnvironment?: bool
    proxyUrl?: str
    tlsConfig?: MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfig

    check:
        _regex_match(str(proxyUrl), r"^(http|https|socks5)://.+$") if proxyUrl

schema MonitoringCoreosComV1PrometheusSpecApiserverConfigAuthorization:
    r"""
    authorization section for the API server.

    Cannot be set at the same time as `basicAuth`, `bearerToken`, or
    `bearerTokenFile`.

    Attributes
    ----------
    credentials : MonitoringCoreosComV1PrometheusSpecApiserverConfigAuthorizationCredentials, default is Undefined, optional
        credentials
    credentialsFile : str, default is Undefined, optional
        credentialsFile defines the file to read a secret from, mutually exclusive with `credentials`.
    $type : str, default is Undefined, optional
        type defines the authentication type. The value is case-insensitive.

        "Basic" is not a supported value.

        Default: "Bearer"
    """
    credentials?: MonitoringCoreosComV1PrometheusSpecApiserverConfigAuthorizationCredentials
    credentialsFile?: str
    $type?: str

schema MonitoringCoreosComV1PrometheusSpecApiserverConfigAuthorizationCredentials:
    r"""
    credentials defines a key of a Secret in the namespace that contains the credentials for authentication.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecApiserverConfigBasicAuth:
    r"""
    basicAuth configuration for the API server.

    Cannot be set at the same time as `authorization`, `bearerToken`, or
    `bearerTokenFile`.

    Attributes
    ----------
    password : MonitoringCoreosComV1PrometheusSpecApiserverConfigBasicAuthPassword, default is Undefined, optional
        password
    username : MonitoringCoreosComV1PrometheusSpecApiserverConfigBasicAuthUsername, default is Undefined, optional
        username
    """
    password?: MonitoringCoreosComV1PrometheusSpecApiserverConfigBasicAuthPassword
    username?: MonitoringCoreosComV1PrometheusSpecApiserverConfigBasicAuthUsername

schema MonitoringCoreosComV1PrometheusSpecApiserverConfigBasicAuthPassword:
    r"""
    password defines a key of a Secret containing the password for
    authentication.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecApiserverConfigBasicAuthUsername:
    r"""
    username defines a key of a Secret containing the username for
    authentication.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecApiserverConfigProxyConnectHeaderItems0:
    r"""
    SecretKeySelector selects a key of a Secret.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfig:
    r"""
    tlsConfig to use for the API server.

    Attributes
    ----------
    ca : MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfigCa, default is Undefined, optional
        ca
    caFile : str, default is Undefined, optional
        caFile defines the path to the CA cert in the Prometheus container to use for the targets.
    cert : MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfigCert, default is Undefined, optional
        cert
    certFile : str, default is Undefined, optional
        certFile defines the path to the client cert file in the Prometheus container for the targets.
    insecureSkipVerify : bool, default is Undefined, optional
        insecureSkipVerify defines how to disable target certificate validation.
    keyFile : str, default is Undefined, optional
        keyFile defines the path to the client key file in the Prometheus container for the targets.
    keySecret : MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfigKeySecret, default is Undefined, optional
        key secret
    maxVersion : str, default is Undefined, optional
        maxVersion defines the maximum acceptable TLS version.

        It requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.
    minVersion : str, default is Undefined, optional
        minVersion defines the minimum acceptable TLS version.

        It requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.
    serverName : str, default is Undefined, optional
        serverName is used to verify the hostname for the targets.
    """
    ca?: MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfigCa
    caFile?: str
    cert?: MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfigCert
    certFile?: str
    insecureSkipVerify?: bool
    keyFile?: str
    keySecret?: MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfigKeySecret
    maxVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    minVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    serverName?: str

schema MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfigCa:
    r"""
    ca defines the Certificate authority used when verifying server certificates.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfigCaConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfigCaSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfigCaConfigMap
    secret?: MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfigCaSecret

schema MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfigCaConfigMap:
    r"""
    configMap defines the ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfigCaSecret:
    r"""
    secret defines the Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfigCert:
    r"""
    cert defines the Client certificate to present when doing client-authentication.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfigCertConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfigCertSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfigCertConfigMap
    secret?: MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfigCertSecret

schema MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfigCertConfigMap:
    r"""
    configMap defines the ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfigCertSecret:
    r"""
    secret defines the Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecApiserverConfigTLSConfigKeySecret:
    r"""
    keySecret defines the Secret containing the client key file for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecArbitraryFSAccessThroughSMs:
    r"""
    arbitraryFSAccessThroughSMs when true, ServiceMonitor, PodMonitor and Probe object are forbidden to
    reference arbitrary files on the file system of the 'prometheus'
    container.
    When a ServiceMonitor's endpoint specifies a `bearerTokenFile` value
    (e.g.  '/var/run/secrets/kubernetes.io/serviceaccount/token'), a
    malicious target can get access to the Prometheus service account's
    token in the Prometheus' scrape request. Setting
    `spec.arbitraryFSAccessThroughSM` to 'true' would prevent the attack.
    Users should instead provide the credentials using the
    `spec.bearerTokenSecret` field.

    Attributes
    ----------
    deny : bool, default is Undefined, optional
        deny prevents service monitors from accessing arbitrary files on the file system.
        When true, service monitors cannot use file-based configurations like BearerTokenFile
        that could potentially access sensitive files. When false (default), such access is allowed.
        Setting this to true enhances security by preventing potential credential theft attacks.
    """
    deny?: bool

schema MonitoringCoreosComV1PrometheusSpecContainersItems0:
    r"""
    A single application container that you want to run within a pod.

    Attributes
    ----------
    args : [str], default is Undefined, optional
        Arguments to the entrypoint.
        The container image's CMD is used if this is not provided.
        Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
        cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
        produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
        of whether the variable exists or not. Cannot be updated.
        More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    command : [str], default is Undefined, optional
        Entrypoint array. Not executed within a shell.
        The container image's ENTRYPOINT is used if this is not provided.
        Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
        cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
        produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
        of whether the variable exists or not. Cannot be updated.
        More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    env : [MonitoringCoreosComV1PrometheusSpecContainersItems0EnvItems0], default is Undefined, optional
        List of environment variables to set in the container.
        Cannot be updated.
    envFrom : [MonitoringCoreosComV1PrometheusSpecContainersItems0EnvFromItems0], default is Undefined, optional
        List of sources to populate environment variables in the container.
        The keys defined within a source may consist of any printable ASCII characters except '='.
        When a key exists in multiple
        sources, the value associated with the last source will take precedence.
        Values defined by an Env with a duplicate key will take precedence.
        Cannot be updated.
    image : str, default is Undefined, optional
        Container image name.
        More info: https://kubernetes.io/docs/concepts/containers/images
        This field is optional to allow higher level config management to default or override
        container images in workload controllers like Deployments and StatefulSets.
    imagePullPolicy : str, default is Undefined, optional
        Image pull policy.
        One of Always, Never, IfNotPresent.
        Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
        Cannot be updated.
        More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
    lifecycle : MonitoringCoreosComV1PrometheusSpecContainersItems0Lifecycle, default is Undefined, optional
        lifecycle
    livenessProbe : MonitoringCoreosComV1PrometheusSpecContainersItems0LivenessProbe, default is Undefined, optional
        liveness probe
    name : str, default is Undefined, required
        Name of the container specified as a DNS_LABEL.
        Each container in a pod must have a unique name (DNS_LABEL).
        Cannot be updated.
    ports : [MonitoringCoreosComV1PrometheusSpecContainersItems0PortsItems0], default is Undefined, optional
        List of ports to expose from the container. Not specifying a port here
        DOES NOT prevent that port from being exposed. Any port which is
        listening on the default "0.0.0.0" address inside a container will be
        accessible from the network.
        Modifying this array with strategic merge patch may corrupt the data.
        For more information See https://github.com/kubernetes/kubernetes/issues/108255.
        Cannot be updated.
    readinessProbe : MonitoringCoreosComV1PrometheusSpecContainersItems0ReadinessProbe, default is Undefined, optional
        readiness probe
    resizePolicy : [MonitoringCoreosComV1PrometheusSpecContainersItems0ResizePolicyItems0], default is Undefined, optional
        Resources resize policy for the container.
    resources : MonitoringCoreosComV1PrometheusSpecContainersItems0Resources, default is Undefined, optional
        resources
    restartPolicy : str, default is Undefined, optional
        RestartPolicy defines the restart behavior of individual containers in a pod.
        This overrides the pod-level restart policy. When this field is not specified,
        the restart behavior is defined by the Pod's restart policy and the container type.
        Additionally, setting the RestartPolicy as "Always" for the init container will
        have the following effect:
        this init container will be continually restarted on
        exit until all regular containers have terminated. Once all regular
        containers have completed, all init containers with restartPolicy "Always"
        will be shut down. This lifecycle differs from normal init containers and
        is often referred to as a "sidecar" container. Although this init
        container still starts in the init container sequence, it does not wait
        for the container to complete before proceeding to the next init
        container. Instead, the next init container starts immediately after this
        init container is started, or after any startupProbe has successfully
        completed.
    restartPolicyRules : [MonitoringCoreosComV1PrometheusSpecContainersItems0RestartPolicyRulesItems0], default is Undefined, optional
        Represents a list of rules to be checked to determine if the
        container should be restarted on exit. The rules are evaluated in
        order. Once a rule matches a container exit condition, the remaining
        rules are ignored. If no rule matches the container exit condition,
        the Container-level restart policy determines the whether the container
        is restarted or not. Constraints on the rules:
        - At most 20 rules are allowed.
        - Rules can have the same action.
        - Identical rules are not forbidden in validations.
        When rules are specified, container MUST set RestartPolicy explicitly
        even it if matches the Pod's RestartPolicy.
    securityContext : MonitoringCoreosComV1PrometheusSpecContainersItems0SecurityContext, default is Undefined, optional
        security context
    startupProbe : MonitoringCoreosComV1PrometheusSpecContainersItems0StartupProbe, default is Undefined, optional
        startup probe
    stdin : bool, default is Undefined, optional
        Whether this container should allocate a buffer for stdin in the container runtime. If this
        is not set, reads from stdin in the container will always result in EOF.
        Default is false.
    stdinOnce : bool, default is Undefined, optional
        Whether the container runtime should close the stdin channel after it has been opened by
        a single attach. When stdin is true the stdin stream will remain open across multiple attach
        sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
        first client attaches to stdin, and then remains open and accepts data until the client disconnects,
        at which time stdin is closed and remains closed until the container is restarted. If this
        flag is false, a container processes that reads from stdin will never receive an EOF.
        Default is false
    terminationMessagePath : str, default is Undefined, optional
        Optional: Path at which the file to which the container's termination message
        will be written is mounted into the container's filesystem.
        Message written is intended to be brief final status, such as an assertion failure message.
        Will be truncated by the node if greater than 4096 bytes. The total message length across
        all containers will be limited to 12kb.
        Defaults to /dev/termination-log.
        Cannot be updated.
    terminationMessagePolicy : str, default is Undefined, optional
        Indicate how the termination message should be populated. File will use the contents of
        terminationMessagePath to populate the container status message on both success and failure.
        FallbackToLogsOnError will use the last chunk of container log output if the termination
        message file is empty and the container exited with an error.
        The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
        Defaults to File.
        Cannot be updated.
    tty : bool, default is Undefined, optional
        Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
        Default is false.
    volumeDevices : [MonitoringCoreosComV1PrometheusSpecContainersItems0VolumeDevicesItems0], default is Undefined, optional
        volumeDevices is the list of block devices to be used by the container.
    volumeMounts : [MonitoringCoreosComV1PrometheusSpecContainersItems0VolumeMountsItems0], default is Undefined, optional
        Pod volumes to mount into the container's filesystem.
        Cannot be updated.
    workingDir : str, default is Undefined, optional
        Container's working directory.
        If not specified, the container runtime's default will be used, which
        might be configured in the container image.
        Cannot be updated.
    """
    args?: [str]
    command?: [str]
    env?: [MonitoringCoreosComV1PrometheusSpecContainersItems0EnvItems0]
    envFrom?: [MonitoringCoreosComV1PrometheusSpecContainersItems0EnvFromItems0]
    image?: str
    imagePullPolicy?: str
    lifecycle?: MonitoringCoreosComV1PrometheusSpecContainersItems0Lifecycle
    livenessProbe?: MonitoringCoreosComV1PrometheusSpecContainersItems0LivenessProbe
    name: str

    ports?: [MonitoringCoreosComV1PrometheusSpecContainersItems0PortsItems0]
    readinessProbe?: MonitoringCoreosComV1PrometheusSpecContainersItems0ReadinessProbe
    resizePolicy?: [MonitoringCoreosComV1PrometheusSpecContainersItems0ResizePolicyItems0]
    resources?: MonitoringCoreosComV1PrometheusSpecContainersItems0Resources
    restartPolicy?: str
    restartPolicyRules?: [MonitoringCoreosComV1PrometheusSpecContainersItems0RestartPolicyRulesItems0]
    securityContext?: MonitoringCoreosComV1PrometheusSpecContainersItems0SecurityContext
    startupProbe?: MonitoringCoreosComV1PrometheusSpecContainersItems0StartupProbe
    stdin?: bool
    stdinOnce?: bool
    terminationMessagePath?: str
    terminationMessagePolicy?: str
    tty?: bool
    volumeDevices?: [MonitoringCoreosComV1PrometheusSpecContainersItems0VolumeDevicesItems0]
    volumeMounts?: [MonitoringCoreosComV1PrometheusSpecContainersItems0VolumeMountsItems0]
    workingDir?: str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0EnvFromItems0:
    r"""
    EnvFromSource represents the source of a set of ConfigMaps or Secrets

    Attributes
    ----------
    configMapRef : MonitoringCoreosComV1PrometheusSpecContainersItems0EnvFromItems0ConfigMapRef, default is Undefined, optional
        config map ref
    prefix : str, default is Undefined, optional
        Optional text to prepend to the name of each environment variable.
        May consist of any printable ASCII characters except '='.
    secretRef : MonitoringCoreosComV1PrometheusSpecContainersItems0EnvFromItems0SecretRef, default is Undefined, optional
        secret ref
    """
    configMapRef?: MonitoringCoreosComV1PrometheusSpecContainersItems0EnvFromItems0ConfigMapRef
    prefix?: str
    secretRef?: MonitoringCoreosComV1PrometheusSpecContainersItems0EnvFromItems0SecretRef

schema MonitoringCoreosComV1PrometheusSpecContainersItems0EnvFromItems0ConfigMapRef:
    r"""
    The ConfigMap to select from

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap must be defined
    """
    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecContainersItems0EnvFromItems0SecretRef:
    r"""
    The Secret to select from

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret must be defined
    """
    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecContainersItems0EnvItems0:
    r"""
    EnvVar represents an environment variable present in a Container.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the environment variable.
        May consist of any printable ASCII characters except '='.
    value : str, default is Undefined, optional
        Variable references $(VAR_NAME) are expanded
        using the previously defined environment variables in the container and
        any service environment variables. If a variable cannot be resolved,
        the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
        "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
        Escaped references will never be expanded, regardless of whether the variable
        exists or not.
        Defaults to "".
    valueFrom : MonitoringCoreosComV1PrometheusSpecContainersItems0EnvItems0ValueFrom, default is Undefined, optional
        value from
    """
    name: str

    value?: str
    valueFrom?: MonitoringCoreosComV1PrometheusSpecContainersItems0EnvItems0ValueFrom

schema MonitoringCoreosComV1PrometheusSpecContainersItems0EnvItems0ValueFrom:
    r"""
    Source for the environment variable's value. Cannot be used if value is not empty.

    Attributes
    ----------
    configMapKeyRef : MonitoringCoreosComV1PrometheusSpecContainersItems0EnvItems0ValueFromConfigMapKeyRef, default is Undefined, optional
        config map key ref
    fieldRef : MonitoringCoreosComV1PrometheusSpecContainersItems0EnvItems0ValueFromFieldRef, default is Undefined, optional
        field ref
    fileKeyRef : MonitoringCoreosComV1PrometheusSpecContainersItems0EnvItems0ValueFromFileKeyRef, default is Undefined, optional
        file key ref
    resourceFieldRef : MonitoringCoreosComV1PrometheusSpecContainersItems0EnvItems0ValueFromResourceFieldRef, default is Undefined, optional
        resource field ref
    secretKeyRef : MonitoringCoreosComV1PrometheusSpecContainersItems0EnvItems0ValueFromSecretKeyRef, default is Undefined, optional
        secret key ref
    """
    configMapKeyRef?: MonitoringCoreosComV1PrometheusSpecContainersItems0EnvItems0ValueFromConfigMapKeyRef
    fieldRef?: MonitoringCoreosComV1PrometheusSpecContainersItems0EnvItems0ValueFromFieldRef
    fileKeyRef?: MonitoringCoreosComV1PrometheusSpecContainersItems0EnvItems0ValueFromFileKeyRef
    resourceFieldRef?: MonitoringCoreosComV1PrometheusSpecContainersItems0EnvItems0ValueFromResourceFieldRef
    secretKeyRef?: MonitoringCoreosComV1PrometheusSpecContainersItems0EnvItems0ValueFromSecretKeyRef

schema MonitoringCoreosComV1PrometheusSpecContainersItems0EnvItems0ValueFromConfigMapKeyRef:
    r"""
    Selects a key of a ConfigMap.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecContainersItems0EnvItems0ValueFromFieldRef:
    r"""
    Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
    spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, default is Undefined, required
        Path of the field to select in the specified API version.
    """
    apiVersion?: str
    fieldPath: str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0EnvItems0ValueFromFileKeyRef:
    r"""
    FileKeyRef selects a key of the env file.
    Requires the EnvFiles feature gate to be enabled.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key within the env file. An invalid key will prevent the pod from starting.
        The keys defined within a source may consist of any printable ASCII characters except '='.
        During Alpha stage of the EnvFiles feature gate, the key size is limited to 128 characters.
    optional : bool, default is Undefined, optional
        Specify whether the file or its key must be defined. If the file or key
        does not exist, then the env var is not published.
        If optional is set to true and the specified key does not exist,
        the environment variable will not be set in the Pod's containers.

        If optional is set to false and the specified key does not exist,
        an error will be returned during Pod creation.
    path : str, default is Undefined, required
        The path within the volume from which to select the file.
        Must be relative and may not contain the '..' path or start with '..'.
    volumeName : str, default is Undefined, required
        The name of the volume mount containing the env file.
    """
    key: str

    optional?: bool = False
    path: str

    volumeName: str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0EnvItems0ValueFromResourceFieldRef:
    r"""
    Selects a resource of the container: only resources limits and requests
    (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Container name: required for volumes, optional for env vars
    divisor : int | str, default is Undefined, optional
        Specifies the output format of the exposed resources, defaults to "1"
    resource : str, default is Undefined, required
        Required: resource to select
    """
    containerName?: str
    divisor?: int | str
    resource: str

    check:
        _regex_match(str(divisor), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if divisor

schema MonitoringCoreosComV1PrometheusSpecContainersItems0EnvItems0ValueFromSecretKeyRef:
    r"""
    Selects a key of a secret in the pod's namespace

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecContainersItems0Lifecycle:
    r"""
    Actions that the management system should take in response to container lifecycle events.
    Cannot be updated.

    Attributes
    ----------
    postStart : MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePostStart, default is Undefined, optional
        post start
    preStop : MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePreStop, default is Undefined, optional
        pre stop
    stopSignal : str, default is Undefined, optional
        StopSignal defines which signal will be sent to a container when it is being stopped.
        If not specified, the default is defined by the container runtime in use.
        StopSignal can only be set for Pods with a non-empty .spec.os.name
    """
    postStart?: MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePostStart
    preStop?: MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePreStop
    stopSignal?: str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePostStart:
    r"""
    PostStart is called immediately after a container is created. If the handler fails,
    the container is terminated and restarted according to its restart policy.
    Other management of the container blocks until the hook completes.
    More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks

    Attributes
    ----------
    exec : MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePostStartExec, default is Undefined, optional
        exec
    httpGet : MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePostStartHTTPGet, default is Undefined, optional
        http get
    sleep : MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePostStartSleep, default is Undefined, optional
        sleep
    tcpSocket : MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePostStartTCPSocket, default is Undefined, optional
        tcp socket
    """
    exec?: MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePostStartExec
    httpGet?: MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePostStartHTTPGet
    sleep?: MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePostStartSleep
    tcpSocket?: MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePostStartTCPSocket

schema MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePostStartExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """
    command?: [str]

schema MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePostStartHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePostStartHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """
    host?: str
    httpHeaders?: [MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePostStartHTTPGetHTTPHeadersItems0]
    path?: str
    port: int | str

    scheme?: str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePostStartHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """
    name: str

    value: str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePostStartSleep:
    r"""
    Sleep represents a duration that the container should sleep.

    Attributes
    ----------
    seconds : int, default is Undefined, required
        Seconds is the number of seconds to sleep.
    """
    seconds: int

schema MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePostStartTCPSocket:
    r"""
    Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
    for backward compatibility. There is no validation of this field and
    lifecycle hooks will fail at runtime when it is specified.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """
    host?: str
    port: int | str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePreStop:
    r"""
    PreStop is called immediately before a container is terminated due to an
    API request or management event such as liveness/startup probe failure,
    preemption, resource contention, etc. The handler is not called if the
    container crashes or exits. The Pod's termination grace period countdown begins before the
    PreStop hook is executed. Regardless of the outcome of the handler, the
    container will eventually terminate within the Pod's termination grace
    period (unless delayed by finalizers). Other management of the container blocks until the hook completes
    or until the termination grace period is reached.
    More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks

    Attributes
    ----------
    exec : MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePreStopExec, default is Undefined, optional
        exec
    httpGet : MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePreStopHTTPGet, default is Undefined, optional
        http get
    sleep : MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePreStopSleep, default is Undefined, optional
        sleep
    tcpSocket : MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePreStopTCPSocket, default is Undefined, optional
        tcp socket
    """
    exec?: MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePreStopExec
    httpGet?: MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePreStopHTTPGet
    sleep?: MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePreStopSleep
    tcpSocket?: MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePreStopTCPSocket

schema MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePreStopExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """
    command?: [str]

schema MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePreStopHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePreStopHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """
    host?: str
    httpHeaders?: [MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePreStopHTTPGetHTTPHeadersItems0]
    path?: str
    port: int | str

    scheme?: str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePreStopHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """
    name: str

    value: str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePreStopSleep:
    r"""
    Sleep represents a duration that the container should sleep.

    Attributes
    ----------
    seconds : int, default is Undefined, required
        Seconds is the number of seconds to sleep.
    """
    seconds: int

schema MonitoringCoreosComV1PrometheusSpecContainersItems0LifecyclePreStopTCPSocket:
    r"""
    Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
    for backward compatibility. There is no validation of this field and
    lifecycle hooks will fail at runtime when it is specified.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """
    host?: str
    port: int | str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0LivenessProbe:
    r"""
    Periodic probe of container liveness.
    Container will be restarted if the probe fails.
    Cannot be updated.
    More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

    Attributes
    ----------
    exec : MonitoringCoreosComV1PrometheusSpecContainersItems0LivenessProbeExec, default is Undefined, optional
        exec
    failureThreshold : int, default is Undefined, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded.
        Defaults to 3. Minimum value is 1.
    grpc : MonitoringCoreosComV1PrometheusSpecContainersItems0LivenessProbeGrpc, default is Undefined, optional
        grpc
    httpGet : MonitoringCoreosComV1PrometheusSpecContainersItems0LivenessProbeHTTPGet, default is Undefined, optional
        http get
    initialDelaySeconds : int, default is Undefined, optional
        Number of seconds after the container has started before liveness probes are initiated.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, default is Undefined, optional
        How often (in seconds) to perform the probe.
        Default to 10 seconds. Minimum value is 1.
    successThreshold : int, default is Undefined, optional
        Minimum consecutive successes for the probe to be considered successful after having failed.
        Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : MonitoringCoreosComV1PrometheusSpecContainersItems0LivenessProbeTCPSocket, default is Undefined, optional
        tcp socket
    terminationGracePeriodSeconds : int, default is Undefined, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
        The grace period is the duration in seconds after the processes running in the pod are sent
        a termination signal and the time when the processes are forcibly halted with a kill signal.
        Set this value longer than the expected cleanup time for your process.
        If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
        value overrides the value provided by the pod spec.
        Value must be non-negative integer. The value zero indicates stop immediately via
        the kill signal (no opportunity to shut down).
        This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
        Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, default is Undefined, optional
        Number of seconds after which the probe times out.
        Defaults to 1 second. Minimum value is 1.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """
    exec?: MonitoringCoreosComV1PrometheusSpecContainersItems0LivenessProbeExec
    failureThreshold?: int
    grpc?: MonitoringCoreosComV1PrometheusSpecContainersItems0LivenessProbeGrpc
    httpGet?: MonitoringCoreosComV1PrometheusSpecContainersItems0LivenessProbeHTTPGet
    initialDelaySeconds?: int
    periodSeconds?: int
    successThreshold?: int
    tcpSocket?: MonitoringCoreosComV1PrometheusSpecContainersItems0LivenessProbeTCPSocket
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int

schema MonitoringCoreosComV1PrometheusSpecContainersItems0LivenessProbeExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """
    command?: [str]

schema MonitoringCoreosComV1PrometheusSpecContainersItems0LivenessProbeGrpc:
    r"""
    GRPC specifies a GRPC HealthCheckRequest.

    Attributes
    ----------
    port : int, default is Undefined, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, default is Undefined, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest
        (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """
    port: int

    service?: str = ""

schema MonitoringCoreosComV1PrometheusSpecContainersItems0LivenessProbeHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [MonitoringCoreosComV1PrometheusSpecContainersItems0LivenessProbeHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """
    host?: str
    httpHeaders?: [MonitoringCoreosComV1PrometheusSpecContainersItems0LivenessProbeHTTPGetHTTPHeadersItems0]
    path?: str
    port: int | str

    scheme?: str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0LivenessProbeHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """
    name: str

    value: str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0LivenessProbeTCPSocket:
    r"""
    TCPSocket specifies a connection to a TCP port.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """
    host?: str
    port: int | str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0PortsItems0:
    r"""
    ContainerPort represents a network port in a single container.

    Attributes
    ----------
    containerPort : int, default is Undefined, required
        Number of port to expose on the pod's IP address.
        This must be a valid port number, 0 < x < 65536.
    hostIP : str, default is Undefined, optional
        What host IP to bind the external port to.
    hostPort : int, default is Undefined, optional
        Number of port to expose on the host.
        If specified, this must be a valid port number, 0 < x < 65536.
        If HostNetwork is specified, this must match ContainerPort.
        Most containers do not need this.
    name : str, default is Undefined, optional
        If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
        named port in a pod must have a unique name. Name for the port that can be
        referred to by services.
    $protocol : str, default is "TCP", optional
        Protocol for port. Must be UDP, TCP, or SCTP.
        Defaults to "TCP".
    """
    containerPort: int

    hostIP?: str
    hostPort?: int
    name?: str
    $protocol?: str = "TCP"

schema MonitoringCoreosComV1PrometheusSpecContainersItems0ReadinessProbe:
    r"""
    Periodic probe of container service readiness.
    Container will be removed from service endpoints if the probe fails.
    Cannot be updated.
    More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

    Attributes
    ----------
    exec : MonitoringCoreosComV1PrometheusSpecContainersItems0ReadinessProbeExec, default is Undefined, optional
        exec
    failureThreshold : int, default is Undefined, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded.
        Defaults to 3. Minimum value is 1.
    grpc : MonitoringCoreosComV1PrometheusSpecContainersItems0ReadinessProbeGrpc, default is Undefined, optional
        grpc
    httpGet : MonitoringCoreosComV1PrometheusSpecContainersItems0ReadinessProbeHTTPGet, default is Undefined, optional
        http get
    initialDelaySeconds : int, default is Undefined, optional
        Number of seconds after the container has started before liveness probes are initiated.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, default is Undefined, optional
        How often (in seconds) to perform the probe.
        Default to 10 seconds. Minimum value is 1.
    successThreshold : int, default is Undefined, optional
        Minimum consecutive successes for the probe to be considered successful after having failed.
        Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : MonitoringCoreosComV1PrometheusSpecContainersItems0ReadinessProbeTCPSocket, default is Undefined, optional
        tcp socket
    terminationGracePeriodSeconds : int, default is Undefined, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
        The grace period is the duration in seconds after the processes running in the pod are sent
        a termination signal and the time when the processes are forcibly halted with a kill signal.
        Set this value longer than the expected cleanup time for your process.
        If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
        value overrides the value provided by the pod spec.
        Value must be non-negative integer. The value zero indicates stop immediately via
        the kill signal (no opportunity to shut down).
        This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
        Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, default is Undefined, optional
        Number of seconds after which the probe times out.
        Defaults to 1 second. Minimum value is 1.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """
    exec?: MonitoringCoreosComV1PrometheusSpecContainersItems0ReadinessProbeExec
    failureThreshold?: int
    grpc?: MonitoringCoreosComV1PrometheusSpecContainersItems0ReadinessProbeGrpc
    httpGet?: MonitoringCoreosComV1PrometheusSpecContainersItems0ReadinessProbeHTTPGet
    initialDelaySeconds?: int
    periodSeconds?: int
    successThreshold?: int
    tcpSocket?: MonitoringCoreosComV1PrometheusSpecContainersItems0ReadinessProbeTCPSocket
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int

schema MonitoringCoreosComV1PrometheusSpecContainersItems0ReadinessProbeExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """
    command?: [str]

schema MonitoringCoreosComV1PrometheusSpecContainersItems0ReadinessProbeGrpc:
    r"""
    GRPC specifies a GRPC HealthCheckRequest.

    Attributes
    ----------
    port : int, default is Undefined, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, default is Undefined, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest
        (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """
    port: int

    service?: str = ""

schema MonitoringCoreosComV1PrometheusSpecContainersItems0ReadinessProbeHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [MonitoringCoreosComV1PrometheusSpecContainersItems0ReadinessProbeHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """
    host?: str
    httpHeaders?: [MonitoringCoreosComV1PrometheusSpecContainersItems0ReadinessProbeHTTPGetHTTPHeadersItems0]
    path?: str
    port: int | str

    scheme?: str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0ReadinessProbeHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """
    name: str

    value: str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0ReadinessProbeTCPSocket:
    r"""
    TCPSocket specifies a connection to a TCP port.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """
    host?: str
    port: int | str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0ResizePolicyItems0:
    r"""
    ContainerResizePolicy represents resource resize policy for the container.

    Attributes
    ----------
    resourceName : str, default is Undefined, required
        Name of the resource to which this resource resize policy applies.
        Supported values: cpu, memory.
    restartPolicy : str, default is Undefined, required
        Restart policy to apply when specified resource is resized.
        If not specified, it defaults to NotRequired.
    """
    resourceName: str

    restartPolicy: str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0Resources:
    r"""
    Compute Resources required by this container.
    Cannot be updated.
    More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/

    Attributes
    ----------
    claims : [MonitoringCoreosComV1PrometheusSpecContainersItems0ResourcesClaimsItems0], default is Undefined, optional
        Claims lists the names of resources, defined in spec.resourceClaims,
        that are used by this container.

        This field depends on the
        DynamicResourceAllocation feature gate.

        This field is immutable. It can only be set for containers.
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """
    claims?: [MonitoringCoreosComV1PrometheusSpecContainersItems0ResourcesClaimsItems0]
    limits?: {str:int | str}
    requests?: {str:int | str}

    check:
        all _, limits in limits {_regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits} if limits
        all _, requests in requests {_regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests} if requests

schema MonitoringCoreosComV1PrometheusSpecContainersItems0ResourcesClaimsItems0:
    r"""
    ResourceClaim references one entry in PodSpec.ResourceClaims.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name must match the name of one entry in pod.spec.resourceClaims of
        the Pod where this field is used. It makes that resource available
        inside a container.
    request : str, default is Undefined, optional
        Request is the name chosen for a request in the referenced claim.
        If empty, everything from the claim is made available, otherwise
        only the result of this request.
    """
    name: str

    request?: str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0RestartPolicyRulesItems0:
    r"""
    ContainerRestartRule describes how a container exit is handled.

    Attributes
    ----------
    action : str, default is Undefined, required
        Specifies the action taken on a container exit if the requirements
        are satisfied. The only possible value is "Restart" to restart the
        container.
    exitCodes : MonitoringCoreosComV1PrometheusSpecContainersItems0RestartPolicyRulesItems0ExitCodes, default is Undefined, optional
        exit codes
    """
    action: str

    exitCodes?: MonitoringCoreosComV1PrometheusSpecContainersItems0RestartPolicyRulesItems0ExitCodes

schema MonitoringCoreosComV1PrometheusSpecContainersItems0RestartPolicyRulesItems0ExitCodes:
    r"""
    Represents the exit codes to check on container exits.

    Attributes
    ----------
    operator : str, default is Undefined, required
        Represents the relationship between the container exit code(s) and the
        specified values. Possible values are:
        - In: the requirement is satisfied if the container exit code is in the
          set of specified values.
        - NotIn: the requirement is satisfied if the container exit code is
          not in the set of specified values.
    values : [int], default is Undefined, optional
        Specifies the set of values to check for container exit codes.
        At most 255 elements are allowed.
    """
    operator: str

    values?: [int]

schema MonitoringCoreosComV1PrometheusSpecContainersItems0SecurityContext:
    r"""
    SecurityContext defines the security options the container should be run with.
    If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
    More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/

    Attributes
    ----------
    allowPrivilegeEscalation : bool, default is Undefined, optional
        AllowPrivilegeEscalation controls whether a process can gain more
        privileges than its parent process. This bool directly controls if
        the no_new_privs flag will be set on the container process.
        AllowPrivilegeEscalation is true always when the container is:
        1) run as Privileged
        2) has CAP_SYS_ADMIN
        Note that this field cannot be set when spec.os.name is windows.
    appArmorProfile : MonitoringCoreosComV1PrometheusSpecContainersItems0SecurityContextAppArmorProfile, default is Undefined, optional
        app armor profile
    capabilities : MonitoringCoreosComV1PrometheusSpecContainersItems0SecurityContextCapabilities, default is Undefined, optional
        capabilities
    privileged : bool, default is Undefined, optional
        Run container in privileged mode.
        Processes in privileged containers are essentially equivalent to root on the host.
        Defaults to false.
        Note that this field cannot be set when spec.os.name is windows.
    procMount : str, default is Undefined, optional
        procMount denotes the type of proc mount to use for the containers.
        The default value is Default which uses the container runtime defaults for
        readonly paths and masked paths.
        This requires the ProcMountType feature flag to be enabled.
        Note that this field cannot be set when spec.os.name is windows.
    readOnlyRootFilesystem : bool, default is Undefined, optional
        Whether this container has a read-only root filesystem.
        Default is false.
        Note that this field cannot be set when spec.os.name is windows.
    runAsGroup : int, default is Undefined, optional
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        Note that this field cannot be set when spec.os.name is windows.
    runAsNonRoot : bool, default is Undefined, optional
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
    runAsUser : int, default is Undefined, optional
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        Note that this field cannot be set when spec.os.name is windows.
    seLinuxOptions : MonitoringCoreosComV1PrometheusSpecContainersItems0SecurityContextSeLinuxOptions, default is Undefined, optional
        se linux options
    seccompProfile : MonitoringCoreosComV1PrometheusSpecContainersItems0SecurityContextSeccompProfile, default is Undefined, optional
        seccomp profile
    windowsOptions : MonitoringCoreosComV1PrometheusSpecContainersItems0SecurityContextWindowsOptions, default is Undefined, optional
        windows options
    """
    allowPrivilegeEscalation?: bool
    appArmorProfile?: MonitoringCoreosComV1PrometheusSpecContainersItems0SecurityContextAppArmorProfile
    capabilities?: MonitoringCoreosComV1PrometheusSpecContainersItems0SecurityContextCapabilities
    privileged?: bool
    procMount?: str
    readOnlyRootFilesystem?: bool
    runAsGroup?: int
    runAsNonRoot?: bool
    runAsUser?: int
    seLinuxOptions?: MonitoringCoreosComV1PrometheusSpecContainersItems0SecurityContextSeLinuxOptions
    seccompProfile?: MonitoringCoreosComV1PrometheusSpecContainersItems0SecurityContextSeccompProfile
    windowsOptions?: MonitoringCoreosComV1PrometheusSpecContainersItems0SecurityContextWindowsOptions

schema MonitoringCoreosComV1PrometheusSpecContainersItems0SecurityContextAppArmorProfile:
    r"""
    appArmorProfile is the AppArmor options to use by this container. If set, this profile
    overrides the pod's appArmorProfile.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    localhostProfile : str, default is Undefined, optional
        localhostProfile indicates a profile loaded on the node that should be used.
        The profile must be preconfigured on the node to work.
        Must match the loaded name of the profile.
        Must be set if and only if type is "Localhost".
    $type : str, default is Undefined, required
        type indicates which kind of AppArmor profile will be applied.
        Valid options are:
          Localhost - a profile pre-loaded on the node.
          RuntimeDefault - the container runtime's default profile.
          Unconfined - no AppArmor enforcement.
    """
    localhostProfile?: str
    $type: str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0SecurityContextCapabilities:
    r"""
    The capabilities to add/drop when running containers.
    Defaults to the default set of capabilities granted by the container runtime.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    add : [str], default is Undefined, optional
        Added capabilities
    drop : [str], default is Undefined, optional
        Removed capabilities
    """
    add?: [str]
    drop?: [str]

schema MonitoringCoreosComV1PrometheusSpecContainersItems0SecurityContextSeLinuxOptions:
    r"""
    The SELinux context to be applied to the container.
    If unspecified, the container runtime will allocate a random SELinux context for each
    container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
    PodSecurityContext, the value specified in SecurityContext takes precedence.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    level : str, default is Undefined, optional
        Level is SELinux level label that applies to the container.
    role : str, default is Undefined, optional
        Role is a SELinux role label that applies to the container.
    $type : str, default is Undefined, optional
        Type is a SELinux type label that applies to the container.
    user : str, default is Undefined, optional
        User is a SELinux user label that applies to the container.
    """
    level?: str
    role?: str
    $type?: str
    user?: str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0SecurityContextSeccompProfile:
    r"""
    The seccomp options to use by this container. If seccomp options are
    provided at both the pod & container level, the container options
    override the pod options.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    localhostProfile : str, default is Undefined, optional
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
    $type : str, default is Undefined, required
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
    """
    localhostProfile?: str
    $type: str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0SecurityContextWindowsOptions:
    r"""
    The Windows specific settings applied to all containers.
    If unspecified, the options from the PodSecurityContext will be used.
    If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    Note that this field cannot be set when spec.os.name is linux.

    Attributes
    ----------
    gmsaCredentialSpec : str, default is Undefined, optional
        GMSACredentialSpec is where the GMSA admission webhook
        (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
        GMSA credential spec named by the GMSACredentialSpecName field.
    gmsaCredentialSpecName : str, default is Undefined, optional
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
    hostProcess : bool, default is Undefined, optional
        HostProcess determines if a container should be run as a 'Host Process' container.
        All of a Pod's containers must have the same effective HostProcess value
        (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
        In addition, if HostProcess is true then HostNetwork must also be set to true.
    runAsUserName : str, default is Undefined, optional
        The UserName in Windows to run the entrypoint of the container process.
        Defaults to the user specified in image metadata if unspecified.
        May also be set in PodSecurityContext. If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
    """
    gmsaCredentialSpec?: str
    gmsaCredentialSpecName?: str
    hostProcess?: bool
    runAsUserName?: str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0StartupProbe:
    r"""
    StartupProbe indicates that the Pod has successfully initialized.
    If specified, no other probes are executed until this completes successfully.
    If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
    This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
    when it might take a long time to load data or warm a cache, than during steady-state operation.
    This cannot be updated.
    More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

    Attributes
    ----------
    exec : MonitoringCoreosComV1PrometheusSpecContainersItems0StartupProbeExec, default is Undefined, optional
        exec
    failureThreshold : int, default is Undefined, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded.
        Defaults to 3. Minimum value is 1.
    grpc : MonitoringCoreosComV1PrometheusSpecContainersItems0StartupProbeGrpc, default is Undefined, optional
        grpc
    httpGet : MonitoringCoreosComV1PrometheusSpecContainersItems0StartupProbeHTTPGet, default is Undefined, optional
        http get
    initialDelaySeconds : int, default is Undefined, optional
        Number of seconds after the container has started before liveness probes are initiated.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, default is Undefined, optional
        How often (in seconds) to perform the probe.
        Default to 10 seconds. Minimum value is 1.
    successThreshold : int, default is Undefined, optional
        Minimum consecutive successes for the probe to be considered successful after having failed.
        Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : MonitoringCoreosComV1PrometheusSpecContainersItems0StartupProbeTCPSocket, default is Undefined, optional
        tcp socket
    terminationGracePeriodSeconds : int, default is Undefined, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
        The grace period is the duration in seconds after the processes running in the pod are sent
        a termination signal and the time when the processes are forcibly halted with a kill signal.
        Set this value longer than the expected cleanup time for your process.
        If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
        value overrides the value provided by the pod spec.
        Value must be non-negative integer. The value zero indicates stop immediately via
        the kill signal (no opportunity to shut down).
        This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
        Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, default is Undefined, optional
        Number of seconds after which the probe times out.
        Defaults to 1 second. Minimum value is 1.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """
    exec?: MonitoringCoreosComV1PrometheusSpecContainersItems0StartupProbeExec
    failureThreshold?: int
    grpc?: MonitoringCoreosComV1PrometheusSpecContainersItems0StartupProbeGrpc
    httpGet?: MonitoringCoreosComV1PrometheusSpecContainersItems0StartupProbeHTTPGet
    initialDelaySeconds?: int
    periodSeconds?: int
    successThreshold?: int
    tcpSocket?: MonitoringCoreosComV1PrometheusSpecContainersItems0StartupProbeTCPSocket
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int

schema MonitoringCoreosComV1PrometheusSpecContainersItems0StartupProbeExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """
    command?: [str]

schema MonitoringCoreosComV1PrometheusSpecContainersItems0StartupProbeGrpc:
    r"""
    GRPC specifies a GRPC HealthCheckRequest.

    Attributes
    ----------
    port : int, default is Undefined, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, default is Undefined, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest
        (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """
    port: int

    service?: str = ""

schema MonitoringCoreosComV1PrometheusSpecContainersItems0StartupProbeHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [MonitoringCoreosComV1PrometheusSpecContainersItems0StartupProbeHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """
    host?: str
    httpHeaders?: [MonitoringCoreosComV1PrometheusSpecContainersItems0StartupProbeHTTPGetHTTPHeadersItems0]
    path?: str
    port: int | str

    scheme?: str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0StartupProbeHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """
    name: str

    value: str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0StartupProbeTCPSocket:
    r"""
    TCPSocket specifies a connection to a TCP port.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """
    host?: str
    port: int | str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0VolumeDevicesItems0:
    r"""
    volumeDevice describes a mapping of a raw block device within a container.

    Attributes
    ----------
    devicePath : str, default is Undefined, required
        devicePath is the path inside of the container that the device will be mapped to.
    name : str, default is Undefined, required
        name must match the name of a persistentVolumeClaim in the pod
    """
    devicePath: str

    name: str

schema MonitoringCoreosComV1PrometheusSpecContainersItems0VolumeMountsItems0:
    r"""
    VolumeMount describes a mounting of a Volume within a container.

    Attributes
    ----------
    mountPath : str, default is Undefined, required
        Path within the container at which the volume should be mounted.  Must
        not contain ':'.
    mountPropagation : str, default is Undefined, optional
        mountPropagation determines how mounts are propagated from the host
        to container and the other way around.
        When not set, MountPropagationNone is used.
        This field is beta in 1.10.
        When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
        (which defaults to None).
    name : str, default is Undefined, required
        This must match the Name of a Volume.
    readOnly : bool, default is Undefined, optional
        Mounted read-only if true, read-write otherwise (false or unspecified).
        Defaults to false.
    recursiveReadOnly : str, default is Undefined, optional
        RecursiveReadOnly specifies whether read-only mounts should be handled
        recursively.

        If ReadOnly is false, this field has no meaning and must be unspecified.

        If ReadOnly is true, and this field is set to Disabled, the mount is not made
        recursively read-only.  If this field is set to IfPossible, the mount is made
        recursively read-only, if it is supported by the container runtime.  If this
        field is set to Enabled, the mount is made recursively read-only if it is
        supported by the container runtime, otherwise the pod will not be started and
        an error will be generated to indicate the reason.

        If this field is set to IfPossible or Enabled, MountPropagation must be set to
        None (or be unspecified, which defaults to None).

        If this field is not specified, it is treated as an equivalent of Disabled.
    subPath : str, default is Undefined, optional
        Path within the volume from which the container's volume should be mounted.
        Defaults to "" (volume's root).
    subPathExpr : str, default is Undefined, optional
        Expanded path within the volume from which the container's volume should be mounted.
        Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
        Defaults to "" (volume's root).
        SubPathExpr and SubPath are mutually exclusive.
    """
    mountPath: str

    mountPropagation?: str
    name: str

    readOnly?: bool
    recursiveReadOnly?: str
    subPath?: str
    subPathExpr?: str

schema MonitoringCoreosComV1PrometheusSpecDNSConfig:
    r"""
    dnsConfig defines the DNS configuration for the pods.

    Attributes
    ----------
    nameservers : [str], default is Undefined, optional
        nameservers defines the list of DNS name server IP addresses.
        This will be appended to the base nameservers generated from DNSPolicy.
    options : [MonitoringCoreosComV1PrometheusSpecDNSConfigOptionsItems0], default is Undefined, optional
        options defines the list of DNS resolver options.
        This will be merged with the base options generated from DNSPolicy.
        Resolution options given in Options
        will override those that appear in the base DNSPolicy.
    searches : [str], default is Undefined, optional
        searches defines the list of DNS search domains for host-name lookup.
        This will be appended to the base search paths generated from DNSPolicy.
    """
    nameservers?: [str]
    options?: [MonitoringCoreosComV1PrometheusSpecDNSConfigOptionsItems0]
    searches?: [str]

    check:
        all nameservers in nameservers {len(nameservers) >= 1 if nameservers not in [None, Undefined]} if nameservers
        all searches in searches {len(searches) >= 1 if searches not in [None, Undefined]} if searches

schema MonitoringCoreosComV1PrometheusSpecDNSConfigOptionsItems0:
    r"""
    PodDNSConfigOption defines DNS resolver options of a pod.

    Attributes
    ----------
    name : str, default is Undefined, required
        name is required and must be unique.
    value : str, default is Undefined, optional
        value is optional.
    """
    name: str

    value?: str

    check:
        len(name) >= 1

schema MonitoringCoreosComV1PrometheusSpecExcludedFromEnforcementItems0:
    r"""
    ObjectReference references a PodMonitor, ServiceMonitor, Probe or PrometheusRule object.

    Attributes
    ----------
    group : str, default is "monitoring.coreos.com", optional
        group of the referent. When not specified, it defaults to `monitoring.coreos.com`
    name : str, default is Undefined, optional
        name of the referent. When not set, all resources in the namespace are matched.
    namespace : str, default is Undefined, required
        namespace of the referent.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
    resource : str, default is Undefined, required
        resource of the referent.
    """
    group?: "monitoring.coreos.com" = "monitoring.coreos.com"
    name?: str
    namespace: str

    resource: "prometheusrules" | "servicemonitors" | "podmonitors" | "probes" | "scrapeconfigs"

    check:
        len(namespace) >= 1

schema MonitoringCoreosComV1PrometheusSpecExemplars:
    r"""
    exemplars related settings that are runtime reloadable.
    It requires to enable the `exemplar-storage` feature flag to be effective.

    Attributes
    ----------
    maxSize : int, default is Undefined, optional
        maxSize defines the maximum number of exemplars stored in memory for all series.

        exemplar-storage itself must be enabled using the `spec.enableFeature`
        option for exemplars to be scraped in the first place.

        If not set, Prometheus uses its default value. A value of zero or less
        than zero disables the storage.
    """
    maxSize?: int

schema MonitoringCoreosComV1PrometheusSpecHostAliasesItems0:
    r"""
    HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
    pod's hosts file.

    Attributes
    ----------
    hostnames : [str], default is Undefined, required
        hostnames defines hostnames for the above IP address.
    ip : str, default is Undefined, required
        ip defines the IP address of the host file entry.
    """
    hostnames: [str]

    ip: str

schema MonitoringCoreosComV1PrometheusSpecImagePullSecretsItems0:
    r"""
    LocalObjectReference contains enough information to let you locate the
    referenced object inside the same namespace.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    name?: str = ""

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0:
    r"""
    A single application container that you want to run within a pod.

    Attributes
    ----------
    args : [str], default is Undefined, optional
        Arguments to the entrypoint.
        The container image's CMD is used if this is not provided.
        Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
        cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
        produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
        of whether the variable exists or not. Cannot be updated.
        More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    command : [str], default is Undefined, optional
        Entrypoint array. Not executed within a shell.
        The container image's ENTRYPOINT is used if this is not provided.
        Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
        cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
        produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
        of whether the variable exists or not. Cannot be updated.
        More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    env : [MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvItems0], default is Undefined, optional
        List of environment variables to set in the container.
        Cannot be updated.
    envFrom : [MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvFromItems0], default is Undefined, optional
        List of sources to populate environment variables in the container.
        The keys defined within a source may consist of any printable ASCII characters except '='.
        When a key exists in multiple
        sources, the value associated with the last source will take precedence.
        Values defined by an Env with a duplicate key will take precedence.
        Cannot be updated.
    image : str, default is Undefined, optional
        Container image name.
        More info: https://kubernetes.io/docs/concepts/containers/images
        This field is optional to allow higher level config management to default or override
        container images in workload controllers like Deployments and StatefulSets.
    imagePullPolicy : str, default is Undefined, optional
        Image pull policy.
        One of Always, Never, IfNotPresent.
        Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
        Cannot be updated.
        More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
    lifecycle : MonitoringCoreosComV1PrometheusSpecInitContainersItems0Lifecycle, default is Undefined, optional
        lifecycle
    livenessProbe : MonitoringCoreosComV1PrometheusSpecInitContainersItems0LivenessProbe, default is Undefined, optional
        liveness probe
    name : str, default is Undefined, required
        Name of the container specified as a DNS_LABEL.
        Each container in a pod must have a unique name (DNS_LABEL).
        Cannot be updated.
    ports : [MonitoringCoreosComV1PrometheusSpecInitContainersItems0PortsItems0], default is Undefined, optional
        List of ports to expose from the container. Not specifying a port here
        DOES NOT prevent that port from being exposed. Any port which is
        listening on the default "0.0.0.0" address inside a container will be
        accessible from the network.
        Modifying this array with strategic merge patch may corrupt the data.
        For more information See https://github.com/kubernetes/kubernetes/issues/108255.
        Cannot be updated.
    readinessProbe : MonitoringCoreosComV1PrometheusSpecInitContainersItems0ReadinessProbe, default is Undefined, optional
        readiness probe
    resizePolicy : [MonitoringCoreosComV1PrometheusSpecInitContainersItems0ResizePolicyItems0], default is Undefined, optional
        Resources resize policy for the container.
    resources : MonitoringCoreosComV1PrometheusSpecInitContainersItems0Resources, default is Undefined, optional
        resources
    restartPolicy : str, default is Undefined, optional
        RestartPolicy defines the restart behavior of individual containers in a pod.
        This overrides the pod-level restart policy. When this field is not specified,
        the restart behavior is defined by the Pod's restart policy and the container type.
        Additionally, setting the RestartPolicy as "Always" for the init container will
        have the following effect:
        this init container will be continually restarted on
        exit until all regular containers have terminated. Once all regular
        containers have completed, all init containers with restartPolicy "Always"
        will be shut down. This lifecycle differs from normal init containers and
        is often referred to as a "sidecar" container. Although this init
        container still starts in the init container sequence, it does not wait
        for the container to complete before proceeding to the next init
        container. Instead, the next init container starts immediately after this
        init container is started, or after any startupProbe has successfully
        completed.
    restartPolicyRules : [MonitoringCoreosComV1PrometheusSpecInitContainersItems0RestartPolicyRulesItems0], default is Undefined, optional
        Represents a list of rules to be checked to determine if the
        container should be restarted on exit. The rules are evaluated in
        order. Once a rule matches a container exit condition, the remaining
        rules are ignored. If no rule matches the container exit condition,
        the Container-level restart policy determines the whether the container
        is restarted or not. Constraints on the rules:
        - At most 20 rules are allowed.
        - Rules can have the same action.
        - Identical rules are not forbidden in validations.
        When rules are specified, container MUST set RestartPolicy explicitly
        even it if matches the Pod's RestartPolicy.
    securityContext : MonitoringCoreosComV1PrometheusSpecInitContainersItems0SecurityContext, default is Undefined, optional
        security context
    startupProbe : MonitoringCoreosComV1PrometheusSpecInitContainersItems0StartupProbe, default is Undefined, optional
        startup probe
    stdin : bool, default is Undefined, optional
        Whether this container should allocate a buffer for stdin in the container runtime. If this
        is not set, reads from stdin in the container will always result in EOF.
        Default is false.
    stdinOnce : bool, default is Undefined, optional
        Whether the container runtime should close the stdin channel after it has been opened by
        a single attach. When stdin is true the stdin stream will remain open across multiple attach
        sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
        first client attaches to stdin, and then remains open and accepts data until the client disconnects,
        at which time stdin is closed and remains closed until the container is restarted. If this
        flag is false, a container processes that reads from stdin will never receive an EOF.
        Default is false
    terminationMessagePath : str, default is Undefined, optional
        Optional: Path at which the file to which the container's termination message
        will be written is mounted into the container's filesystem.
        Message written is intended to be brief final status, such as an assertion failure message.
        Will be truncated by the node if greater than 4096 bytes. The total message length across
        all containers will be limited to 12kb.
        Defaults to /dev/termination-log.
        Cannot be updated.
    terminationMessagePolicy : str, default is Undefined, optional
        Indicate how the termination message should be populated. File will use the contents of
        terminationMessagePath to populate the container status message on both success and failure.
        FallbackToLogsOnError will use the last chunk of container log output if the termination
        message file is empty and the container exited with an error.
        The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
        Defaults to File.
        Cannot be updated.
    tty : bool, default is Undefined, optional
        Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
        Default is false.
    volumeDevices : [MonitoringCoreosComV1PrometheusSpecInitContainersItems0VolumeDevicesItems0], default is Undefined, optional
        volumeDevices is the list of block devices to be used by the container.
    volumeMounts : [MonitoringCoreosComV1PrometheusSpecInitContainersItems0VolumeMountsItems0], default is Undefined, optional
        Pod volumes to mount into the container's filesystem.
        Cannot be updated.
    workingDir : str, default is Undefined, optional
        Container's working directory.
        If not specified, the container runtime's default will be used, which
        might be configured in the container image.
        Cannot be updated.
    """
    args?: [str]
    command?: [str]
    env?: [MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvItems0]
    envFrom?: [MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvFromItems0]
    image?: str
    imagePullPolicy?: str
    lifecycle?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0Lifecycle
    livenessProbe?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0LivenessProbe
    name: str

    ports?: [MonitoringCoreosComV1PrometheusSpecInitContainersItems0PortsItems0]
    readinessProbe?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0ReadinessProbe
    resizePolicy?: [MonitoringCoreosComV1PrometheusSpecInitContainersItems0ResizePolicyItems0]
    resources?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0Resources
    restartPolicy?: str
    restartPolicyRules?: [MonitoringCoreosComV1PrometheusSpecInitContainersItems0RestartPolicyRulesItems0]
    securityContext?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0SecurityContext
    startupProbe?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0StartupProbe
    stdin?: bool
    stdinOnce?: bool
    terminationMessagePath?: str
    terminationMessagePolicy?: str
    tty?: bool
    volumeDevices?: [MonitoringCoreosComV1PrometheusSpecInitContainersItems0VolumeDevicesItems0]
    volumeMounts?: [MonitoringCoreosComV1PrometheusSpecInitContainersItems0VolumeMountsItems0]
    workingDir?: str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvFromItems0:
    r"""
    EnvFromSource represents the source of a set of ConfigMaps or Secrets

    Attributes
    ----------
    configMapRef : MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvFromItems0ConfigMapRef, default is Undefined, optional
        config map ref
    prefix : str, default is Undefined, optional
        Optional text to prepend to the name of each environment variable.
        May consist of any printable ASCII characters except '='.
    secretRef : MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvFromItems0SecretRef, default is Undefined, optional
        secret ref
    """
    configMapRef?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvFromItems0ConfigMapRef
    prefix?: str
    secretRef?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvFromItems0SecretRef

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvFromItems0ConfigMapRef:
    r"""
    The ConfigMap to select from

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap must be defined
    """
    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvFromItems0SecretRef:
    r"""
    The Secret to select from

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret must be defined
    """
    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvItems0:
    r"""
    EnvVar represents an environment variable present in a Container.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the environment variable.
        May consist of any printable ASCII characters except '='.
    value : str, default is Undefined, optional
        Variable references $(VAR_NAME) are expanded
        using the previously defined environment variables in the container and
        any service environment variables. If a variable cannot be resolved,
        the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
        "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
        Escaped references will never be expanded, regardless of whether the variable
        exists or not.
        Defaults to "".
    valueFrom : MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvItems0ValueFrom, default is Undefined, optional
        value from
    """
    name: str

    value?: str
    valueFrom?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvItems0ValueFrom

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvItems0ValueFrom:
    r"""
    Source for the environment variable's value. Cannot be used if value is not empty.

    Attributes
    ----------
    configMapKeyRef : MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvItems0ValueFromConfigMapKeyRef, default is Undefined, optional
        config map key ref
    fieldRef : MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvItems0ValueFromFieldRef, default is Undefined, optional
        field ref
    fileKeyRef : MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvItems0ValueFromFileKeyRef, default is Undefined, optional
        file key ref
    resourceFieldRef : MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvItems0ValueFromResourceFieldRef, default is Undefined, optional
        resource field ref
    secretKeyRef : MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvItems0ValueFromSecretKeyRef, default is Undefined, optional
        secret key ref
    """
    configMapKeyRef?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvItems0ValueFromConfigMapKeyRef
    fieldRef?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvItems0ValueFromFieldRef
    fileKeyRef?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvItems0ValueFromFileKeyRef
    resourceFieldRef?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvItems0ValueFromResourceFieldRef
    secretKeyRef?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvItems0ValueFromSecretKeyRef

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvItems0ValueFromConfigMapKeyRef:
    r"""
    Selects a key of a ConfigMap.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvItems0ValueFromFieldRef:
    r"""
    Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
    spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, default is Undefined, required
        Path of the field to select in the specified API version.
    """
    apiVersion?: str
    fieldPath: str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvItems0ValueFromFileKeyRef:
    r"""
    FileKeyRef selects a key of the env file.
    Requires the EnvFiles feature gate to be enabled.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key within the env file. An invalid key will prevent the pod from starting.
        The keys defined within a source may consist of any printable ASCII characters except '='.
        During Alpha stage of the EnvFiles feature gate, the key size is limited to 128 characters.
    optional : bool, default is Undefined, optional
        Specify whether the file or its key must be defined. If the file or key
        does not exist, then the env var is not published.
        If optional is set to true and the specified key does not exist,
        the environment variable will not be set in the Pod's containers.

        If optional is set to false and the specified key does not exist,
        an error will be returned during Pod creation.
    path : str, default is Undefined, required
        The path within the volume from which to select the file.
        Must be relative and may not contain the '..' path or start with '..'.
    volumeName : str, default is Undefined, required
        The name of the volume mount containing the env file.
    """
    key: str

    optional?: bool = False
    path: str

    volumeName: str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvItems0ValueFromResourceFieldRef:
    r"""
    Selects a resource of the container: only resources limits and requests
    (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Container name: required for volumes, optional for env vars
    divisor : int | str, default is Undefined, optional
        Specifies the output format of the exposed resources, defaults to "1"
    resource : str, default is Undefined, required
        Required: resource to select
    """
    containerName?: str
    divisor?: int | str
    resource: str

    check:
        _regex_match(str(divisor), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if divisor

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0EnvItems0ValueFromSecretKeyRef:
    r"""
    Selects a key of a secret in the pod's namespace

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0Lifecycle:
    r"""
    Actions that the management system should take in response to container lifecycle events.
    Cannot be updated.

    Attributes
    ----------
    postStart : MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePostStart, default is Undefined, optional
        post start
    preStop : MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePreStop, default is Undefined, optional
        pre stop
    stopSignal : str, default is Undefined, optional
        StopSignal defines which signal will be sent to a container when it is being stopped.
        If not specified, the default is defined by the container runtime in use.
        StopSignal can only be set for Pods with a non-empty .spec.os.name
    """
    postStart?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePostStart
    preStop?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePreStop
    stopSignal?: str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePostStart:
    r"""
    PostStart is called immediately after a container is created. If the handler fails,
    the container is terminated and restarted according to its restart policy.
    Other management of the container blocks until the hook completes.
    More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks

    Attributes
    ----------
    exec : MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePostStartExec, default is Undefined, optional
        exec
    httpGet : MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePostStartHTTPGet, default is Undefined, optional
        http get
    sleep : MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePostStartSleep, default is Undefined, optional
        sleep
    tcpSocket : MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePostStartTCPSocket, default is Undefined, optional
        tcp socket
    """
    exec?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePostStartExec
    httpGet?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePostStartHTTPGet
    sleep?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePostStartSleep
    tcpSocket?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePostStartTCPSocket

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePostStartExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """
    command?: [str]

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePostStartHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePostStartHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """
    host?: str
    httpHeaders?: [MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePostStartHTTPGetHTTPHeadersItems0]
    path?: str
    port: int | str

    scheme?: str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePostStartHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """
    name: str

    value: str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePostStartSleep:
    r"""
    Sleep represents a duration that the container should sleep.

    Attributes
    ----------
    seconds : int, default is Undefined, required
        Seconds is the number of seconds to sleep.
    """
    seconds: int

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePostStartTCPSocket:
    r"""
    Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
    for backward compatibility. There is no validation of this field and
    lifecycle hooks will fail at runtime when it is specified.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """
    host?: str
    port: int | str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePreStop:
    r"""
    PreStop is called immediately before a container is terminated due to an
    API request or management event such as liveness/startup probe failure,
    preemption, resource contention, etc. The handler is not called if the
    container crashes or exits. The Pod's termination grace period countdown begins before the
    PreStop hook is executed. Regardless of the outcome of the handler, the
    container will eventually terminate within the Pod's termination grace
    period (unless delayed by finalizers). Other management of the container blocks until the hook completes
    or until the termination grace period is reached.
    More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks

    Attributes
    ----------
    exec : MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePreStopExec, default is Undefined, optional
        exec
    httpGet : MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePreStopHTTPGet, default is Undefined, optional
        http get
    sleep : MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePreStopSleep, default is Undefined, optional
        sleep
    tcpSocket : MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePreStopTCPSocket, default is Undefined, optional
        tcp socket
    """
    exec?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePreStopExec
    httpGet?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePreStopHTTPGet
    sleep?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePreStopSleep
    tcpSocket?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePreStopTCPSocket

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePreStopExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """
    command?: [str]

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePreStopHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePreStopHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """
    host?: str
    httpHeaders?: [MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePreStopHTTPGetHTTPHeadersItems0]
    path?: str
    port: int | str

    scheme?: str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePreStopHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """
    name: str

    value: str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePreStopSleep:
    r"""
    Sleep represents a duration that the container should sleep.

    Attributes
    ----------
    seconds : int, default is Undefined, required
        Seconds is the number of seconds to sleep.
    """
    seconds: int

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0LifecyclePreStopTCPSocket:
    r"""
    Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
    for backward compatibility. There is no validation of this field and
    lifecycle hooks will fail at runtime when it is specified.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """
    host?: str
    port: int | str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0LivenessProbe:
    r"""
    Periodic probe of container liveness.
    Container will be restarted if the probe fails.
    Cannot be updated.
    More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

    Attributes
    ----------
    exec : MonitoringCoreosComV1PrometheusSpecInitContainersItems0LivenessProbeExec, default is Undefined, optional
        exec
    failureThreshold : int, default is Undefined, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded.
        Defaults to 3. Minimum value is 1.
    grpc : MonitoringCoreosComV1PrometheusSpecInitContainersItems0LivenessProbeGrpc, default is Undefined, optional
        grpc
    httpGet : MonitoringCoreosComV1PrometheusSpecInitContainersItems0LivenessProbeHTTPGet, default is Undefined, optional
        http get
    initialDelaySeconds : int, default is Undefined, optional
        Number of seconds after the container has started before liveness probes are initiated.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, default is Undefined, optional
        How often (in seconds) to perform the probe.
        Default to 10 seconds. Minimum value is 1.
    successThreshold : int, default is Undefined, optional
        Minimum consecutive successes for the probe to be considered successful after having failed.
        Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : MonitoringCoreosComV1PrometheusSpecInitContainersItems0LivenessProbeTCPSocket, default is Undefined, optional
        tcp socket
    terminationGracePeriodSeconds : int, default is Undefined, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
        The grace period is the duration in seconds after the processes running in the pod are sent
        a termination signal and the time when the processes are forcibly halted with a kill signal.
        Set this value longer than the expected cleanup time for your process.
        If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
        value overrides the value provided by the pod spec.
        Value must be non-negative integer. The value zero indicates stop immediately via
        the kill signal (no opportunity to shut down).
        This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
        Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, default is Undefined, optional
        Number of seconds after which the probe times out.
        Defaults to 1 second. Minimum value is 1.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """
    exec?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0LivenessProbeExec
    failureThreshold?: int
    grpc?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0LivenessProbeGrpc
    httpGet?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0LivenessProbeHTTPGet
    initialDelaySeconds?: int
    periodSeconds?: int
    successThreshold?: int
    tcpSocket?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0LivenessProbeTCPSocket
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0LivenessProbeExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """
    command?: [str]

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0LivenessProbeGrpc:
    r"""
    GRPC specifies a GRPC HealthCheckRequest.

    Attributes
    ----------
    port : int, default is Undefined, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, default is Undefined, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest
        (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """
    port: int

    service?: str = ""

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0LivenessProbeHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [MonitoringCoreosComV1PrometheusSpecInitContainersItems0LivenessProbeHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """
    host?: str
    httpHeaders?: [MonitoringCoreosComV1PrometheusSpecInitContainersItems0LivenessProbeHTTPGetHTTPHeadersItems0]
    path?: str
    port: int | str

    scheme?: str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0LivenessProbeHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """
    name: str

    value: str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0LivenessProbeTCPSocket:
    r"""
    TCPSocket specifies a connection to a TCP port.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """
    host?: str
    port: int | str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0PortsItems0:
    r"""
    ContainerPort represents a network port in a single container.

    Attributes
    ----------
    containerPort : int, default is Undefined, required
        Number of port to expose on the pod's IP address.
        This must be a valid port number, 0 < x < 65536.
    hostIP : str, default is Undefined, optional
        What host IP to bind the external port to.
    hostPort : int, default is Undefined, optional
        Number of port to expose on the host.
        If specified, this must be a valid port number, 0 < x < 65536.
        If HostNetwork is specified, this must match ContainerPort.
        Most containers do not need this.
    name : str, default is Undefined, optional
        If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
        named port in a pod must have a unique name. Name for the port that can be
        referred to by services.
    $protocol : str, default is "TCP", optional
        Protocol for port. Must be UDP, TCP, or SCTP.
        Defaults to "TCP".
    """
    containerPort: int

    hostIP?: str
    hostPort?: int
    name?: str
    $protocol?: str = "TCP"

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0ReadinessProbe:
    r"""
    Periodic probe of container service readiness.
    Container will be removed from service endpoints if the probe fails.
    Cannot be updated.
    More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

    Attributes
    ----------
    exec : MonitoringCoreosComV1PrometheusSpecInitContainersItems0ReadinessProbeExec, default is Undefined, optional
        exec
    failureThreshold : int, default is Undefined, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded.
        Defaults to 3. Minimum value is 1.
    grpc : MonitoringCoreosComV1PrometheusSpecInitContainersItems0ReadinessProbeGrpc, default is Undefined, optional
        grpc
    httpGet : MonitoringCoreosComV1PrometheusSpecInitContainersItems0ReadinessProbeHTTPGet, default is Undefined, optional
        http get
    initialDelaySeconds : int, default is Undefined, optional
        Number of seconds after the container has started before liveness probes are initiated.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, default is Undefined, optional
        How often (in seconds) to perform the probe.
        Default to 10 seconds. Minimum value is 1.
    successThreshold : int, default is Undefined, optional
        Minimum consecutive successes for the probe to be considered successful after having failed.
        Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : MonitoringCoreosComV1PrometheusSpecInitContainersItems0ReadinessProbeTCPSocket, default is Undefined, optional
        tcp socket
    terminationGracePeriodSeconds : int, default is Undefined, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
        The grace period is the duration in seconds after the processes running in the pod are sent
        a termination signal and the time when the processes are forcibly halted with a kill signal.
        Set this value longer than the expected cleanup time for your process.
        If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
        value overrides the value provided by the pod spec.
        Value must be non-negative integer. The value zero indicates stop immediately via
        the kill signal (no opportunity to shut down).
        This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
        Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, default is Undefined, optional
        Number of seconds after which the probe times out.
        Defaults to 1 second. Minimum value is 1.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """
    exec?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0ReadinessProbeExec
    failureThreshold?: int
    grpc?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0ReadinessProbeGrpc
    httpGet?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0ReadinessProbeHTTPGet
    initialDelaySeconds?: int
    periodSeconds?: int
    successThreshold?: int
    tcpSocket?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0ReadinessProbeTCPSocket
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0ReadinessProbeExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """
    command?: [str]

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0ReadinessProbeGrpc:
    r"""
    GRPC specifies a GRPC HealthCheckRequest.

    Attributes
    ----------
    port : int, default is Undefined, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, default is Undefined, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest
        (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """
    port: int

    service?: str = ""

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0ReadinessProbeHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [MonitoringCoreosComV1PrometheusSpecInitContainersItems0ReadinessProbeHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """
    host?: str
    httpHeaders?: [MonitoringCoreosComV1PrometheusSpecInitContainersItems0ReadinessProbeHTTPGetHTTPHeadersItems0]
    path?: str
    port: int | str

    scheme?: str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0ReadinessProbeHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """
    name: str

    value: str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0ReadinessProbeTCPSocket:
    r"""
    TCPSocket specifies a connection to a TCP port.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """
    host?: str
    port: int | str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0ResizePolicyItems0:
    r"""
    ContainerResizePolicy represents resource resize policy for the container.

    Attributes
    ----------
    resourceName : str, default is Undefined, required
        Name of the resource to which this resource resize policy applies.
        Supported values: cpu, memory.
    restartPolicy : str, default is Undefined, required
        Restart policy to apply when specified resource is resized.
        If not specified, it defaults to NotRequired.
    """
    resourceName: str

    restartPolicy: str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0Resources:
    r"""
    Compute Resources required by this container.
    Cannot be updated.
    More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/

    Attributes
    ----------
    claims : [MonitoringCoreosComV1PrometheusSpecInitContainersItems0ResourcesClaimsItems0], default is Undefined, optional
        Claims lists the names of resources, defined in spec.resourceClaims,
        that are used by this container.

        This field depends on the
        DynamicResourceAllocation feature gate.

        This field is immutable. It can only be set for containers.
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """
    claims?: [MonitoringCoreosComV1PrometheusSpecInitContainersItems0ResourcesClaimsItems0]
    limits?: {str:int | str}
    requests?: {str:int | str}

    check:
        all _, limits in limits {_regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits} if limits
        all _, requests in requests {_regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests} if requests

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0ResourcesClaimsItems0:
    r"""
    ResourceClaim references one entry in PodSpec.ResourceClaims.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name must match the name of one entry in pod.spec.resourceClaims of
        the Pod where this field is used. It makes that resource available
        inside a container.
    request : str, default is Undefined, optional
        Request is the name chosen for a request in the referenced claim.
        If empty, everything from the claim is made available, otherwise
        only the result of this request.
    """
    name: str

    request?: str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0RestartPolicyRulesItems0:
    r"""
    ContainerRestartRule describes how a container exit is handled.

    Attributes
    ----------
    action : str, default is Undefined, required
        Specifies the action taken on a container exit if the requirements
        are satisfied. The only possible value is "Restart" to restart the
        container.
    exitCodes : MonitoringCoreosComV1PrometheusSpecInitContainersItems0RestartPolicyRulesItems0ExitCodes, default is Undefined, optional
        exit codes
    """
    action: str

    exitCodes?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0RestartPolicyRulesItems0ExitCodes

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0RestartPolicyRulesItems0ExitCodes:
    r"""
    Represents the exit codes to check on container exits.

    Attributes
    ----------
    operator : str, default is Undefined, required
        Represents the relationship between the container exit code(s) and the
        specified values. Possible values are:
        - In: the requirement is satisfied if the container exit code is in the
          set of specified values.
        - NotIn: the requirement is satisfied if the container exit code is
          not in the set of specified values.
    values : [int], default is Undefined, optional
        Specifies the set of values to check for container exit codes.
        At most 255 elements are allowed.
    """
    operator: str

    values?: [int]

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0SecurityContext:
    r"""
    SecurityContext defines the security options the container should be run with.
    If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
    More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/

    Attributes
    ----------
    allowPrivilegeEscalation : bool, default is Undefined, optional
        AllowPrivilegeEscalation controls whether a process can gain more
        privileges than its parent process. This bool directly controls if
        the no_new_privs flag will be set on the container process.
        AllowPrivilegeEscalation is true always when the container is:
        1) run as Privileged
        2) has CAP_SYS_ADMIN
        Note that this field cannot be set when spec.os.name is windows.
    appArmorProfile : MonitoringCoreosComV1PrometheusSpecInitContainersItems0SecurityContextAppArmorProfile, default is Undefined, optional
        app armor profile
    capabilities : MonitoringCoreosComV1PrometheusSpecInitContainersItems0SecurityContextCapabilities, default is Undefined, optional
        capabilities
    privileged : bool, default is Undefined, optional
        Run container in privileged mode.
        Processes in privileged containers are essentially equivalent to root on the host.
        Defaults to false.
        Note that this field cannot be set when spec.os.name is windows.
    procMount : str, default is Undefined, optional
        procMount denotes the type of proc mount to use for the containers.
        The default value is Default which uses the container runtime defaults for
        readonly paths and masked paths.
        This requires the ProcMountType feature flag to be enabled.
        Note that this field cannot be set when spec.os.name is windows.
    readOnlyRootFilesystem : bool, default is Undefined, optional
        Whether this container has a read-only root filesystem.
        Default is false.
        Note that this field cannot be set when spec.os.name is windows.
    runAsGroup : int, default is Undefined, optional
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        Note that this field cannot be set when spec.os.name is windows.
    runAsNonRoot : bool, default is Undefined, optional
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
    runAsUser : int, default is Undefined, optional
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        Note that this field cannot be set when spec.os.name is windows.
    seLinuxOptions : MonitoringCoreosComV1PrometheusSpecInitContainersItems0SecurityContextSeLinuxOptions, default is Undefined, optional
        se linux options
    seccompProfile : MonitoringCoreosComV1PrometheusSpecInitContainersItems0SecurityContextSeccompProfile, default is Undefined, optional
        seccomp profile
    windowsOptions : MonitoringCoreosComV1PrometheusSpecInitContainersItems0SecurityContextWindowsOptions, default is Undefined, optional
        windows options
    """
    allowPrivilegeEscalation?: bool
    appArmorProfile?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0SecurityContextAppArmorProfile
    capabilities?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0SecurityContextCapabilities
    privileged?: bool
    procMount?: str
    readOnlyRootFilesystem?: bool
    runAsGroup?: int
    runAsNonRoot?: bool
    runAsUser?: int
    seLinuxOptions?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0SecurityContextSeLinuxOptions
    seccompProfile?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0SecurityContextSeccompProfile
    windowsOptions?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0SecurityContextWindowsOptions

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0SecurityContextAppArmorProfile:
    r"""
    appArmorProfile is the AppArmor options to use by this container. If set, this profile
    overrides the pod's appArmorProfile.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    localhostProfile : str, default is Undefined, optional
        localhostProfile indicates a profile loaded on the node that should be used.
        The profile must be preconfigured on the node to work.
        Must match the loaded name of the profile.
        Must be set if and only if type is "Localhost".
    $type : str, default is Undefined, required
        type indicates which kind of AppArmor profile will be applied.
        Valid options are:
          Localhost - a profile pre-loaded on the node.
          RuntimeDefault - the container runtime's default profile.
          Unconfined - no AppArmor enforcement.
    """
    localhostProfile?: str
    $type: str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0SecurityContextCapabilities:
    r"""
    The capabilities to add/drop when running containers.
    Defaults to the default set of capabilities granted by the container runtime.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    add : [str], default is Undefined, optional
        Added capabilities
    drop : [str], default is Undefined, optional
        Removed capabilities
    """
    add?: [str]
    drop?: [str]

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0SecurityContextSeLinuxOptions:
    r"""
    The SELinux context to be applied to the container.
    If unspecified, the container runtime will allocate a random SELinux context for each
    container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
    PodSecurityContext, the value specified in SecurityContext takes precedence.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    level : str, default is Undefined, optional
        Level is SELinux level label that applies to the container.
    role : str, default is Undefined, optional
        Role is a SELinux role label that applies to the container.
    $type : str, default is Undefined, optional
        Type is a SELinux type label that applies to the container.
    user : str, default is Undefined, optional
        User is a SELinux user label that applies to the container.
    """
    level?: str
    role?: str
    $type?: str
    user?: str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0SecurityContextSeccompProfile:
    r"""
    The seccomp options to use by this container. If seccomp options are
    provided at both the pod & container level, the container options
    override the pod options.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    localhostProfile : str, default is Undefined, optional
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
    $type : str, default is Undefined, required
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
    """
    localhostProfile?: str
    $type: str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0SecurityContextWindowsOptions:
    r"""
    The Windows specific settings applied to all containers.
    If unspecified, the options from the PodSecurityContext will be used.
    If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    Note that this field cannot be set when spec.os.name is linux.

    Attributes
    ----------
    gmsaCredentialSpec : str, default is Undefined, optional
        GMSACredentialSpec is where the GMSA admission webhook
        (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
        GMSA credential spec named by the GMSACredentialSpecName field.
    gmsaCredentialSpecName : str, default is Undefined, optional
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
    hostProcess : bool, default is Undefined, optional
        HostProcess determines if a container should be run as a 'Host Process' container.
        All of a Pod's containers must have the same effective HostProcess value
        (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
        In addition, if HostProcess is true then HostNetwork must also be set to true.
    runAsUserName : str, default is Undefined, optional
        The UserName in Windows to run the entrypoint of the container process.
        Defaults to the user specified in image metadata if unspecified.
        May also be set in PodSecurityContext. If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
    """
    gmsaCredentialSpec?: str
    gmsaCredentialSpecName?: str
    hostProcess?: bool
    runAsUserName?: str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0StartupProbe:
    r"""
    StartupProbe indicates that the Pod has successfully initialized.
    If specified, no other probes are executed until this completes successfully.
    If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
    This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
    when it might take a long time to load data or warm a cache, than during steady-state operation.
    This cannot be updated.
    More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

    Attributes
    ----------
    exec : MonitoringCoreosComV1PrometheusSpecInitContainersItems0StartupProbeExec, default is Undefined, optional
        exec
    failureThreshold : int, default is Undefined, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded.
        Defaults to 3. Minimum value is 1.
    grpc : MonitoringCoreosComV1PrometheusSpecInitContainersItems0StartupProbeGrpc, default is Undefined, optional
        grpc
    httpGet : MonitoringCoreosComV1PrometheusSpecInitContainersItems0StartupProbeHTTPGet, default is Undefined, optional
        http get
    initialDelaySeconds : int, default is Undefined, optional
        Number of seconds after the container has started before liveness probes are initiated.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, default is Undefined, optional
        How often (in seconds) to perform the probe.
        Default to 10 seconds. Minimum value is 1.
    successThreshold : int, default is Undefined, optional
        Minimum consecutive successes for the probe to be considered successful after having failed.
        Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : MonitoringCoreosComV1PrometheusSpecInitContainersItems0StartupProbeTCPSocket, default is Undefined, optional
        tcp socket
    terminationGracePeriodSeconds : int, default is Undefined, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
        The grace period is the duration in seconds after the processes running in the pod are sent
        a termination signal and the time when the processes are forcibly halted with a kill signal.
        Set this value longer than the expected cleanup time for your process.
        If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
        value overrides the value provided by the pod spec.
        Value must be non-negative integer. The value zero indicates stop immediately via
        the kill signal (no opportunity to shut down).
        This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
        Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, default is Undefined, optional
        Number of seconds after which the probe times out.
        Defaults to 1 second. Minimum value is 1.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """
    exec?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0StartupProbeExec
    failureThreshold?: int
    grpc?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0StartupProbeGrpc
    httpGet?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0StartupProbeHTTPGet
    initialDelaySeconds?: int
    periodSeconds?: int
    successThreshold?: int
    tcpSocket?: MonitoringCoreosComV1PrometheusSpecInitContainersItems0StartupProbeTCPSocket
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0StartupProbeExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """
    command?: [str]

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0StartupProbeGrpc:
    r"""
    GRPC specifies a GRPC HealthCheckRequest.

    Attributes
    ----------
    port : int, default is Undefined, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, default is Undefined, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest
        (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """
    port: int

    service?: str = ""

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0StartupProbeHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [MonitoringCoreosComV1PrometheusSpecInitContainersItems0StartupProbeHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """
    host?: str
    httpHeaders?: [MonitoringCoreosComV1PrometheusSpecInitContainersItems0StartupProbeHTTPGetHTTPHeadersItems0]
    path?: str
    port: int | str

    scheme?: str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0StartupProbeHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """
    name: str

    value: str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0StartupProbeTCPSocket:
    r"""
    TCPSocket specifies a connection to a TCP port.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """
    host?: str
    port: int | str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0VolumeDevicesItems0:
    r"""
    volumeDevice describes a mapping of a raw block device within a container.

    Attributes
    ----------
    devicePath : str, default is Undefined, required
        devicePath is the path inside of the container that the device will be mapped to.
    name : str, default is Undefined, required
        name must match the name of a persistentVolumeClaim in the pod
    """
    devicePath: str

    name: str

schema MonitoringCoreosComV1PrometheusSpecInitContainersItems0VolumeMountsItems0:
    r"""
    VolumeMount describes a mounting of a Volume within a container.

    Attributes
    ----------
    mountPath : str, default is Undefined, required
        Path within the container at which the volume should be mounted.  Must
        not contain ':'.
    mountPropagation : str, default is Undefined, optional
        mountPropagation determines how mounts are propagated from the host
        to container and the other way around.
        When not set, MountPropagationNone is used.
        This field is beta in 1.10.
        When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
        (which defaults to None).
    name : str, default is Undefined, required
        This must match the Name of a Volume.
    readOnly : bool, default is Undefined, optional
        Mounted read-only if true, read-write otherwise (false or unspecified).
        Defaults to false.
    recursiveReadOnly : str, default is Undefined, optional
        RecursiveReadOnly specifies whether read-only mounts should be handled
        recursively.

        If ReadOnly is false, this field has no meaning and must be unspecified.

        If ReadOnly is true, and this field is set to Disabled, the mount is not made
        recursively read-only.  If this field is set to IfPossible, the mount is made
        recursively read-only, if it is supported by the container runtime.  If this
        field is set to Enabled, the mount is made recursively read-only if it is
        supported by the container runtime, otherwise the pod will not be started and
        an error will be generated to indicate the reason.

        If this field is set to IfPossible or Enabled, MountPropagation must be set to
        None (or be unspecified, which defaults to None).

        If this field is not specified, it is treated as an equivalent of Disabled.
    subPath : str, default is Undefined, optional
        Path within the volume from which the container's volume should be mounted.
        Defaults to "" (volume's root).
    subPathExpr : str, default is Undefined, optional
        Expanded path within the volume from which the container's volume should be mounted.
        Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
        Defaults to "" (volume's root).
        SubPathExpr and SubPath are mutually exclusive.
    """
    mountPath: str

    mountPropagation?: str
    name: str

    readOnly?: bool
    recursiveReadOnly?: str
    subPath?: str
    subPathExpr?: str

schema MonitoringCoreosComV1PrometheusSpecOtlp:
    r"""
    otlp defines the settings related to the OTLP receiver feature.
    It requires Prometheus >= v2.55.0.

    Attributes
    ----------
    convertHistogramsToNHCB : bool, default is Undefined, optional
        convertHistogramsToNHCB defines optional translation of OTLP explicit bucket histograms into native histograms with custom buckets.
        It requires Prometheus >= v3.4.0.
    ignoreResourceAttributes : [str], default is Undefined, optional
        ignoreResourceAttributes defines the list of OpenTelemetry resource attributes to ignore when `promoteAllResourceAttributes` is true.

        It requires `promoteAllResourceAttributes` to be true.
        It requires Prometheus >= v3.5.0.
    keepIdentifyingResourceAttributes : bool, default is Undefined, optional
        keepIdentifyingResourceAttributes enables adding `service.name`, `service.namespace` and `service.instance.id`
        resource attributes to the `target_info` metric, on top of converting them into the `instance` and `job` labels.

        It requires Prometheus >= v3.1.0.
    promoteAllResourceAttributes : bool, default is Undefined, optional
        promoteAllResourceAttributes promotes all resource attributes to metric labels except the ones defined in `ignoreResourceAttributes`.

        Cannot be true when `promoteResourceAttributes` is defined.
        It requires Prometheus >= v3.5.0.
    promoteResourceAttributes : [str], default is Undefined, optional
        promoteResourceAttributes defines the list of OpenTelemetry Attributes that should be promoted to metric labels, defaults to none.
        Cannot be defined when `promoteAllResourceAttributes` is true.
    promoteScopeMetadata : bool, default is Undefined, optional
        promoteScopeMetadata controls whether to promote OpenTelemetry scope metadata (i.e. name, version, schema URL, and attributes) to metric labels.
        As per the OpenTelemetry specification, the aforementioned scope metadata should be identifying, i.e. made into metric labels.
        It requires Prometheus >= v3.6.0.
    translationStrategy : str, default is Undefined, optional
        translationStrategy defines how the OTLP receiver endpoint translates the incoming metrics.

        It requires Prometheus >= v3.0.0.
    """
    convertHistogramsToNHCB?: bool
    ignoreResourceAttributes?: [str]
    keepIdentifyingResourceAttributes?: bool
    promoteAllResourceAttributes?: bool
    promoteResourceAttributes?: [str]
    promoteScopeMetadata?: bool
    translationStrategy?: "NoUTF8EscapingWithSuffixes" | "UnderscoreEscapingWithSuffixes" | "NoTranslation" | "UnderscoreEscapingWithoutSuffixes"

    check:
        len(ignoreResourceAttributes) >= 1 if ignoreResourceAttributes
        all ignoreResourceAttributes in ignoreResourceAttributes {len(ignoreResourceAttributes) >= 1 if ignoreResourceAttributes not in [None, Undefined]} if ignoreResourceAttributes
        len(promoteResourceAttributes) >= 1 if promoteResourceAttributes
        all promoteResourceAttributes in promoteResourceAttributes {len(promoteResourceAttributes) >= 1 if promoteResourceAttributes not in [None, Undefined]} if promoteResourceAttributes

schema MonitoringCoreosComV1PrometheusSpecPersistentVolumeClaimRetentionPolicy:
    r"""
    persistentVolumeClaimRetentionPolicy defines the field controls if and how PVCs are deleted during the lifecycle of a StatefulSet.
    The default behavior is all PVCs are retained.
    This is an alpha field from kubernetes 1.23 until 1.26 and a beta field from 1.26.
    It requires enabling the StatefulSetAutoDeletePVC feature gate.

    Attributes
    ----------
    whenDeleted : str, default is Undefined, optional
        WhenDeleted specifies what happens to PVCs created from StatefulSet
        VolumeClaimTemplates when the StatefulSet is deleted. The default policy
        of `Retain` causes PVCs to not be affected by StatefulSet deletion. The
        `Delete` policy causes those PVCs to be deleted.
    whenScaled : str, default is Undefined, optional
        WhenScaled specifies what happens to PVCs created from StatefulSet
        VolumeClaimTemplates when the StatefulSet is scaled down. The default
        policy of `Retain` causes PVCs to not be affected by a scaledown. The
        `Delete` policy causes the associated PVCs for any excess pods above
        the replica count to be deleted.
    """
    whenDeleted?: str
    whenScaled?: str

schema MonitoringCoreosComV1PrometheusSpecPodMetadata:
    r"""
    podMetadata defines labels and annotations which are propagated to the Prometheus pods.

    The following items are reserved and cannot be overridden:
    * "prometheus" label, set to the name of the Prometheus object.
    * "app.kubernetes.io/instance" label, set to the name of the Prometheus object.
    * "app.kubernetes.io/managed-by" label, set to "prometheus-operator".
    * "app.kubernetes.io/name" label, set to "prometheus".
    * "app.kubernetes.io/version" label, set to the Prometheus version.
    * "operator.prometheus.io/name" label, set to the name of the Prometheus object.
    * "operator.prometheus.io/shard" label, set to the shard number of the Prometheus object.
    * "kubectl.kubernetes.io/default-container" annotation, set to "prometheus".

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        annotations defines an unstructured key value map stored with a resource that may be
        set by external tools to store and retrieve arbitrary metadata. They are not
        queryable and should be preserved when modifying objects.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    labels : {str:str}, default is Undefined, optional
        labels define the map of string keys and values that can be used to organize and categorize
        (scope and select) objects. May match selectors of replication controllers
        and services.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    name : str, default is Undefined, optional
        name must be unique within a namespace. Is required when creating resources, although
        some resources may allow a client to request the generation of an appropriate name
        automatically. Name is primarily intended for creation idempotence and configuration
        definition.
        Cannot be updated.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/
    """
    annotations?: {str:str}
    labels?: {str:str}
    name?: str

schema MonitoringCoreosComV1PrometheusSpecPodMonitorNamespaceSelector:
    r"""
    podMonitorNamespaceSelector defines the namespaces to match for PodMonitors discovery. An empty label selector
    matches all namespaces. A null label selector (default value) matches the current
    namespace only.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecPodMonitorNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecPodMonitorNamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecPodMonitorNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecPodMonitorSelector:
    r"""
    podMonitorSelector defines the podMonitors to be selected for target discovery. An empty label selector
    matches all objects. A null label selector matches no objects.

    If `spec.serviceMonitorSelector`, `spec.podMonitorSelector`, `spec.probeSelector`
    and `spec.scrapeConfigSelector` are null, the Prometheus configuration is unmanaged.
    The Prometheus operator will ensure that the Prometheus configuration's
    Secret exists, but it is the responsibility of the user to provide the raw
    gzipped Prometheus configuration under the `prometheus.yaml.gz` key.
    This behavior is *deprecated* and will be removed in the next major version
    of the custom resource definition. It is recommended to use
    `spec.additionalScrapeConfigs` instead.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecPodMonitorSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecPodMonitorSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecPodMonitorSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecProbeNamespaceSelector:
    r"""
    probeNamespaceSelector defines the namespaces to match for Probe discovery. An empty label
    selector matches all namespaces. A null label selector matches the
    current namespace only.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecProbeNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecProbeNamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecProbeNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecProbeSelector:
    r"""
    probeSelector defines the probes to be selected for target discovery. An empty label selector
    matches all objects. A null label selector matches no objects.

    If `spec.serviceMonitorSelector`, `spec.podMonitorSelector`, `spec.probeSelector`
    and `spec.scrapeConfigSelector` are null, the Prometheus configuration is unmanaged.
    The Prometheus operator will ensure that the Prometheus configuration's
    Secret exists, but it is the responsibility of the user to provide the raw
    gzipped Prometheus configuration under the `prometheus.yaml.gz` key.
    This behavior is *deprecated* and will be removed in the next major version
    of the custom resource definition. It is recommended to use
    `spec.additionalScrapeConfigs` instead.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecProbeSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecProbeSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecProbeSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecPrometheusRulesExcludedFromEnforceItems0:
    r"""
    PrometheusRuleExcludeConfig enables users to configure excluded
    PrometheusRule names and their namespaces to be ignored while enforcing
    namespace label for alerts and metrics.

    Attributes
    ----------
    ruleName : str, default is Undefined, required
        ruleName defines the name of the excluded PrometheusRule object.
    ruleNamespace : str, default is Undefined, required
        ruleNamespace defines the namespace of the excluded PrometheusRule object.
    """
    ruleName: str

    ruleNamespace: str

schema MonitoringCoreosComV1PrometheusSpecQuery:
    r"""
    query defines the configuration of the Prometheus query service.

    Attributes
    ----------
    lookbackDelta : str, default is Undefined, optional
        lookbackDelta defines the delta difference allowed for retrieving metrics during expression evaluations.
    maxConcurrency : int, default is Undefined, optional
        maxConcurrency defines the number of concurrent queries that can be run at once.
    maxSamples : int, default is Undefined, optional
        maxSamples defines the maximum number of samples a single query can load into memory. Note that
        queries will fail if they would load more samples than this into memory,
        so this also limits the number of samples a query can return.
    timeout : str, default is Undefined, optional
        timeout defines the maximum time a query may take before being aborted.
    """
    lookbackDelta?: str
    maxConcurrency?: int
    maxSamples?: int
    timeout?: str

    check:
        maxConcurrency >= 1 if maxConcurrency not in [None, Undefined]
        _regex_match(str(timeout), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if timeout

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0:
    r"""
    RemoteReadSpec defines the configuration for Prometheus to read back samples
    from a remote endpoint.

    Attributes
    ----------
    authorization : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Authorization, default is Undefined, optional
        authorization
    basicAuth : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0BasicAuth, default is Undefined, optional
        basic auth
    bearerToken : str, default is Undefined, optional
        bearerToken is deprecated: this will be removed in a future release.
        *Warning: this field shouldn't be used because the token value appears
        in clear-text. Prefer using `authorization`.*
    bearerTokenFile : str, default is Undefined, optional
        bearerTokenFile defines the file from which to read the bearer token for the URL.

        Deprecated: this will be removed in a future release. Prefer using `authorization`.
    filterExternalLabels : bool, default is Undefined, optional
        filterExternalLabels defines whether to use the external labels as selectors for the remote read endpoint.

        It requires Prometheus >= v2.34.0.
    followRedirects : bool, default is Undefined, optional
        followRedirects defines whether HTTP requests follow HTTP 3xx redirects.

        It requires Prometheus >= v2.26.0.
    headers : {str:str}, default is Undefined, optional
        headers defines the custom HTTP headers to be sent along with each remote read request.
        Be aware that headers that are set by Prometheus itself can't be overwritten.
        Only valid in Prometheus versions 2.26.0 and newer.
    name : str, default is Undefined, optional
        name of the remote read queue, it must be unique if specified. The
        name is used in metrics and logging in order to differentiate read
        configurations.

        It requires Prometheus >= v2.15.0.
    noProxy : str, default is Undefined, optional
        noProxy defines a comma-separated string that can contain IPs, CIDR notation, domain names
        that should be excluded from proxying. IP and domain names can
        contain port numbers.

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    oauth2 : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2, default is Undefined, optional
        oauth2
    proxyConnectHeader : {str:[MonitoringCoreosComV1PrometheusSpecRemoteReadItems0ProxyConnectHeaderItems0]}, default is Undefined, optional
        proxyConnectHeader optionally specifies headers to send to
        proxies during CONNECT requests.

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyFromEnvironment : bool, default is Undefined, optional
        proxyFromEnvironment defines whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyUrl : str, default is Undefined, optional
        proxyUrl defines the HTTP proxy server to use.
    readRecent : bool, default is Undefined, optional
        readRecent defines whether reads should be made for queries for time ranges that
        the local storage should have complete data for.
    remoteTimeout : str, default is Undefined, optional
        remoteTimeout defines the timeout for requests to the remote read endpoint.
    requiredMatchers : {str:str}, default is Undefined, optional
        requiredMatchers defines an optional list of equality matchers which have to be present
        in a selector to query the remote read endpoint.
    tlsConfig : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfig, default is Undefined, optional
        tls config
    url : str, default is Undefined, required
        url defines the URL of the endpoint to query from.
    """
    authorization?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Authorization
    basicAuth?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0BasicAuth
    bearerToken?: str
    bearerTokenFile?: str
    filterExternalLabels?: bool
    followRedirects?: bool
    headers?: {str:str}
    name?: str
    noProxy?: str
    oauth2?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2
    proxyConnectHeader?: {str:[MonitoringCoreosComV1PrometheusSpecRemoteReadItems0ProxyConnectHeaderItems0]}
    proxyFromEnvironment?: bool
    proxyUrl?: str
    readRecent?: bool
    remoteTimeout?: str
    requiredMatchers?: {str:str}
    tlsConfig?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfig
    url: str

    check:
        _regex_match(str(proxyUrl), r"^(http|https|socks5)://.+$") if proxyUrl
        _regex_match(str(remoteTimeout), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if remoteTimeout

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Authorization:
    r"""
    authorization section for the URL.

    It requires Prometheus >= v2.26.0.

    Cannot be set at the same time as `basicAuth`, or `oauth2`.

    Attributes
    ----------
    credentials : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0AuthorizationCredentials, default is Undefined, optional
        credentials
    credentialsFile : str, default is Undefined, optional
        credentialsFile defines the file to read a secret from, mutually exclusive with `credentials`.
    $type : str, default is Undefined, optional
        type defines the authentication type. The value is case-insensitive.

        "Basic" is not a supported value.

        Default: "Bearer"
    """
    credentials?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0AuthorizationCredentials
    credentialsFile?: str
    $type?: str

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0AuthorizationCredentials:
    r"""
    credentials defines a key of a Secret in the namespace that contains the credentials for authentication.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0BasicAuth:
    r"""
    basicAuth configuration for the URL.

    Cannot be set at the same time as `authorization`, or `oauth2`.

    Attributes
    ----------
    password : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0BasicAuthPassword, default is Undefined, optional
        password
    username : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0BasicAuthUsername, default is Undefined, optional
        username
    """
    password?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0BasicAuthPassword
    username?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0BasicAuthUsername

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0BasicAuthPassword:
    r"""
    password defines a key of a Secret containing the password for
    authentication.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0BasicAuthUsername:
    r"""
    username defines a key of a Secret containing the username for
    authentication.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2:
    r"""
    oauth2 configuration for the URL.

    It requires Prometheus >= v2.27.0.

    Cannot be set at the same time as `authorization`, or `basicAuth`.

    Attributes
    ----------
    clientId : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2ClientID, default is Undefined, required
        client Id
    clientSecret : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2ClientSecret, default is Undefined, required
        client secret
    endpointParams : {str:str}, default is Undefined, optional
        endpointParams configures the HTTP parameters to append to the token
        URL.
    noProxy : str, default is Undefined, optional
        noProxy defines a comma-separated string that can contain IPs, CIDR notation, domain names
        that should be excluded from proxying. IP and domain names can
        contain port numbers.

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyConnectHeader : {str:[MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2ProxyConnectHeaderItems0]}, default is Undefined, optional
        proxyConnectHeader optionally specifies headers to send to
        proxies during CONNECT requests.

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyFromEnvironment : bool, default is Undefined, optional
        proxyFromEnvironment defines whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyUrl : str, default is Undefined, optional
        proxyUrl defines the HTTP proxy server to use.
    scopes : [str], default is Undefined, optional
        scopes defines the OAuth2 scopes used for the token request.
    tlsConfig : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfig, default is Undefined, optional
        tls config
    tokenUrl : str, default is Undefined, required
        tokenUrl defines the URL to fetch the token from.
    """
    clientId: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2ClientID

    clientSecret: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2ClientSecret

    endpointParams?: {str:str}
    noProxy?: str
    proxyConnectHeader?: {str:[MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2ProxyConnectHeaderItems0]}
    proxyFromEnvironment?: bool
    proxyUrl?: str
    scopes?: [str]
    tlsConfig?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfig
    tokenUrl: str

    check:
        _regex_match(str(proxyUrl), r"^(http|https|socks5)://.+$") if proxyUrl
        len(tokenUrl) >= 1

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2ClientID:
    r"""
    clientId defines a key of a Secret or ConfigMap containing the
    OAuth2 client's ID.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2ClientIDConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2ClientIDSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2ClientIDConfigMap
    secret?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2ClientIDSecret

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2ClientIDConfigMap:
    r"""
    configMap defines the ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2ClientIDSecret:
    r"""
    secret defines the Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2ClientSecret:
    r"""
    clientSecret defines a key of a Secret containing the OAuth2
    client's secret.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2ProxyConnectHeaderItems0:
    r"""
    SecretKeySelector selects a key of a Secret.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfig:
    r"""
    tlsConfig defines the TLS configuration to use when connecting to the OAuth2 server.
    It requires Prometheus >= v2.43.0.

    Attributes
    ----------
    ca : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfigCa, default is Undefined, optional
        ca
    cert : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfigCert, default is Undefined, optional
        cert
    insecureSkipVerify : bool, default is Undefined, optional
        insecureSkipVerify defines how to disable target certificate validation.
    keySecret : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfigKeySecret, default is Undefined, optional
        key secret
    maxVersion : str, default is Undefined, optional
        maxVersion defines the maximum acceptable TLS version.

        It requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.
    minVersion : str, default is Undefined, optional
        minVersion defines the minimum acceptable TLS version.

        It requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.
    serverName : str, default is Undefined, optional
        serverName is used to verify the hostname for the targets.
    """
    ca?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfigCa
    cert?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfigCert
    insecureSkipVerify?: bool
    keySecret?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfigKeySecret
    maxVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    minVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    serverName?: str

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfigCa:
    r"""
    ca defines the Certificate authority used when verifying server certificates.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfigCaConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfigCaSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfigCaConfigMap
    secret?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfigCaSecret

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfigCaConfigMap:
    r"""
    configMap defines the ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfigCaSecret:
    r"""
    secret defines the Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfigCert:
    r"""
    cert defines the Client certificate to present when doing client-authentication.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfigCertConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfigCertSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfigCertConfigMap
    secret?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfigCertSecret

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfigCertConfigMap:
    r"""
    configMap defines the ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfigCertSecret:
    r"""
    secret defines the Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0Oauth2TLSConfigKeySecret:
    r"""
    keySecret defines the Secret containing the client key file for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0ProxyConnectHeaderItems0:
    r"""
    SecretKeySelector selects a key of a Secret.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfig:
    r"""
    tlsConfig to use for the URL.

    Attributes
    ----------
    ca : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfigCa, default is Undefined, optional
        ca
    caFile : str, default is Undefined, optional
        caFile defines the path to the CA cert in the Prometheus container to use for the targets.
    cert : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfigCert, default is Undefined, optional
        cert
    certFile : str, default is Undefined, optional
        certFile defines the path to the client cert file in the Prometheus container for the targets.
    insecureSkipVerify : bool, default is Undefined, optional
        insecureSkipVerify defines how to disable target certificate validation.
    keyFile : str, default is Undefined, optional
        keyFile defines the path to the client key file in the Prometheus container for the targets.
    keySecret : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfigKeySecret, default is Undefined, optional
        key secret
    maxVersion : str, default is Undefined, optional
        maxVersion defines the maximum acceptable TLS version.

        It requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.
    minVersion : str, default is Undefined, optional
        minVersion defines the minimum acceptable TLS version.

        It requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.
    serverName : str, default is Undefined, optional
        serverName is used to verify the hostname for the targets.
    """
    ca?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfigCa
    caFile?: str
    cert?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfigCert
    certFile?: str
    insecureSkipVerify?: bool
    keyFile?: str
    keySecret?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfigKeySecret
    maxVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    minVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    serverName?: str

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfigCa:
    r"""
    ca defines the Certificate authority used when verifying server certificates.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfigCaConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfigCaSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfigCaConfigMap
    secret?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfigCaSecret

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfigCaConfigMap:
    r"""
    configMap defines the ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfigCaSecret:
    r"""
    secret defines the Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfigCert:
    r"""
    cert defines the Client certificate to present when doing client-authentication.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfigCertConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfigCertSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfigCertConfigMap
    secret?: MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfigCertSecret

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfigCertConfigMap:
    r"""
    configMap defines the ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfigCertSecret:
    r"""
    secret defines the Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteReadItems0TLSConfigKeySecret:
    r"""
    keySecret defines the Secret containing the client key file for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0:
    r"""
    RemoteWriteSpec defines the configuration to write samples from Prometheus
    to a remote endpoint.

    Attributes
    ----------
    authorization : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Authorization, default is Undefined, optional
        authorization
    azureAd : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0AzureAd, default is Undefined, optional
        azure ad
    basicAuth : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0BasicAuth, default is Undefined, optional
        basic auth
    bearerToken : str, default is Undefined, optional
        bearerToken is deprecated: this will be removed in a future release.
        *Warning: this field shouldn't be used because the token value appears
        in clear-text. Prefer using `authorization`.*
    bearerTokenFile : str, default is Undefined, optional
        bearerTokenFile defines the file from which to read bearer token for the URL.

        Deprecated: this will be removed in a future release. Prefer using `authorization`.
    enableHTTP2 : bool, default is Undefined, optional
        enableHTTP2 defines whether to enable HTTP2.
    followRedirects : bool, default is Undefined, optional
        followRedirects defines whether HTTP requests follow HTTP 3xx redirects.

        It requires Prometheus >= v2.26.0 or Thanos >= v0.24.0.
    headers : {str:str}, default is Undefined, optional
        headers defines the custom HTTP headers to be sent along with each remote write request.
        Be aware that headers that are set by Prometheus itself can't be overwritten.

        It requires Prometheus >= v2.25.0 or Thanos >= v0.24.0.
    messageVersion : str, default is Undefined, optional
        messageVersion defines the Remote Write message's version to use when writing to the endpoint.

        `Version1.0` corresponds to the `prometheus.WriteRequest` protobuf message introduced in Remote Write 1.0.
        `Version2.0` corresponds to the `io.prometheus.write.v2.Request` protobuf message introduced in Remote Write 2.0.

        When `Version2.0` is selected, Prometheus will automatically be
        configured to append the metadata of scraped metrics to the WAL.

        Before setting this field, consult with your remote storage provider
        what message version it supports.

        It requires Prometheus >= v2.54.0 or Thanos >= v0.37.0.
    metadataConfig : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0MetadataConfig, default is Undefined, optional
        metadata config
    name : str, default is Undefined, optional
        name of the remote write queue, it must be unique if specified. The
        name is used in metrics and logging in order to differentiate queues.

        It requires Prometheus >= v2.15.0 or Thanos >= 0.24.0.
    noProxy : str, default is Undefined, optional
        noProxy defines a comma-separated string that can contain IPs, CIDR notation, domain names
        that should be excluded from proxying. IP and domain names can
        contain port numbers.

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    oauth2 : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2, default is Undefined, optional
        oauth2
    proxyConnectHeader : {str:[MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0ProxyConnectHeaderItems0]}, default is Undefined, optional
        proxyConnectHeader optionally specifies headers to send to
        proxies during CONNECT requests.

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyFromEnvironment : bool, default is Undefined, optional
        proxyFromEnvironment defines whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyUrl : str, default is Undefined, optional
        proxyUrl defines the HTTP proxy server to use.
    queueConfig : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0QueueConfig, default is Undefined, optional
        queue config
    remoteTimeout : str, default is Undefined, optional
        remoteTimeout defines the timeout for requests to the remote write endpoint.
    roundRobinDNS : bool, default is Undefined, optional
        roundRobinDNS controls the DNS resolution behavior for remote-write connections.
        When enabled:
          - The remote-write mechanism will resolve the hostname via DNS.
          - It will randomly select one of the resolved IP addresses and connect to it.

        When disabled (default behavior):
          - The Go standard library will handle hostname resolution.
          - It will attempt connections to each resolved IP address sequentially.

        Note: The connection timeout applies to the entire resolution and connection process.

        	If disabled, the timeout is distributed across all connection attempts.

        It requires Prometheus >= v3.1.0 or Thanos >= v0.38.0.
    sendExemplars : bool, default is Undefined, optional
        sendExemplars enables sending of exemplars over remote write. Note that
        exemplar-storage itself must be enabled using the `spec.enableFeatures`
        option for exemplars to be scraped in the first place.

        It requires Prometheus >= v2.27.0 or Thanos >= v0.24.0.
    sendNativeHistograms : bool, default is Undefined, optional
        sendNativeHistograms enables sending of native histograms, also known as sparse histograms
        over remote write.

        It requires Prometheus >= v2.40.0 or Thanos >= v0.30.0.
    sigv4 : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Sigv4, default is Undefined, optional
        sigv4
    tlsConfig : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfig, default is Undefined, optional
        tls config
    url : str, default is Undefined, required
        url defines the URL of the endpoint to send samples to.
    writeRelabelConfigs : [MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0WriteRelabelConfigsItems0], default is Undefined, optional
        writeRelabelConfigs defines the list of remote write relabel configurations.
    """
    authorization?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Authorization
    azureAd?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0AzureAd
    basicAuth?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0BasicAuth
    bearerToken?: str
    bearerTokenFile?: str
    enableHTTP2?: bool
    followRedirects?: bool
    headers?: {str:str}
    messageVersion?: "V1.0" | "V2.0"
    metadataConfig?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0MetadataConfig
    name?: str
    noProxy?: str
    oauth2?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2
    proxyConnectHeader?: {str:[MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0ProxyConnectHeaderItems0]}
    proxyFromEnvironment?: bool
    proxyUrl?: str
    queueConfig?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0QueueConfig
    remoteTimeout?: str
    roundRobinDNS?: bool
    sendExemplars?: bool
    sendNativeHistograms?: bool
    sigv4?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Sigv4
    tlsConfig?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfig
    url: str

    writeRelabelConfigs?: [MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0WriteRelabelConfigsItems0]

    check:
        _regex_match(str(proxyUrl), r"^(http|https|socks5)://.+$") if proxyUrl
        _regex_match(str(remoteTimeout), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if remoteTimeout
        len(url) >= 1

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Authorization:
    r"""
    authorization section for the URL.

    It requires Prometheus >= v2.26.0 or Thanos >= v0.24.0.

    Cannot be set at the same time as `sigv4`, `basicAuth`, `oauth2`, or `azureAd`.

    Attributes
    ----------
    credentials : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0AuthorizationCredentials, default is Undefined, optional
        credentials
    credentialsFile : str, default is Undefined, optional
        credentialsFile defines the file to read a secret from, mutually exclusive with `credentials`.
    $type : str, default is Undefined, optional
        type defines the authentication type. The value is case-insensitive.

        "Basic" is not a supported value.

        Default: "Bearer"
    """
    credentials?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0AuthorizationCredentials
    credentialsFile?: str
    $type?: str

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0AuthorizationCredentials:
    r"""
    credentials defines a key of a Secret in the namespace that contains the credentials for authentication.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0AzureAd:
    r"""
    azureAd for the URL.

    It requires Prometheus >= v2.45.0 or Thanos >= v0.31.0.

    Cannot be set at the same time as `authorization`, `basicAuth`, `oauth2`, or `sigv4`.

    Attributes
    ----------
    cloud : str, default is Undefined, optional
        cloud defines the Azure Cloud. Options are 'AzurePublic', 'AzureChina', or 'AzureGovernment'.
    managedIdentity : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0AzureAdManagedIdentity, default is Undefined, optional
        managed identity
    oauth : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0AzureAdOauth, default is Undefined, optional
        oauth
    sdk : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0AzureAdSdk, default is Undefined, optional
        sdk
    """
    cloud?: "AzureChina" | "AzureGovernment" | "AzurePublic"
    managedIdentity?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0AzureAdManagedIdentity
    oauth?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0AzureAdOauth
    sdk?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0AzureAdSdk

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0AzureAdManagedIdentity:
    r"""
    managedIdentity defines the Azure User-assigned Managed identity.
    Cannot be set at the same time as `oauth` or `sdk`.

    Attributes
    ----------
    clientId : str, default is Undefined, required
        clientId defines defines the Azure User-assigned Managed identity.
    """
    clientId: str

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0AzureAdOauth:
    r"""
    oauth defines the oauth config that is being used to authenticate.
    Cannot be set at the same time as `managedIdentity` or `sdk`.

    It requires Prometheus >= v2.48.0 or Thanos >= v0.31.0.

    Attributes
    ----------
    clientId : str, default is Undefined, required
        clientId defines the clientId of the Azure Active Directory application that is being used to authenticate.
    clientSecret : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0AzureAdOauthClientSecret, default is Undefined, required
        client secret
    tenantId : str, default is Undefined, required
        tenantId is the tenant ID of the Azure Active Directory application that is being used to authenticate.
    """
    clientId: str

    clientSecret: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0AzureAdOauthClientSecret

    tenantId: str

    check:
        len(clientId) >= 1
        len(tenantId) >= 1
        _regex_match(str(tenantId), r"^[0-9a-zA-Z-.]+$")

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0AzureAdOauthClientSecret:
    r"""
    clientSecret specifies a key of a Secret containing the client secret of the Azure Active Directory application that is being used to authenticate.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0AzureAdSdk:
    r"""
    sdk defines the Azure SDK config that is being used to authenticate.
    See https://learn.microsoft.com/en-us/azure/developer/go/azure-sdk-authentication
    Cannot be set at the same time as `oauth` or `managedIdentity`.

    It requires Prometheus >= v2.52.0 or Thanos >= v0.36.0.

    Attributes
    ----------
    tenantId : str, default is Undefined, optional
        tenantId defines the tenant ID of the azure active directory application that is being used to authenticate.
    """
    tenantId?: str

    check:
        _regex_match(str(tenantId), r"^[0-9a-zA-Z-.]+$") if tenantId

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0BasicAuth:
    r"""
    basicAuth configuration for the URL.

    Cannot be set at the same time as `sigv4`, `authorization`, `oauth2`, or `azureAd`.

    Attributes
    ----------
    password : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0BasicAuthPassword, default is Undefined, optional
        password
    username : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0BasicAuthUsername, default is Undefined, optional
        username
    """
    password?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0BasicAuthPassword
    username?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0BasicAuthUsername

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0BasicAuthPassword:
    r"""
    password defines a key of a Secret containing the password for
    authentication.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0BasicAuthUsername:
    r"""
    username defines a key of a Secret containing the username for
    authentication.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0MetadataConfig:
    r"""
    metadataConfig defines how to send a series metadata to the remote storage.

    Attributes
    ----------
    maxSamplesPerSend : int, default is Undefined, optional
        maxSamplesPerSend defines the maximum number of metadata samples per send.

        It requires Prometheus >= v2.29.0.
    send : bool, default is Undefined, optional
        send defines whether metric metadata is sent to the remote storage or not.
    sendInterval : str, default is Undefined, optional
        sendInterval defines how frequently metric metadata is sent to the remote storage.
    """
    maxSamplesPerSend?: int
    send?: bool
    sendInterval?: str

    check:
        maxSamplesPerSend >= -1 if maxSamplesPerSend not in [None, Undefined]
        _regex_match(str(sendInterval), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if sendInterval

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2:
    r"""
    oauth2 configuration for the URL.

    It requires Prometheus >= v2.27.0 or Thanos >= v0.24.0.

    Cannot be set at the same time as `sigv4`, `authorization`, `basicAuth`, or `azureAd`.

    Attributes
    ----------
    clientId : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2ClientID, default is Undefined, required
        client Id
    clientSecret : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2ClientSecret, default is Undefined, required
        client secret
    endpointParams : {str:str}, default is Undefined, optional
        endpointParams configures the HTTP parameters to append to the token
        URL.
    noProxy : str, default is Undefined, optional
        noProxy defines a comma-separated string that can contain IPs, CIDR notation, domain names
        that should be excluded from proxying. IP and domain names can
        contain port numbers.

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyConnectHeader : {str:[MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2ProxyConnectHeaderItems0]}, default is Undefined, optional
        proxyConnectHeader optionally specifies headers to send to
        proxies during CONNECT requests.

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyFromEnvironment : bool, default is Undefined, optional
        proxyFromEnvironment defines whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyUrl : str, default is Undefined, optional
        proxyUrl defines the HTTP proxy server to use.
    scopes : [str], default is Undefined, optional
        scopes defines the OAuth2 scopes used for the token request.
    tlsConfig : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfig, default is Undefined, optional
        tls config
    tokenUrl : str, default is Undefined, required
        tokenUrl defines the URL to fetch the token from.
    """
    clientId: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2ClientID

    clientSecret: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2ClientSecret

    endpointParams?: {str:str}
    noProxy?: str
    proxyConnectHeader?: {str:[MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2ProxyConnectHeaderItems0]}
    proxyFromEnvironment?: bool
    proxyUrl?: str
    scopes?: [str]
    tlsConfig?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfig
    tokenUrl: str

    check:
        _regex_match(str(proxyUrl), r"^(http|https|socks5)://.+$") if proxyUrl
        len(tokenUrl) >= 1

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2ClientID:
    r"""
    clientId defines a key of a Secret or ConfigMap containing the
    OAuth2 client's ID.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2ClientIDConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2ClientIDSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2ClientIDConfigMap
    secret?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2ClientIDSecret

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2ClientIDConfigMap:
    r"""
    configMap defines the ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2ClientIDSecret:
    r"""
    secret defines the Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2ClientSecret:
    r"""
    clientSecret defines a key of a Secret containing the OAuth2
    client's secret.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2ProxyConnectHeaderItems0:
    r"""
    SecretKeySelector selects a key of a Secret.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfig:
    r"""
    tlsConfig defines the TLS configuration to use when connecting to the OAuth2 server.
    It requires Prometheus >= v2.43.0.

    Attributes
    ----------
    ca : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfigCa, default is Undefined, optional
        ca
    cert : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfigCert, default is Undefined, optional
        cert
    insecureSkipVerify : bool, default is Undefined, optional
        insecureSkipVerify defines how to disable target certificate validation.
    keySecret : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfigKeySecret, default is Undefined, optional
        key secret
    maxVersion : str, default is Undefined, optional
        maxVersion defines the maximum acceptable TLS version.

        It requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.
    minVersion : str, default is Undefined, optional
        minVersion defines the minimum acceptable TLS version.

        It requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.
    serverName : str, default is Undefined, optional
        serverName is used to verify the hostname for the targets.
    """
    ca?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfigCa
    cert?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfigCert
    insecureSkipVerify?: bool
    keySecret?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfigKeySecret
    maxVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    minVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    serverName?: str

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfigCa:
    r"""
    ca defines the Certificate authority used when verifying server certificates.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfigCaConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfigCaSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfigCaConfigMap
    secret?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfigCaSecret

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfigCaConfigMap:
    r"""
    configMap defines the ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfigCaSecret:
    r"""
    secret defines the Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfigCert:
    r"""
    cert defines the Client certificate to present when doing client-authentication.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfigCertConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfigCertSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfigCertConfigMap
    secret?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfigCertSecret

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfigCertConfigMap:
    r"""
    configMap defines the ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfigCertSecret:
    r"""
    secret defines the Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Oauth2TLSConfigKeySecret:
    r"""
    keySecret defines the Secret containing the client key file for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0ProxyConnectHeaderItems0:
    r"""
    SecretKeySelector selects a key of a Secret.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0QueueConfig:
    r"""
    queueConfig allows tuning of the remote write queue parameters.

    Attributes
    ----------
    batchSendDeadline : str, default is Undefined, optional
        batchSendDeadline defines the maximum time a sample will wait in buffer.
    capacity : int, default is Undefined, optional
        capacity defines the number of samples to buffer per shard before we start
        dropping them.
    maxBackoff : str, default is Undefined, optional
        maxBackoff defines the maximum retry delay.
    maxRetries : int, default is Undefined, optional
        maxRetries defines the maximum number of times to retry a batch on recoverable errors.
    maxSamplesPerSend : int, default is Undefined, optional
        maxSamplesPerSend defines the maximum number of samples per send.
    maxShards : int, default is Undefined, optional
        maxShards defines the maximum number of shards, i.e. amount of concurrency.
    minBackoff : str, default is Undefined, optional
        minBackoff defines the initial retry delay. Gets doubled for every retry.
    minShards : int, default is Undefined, optional
        minShards defines the minimum number of shards, i.e. amount of concurrency.
    retryOnRateLimit : bool, default is Undefined, optional
        retryOnRateLimit defines the retry upon receiving a 429 status code from the remote-write storage.

        This is an *experimental feature*, it may change in any upcoming release
        in a breaking way.
    sampleAgeLimit : str, default is Undefined, optional
        sampleAgeLimit drops samples older than the limit.
        It requires Prometheus >= v2.50.0 or Thanos >= v0.32.0.
    """
    batchSendDeadline?: str
    capacity?: int
    maxBackoff?: str
    maxRetries?: int
    maxSamplesPerSend?: int
    maxShards?: int
    minBackoff?: str
    minShards?: int
    retryOnRateLimit?: bool
    sampleAgeLimit?: str

    check:
        _regex_match(str(batchSendDeadline), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if batchSendDeadline
        _regex_match(str(maxBackoff), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if maxBackoff
        _regex_match(str(minBackoff), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if minBackoff
        _regex_match(str(sampleAgeLimit), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if sampleAgeLimit

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Sigv4:
    r"""
    sigv4 defines the AWS's Signature Verification 4 for the URL.

    It requires Prometheus >= v2.26.0 or Thanos >= v0.24.0.

    Cannot be set at the same time as `authorization`, `basicAuth`, `oauth2`, or `azureAd`.

    Attributes
    ----------
    accessKey : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Sigv4AccessKey, default is Undefined, optional
        access key
    profile : str, default is Undefined, optional
        profile defines the named AWS profile used to authenticate.
    region : str, default is Undefined, optional
        region defines the AWS region. If blank, the region from the default credentials chain used.
    roleArn : str, default is Undefined, optional
        roleArn defines the named AWS profile used to authenticate.
    secretKey : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Sigv4SecretKey, default is Undefined, optional
        secret key
    useFIPSSTSEndpoint : bool, default is Undefined, optional
        useFIPSSTSEndpoint defines FIPS mode for AWS STS endpoint.
        It requires Prometheus >= v2.54.0.
    """
    accessKey?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Sigv4AccessKey
    profile?: str
    region?: str
    roleArn?: str
    secretKey?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Sigv4SecretKey
    useFIPSSTSEndpoint?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Sigv4AccessKey:
    r"""
    accessKey defines the AWS API key. If not specified, the environment variable
    `AWS_ACCESS_KEY_ID` is used.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0Sigv4SecretKey:
    r"""
    secretKey defines the AWS API secret. If not specified, the environment
    variable `AWS_SECRET_ACCESS_KEY` is used.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfig:
    r"""
    tlsConfig to use for the URL.

    Attributes
    ----------
    ca : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfigCa, default is Undefined, optional
        ca
    caFile : str, default is Undefined, optional
        caFile defines the path to the CA cert in the Prometheus container to use for the targets.
    cert : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfigCert, default is Undefined, optional
        cert
    certFile : str, default is Undefined, optional
        certFile defines the path to the client cert file in the Prometheus container for the targets.
    insecureSkipVerify : bool, default is Undefined, optional
        insecureSkipVerify defines how to disable target certificate validation.
    keyFile : str, default is Undefined, optional
        keyFile defines the path to the client key file in the Prometheus container for the targets.
    keySecret : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfigKeySecret, default is Undefined, optional
        key secret
    maxVersion : str, default is Undefined, optional
        maxVersion defines the maximum acceptable TLS version.

        It requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.
    minVersion : str, default is Undefined, optional
        minVersion defines the minimum acceptable TLS version.

        It requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.
    serverName : str, default is Undefined, optional
        serverName is used to verify the hostname for the targets.
    """
    ca?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfigCa
    caFile?: str
    cert?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfigCert
    certFile?: str
    insecureSkipVerify?: bool
    keyFile?: str
    keySecret?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfigKeySecret
    maxVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    minVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    serverName?: str

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfigCa:
    r"""
    ca defines the Certificate authority used when verifying server certificates.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfigCaConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfigCaSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfigCaConfigMap
    secret?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfigCaSecret

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfigCaConfigMap:
    r"""
    configMap defines the ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfigCaSecret:
    r"""
    secret defines the Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfigCert:
    r"""
    cert defines the Client certificate to present when doing client-authentication.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfigCertConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfigCertSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfigCertConfigMap
    secret?: MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfigCertSecret

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfigCertConfigMap:
    r"""
    configMap defines the ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfigCertSecret:
    r"""
    secret defines the Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0TLSConfigKeySecret:
    r"""
    keySecret defines the Secret containing the client key file for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecRemoteWriteItems0WriteRelabelConfigsItems0:
    r"""
    RelabelConfig allows dynamic rewriting of the label set for targets, alerts,
    scraped samples and remote write samples.

    More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config

    Attributes
    ----------
    action : str, default is "replace", optional
        action to perform based on the regex matching.

        `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.
        `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.

        Default: "Replace"
    modulus : int, default is Undefined, optional
        modulus to take of the hash of the source label values.

        Only applicable when the action is `HashMod`.
    regex : str, default is Undefined, optional
        regex defines the regular expression against which the extracted value is matched.
    replacement : str, default is Undefined, optional
        replacement value against which a Replace action is performed if the
        regular expression matches.

        Regex capture groups are available.
    separator : str, default is Undefined, optional
        separator defines the string between concatenated SourceLabels.
    sourceLabels : [str], default is Undefined, optional
        sourceLabels defines the source labels select values from existing labels. Their content is
        concatenated using the configured Separator and matched against the
        configured regular expression.
    targetLabel : str, default is Undefined, optional
        targetLabel defines the label to which the resulting string is written in a replacement.

        It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,
        `KeepEqual` and `DropEqual` actions.

        Regex capture groups are available.
    """
    action?: "replace" | "Replace" | "keep" | "Keep" | "drop" | "Drop" | "hashmod" | "HashMod" | "labelmap" | "LabelMap" | "labeldrop" | "LabelDrop" | "labelkeep" | "LabelKeep" | "lowercase" | "Lowercase" | "uppercase" | "Uppercase" | "keepequal" | "KeepEqual" | "dropequal" | "DropEqual" = "replace"
    modulus?: int
    regex?: str
    replacement?: str
    separator?: str
    sourceLabels?: [str]
    targetLabel?: str

schema MonitoringCoreosComV1PrometheusSpecResources:
    r"""
    resources defines the resources requests and limits of the 'prometheus' container.

    Attributes
    ----------
    claims : [MonitoringCoreosComV1PrometheusSpecResourcesClaimsItems0], default is Undefined, optional
        Claims lists the names of resources, defined in spec.resourceClaims,
        that are used by this container.

        This field depends on the
        DynamicResourceAllocation feature gate.

        This field is immutable. It can only be set for containers.
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """
    claims?: [MonitoringCoreosComV1PrometheusSpecResourcesClaimsItems0]
    limits?: {str:int | str}
    requests?: {str:int | str}

    check:
        all _, limits in limits {_regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits} if limits
        all _, requests in requests {_regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests} if requests

schema MonitoringCoreosComV1PrometheusSpecResourcesClaimsItems0:
    r"""
    ResourceClaim references one entry in PodSpec.ResourceClaims.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name must match the name of one entry in pod.spec.resourceClaims of
        the Pod where this field is used. It makes that resource available
        inside a container.
    request : str, default is Undefined, optional
        Request is the name chosen for a request in the referenced claim.
        If empty, everything from the claim is made available, otherwise
        only the result of this request.
    """
    name: str

    request?: str

schema MonitoringCoreosComV1PrometheusSpecRuleNamespaceSelector:
    r"""
    ruleNamespaceSelector defines the namespaces to match for PrometheusRule discovery. An empty label selector
    matches all namespaces. A null label selector matches the current
    namespace only.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecRuleNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecRuleNamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecRuleNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecRuleSelector:
    r"""
    ruleSelector defines the prometheusRule objects to be selected for rule evaluation. An empty
    label selector matches all objects. A null label selector matches no
    objects.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecRuleSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecRuleSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecRuleSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecRules:
    r"""
    rules defines the configuration of the Prometheus rules' engine.

    Attributes
    ----------
    alert : MonitoringCoreosComV1PrometheusSpecRulesAlert, default is Undefined, optional
        alert
    """
    alert?: MonitoringCoreosComV1PrometheusSpecRulesAlert

schema MonitoringCoreosComV1PrometheusSpecRulesAlert:
    r"""
    alert defines the parameters of the Prometheus rules' engine.

    Any update to these parameters trigger a restart of the pods.

    Attributes
    ----------
    forGracePeriod : str, default is Undefined, optional
        forGracePeriod defines the minimum duration between alert and restored 'for' state.

        This is maintained only for alerts with a configured 'for' time greater
        than the grace period.
    forOutageTolerance : str, default is Undefined, optional
        forOutageTolerance defines the max time to tolerate prometheus outage for restoring 'for' state of
        alert.
    resendDelay : str, default is Undefined, optional
        resendDelay defines the minimum amount of time to wait before resending an alert to
        Alertmanager.
    """
    forGracePeriod?: str
    forOutageTolerance?: str
    resendDelay?: str

schema MonitoringCoreosComV1PrometheusSpecRuntime:
    r"""
    runtime defines the values for the Prometheus process behavior

    Attributes
    ----------
    goGC : int, default is Undefined, optional
        goGC defines the Go garbage collection target percentage. Lowering this number may increase the CPU usage.
        See: https://tip.golang.org/doc/gc-guide#GOGC
    """
    goGC?: int

    check:
        goGC >= -1 if goGC not in [None, Undefined]

schema MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0:
    r"""
    monitoring coreos com v1 prometheus spec scrape classes items0

    Attributes
    ----------
    attachMetadata : MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0AttachMetadata, default is Undefined, optional
        attach metadata
    authorization : MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0Authorization, default is Undefined, optional
        authorization
    default : bool, default is Undefined, optional
        default defines that the scrape applies to all scrape objects that
        don't configure an explicit scrape class name.

        Only one scrape class can be set as the default.
    fallbackScrapeProtocol : str, default is Undefined, optional
        fallbackScrapeProtocol defines the protocol to use if a scrape returns blank, unparseable, or otherwise invalid Content-Type.
        It will only apply if the scrape resource doesn't specify any FallbackScrapeProtocol

        It requires Prometheus >= v3.0.0.
    metricRelabelings : [MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0MetricRelabelingsItems0], default is Undefined, optional
        metricRelabelings defines the relabeling rules to apply to all samples before ingestion.

        The Operator adds the scrape class metric relabelings defined here.
        Then the Operator adds the target-specific metric relabelings defined in ServiceMonitors, PodMonitors, Probes and ScrapeConfigs.
        Then the Operator adds namespace enforcement relabeling rule, specified in '.spec.enforcedNamespaceLabel'.

        More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
    name : str, default is Undefined, required
        name of the scrape class.
    relabelings : [MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0RelabelingsItems0], default is Undefined, optional
        relabelings defines the relabeling rules to apply to all scrape targets.

        The Operator automatically adds relabelings for a few standard Kubernetes fields
        like `__meta_kubernetes_namespace` and `__meta_kubernetes_service_name`.
        Then the Operator adds the scrape class relabelings defined here.
        Then the Operator adds the target-specific relabelings defined in the scrape object.

        More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
    tlsConfig : MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfig, default is Undefined, optional
        tls config
    """
    attachMetadata?: MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0AttachMetadata
    authorization?: MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0Authorization
    default?: bool
    fallbackScrapeProtocol?: "PrometheusProto" | "OpenMetricsText0.0.1" | "OpenMetricsText1.0.0" | "PrometheusText0.0.4" | "PrometheusText1.0.0"
    metricRelabelings?: [MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0MetricRelabelingsItems0]
    name: str

    relabelings?: [MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0RelabelingsItems0]
    tlsConfig?: MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfig

    check:
        len(name) >= 1

schema MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0AttachMetadata:
    r"""
    attachMetadata defines additional metadata to the discovered targets.
    When the scrape object defines its own configuration, it takes
    precedence over the scrape class configuration.

    Attributes
    ----------
    node : bool, default is Undefined, optional
        node when set to true, Prometheus attaches node metadata to the discovered
        targets.

        The Prometheus service account must have the `list` and `watch`
        permissions on the `Nodes` objects.
    """
    node?: bool

schema MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0Authorization:
    r"""
    authorization section for the ScrapeClass.
    It will only apply if the scrape resource doesn't specify any Authorization.

    Attributes
    ----------
    credentials : MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0AuthorizationCredentials, default is Undefined, optional
        credentials
    credentialsFile : str, default is Undefined, optional
        credentialsFile defines the file to read a secret from, mutually exclusive with `credentials`.
    $type : str, default is Undefined, optional
        type defines the authentication type. The value is case-insensitive.

        "Basic" is not a supported value.

        Default: "Bearer"
    """
    credentials?: MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0AuthorizationCredentials
    credentialsFile?: str
    $type?: str

schema MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0AuthorizationCredentials:
    r"""
    credentials defines a key of a Secret in the namespace that contains the credentials for authentication.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0MetricRelabelingsItems0:
    r"""
    RelabelConfig allows dynamic rewriting of the label set for targets, alerts,
    scraped samples and remote write samples.

    More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config

    Attributes
    ----------
    action : str, default is "replace", optional
        action to perform based on the regex matching.

        `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.
        `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.

        Default: "Replace"
    modulus : int, default is Undefined, optional
        modulus to take of the hash of the source label values.

        Only applicable when the action is `HashMod`.
    regex : str, default is Undefined, optional
        regex defines the regular expression against which the extracted value is matched.
    replacement : str, default is Undefined, optional
        replacement value against which a Replace action is performed if the
        regular expression matches.

        Regex capture groups are available.
    separator : str, default is Undefined, optional
        separator defines the string between concatenated SourceLabels.
    sourceLabels : [str], default is Undefined, optional
        sourceLabels defines the source labels select values from existing labels. Their content is
        concatenated using the configured Separator and matched against the
        configured regular expression.
    targetLabel : str, default is Undefined, optional
        targetLabel defines the label to which the resulting string is written in a replacement.

        It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,
        `KeepEqual` and `DropEqual` actions.

        Regex capture groups are available.
    """
    action?: "replace" | "Replace" | "keep" | "Keep" | "drop" | "Drop" | "hashmod" | "HashMod" | "labelmap" | "LabelMap" | "labeldrop" | "LabelDrop" | "labelkeep" | "LabelKeep" | "lowercase" | "Lowercase" | "uppercase" | "Uppercase" | "keepequal" | "KeepEqual" | "dropequal" | "DropEqual" = "replace"
    modulus?: int
    regex?: str
    replacement?: str
    separator?: str
    sourceLabels?: [str]
    targetLabel?: str

schema MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0RelabelingsItems0:
    r"""
    RelabelConfig allows dynamic rewriting of the label set for targets, alerts,
    scraped samples and remote write samples.

    More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config

    Attributes
    ----------
    action : str, default is "replace", optional
        action to perform based on the regex matching.

        `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.
        `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.

        Default: "Replace"
    modulus : int, default is Undefined, optional
        modulus to take of the hash of the source label values.

        Only applicable when the action is `HashMod`.
    regex : str, default is Undefined, optional
        regex defines the regular expression against which the extracted value is matched.
    replacement : str, default is Undefined, optional
        replacement value against which a Replace action is performed if the
        regular expression matches.

        Regex capture groups are available.
    separator : str, default is Undefined, optional
        separator defines the string between concatenated SourceLabels.
    sourceLabels : [str], default is Undefined, optional
        sourceLabels defines the source labels select values from existing labels. Their content is
        concatenated using the configured Separator and matched against the
        configured regular expression.
    targetLabel : str, default is Undefined, optional
        targetLabel defines the label to which the resulting string is written in a replacement.

        It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,
        `KeepEqual` and `DropEqual` actions.

        Regex capture groups are available.
    """
    action?: "replace" | "Replace" | "keep" | "Keep" | "drop" | "Drop" | "hashmod" | "HashMod" | "labelmap" | "LabelMap" | "labeldrop" | "LabelDrop" | "labelkeep" | "LabelKeep" | "lowercase" | "Lowercase" | "uppercase" | "Uppercase" | "keepequal" | "KeepEqual" | "dropequal" | "DropEqual" = "replace"
    modulus?: int
    regex?: str
    replacement?: str
    separator?: str
    sourceLabels?: [str]
    targetLabel?: str

schema MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfig:
    r"""
    tlsConfig defines the TLS settings to use for the scrape. When the
    scrape objects define their own CA, certificate and/or key, they take
    precedence over the corresponding scrape class fields.

    For now only the `caFile`, `certFile` and `keyFile` fields are supported.

    Attributes
    ----------
    ca : MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfigCa, default is Undefined, optional
        ca
    caFile : str, default is Undefined, optional
        caFile defines the path to the CA cert in the Prometheus container to use for the targets.
    cert : MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfigCert, default is Undefined, optional
        cert
    certFile : str, default is Undefined, optional
        certFile defines the path to the client cert file in the Prometheus container for the targets.
    insecureSkipVerify : bool, default is Undefined, optional
        insecureSkipVerify defines how to disable target certificate validation.
    keyFile : str, default is Undefined, optional
        keyFile defines the path to the client key file in the Prometheus container for the targets.
    keySecret : MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfigKeySecret, default is Undefined, optional
        key secret
    maxVersion : str, default is Undefined, optional
        maxVersion defines the maximum acceptable TLS version.

        It requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.
    minVersion : str, default is Undefined, optional
        minVersion defines the minimum acceptable TLS version.

        It requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.
    serverName : str, default is Undefined, optional
        serverName is used to verify the hostname for the targets.
    """
    ca?: MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfigCa
    caFile?: str
    cert?: MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfigCert
    certFile?: str
    insecureSkipVerify?: bool
    keyFile?: str
    keySecret?: MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfigKeySecret
    maxVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    minVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    serverName?: str

schema MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfigCa:
    r"""
    ca defines the Certificate authority used when verifying server certificates.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfigCaConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfigCaSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfigCaConfigMap
    secret?: MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfigCaSecret

schema MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfigCaConfigMap:
    r"""
    configMap defines the ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfigCaSecret:
    r"""
    secret defines the Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfigCert:
    r"""
    cert defines the Client certificate to present when doing client-authentication.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfigCertConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfigCertSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfigCertConfigMap
    secret?: MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfigCertSecret

schema MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfigCertConfigMap:
    r"""
    configMap defines the ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfigCertSecret:
    r"""
    secret defines the Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecScrapeClassesItems0TLSConfigKeySecret:
    r"""
    keySecret defines the Secret containing the client key file for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecScrapeConfigNamespaceSelector:
    r"""
    scrapeConfigNamespaceSelector defines the namespaces to match for ScrapeConfig discovery. An empty label selector
    matches all namespaces. A null label selector matches the current
    namespace only.

    Note that the ScrapeConfig custom resource definition is currently at Alpha level.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecScrapeConfigNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecScrapeConfigNamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecScrapeConfigNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecScrapeConfigSelector:
    r"""
    scrapeConfigSelector defines the scrapeConfigs to be selected for target discovery. An empty label
    selector matches all objects. A null label selector matches no objects.

    If `spec.serviceMonitorSelector`, `spec.podMonitorSelector`, `spec.probeSelector`
    and `spec.scrapeConfigSelector` are null, the Prometheus configuration is unmanaged.
    The Prometheus operator will ensure that the Prometheus configuration's
    Secret exists, but it is the responsibility of the user to provide the raw
    gzipped Prometheus configuration under the `prometheus.yaml.gz` key.
    This behavior is *deprecated* and will be removed in the next major version
    of the custom resource definition. It is recommended to use
    `spec.additionalScrapeConfigs` instead.

    Note that the ScrapeConfig custom resource definition is currently at Alpha level.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecScrapeConfigSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecScrapeConfigSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecScrapeConfigSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecSecurityContext:
    r"""
    securityContext holds pod-level security attributes and common container settings.
    This defaults to the default PodSecurityContext.

    Attributes
    ----------
    appArmorProfile : MonitoringCoreosComV1PrometheusSpecSecurityContextAppArmorProfile, default is Undefined, optional
        app armor profile
    fsGroup : int, default is Undefined, optional
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
    fsGroupChangePolicy : str, default is Undefined, optional
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
    runAsGroup : int, default is Undefined, optional
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
    runAsNonRoot : bool, default is Undefined, optional
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
    runAsUser : int, default is Undefined, optional
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
    seLinuxChangePolicy : str, default is Undefined, optional
        seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.
        It has no effect on nodes that do not support SELinux or to volumes does not support SELinux.
        Valid values are "MountOption" and "Recursive".

        "Recursive" means relabeling of all files on all Pod volumes by the container runtime.
        This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.

        "MountOption" mounts all eligible Pod volumes with `-o context` mount option.
        This requires all Pods that share the same volume to use the same SELinux label.
        It is not possible to share the same volume among privileged and unprivileged Pods.
        Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes
        whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their
        CSIDriver instance. Other volumes are always re-labelled recursively.
        "MountOption" value is allowed only when SELinuxMount feature gate is enabled.

        If not specified and SELinuxMount feature gate is enabled, "MountOption" is used.
        If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes
        and "Recursive" for all other volumes.

        This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.

        All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.
        Note that this field cannot be set when spec.os.name is windows.
    seLinuxOptions : MonitoringCoreosComV1PrometheusSpecSecurityContextSeLinuxOptions, default is Undefined, optional
        se linux options
    seccompProfile : MonitoringCoreosComV1PrometheusSpecSecurityContextSeccompProfile, default is Undefined, optional
        seccomp profile
    supplementalGroups : [int], default is Undefined, optional
        A list of groups applied to the first process run in each container, in
        addition to the container's primary GID and fsGroup (if specified).  If
        the SupplementalGroupsPolicy feature is enabled, the
        supplementalGroupsPolicy field determines whether these are in addition
        to or instead of any group memberships defined in the container image.
        If unspecified, no additional groups are added, though group memberships
        defined in the container image may still be used, depending on the
        supplementalGroupsPolicy field.
        Note that this field cannot be set when spec.os.name is windows.
    supplementalGroupsPolicy : str, default is Undefined, optional
        Defines how supplemental groups of the first container processes are calculated.
        Valid values are "Merge" and "Strict". If not specified, "Merge" is used.
        (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled
        and the container runtime must implement support for this feature.
        Note that this field cannot be set when spec.os.name is windows.
    sysctls : [MonitoringCoreosComV1PrometheusSpecSecurityContextSysctlsItems0], default is Undefined, optional
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
    windowsOptions : MonitoringCoreosComV1PrometheusSpecSecurityContextWindowsOptions, default is Undefined, optional
        windows options
    """
    appArmorProfile?: MonitoringCoreosComV1PrometheusSpecSecurityContextAppArmorProfile
    fsGroup?: int
    fsGroupChangePolicy?: str
    runAsGroup?: int
    runAsNonRoot?: bool
    runAsUser?: int
    seLinuxChangePolicy?: str
    seLinuxOptions?: MonitoringCoreosComV1PrometheusSpecSecurityContextSeLinuxOptions
    seccompProfile?: MonitoringCoreosComV1PrometheusSpecSecurityContextSeccompProfile
    supplementalGroups?: [int]
    supplementalGroupsPolicy?: str
    sysctls?: [MonitoringCoreosComV1PrometheusSpecSecurityContextSysctlsItems0]
    windowsOptions?: MonitoringCoreosComV1PrometheusSpecSecurityContextWindowsOptions

schema MonitoringCoreosComV1PrometheusSpecSecurityContextAppArmorProfile:
    r"""
    appArmorProfile is the AppArmor options to use by the containers in this pod.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    localhostProfile : str, default is Undefined, optional
        localhostProfile indicates a profile loaded on the node that should be used.
        The profile must be preconfigured on the node to work.
        Must match the loaded name of the profile.
        Must be set if and only if type is "Localhost".
    $type : str, default is Undefined, required
        type indicates which kind of AppArmor profile will be applied.
        Valid options are:
          Localhost - a profile pre-loaded on the node.
          RuntimeDefault - the container runtime's default profile.
          Unconfined - no AppArmor enforcement.
    """
    localhostProfile?: str
    $type: str

schema MonitoringCoreosComV1PrometheusSpecSecurityContextSeLinuxOptions:
    r"""
    The SELinux context to be applied to all containers.
    If unspecified, the container runtime will allocate a random SELinux context for each
    container.  May also be set in SecurityContext.  If set in
    both SecurityContext and PodSecurityContext, the value specified in SecurityContext
    takes precedence for that container.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    level : str, default is Undefined, optional
        Level is SELinux level label that applies to the container.
    role : str, default is Undefined, optional
        Role is a SELinux role label that applies to the container.
    $type : str, default is Undefined, optional
        Type is a SELinux type label that applies to the container.
    user : str, default is Undefined, optional
        User is a SELinux user label that applies to the container.
    """
    level?: str
    role?: str
    $type?: str
    user?: str

schema MonitoringCoreosComV1PrometheusSpecSecurityContextSeccompProfile:
    r"""
    The seccomp options to use by the containers in this pod.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    localhostProfile : str, default is Undefined, optional
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
    $type : str, default is Undefined, required
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
    """
    localhostProfile?: str
    $type: str

schema MonitoringCoreosComV1PrometheusSpecSecurityContextSysctlsItems0:
    r"""
    Sysctl defines a kernel parameter to be set

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of a property to set
    value : str, default is Undefined, required
        Value of a property to set
    """
    name: str

    value: str

schema MonitoringCoreosComV1PrometheusSpecSecurityContextWindowsOptions:
    r"""
    The Windows specific settings applied to all containers.
    If unspecified, the options within a container's SecurityContext will be used.
    If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    Note that this field cannot be set when spec.os.name is linux.

    Attributes
    ----------
    gmsaCredentialSpec : str, default is Undefined, optional
        GMSACredentialSpec is where the GMSA admission webhook
        (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
        GMSA credential spec named by the GMSACredentialSpecName field.
    gmsaCredentialSpecName : str, default is Undefined, optional
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
    hostProcess : bool, default is Undefined, optional
        HostProcess determines if a container should be run as a 'Host Process' container.
        All of a Pod's containers must have the same effective HostProcess value
        (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
        In addition, if HostProcess is true then HostNetwork must also be set to true.
    runAsUserName : str, default is Undefined, optional
        The UserName in Windows to run the entrypoint of the container process.
        Defaults to the user specified in image metadata if unspecified.
        May also be set in PodSecurityContext. If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
    """
    gmsaCredentialSpec?: str
    gmsaCredentialSpecName?: str
    hostProcess?: bool
    runAsUserName?: str

schema MonitoringCoreosComV1PrometheusSpecServiceMonitorNamespaceSelector:
    r"""
    serviceMonitorNamespaceSelector defines the namespaces to match for ServicedMonitors discovery. An empty label selector
    matches all namespaces. A null label selector (default value) matches the current
    namespace only.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecServiceMonitorNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecServiceMonitorNamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecServiceMonitorNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecServiceMonitorSelector:
    r"""
    serviceMonitorSelector defines the serviceMonitors to be selected for target discovery. An empty label
    selector matches all objects. A null label selector matches no objects.

    If `spec.serviceMonitorSelector`, `spec.podMonitorSelector`, `spec.probeSelector`
    and `spec.scrapeConfigSelector` are null, the Prometheus configuration is unmanaged.
    The Prometheus operator will ensure that the Prometheus configuration's
    Secret exists, but it is the responsibility of the user to provide the raw
    gzipped Prometheus configuration under the `prometheus.yaml.gz` key.
    This behavior is *deprecated* and will be removed in the next major version
    of the custom resource definition. It is recommended to use
    `spec.additionalScrapeConfigs` instead.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecServiceMonitorSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecServiceMonitorSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecServiceMonitorSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecShardRetentionPolicy:
    r"""
    shardRetentionPolicy defines the retention policy for the Prometheus shards.
    (Alpha) Using this field requires the 'PrometheusShardRetentionPolicy' feature gate to be enabled.

    The final goals for this feature can be seen at https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/proposals/202310-shard-autoscaling.md#graceful-scale-down-of-prometheus-servers,
    however, the feature is not yet fully implemented in this PR. The limitation being:
    * Retention duration is not settable, for now, shards are retained forever.

    Attributes
    ----------
    retain : MonitoringCoreosComV1PrometheusSpecShardRetentionPolicyRetain, default is Undefined, optional
        retain
    whenScaled : str, default is Undefined, optional
        whenScaled defines the retention policy when the Prometheus shards are scaled down.
        * `Delete`, the operator will delete the pods from the scaled-down shard(s).
        * `Retain`, the operator will keep the pods from the scaled-down shard(s), so the data can still be queried.

        If not defined, the operator assumes the `Delete` value.
    """
    retain?: MonitoringCoreosComV1PrometheusSpecShardRetentionPolicyRetain
    whenScaled?: "Retain" | "Delete"

schema MonitoringCoreosComV1PrometheusSpecShardRetentionPolicyRetain:
    r"""
    retain defines the config for retention when the retention policy is set to `Retain`.
    This field is ineffective as of now.

    Attributes
    ----------
    retentionPeriod : str, default is Undefined, required
        retentionPeriod defines the retentionPeriod for shard retention policy.
    """
    retentionPeriod: str

    check:
        _regex_match(str(retentionPeriod), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$")

schema MonitoringCoreosComV1PrometheusSpecStorage:
    r"""
    storage defines the storage used by Prometheus.

    Attributes
    ----------
    disableMountSubPath : bool, default is Undefined, optional
        disableMountSubPath deprecated: subPath usage will be removed in a future release.
    emptyDir : MonitoringCoreosComV1PrometheusSpecStorageEmptyDir, default is Undefined, optional
        empty dir
    ephemeral : MonitoringCoreosComV1PrometheusSpecStorageEphemeral, default is Undefined, optional
        ephemeral
    volumeClaimTemplate : MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplate, default is Undefined, optional
        volume claim template
    """
    disableMountSubPath?: bool
    emptyDir?: MonitoringCoreosComV1PrometheusSpecStorageEmptyDir
    ephemeral?: MonitoringCoreosComV1PrometheusSpecStorageEphemeral
    volumeClaimTemplate?: MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplate

schema MonitoringCoreosComV1PrometheusSpecStorageEmptyDir:
    r"""
    emptyDir to be used by the StatefulSet.
    If specified, it takes precedence over `ephemeral` and `volumeClaimTemplate`.
    More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir

    Attributes
    ----------
    medium : str, default is Undefined, optional
        medium represents what type of storage medium should back this directory.
        The default is "" which means to use the node's default medium.
        Must be an empty string (default) or Memory.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    sizeLimit : int | str, default is Undefined, optional
        sizeLimit is the total amount of local storage required for this EmptyDir volume.
        The size limit is also applicable for memory medium.
        The maximum usage on memory medium EmptyDir would be the minimum value between
        the SizeLimit specified here and the sum of memory limits of all containers in a pod.
        The default is nil which means that the limit is undefined.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    """
    medium?: str
    sizeLimit?: int | str

    check:
        _regex_match(str(sizeLimit), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if sizeLimit

schema MonitoringCoreosComV1PrometheusSpecStorageEphemeral:
    r"""
    ephemeral to be used by the StatefulSet.
    This is a beta field in k8s 1.21 and GA in 1.15.
    For lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate.
    More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes

    Attributes
    ----------
    volumeClaimTemplate : MonitoringCoreosComV1PrometheusSpecStorageEphemeralVolumeClaimTemplate, default is Undefined, optional
        volume claim template
    """
    volumeClaimTemplate?: MonitoringCoreosComV1PrometheusSpecStorageEphemeralVolumeClaimTemplate

schema MonitoringCoreosComV1PrometheusSpecStorageEphemeralVolumeClaimTemplate:
    r"""
    Will be used to create a stand-alone PVC to provision the volume.
    The pod in which this EphemeralVolumeSource is embedded will be the
    owner of the PVC, i.e. the PVC will be deleted together with the
    pod.  The name of the PVC will be `<pod name>-<volume name>` where
    `<volume name>` is the name from the `PodSpec.Volumes` array
    entry. Pod validation will reject the pod if the concatenated name
    is not valid for a PVC (for example, too long).

    An existing PVC with that name that is not owned by the pod
    will *not* be used for the pod to avoid using an unrelated
    volume by mistake. Starting the pod is then blocked until
    the unrelated PVC is removed. If such a pre-created PVC is
    meant to be used by the pod, the PVC has to updated with an
    owner reference to the pod once the pod exists. Normally
    this should not be necessary, but it may be useful when
    manually reconstructing a broken cluster.

    This field is read-only and no changes will be made by Kubernetes
    to the PVC after it has been created.

    Required, must not be nil.

    Attributes
    ----------
    metadata : any, default is Undefined, optional
        May contain labels and annotations that will be copied into the PVC
        when creating it. No other fields are allowed and will be rejected during
        validation.
    spec : MonitoringCoreosComV1PrometheusSpecStorageEphemeralVolumeClaimTemplateSpec, default is Undefined, required
        spec
    """
    metadata?: any
    spec: MonitoringCoreosComV1PrometheusSpecStorageEphemeralVolumeClaimTemplateSpec

schema MonitoringCoreosComV1PrometheusSpecStorageEphemeralVolumeClaimTemplateSpec:
    r"""
    The specification for the PersistentVolumeClaim. The entire content is
    copied unchanged into the PVC that gets created from this
    template. The same fields as in a PersistentVolumeClaim
    are also valid here.

    Attributes
    ----------
    accessModes : [str], default is Undefined, optional
        accessModes contains the desired access modes the volume should have.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    dataSource : MonitoringCoreosComV1PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecDataSource, default is Undefined, optional
        data source
    dataSourceRef : MonitoringCoreosComV1PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef, default is Undefined, optional
        data source ref
    resources : MonitoringCoreosComV1PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecResources, default is Undefined, optional
        resources
    selector : MonitoringCoreosComV1PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecSelector, default is Undefined, optional
        selector
    storageClassName : str, default is Undefined, optional
        storageClassName is the name of the StorageClass required by the claim.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    volumeAttributesClassName : str, default is Undefined, optional
        volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
        If specified, the CSI driver will create or update the volume with the attributes defined
        in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
        it can be changed after the claim is created. An empty string or nil value indicates that no
        VolumeAttributesClass will be applied to the claim. If the claim enters an Infeasible error state,
        this field can be reset to its previous value (including nil) to cancel the modification.
        If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
        set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
        exists.
        More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
    volumeMode : str, default is Undefined, optional
        volumeMode defines what type of volume is required by the claim.
        Value of Filesystem is implied when not included in claim spec.
    volumeName : str, default is Undefined, optional
        volumeName is the binding reference to the PersistentVolume backing this claim.
    """
    accessModes?: [str]
    dataSource?: MonitoringCoreosComV1PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecDataSource
    dataSourceRef?: MonitoringCoreosComV1PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef
    resources?: MonitoringCoreosComV1PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecResources
    selector?: MonitoringCoreosComV1PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecSelector
    storageClassName?: str
    volumeAttributesClassName?: str
    volumeMode?: str
    volumeName?: str

schema MonitoringCoreosComV1PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecDataSource:
    r"""
    dataSource field can be used to specify either:
    * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
    * An existing PVC (PersistentVolumeClaim)
    If the provisioner or an external controller can support the specified data source,
    it will create a new volume based on the contents of the specified data source.
    When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
    and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
    If the namespace is specified, then dataSourceRef will not be copied to dataSource.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    """
    apiGroup?: str
    kind: str

    name: str

schema MonitoringCoreosComV1PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef:
    r"""
    dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
    volume is desired. This may be any object from a non-empty API group (non
    core object) or a PersistentVolumeClaim object.
    When this field is specified, volume binding will only succeed if the type of
    the specified object matches some installed volume populator or dynamic
    provisioner.
    This field will replace the functionality of the dataSource field and as such
    if both fields are non-empty, they must have the same value. For backwards
    compatibility, when namespace isn't specified in dataSourceRef,
    both fields (dataSource and dataSourceRef) will be set to the same
    value automatically if one of them is empty and the other is non-empty.
    When namespace is specified in dataSourceRef,
    dataSource isn't set to the same value and must be empty.
    There are three important differences between dataSource and dataSourceRef:
    * While dataSource only allows two specific types of objects, dataSourceRef
      allows any non-core object, as well as PersistentVolumeClaim objects.
    * While dataSource ignores disallowed values (dropping them), dataSourceRef
      preserves all values, and generates an error if a disallowed value is
      specified.
    * While dataSource only allows local objects, dataSourceRef allows objects
      in any namespaces.
    (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
    (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    namespace : str, default is Undefined, optional
        Namespace is the namespace of resource being referenced
        Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
        (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
    """
    apiGroup?: str
    kind: str

    name: str

    namespace?: str

schema MonitoringCoreosComV1PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecResources:
    r"""
    resources represents the minimum resources the volume should have.
    If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
    that are lower than previous value but must still be higher than capacity recorded in the
    status field of the claim.
    More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources

    Attributes
    ----------
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """
    limits?: {str:int | str}
    requests?: {str:int | str}

    check:
        all _, limits in limits {_regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits} if limits
        all _, requests in requests {_regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests} if requests

schema MonitoringCoreosComV1PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecSelector:
    r"""
    selector is a label query over volumes to consider for binding.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplate:
    r"""
    volumeClaimTemplate defines the PVC spec to be used by the Prometheus StatefulSets.
    The easiest way to use a volume that cannot be automatically provisioned
    is to use a label selector alongside manually created PersistentVolumes.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        APIVersion defines the versioned schema of this representation of an object.
        Servers should convert recognized schemas to the latest internal value, and
        may reject unrecognized values.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is Undefined, optional
        Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to.
        Cannot be updated.
        In CamelCase.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateMetadata, default is Undefined, optional
        metadata
    spec : MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateSpec, default is Undefined, optional
        spec
    status : MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateStatus, default is Undefined, optional
        status
    """
    apiVersion?: str
    kind?: str
    metadata?: MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateMetadata
    spec?: MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateSpec
    status?: MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateStatus

schema MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateMetadata:
    r"""
    metadata defines EmbeddedMetadata contains metadata relevant to an EmbeddedResource.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        annotations defines an unstructured key value map stored with a resource that may be
        set by external tools to store and retrieve arbitrary metadata. They are not
        queryable and should be preserved when modifying objects.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    labels : {str:str}, default is Undefined, optional
        labels define the map of string keys and values that can be used to organize and categorize
        (scope and select) objects. May match selectors of replication controllers
        and services.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    name : str, default is Undefined, optional
        name must be unique within a namespace. Is required when creating resources, although
        some resources may allow a client to request the generation of an appropriate name
        automatically. Name is primarily intended for creation idempotence and configuration
        definition.
        Cannot be updated.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/
    """
    annotations?: {str:str}
    labels?: {str:str}
    name?: str

schema MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateSpec:
    r"""
    spec defines the specification of the  characteristics of a volume requested by a pod author.
    More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims

    Attributes
    ----------
    accessModes : [str], default is Undefined, optional
        accessModes contains the desired access modes the volume should have.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    dataSource : MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateSpecDataSource, default is Undefined, optional
        data source
    dataSourceRef : MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateSpecDataSourceRef, default is Undefined, optional
        data source ref
    resources : MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateSpecResources, default is Undefined, optional
        resources
    selector : MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateSpecSelector, default is Undefined, optional
        selector
    storageClassName : str, default is Undefined, optional
        storageClassName is the name of the StorageClass required by the claim.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    volumeAttributesClassName : str, default is Undefined, optional
        volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
        If specified, the CSI driver will create or update the volume with the attributes defined
        in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
        it can be changed after the claim is created. An empty string or nil value indicates that no
        VolumeAttributesClass will be applied to the claim. If the claim enters an Infeasible error state,
        this field can be reset to its previous value (including nil) to cancel the modification.
        If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
        set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
        exists.
        More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
    volumeMode : str, default is Undefined, optional
        volumeMode defines what type of volume is required by the claim.
        Value of Filesystem is implied when not included in claim spec.
    volumeName : str, default is Undefined, optional
        volumeName is the binding reference to the PersistentVolume backing this claim.
    """
    accessModes?: [str]
    dataSource?: MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateSpecDataSource
    dataSourceRef?: MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateSpecDataSourceRef
    resources?: MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateSpecResources
    selector?: MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateSpecSelector
    storageClassName?: str
    volumeAttributesClassName?: str
    volumeMode?: str
    volumeName?: str

schema MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateSpecDataSource:
    r"""
    dataSource field can be used to specify either:
    * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
    * An existing PVC (PersistentVolumeClaim)
    If the provisioner or an external controller can support the specified data source,
    it will create a new volume based on the contents of the specified data source.
    When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
    and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
    If the namespace is specified, then dataSourceRef will not be copied to dataSource.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    """
    apiGroup?: str
    kind: str

    name: str

schema MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateSpecDataSourceRef:
    r"""
    dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
    volume is desired. This may be any object from a non-empty API group (non
    core object) or a PersistentVolumeClaim object.
    When this field is specified, volume binding will only succeed if the type of
    the specified object matches some installed volume populator or dynamic
    provisioner.
    This field will replace the functionality of the dataSource field and as such
    if both fields are non-empty, they must have the same value. For backwards
    compatibility, when namespace isn't specified in dataSourceRef,
    both fields (dataSource and dataSourceRef) will be set to the same
    value automatically if one of them is empty and the other is non-empty.
    When namespace is specified in dataSourceRef,
    dataSource isn't set to the same value and must be empty.
    There are three important differences between dataSource and dataSourceRef:
    * While dataSource only allows two specific types of objects, dataSourceRef
      allows any non-core object, as well as PersistentVolumeClaim objects.
    * While dataSource ignores disallowed values (dropping them), dataSourceRef
      preserves all values, and generates an error if a disallowed value is
      specified.
    * While dataSource only allows local objects, dataSourceRef allows objects
      in any namespaces.
    (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
    (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    namespace : str, default is Undefined, optional
        Namespace is the namespace of resource being referenced
        Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
        (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
    """
    apiGroup?: str
    kind: str

    name: str

    namespace?: str

schema MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateSpecResources:
    r"""
    resources represents the minimum resources the volume should have.
    If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
    that are lower than previous value but must still be higher than capacity recorded in the
    status field of the claim.
    More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources

    Attributes
    ----------
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """
    limits?: {str:int | str}
    requests?: {str:int | str}

    check:
        all _, limits in limits {_regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits} if limits
        all _, requests in requests {_regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests} if requests

schema MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateSpecSelector:
    r"""
    selector is a label query over volumes to consider for binding.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateStatus:
    r"""
    status is deprecated: this field is never set.

    Attributes
    ----------
    accessModes : [str], default is Undefined, optional
        accessModes contains the actual access modes the volume backing the PVC has.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    allocatedResourceStatuses : {str:str}, default is Undefined, optional
        allocatedResourceStatuses stores status of resource being resized for the given PVC.
        Key names follow standard Kubernetes label syntax. Valid values are either:
        	* Un-prefixed keys:
        		- storage - the capacity of the volume.
        	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
        Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
        reserved and hence may not be used.

        ClaimResourceStatus can be in any of following states:
        	- ControllerResizeInProgress:
        		State set when resize controller starts resizing the volume in control-plane.
        	- ControllerResizeFailed:
        		State set when resize has failed in resize controller with a terminal error.
        	- NodeResizePending:
        		State set when resize controller has finished resizing the volume but further resizing of
        		volume is needed on the node.
        	- NodeResizeInProgress:
        		State set when kubelet starts resizing the volume.
        	- NodeResizeFailed:
        		State set when resizing has failed in kubelet with a terminal error. Transient errors don't set
        		NodeResizeFailed.
        For example: if expanding a PVC for more capacity - this field can be one of the following states:
        	- pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"
             - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"
             - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"
             - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"
             - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed"
        When this field is not set, it means that no resize operation is in progress for the given PVC.

        A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus
        should ignore the update for the purpose it was designed. For example - a controller that
        only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
        resources associated with PVC.

        This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
    allocatedResources : {str:int | str}, default is Undefined, optional
        allocatedResources tracks the resources allocated to a PVC including its capacity.
        Key names follow standard Kubernetes label syntax. Valid values are either:
        	* Un-prefixed keys:
        		- storage - the capacity of the volume.
        	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
        Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
        reserved and hence may not be used.

        Capacity reported here may be larger than the actual capacity when a volume expansion operation
        is requested.
        For storage quota, the larger value from allocatedResources and PVC.spec.resources is used.
        If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation.
        If a volume expansion capacity request is lowered, allocatedResources is only
        lowered if there are no expansion operations in progress and if the actual volume capacity
        is equal or lower than the requested capacity.

        A controller that receives PVC update with previously unknown resourceName
        should ignore the update for the purpose it was designed. For example - a controller that
        only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
        resources associated with PVC.

        This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
    capacity : {str:int | str}, default is Undefined, optional
        capacity represents the actual resources of the underlying volume.
    conditions : [MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateStatusConditionsItems0], default is Undefined, optional
        conditions is the current Condition of persistent volume claim. If underlying persistent volume is being
        resized then the Condition will be set to 'Resizing'.
    currentVolumeAttributesClassName : str, default is Undefined, optional
        currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using.
        When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim
    modifyVolumeStatus : MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus, default is Undefined, optional
        modify volume status
    phase : str, default is Undefined, optional
        phase represents the current phase of PersistentVolumeClaim.
    """
    accessModes?: [str]
    allocatedResourceStatuses?: {str:str}
    allocatedResources?: {str:int | str}
    capacity?: {str:int | str}
    conditions?: [MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateStatusConditionsItems0]
    currentVolumeAttributesClassName?: str
    modifyVolumeStatus?: MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus
    phase?: str

    check:
        all _, allocatedResources in allocatedResources {_regex_match(str(allocatedResources), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if allocatedResources} if allocatedResources
        all _, capacity in capacity {_regex_match(str(capacity), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if capacity} if capacity

schema MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateStatusConditionsItems0:
    r"""
    PersistentVolumeClaimCondition contains details about state of pvc

    Attributes
    ----------
    lastProbeTime : str, default is Undefined, optional
        lastProbeTime is the time we probed the condition.
    lastTransitionTime : str, default is Undefined, optional
        lastTransitionTime is the time the condition transitioned from one status to another.
    message : str, default is Undefined, optional
        message is the human-readable message indicating details about last transition.
    reason : str, default is Undefined, optional
        reason is a unique, this should be a short, machine understandable string that gives the reason
        for condition's last transition. If it reports "Resizing" that means the underlying
        persistent volume is being resized.
    status : str, default is Undefined, required
        Status is the status of the condition.
        Can be True, False, Unknown.
        More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=state%20of%20pvc-,conditions.status,-(string)%2C%20required
    $type : str, default is Undefined, required
        Type is the type of the condition.
        More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=set%20to%20%27ResizeStarted%27.-,PersistentVolumeClaimCondition,-contains%20details%20about
    """
    lastProbeTime?: str
    lastTransitionTime?: str
    message?: str
    reason?: str
    status: str

    $type: str

schema MonitoringCoreosComV1PrometheusSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus:
    r"""
    ModifyVolumeStatus represents the status object of ControllerModifyVolume operation.
    When this is unset, there is no ModifyVolume operation being attempted.

    Attributes
    ----------
    status : str, default is Undefined, required
        status is the status of the ControllerModifyVolume operation. It can be in any of following states:
         - Pending
           Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as
           the specified VolumeAttributesClass not existing.
         - InProgress
           InProgress indicates that the volume is being modified.
         - Infeasible
          Infeasible indicates that the request has been rejected as invalid by the CSI driver. To
        	  resolve the error, a valid VolumeAttributesClass needs to be specified.
        Note: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.
    targetVolumeAttributesClassName : str, default is Undefined, optional
        targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled
    """
    status: str

    targetVolumeAttributesClassName?: str

schema MonitoringCoreosComV1PrometheusSpecThanos:
    r"""
    thanos defines the configuration of the optional Thanos sidecar.

    Attributes
    ----------
    additionalArgs : [MonitoringCoreosComV1PrometheusSpecThanosAdditionalArgsItems0], default is Undefined, optional
        additionalArgs allows setting additional arguments for the Thanos container.
        The arguments are passed as-is to the Thanos container which may cause issues
        if they are invalid or not supported the given Thanos version.
        In case of an argument conflict (e.g. an argument which is already set by the
        operator itself) or when providing an invalid argument, the reconciliation will
        fail and an error will be logged.
    baseImage : str, default is Undefined, optional
        baseImage is deprecated: use 'image' instead.
    blockSize : str, default is "2h", optional
        blockSize controls the size of TSDB blocks produced by Prometheus.
        The default value is 2h to match the upstream Prometheus defaults.

        WARNING: Changing the block duration can impact the performance and
        efficiency of the entire Prometheus/Thanos stack due to how it interacts
        with memory and Thanos compactors. It is recommended to keep this value
        set to a multiple of 120 times your longest scrape or rule interval. For
        example, 30s * 120 = 1h.
    getConfigInterval : str, default is Undefined, optional
        getConfigInterval defines how often to retrieve the Prometheus configuration.
    getConfigTimeout : str, default is Undefined, optional
        getConfigTimeout defines the maximum time to wait when retrieving the Prometheus configuration.
    grpcListenLocal : bool, default is Undefined, optional
        grpcListenLocal defines when true, the Thanos sidecar listens on the loopback interface instead
        of the Pod IP's address for the gRPC endpoints.

        It has no effect if `listenLocal` is true.
    grpcServerTlsConfig : MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfig, default is Undefined, optional
        grpc server Tls config
    httpListenLocal : bool, default is Undefined, optional
        httpListenLocal when true, the Thanos sidecar listens on the loopback interface instead
        of the Pod IP's address for the HTTP endpoints.

        It has no effect if `listenLocal` is true.
    image : str, default is Undefined, optional
        image defines the container image name for Thanos. If specified, it takes precedence over
        the `spec.thanos.baseImage`, `spec.thanos.tag` and `spec.thanos.sha`
        fields.

        Specifying `spec.thanos.version` is still necessary to ensure the
        Prometheus Operator knows which version of Thanos is being configured.

        If neither `spec.thanos.image` nor `spec.thanos.baseImage` are defined,
        the operator will use the latest upstream version of Thanos available at
        the time when the operator was released.
    listenLocal : bool, default is Undefined, optional
        listenLocal is deprecated: use `grpcListenLocal` and `httpListenLocal` instead.
    logFormat : str, default is Undefined, optional
        logFormat for the Thanos sidecar.
    logLevel : str, default is Undefined, optional
        logLevel for the Thanos sidecar.
    minTime : str, default is Undefined, optional
        minTime defines the start of time range limit served by the Thanos sidecar's StoreAPI.
        The field's value should be a constant time in RFC3339 format or a time
        duration relative to current time, such as -1d or 2h45m. Valid duration
        units are ms, s, m, h, d, w, y.
    objectStorageConfig : MonitoringCoreosComV1PrometheusSpecThanosObjectStorageConfig, default is Undefined, optional
        object storage config
    objectStorageConfigFile : str, default is Undefined, optional
        objectStorageConfigFile defines the Thanos sidecar's configuration file to upload TSDB blocks to object storage.

        More info: https://thanos.io/tip/thanos/storage.md/

        This field takes precedence over objectStorageConfig.
    readyTimeout : str, default is Undefined, optional
        readyTimeout defines the maximum time that the Thanos sidecar will wait for
        Prometheus to start.
    resources : MonitoringCoreosComV1PrometheusSpecThanosResources, default is Undefined, optional
        resources
    sha : str, default is Undefined, optional
        sha is deprecated: use 'image' instead.  The image digest can be specified as part of the image name.
    tag : str, default is Undefined, optional
        tag is deprecated: use 'image' instead. The image's tag can be specified as as part of the image name.
    tracingConfig : MonitoringCoreosComV1PrometheusSpecThanosTracingConfig, default is Undefined, optional
        tracing config
    tracingConfigFile : str, default is Undefined, optional
        tracingConfigFile defines the tracing configuration file for the Thanos sidecar.

        This field takes precedence over `tracingConfig`.

        More info: https://thanos.io/tip/thanos/tracing.md/

        This is an *experimental feature*, it may change in any upcoming release
        in a breaking way.
    version : str, default is Undefined, optional
        version of Thanos being deployed. The operator uses this information
        to generate the Prometheus StatefulSet + configuration files.

        If not specified, the operator assumes the latest upstream release of
        Thanos available at the time when the version of the operator was
        released.
    volumeMounts : [MonitoringCoreosComV1PrometheusSpecThanosVolumeMountsItems0], default is Undefined, optional
        volumeMounts allows configuration of additional VolumeMounts for Thanos.
        VolumeMounts specified will be appended to other VolumeMounts in the
        'thanos-sidecar' container.
    """
    additionalArgs?: [MonitoringCoreosComV1PrometheusSpecThanosAdditionalArgsItems0]
    baseImage?: str
    blockSize?: str = "2h"
    getConfigInterval?: str
    getConfigTimeout?: str
    grpcListenLocal?: bool
    grpcServerTlsConfig?: MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfig
    httpListenLocal?: bool
    image?: str
    listenLocal?: bool
    logFormat?: "" | "logfmt" | "json"
    logLevel?: "" | "debug" | "info" | "warn" | "error"
    minTime?: str
    objectStorageConfig?: MonitoringCoreosComV1PrometheusSpecThanosObjectStorageConfig
    objectStorageConfigFile?: str
    readyTimeout?: str
    resources?: MonitoringCoreosComV1PrometheusSpecThanosResources
    sha?: str
    tag?: str
    tracingConfig?: MonitoringCoreosComV1PrometheusSpecThanosTracingConfig
    tracingConfigFile?: str
    version?: str
    volumeMounts?: [MonitoringCoreosComV1PrometheusSpecThanosVolumeMountsItems0]

    check:
        _regex_match(str(blockSize), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if blockSize
        _regex_match(str(getConfigInterval), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if getConfigInterval
        _regex_match(str(getConfigTimeout), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if getConfigTimeout
        _regex_match(str(readyTimeout), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if readyTimeout

schema MonitoringCoreosComV1PrometheusSpecThanosAdditionalArgsItems0:
    r"""
    Argument as part of the AdditionalArgs list.

    Attributes
    ----------
    name : str, default is Undefined, required
        name of the argument, e.g. "scrape.discovery-reload-interval".
    value : str, default is Undefined, optional
        value defines the argument value, e.g. 30s. Can be empty for name-only arguments (e.g. --storage.tsdb.no-lockfile)
    """
    name: str

    value?: str

    check:
        len(name) >= 1

schema MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfig:
    r"""
    grpcServerTlsConfig defines the TLS parameters for the gRPC server providing the StoreAPI.

    Note: Currently only the `caFile`, `certFile`, and `keyFile` fields are supported.

    Attributes
    ----------
    ca : MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfigCa, default is Undefined, optional
        ca
    caFile : str, default is Undefined, optional
        caFile defines the path to the CA cert in the Prometheus container to use for the targets.
    cert : MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfigCert, default is Undefined, optional
        cert
    certFile : str, default is Undefined, optional
        certFile defines the path to the client cert file in the Prometheus container for the targets.
    insecureSkipVerify : bool, default is Undefined, optional
        insecureSkipVerify defines how to disable target certificate validation.
    keyFile : str, default is Undefined, optional
        keyFile defines the path to the client key file in the Prometheus container for the targets.
    keySecret : MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfigKeySecret, default is Undefined, optional
        key secret
    maxVersion : str, default is Undefined, optional
        maxVersion defines the maximum acceptable TLS version.

        It requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.
    minVersion : str, default is Undefined, optional
        minVersion defines the minimum acceptable TLS version.

        It requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.
    serverName : str, default is Undefined, optional
        serverName is used to verify the hostname for the targets.
    """
    ca?: MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfigCa
    caFile?: str
    cert?: MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfigCert
    certFile?: str
    insecureSkipVerify?: bool
    keyFile?: str
    keySecret?: MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfigKeySecret
    maxVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    minVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    serverName?: str

schema MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfigCa:
    r"""
    ca defines the Certificate authority used when verifying server certificates.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfigCaConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfigCaSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfigCaConfigMap
    secret?: MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfigCaSecret

schema MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfigCaConfigMap:
    r"""
    configMap defines the ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfigCaSecret:
    r"""
    secret defines the Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfigCert:
    r"""
    cert defines the Client certificate to present when doing client-authentication.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfigCertConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfigCertSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfigCertConfigMap
    secret?: MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfigCertSecret

schema MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfigCertConfigMap:
    r"""
    configMap defines the ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfigCertSecret:
    r"""
    secret defines the Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecThanosGrpcServerTLSConfigKeySecret:
    r"""
    keySecret defines the Secret containing the client key file for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecThanosObjectStorageConfig:
    r"""
    objectStorageConfig defines the Thanos sidecar's configuration to upload TSDB blocks to object storage.

    More info: https://thanos.io/tip/thanos/storage.md/

    objectStorageConfigFile takes precedence over this field.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecThanosResources:
    r"""
    resources defines the resources requests and limits of the Thanos sidecar.

    Attributes
    ----------
    claims : [MonitoringCoreosComV1PrometheusSpecThanosResourcesClaimsItems0], default is Undefined, optional
        Claims lists the names of resources, defined in spec.resourceClaims,
        that are used by this container.

        This field depends on the
        DynamicResourceAllocation feature gate.

        This field is immutable. It can only be set for containers.
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """
    claims?: [MonitoringCoreosComV1PrometheusSpecThanosResourcesClaimsItems0]
    limits?: {str:int | str}
    requests?: {str:int | str}

    check:
        all _, limits in limits {_regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits} if limits
        all _, requests in requests {_regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests} if requests

schema MonitoringCoreosComV1PrometheusSpecThanosResourcesClaimsItems0:
    r"""
    ResourceClaim references one entry in PodSpec.ResourceClaims.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name must match the name of one entry in pod.spec.resourceClaims of
        the Pod where this field is used. It makes that resource available
        inside a container.
    request : str, default is Undefined, optional
        Request is the name chosen for a request in the referenced claim.
        If empty, everything from the claim is made available, otherwise
        only the result of this request.
    """
    name: str

    request?: str

schema MonitoringCoreosComV1PrometheusSpecThanosTracingConfig:
    r"""
    tracingConfig defines the tracing configuration for the Thanos sidecar.

    `tracingConfigFile` takes precedence over this field.

    More info: https://thanos.io/tip/thanos/tracing.md/

    This is an *experimental feature*, it may change in any upcoming release
    in a breaking way.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecThanosVolumeMountsItems0:
    r"""
    VolumeMount describes a mounting of a Volume within a container.

    Attributes
    ----------
    mountPath : str, default is Undefined, required
        Path within the container at which the volume should be mounted.  Must
        not contain ':'.
    mountPropagation : str, default is Undefined, optional
        mountPropagation determines how mounts are propagated from the host
        to container and the other way around.
        When not set, MountPropagationNone is used.
        This field is beta in 1.10.
        When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
        (which defaults to None).
    name : str, default is Undefined, required
        This must match the Name of a Volume.
    readOnly : bool, default is Undefined, optional
        Mounted read-only if true, read-write otherwise (false or unspecified).
        Defaults to false.
    recursiveReadOnly : str, default is Undefined, optional
        RecursiveReadOnly specifies whether read-only mounts should be handled
        recursively.

        If ReadOnly is false, this field has no meaning and must be unspecified.

        If ReadOnly is true, and this field is set to Disabled, the mount is not made
        recursively read-only.  If this field is set to IfPossible, the mount is made
        recursively read-only, if it is supported by the container runtime.  If this
        field is set to Enabled, the mount is made recursively read-only if it is
        supported by the container runtime, otherwise the pod will not be started and
        an error will be generated to indicate the reason.

        If this field is set to IfPossible or Enabled, MountPropagation must be set to
        None (or be unspecified, which defaults to None).

        If this field is not specified, it is treated as an equivalent of Disabled.
    subPath : str, default is Undefined, optional
        Path within the volume from which the container's volume should be mounted.
        Defaults to "" (volume's root).
    subPathExpr : str, default is Undefined, optional
        Expanded path within the volume from which the container's volume should be mounted.
        Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
        Defaults to "" (volume's root).
        SubPathExpr and SubPath are mutually exclusive.
    """
    mountPath: str

    mountPropagation?: str
    name: str

    readOnly?: bool
    recursiveReadOnly?: str
    subPath?: str
    subPathExpr?: str

schema MonitoringCoreosComV1PrometheusSpecTolerationsItems0:
    r"""
    The pod this Toleration is attached to tolerates any taint that matches
    the triple <key,value,effect> using the matching operator <operator>.

    Attributes
    ----------
    effect : str, default is Undefined, optional
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    key : str, default is Undefined, optional
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    operator : str, default is Undefined, optional
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
    tolerationSeconds : int, default is Undefined, optional
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
    value : str, default is Undefined, optional
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
    """
    effect?: str
    key?: str
    operator?: str
    tolerationSeconds?: int
    value?: str

schema MonitoringCoreosComV1PrometheusSpecTopologySpreadConstraintsItems0:
    r"""
    monitoring coreos com v1 prometheus spec topology spread constraints items0

    Attributes
    ----------
    additionalLabelSelectors : str, default is Undefined, optional
        additionalLabelSelectors Defines what Prometheus Operator managed labels should be added to labelSelector on the topologySpreadConstraint.
    labelSelector : MonitoringCoreosComV1PrometheusSpecTopologySpreadConstraintsItems0LabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select the pods over which
        spreading will be calculated. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are ANDed with labelSelector
        to select the group of existing pods over which spreading will be calculated
        for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
        MatchLabelKeys cannot be set when LabelSelector isn't set.
        Keys that don't exist in the incoming pod labels will
        be ignored. A null or empty list means only match against labelSelector.

        This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
    maxSkew : int, default is Undefined, required
        MaxSkew describes the degree to which pods may be unevenly distributed.
        When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
        between the number of matching pods in the target topology and the global minimum.
        The global minimum is the minimum number of matching pods in an eligible domain
        or zero if the number of eligible domains is less than MinDomains.
        For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
        labelSelector spread as 2/2/1:
        In this case, the global minimum is 1.
        | zone1 | zone2 | zone3 |
        |  P P  |  P P  |   P   |
        - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
        scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
        violate MaxSkew(1).
        - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
        When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
        to topologies that satisfy it.
        It's a required field. Default value is 1 and 0 is not allowed.
    minDomains : int, default is Undefined, optional
        MinDomains indicates a minimum number of eligible domains.
        When the number of eligible domains with matching topology keys is less than minDomains,
        Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
        And when the number of eligible domains with matching topology keys equals or greater than minDomains,
        this value has no effect on scheduling.
        As a result, when the number of eligible domains is less than minDomains,
        scheduler won't schedule more than maxSkew Pods to those domains.
        If value is nil, the constraint behaves as if MinDomains is equal to 1.
        Valid values are integers greater than 0.
        When value is not nil, WhenUnsatisfiable must be DoNotSchedule.

        For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
        labelSelector spread as 2/2/2:
        | zone1 | zone2 | zone3 |
        |  P P  |  P P  |  P P  |
        The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
        In this situation, new pod with the same labelSelector cannot be scheduled,
        because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
        it will violate MaxSkew.
    nodeAffinityPolicy : str, default is Undefined, optional
        NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
        when calculating pod topology spread skew. Options are:
        - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
        - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.

        If this value is nil, the behavior is equivalent to the Honor policy.
    nodeTaintsPolicy : str, default is Undefined, optional
        NodeTaintsPolicy indicates how we will treat node taints when calculating
        pod topology spread skew. Options are:
        - Honor: nodes without taints, along with tainted nodes for which the incoming pod
        has a toleration, are included.
        - Ignore: node taints are ignored. All nodes are included.

        If this value is nil, the behavior is equivalent to the Ignore policy.
    topologyKey : str, default is Undefined, required
        TopologyKey is the key of node labels. Nodes that have a label with this key
        and identical values are considered to be in the same topology.
        We consider each <key, value> as a "bucket", and try to put balanced number
        of pods into each bucket.
        We define a domain as a particular instance of a topology.
        Also, we define an eligible domain as a domain whose nodes meet the requirements of
        nodeAffinityPolicy and nodeTaintsPolicy.
        e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
        And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
        It's a required field.
    whenUnsatisfiable : str, default is Undefined, required
        WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
        the spread constraint.
        - DoNotSchedule (default) tells the scheduler not to schedule it.
        - ScheduleAnyway tells the scheduler to schedule the pod in any location,
          but giving higher precedence to topologies that would help reduce the
          skew.
        A constraint is considered "Unsatisfiable" for an incoming pod
        if and only if every possible node assignment for that pod would violate
        "MaxSkew" on some topology.
        For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
        labelSelector spread as 3/1/1:
        | zone1 | zone2 | zone3 |
        | P P P |   P   |   P   |
        If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
        to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
        MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
        won't make it *more* imbalanced.
        It's a required field.
    """
    additionalLabelSelectors?: "OnResource" | "OnShard"
    labelSelector?: MonitoringCoreosComV1PrometheusSpecTopologySpreadConstraintsItems0LabelSelector
    matchLabelKeys?: [str]
    maxSkew: int

    minDomains?: int
    nodeAffinityPolicy?: str
    nodeTaintsPolicy?: str
    topologyKey: str

    whenUnsatisfiable: str

schema MonitoringCoreosComV1PrometheusSpecTopologySpreadConstraintsItems0LabelSelector:
    r"""
    LabelSelector is used to find matching pods.
    Pods that match this label selector are counted to determine the number of pods
    in their corresponding topology domain.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecTopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecTopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecTopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecTracingConfig:
    r"""
    tracingConfig defines tracing in Prometheus.

    This is an *experimental feature*, it may change in any upcoming release
    in a breaking way.

    Attributes
    ----------
    clientType : str, default is Undefined, optional
        clientType defines the client used to export the traces. Supported values are `http` or `grpc`.
    compression : str, default is Undefined, optional
        compression key for supported compression types. The only supported value is `gzip`.
    endpoint : str, default is Undefined, required
        endpoint to send the traces to. Should be provided in format <host>:<port>.
    headers : {str:str}, default is Undefined, optional
        headers defines the key-value pairs to be used as headers associated with gRPC or HTTP requests.
    insecure : bool, default is Undefined, optional
        insecure if disabled, the client will use a secure connection.
    samplingFraction : int | str, default is Undefined, optional
        samplingFraction defines the probability a given trace will be sampled. Must be a float from 0 through 1.
    timeout : str, default is Undefined, optional
        timeout defines the maximum time the exporter will wait for each batch export.
    tlsConfig : MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfig, default is Undefined, optional
        tls config
    """
    clientType?: "http" | "grpc"
    compression?: "gzip"
    endpoint: str

    headers?: {str:str}
    insecure?: bool
    samplingFraction?: int | str
    timeout?: str
    tlsConfig?: MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfig

    check:
        len(endpoint) >= 1
        _regex_match(str(samplingFraction), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if samplingFraction
        _regex_match(str(timeout), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if timeout

schema MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfig:
    r"""
    tlsConfig to use when sending traces.

    Attributes
    ----------
    ca : MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfigCa, default is Undefined, optional
        ca
    caFile : str, default is Undefined, optional
        caFile defines the path to the CA cert in the Prometheus container to use for the targets.
    cert : MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfigCert, default is Undefined, optional
        cert
    certFile : str, default is Undefined, optional
        certFile defines the path to the client cert file in the Prometheus container for the targets.
    insecureSkipVerify : bool, default is Undefined, optional
        insecureSkipVerify defines how to disable target certificate validation.
    keyFile : str, default is Undefined, optional
        keyFile defines the path to the client key file in the Prometheus container for the targets.
    keySecret : MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfigKeySecret, default is Undefined, optional
        key secret
    maxVersion : str, default is Undefined, optional
        maxVersion defines the maximum acceptable TLS version.

        It requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.
    minVersion : str, default is Undefined, optional
        minVersion defines the minimum acceptable TLS version.

        It requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.
    serverName : str, default is Undefined, optional
        serverName is used to verify the hostname for the targets.
    """
    ca?: MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfigCa
    caFile?: str
    cert?: MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfigCert
    certFile?: str
    insecureSkipVerify?: bool
    keyFile?: str
    keySecret?: MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfigKeySecret
    maxVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    minVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    serverName?: str

schema MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfigCa:
    r"""
    ca defines the Certificate authority used when verifying server certificates.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfigCaConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfigCaSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfigCaConfigMap
    secret?: MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfigCaSecret

schema MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfigCaConfigMap:
    r"""
    configMap defines the ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfigCaSecret:
    r"""
    secret defines the Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfigCert:
    r"""
    cert defines the Client certificate to present when doing client-authentication.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfigCertConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfigCertSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfigCertConfigMap
    secret?: MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfigCertSecret

schema MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfigCertConfigMap:
    r"""
    configMap defines the ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfigCertSecret:
    r"""
    secret defines the Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecTracingConfigTLSConfigKeySecret:
    r"""
    keySecret defines the Secret containing the client key file for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecTsdb:
    r"""
    tsdb defines the runtime reloadable configuration of the timeseries database(TSDB).
    It requires Prometheus >= v2.39.0 or PrometheusAgent >= v2.54.0.

    Attributes
    ----------
    outOfOrderTimeWindow : str, default is Undefined, optional
        outOfOrderTimeWindow defines how old an out-of-order/out-of-bounds sample can be with
        respect to the TSDB max time.

        An out-of-order/out-of-bounds sample is ingested into the TSDB as long as
        the timestamp of the sample is >= (TSDB.MaxTime - outOfOrderTimeWindow).

        This is an *experimental feature*, it may change in any upcoming release
        in a breaking way.

        It requires Prometheus >= v2.39.0 or PrometheusAgent >= v2.54.0.
    """
    outOfOrderTimeWindow?: str

    check:
        _regex_match(str(outOfOrderTimeWindow), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if outOfOrderTimeWindow

schema MonitoringCoreosComV1PrometheusSpecVolumeMountsItems0:
    r"""
    VolumeMount describes a mounting of a Volume within a container.

    Attributes
    ----------
    mountPath : str, default is Undefined, required
        Path within the container at which the volume should be mounted.  Must
        not contain ':'.
    mountPropagation : str, default is Undefined, optional
        mountPropagation determines how mounts are propagated from the host
        to container and the other way around.
        When not set, MountPropagationNone is used.
        This field is beta in 1.10.
        When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
        (which defaults to None).
    name : str, default is Undefined, required
        This must match the Name of a Volume.
    readOnly : bool, default is Undefined, optional
        Mounted read-only if true, read-write otherwise (false or unspecified).
        Defaults to false.
    recursiveReadOnly : str, default is Undefined, optional
        RecursiveReadOnly specifies whether read-only mounts should be handled
        recursively.

        If ReadOnly is false, this field has no meaning and must be unspecified.

        If ReadOnly is true, and this field is set to Disabled, the mount is not made
        recursively read-only.  If this field is set to IfPossible, the mount is made
        recursively read-only, if it is supported by the container runtime.  If this
        field is set to Enabled, the mount is made recursively read-only if it is
        supported by the container runtime, otherwise the pod will not be started and
        an error will be generated to indicate the reason.

        If this field is set to IfPossible or Enabled, MountPropagation must be set to
        None (or be unspecified, which defaults to None).

        If this field is not specified, it is treated as an equivalent of Disabled.
    subPath : str, default is Undefined, optional
        Path within the volume from which the container's volume should be mounted.
        Defaults to "" (volume's root).
    subPathExpr : str, default is Undefined, optional
        Expanded path within the volume from which the container's volume should be mounted.
        Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
        Defaults to "" (volume's root).
        SubPathExpr and SubPath are mutually exclusive.
    """
    mountPath: str

    mountPropagation?: str
    name: str

    readOnly?: bool
    recursiveReadOnly?: str
    subPath?: str
    subPathExpr?: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0:
    r"""
    Volume represents a named volume in a pod that may be accessed by any container in the pod.

    Attributes
    ----------
    awsElasticBlockStore : MonitoringCoreosComV1PrometheusSpecVolumesItems0AwsElasticBlockStore, default is Undefined, optional
        aws elastic block store
    azureDisk : MonitoringCoreosComV1PrometheusSpecVolumesItems0AzureDisk, default is Undefined, optional
        azure disk
    azureFile : MonitoringCoreosComV1PrometheusSpecVolumesItems0AzureFile, default is Undefined, optional
        azure file
    cephfs : MonitoringCoreosComV1PrometheusSpecVolumesItems0Cephfs, default is Undefined, optional
        cephfs
    cinder : MonitoringCoreosComV1PrometheusSpecVolumesItems0Cinder, default is Undefined, optional
        cinder
    configMap : MonitoringCoreosComV1PrometheusSpecVolumesItems0ConfigMap, default is Undefined, optional
        config map
    csi : MonitoringCoreosComV1PrometheusSpecVolumesItems0Csi, default is Undefined, optional
        csi
    downwardAPI : MonitoringCoreosComV1PrometheusSpecVolumesItems0DownwardAPI, default is Undefined, optional
        downward API
    emptyDir : MonitoringCoreosComV1PrometheusSpecVolumesItems0EmptyDir, default is Undefined, optional
        empty dir
    ephemeral : MonitoringCoreosComV1PrometheusSpecVolumesItems0Ephemeral, default is Undefined, optional
        ephemeral
    fc : MonitoringCoreosComV1PrometheusSpecVolumesItems0Fc, default is Undefined, optional
        fc
    flexVolume : MonitoringCoreosComV1PrometheusSpecVolumesItems0FlexVolume, default is Undefined, optional
        flex volume
    flocker : MonitoringCoreosComV1PrometheusSpecVolumesItems0Flocker, default is Undefined, optional
        flocker
    gcePersistentDisk : MonitoringCoreosComV1PrometheusSpecVolumesItems0GcePersistentDisk, default is Undefined, optional
        gce persistent disk
    gitRepo : MonitoringCoreosComV1PrometheusSpecVolumesItems0GitRepo, default is Undefined, optional
        git repo
    glusterfs : MonitoringCoreosComV1PrometheusSpecVolumesItems0Glusterfs, default is Undefined, optional
        glusterfs
    hostPath : MonitoringCoreosComV1PrometheusSpecVolumesItems0HostPath, default is Undefined, optional
        host path
    image : MonitoringCoreosComV1PrometheusSpecVolumesItems0Image, default is Undefined, optional
        image
    iscsi : MonitoringCoreosComV1PrometheusSpecVolumesItems0Iscsi, default is Undefined, optional
        iscsi
    name : str, default is Undefined, required
        name of the volume.
        Must be a DNS_LABEL and unique within the pod.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    nfs : MonitoringCoreosComV1PrometheusSpecVolumesItems0Nfs, default is Undefined, optional
        nfs
    persistentVolumeClaim : MonitoringCoreosComV1PrometheusSpecVolumesItems0PersistentVolumeClaim, default is Undefined, optional
        persistent volume claim
    photonPersistentDisk : MonitoringCoreosComV1PrometheusSpecVolumesItems0PhotonPersistentDisk, default is Undefined, optional
        photon persistent disk
    portworxVolume : MonitoringCoreosComV1PrometheusSpecVolumesItems0PortworxVolume, default is Undefined, optional
        portworx volume
    projected : MonitoringCoreosComV1PrometheusSpecVolumesItems0Projected, default is Undefined, optional
        projected
    quobyte : MonitoringCoreosComV1PrometheusSpecVolumesItems0Quobyte, default is Undefined, optional
        quobyte
    rbd : MonitoringCoreosComV1PrometheusSpecVolumesItems0Rbd, default is Undefined, optional
        rbd
    scaleIO : MonitoringCoreosComV1PrometheusSpecVolumesItems0ScaleIO, default is Undefined, optional
        scale i o
    secret : MonitoringCoreosComV1PrometheusSpecVolumesItems0Secret, default is Undefined, optional
        secret
    storageos : MonitoringCoreosComV1PrometheusSpecVolumesItems0Storageos, default is Undefined, optional
        storageos
    vsphereVolume : MonitoringCoreosComV1PrometheusSpecVolumesItems0VsphereVolume, default is Undefined, optional
        vsphere volume
    """
    awsElasticBlockStore?: MonitoringCoreosComV1PrometheusSpecVolumesItems0AwsElasticBlockStore
    azureDisk?: MonitoringCoreosComV1PrometheusSpecVolumesItems0AzureDisk
    azureFile?: MonitoringCoreosComV1PrometheusSpecVolumesItems0AzureFile
    cephfs?: MonitoringCoreosComV1PrometheusSpecVolumesItems0Cephfs
    cinder?: MonitoringCoreosComV1PrometheusSpecVolumesItems0Cinder
    configMap?: MonitoringCoreosComV1PrometheusSpecVolumesItems0ConfigMap
    csi?: MonitoringCoreosComV1PrometheusSpecVolumesItems0Csi
    downwardAPI?: MonitoringCoreosComV1PrometheusSpecVolumesItems0DownwardAPI
    emptyDir?: MonitoringCoreosComV1PrometheusSpecVolumesItems0EmptyDir
    ephemeral?: MonitoringCoreosComV1PrometheusSpecVolumesItems0Ephemeral
    fc?: MonitoringCoreosComV1PrometheusSpecVolumesItems0Fc
    flexVolume?: MonitoringCoreosComV1PrometheusSpecVolumesItems0FlexVolume
    flocker?: MonitoringCoreosComV1PrometheusSpecVolumesItems0Flocker
    gcePersistentDisk?: MonitoringCoreosComV1PrometheusSpecVolumesItems0GcePersistentDisk
    gitRepo?: MonitoringCoreosComV1PrometheusSpecVolumesItems0GitRepo
    glusterfs?: MonitoringCoreosComV1PrometheusSpecVolumesItems0Glusterfs
    hostPath?: MonitoringCoreosComV1PrometheusSpecVolumesItems0HostPath
    image?: MonitoringCoreosComV1PrometheusSpecVolumesItems0Image
    iscsi?: MonitoringCoreosComV1PrometheusSpecVolumesItems0Iscsi
    name: str

    nfs?: MonitoringCoreosComV1PrometheusSpecVolumesItems0Nfs
    persistentVolumeClaim?: MonitoringCoreosComV1PrometheusSpecVolumesItems0PersistentVolumeClaim
    photonPersistentDisk?: MonitoringCoreosComV1PrometheusSpecVolumesItems0PhotonPersistentDisk
    portworxVolume?: MonitoringCoreosComV1PrometheusSpecVolumesItems0PortworxVolume
    projected?: MonitoringCoreosComV1PrometheusSpecVolumesItems0Projected
    quobyte?: MonitoringCoreosComV1PrometheusSpecVolumesItems0Quobyte
    rbd?: MonitoringCoreosComV1PrometheusSpecVolumesItems0Rbd
    scaleIO?: MonitoringCoreosComV1PrometheusSpecVolumesItems0ScaleIO
    secret?: MonitoringCoreosComV1PrometheusSpecVolumesItems0Secret
    storageos?: MonitoringCoreosComV1PrometheusSpecVolumesItems0Storageos
    vsphereVolume?: MonitoringCoreosComV1PrometheusSpecVolumesItems0VsphereVolume

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0AwsElasticBlockStore:
    r"""
    awsElasticBlockStore represents an AWS Disk resource that is attached to a
    kubelet's host machine and then exposed to the pod.
    Deprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree
    awsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.
    More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore

    Attributes
    ----------
    fsType : str, default is Undefined, optional
        fsType is the filesystem type of the volume that you want to mount.
        Tip: Ensure that the filesystem type is supported by the host operating system.
        Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    partition : int, default is Undefined, optional
        partition is the partition in the volume that you want to mount.
        If omitted, the default is to mount by volume name.
        Examples: For volume /dev/sda1, you specify the partition as "1".
        Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
    readOnly : bool, default is Undefined, optional
        readOnly value true will force the readOnly setting in VolumeMounts.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    volumeID : str, default is Undefined, required
        volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
        More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    """
    fsType?: str
    partition?: int
    readOnly?: bool
    volumeID: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0AzureDisk:
    r"""
    azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
    Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type
    are redirected to the disk.csi.azure.com CSI driver.

    Attributes
    ----------
    cachingMode : str, default is Undefined, optional
        cachingMode is the Host Caching mode: None, Read Only, Read Write.
    diskName : str, default is Undefined, required
        diskName is the Name of the data disk in the blob storage
    diskURI : str, default is Undefined, required
        diskURI is the URI of data disk in the blob storage
    fsType : str, default is "ext4", optional
        fsType is Filesystem type to mount.
        Must be a filesystem type supported by the host operating system.
        Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    kind : str, default is Undefined, optional
        kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
    readOnly : bool, default is Undefined, optional
        readOnly Defaults to false (read/write). ReadOnly here will force
        the ReadOnly setting in VolumeMounts.
    """
    cachingMode?: str
    diskName: str

    diskURI: str

    fsType?: str = "ext4"
    kind?: str
    readOnly?: bool = False

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0AzureFile:
    r"""
    azureFile represents an Azure File Service mount on the host and bind mount to the pod.
    Deprecated: AzureFile is deprecated. All operations for the in-tree azureFile type
    are redirected to the file.csi.azure.com CSI driver.

    Attributes
    ----------
    readOnly : bool, default is Undefined, optional
        readOnly defaults to false (read/write). ReadOnly here will force
        the ReadOnly setting in VolumeMounts.
    secretName : str, default is Undefined, required
        secretName is the  name of secret that contains Azure Storage Account Name and Key
    shareName : str, default is Undefined, required
        shareName is the azure share Name
    """
    readOnly?: bool
    secretName: str

    shareName: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0Cephfs:
    r"""
    cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.
    Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.

    Attributes
    ----------
    monitors : [str], default is Undefined, required
        monitors is Required: Monitors is a collection of Ceph monitors
        More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    path : str, default is Undefined, optional
        path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
    readOnly : bool, default is Undefined, optional
        readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
        the ReadOnly setting in VolumeMounts.
        More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    secretFile : str, default is Undefined, optional
        secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
        More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    secretRef : MonitoringCoreosComV1PrometheusSpecVolumesItems0CephfsSecretRef, default is Undefined, optional
        secret ref
    user : str, default is Undefined, optional
        user is optional: User is the rados user name, default is admin
        More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    """
    monitors: [str]

    path?: str
    readOnly?: bool
    secretFile?: str
    secretRef?: MonitoringCoreosComV1PrometheusSpecVolumesItems0CephfsSecretRef
    user?: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0CephfsSecretRef:
    r"""
    secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
    More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    name?: str = ""

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0Cinder:
    r"""
    cinder represents a cinder volume attached and mounted on kubelets host machine.
    Deprecated: Cinder is deprecated. All operations for the in-tree cinder type
    are redirected to the cinder.csi.openstack.org CSI driver.
    More info: https://examples.k8s.io/mysql-cinder-pd/README.md

    Attributes
    ----------
    fsType : str, default is Undefined, optional
        fsType is the filesystem type to mount.
        Must be a filesystem type supported by the host operating system.
        Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    readOnly : bool, default is Undefined, optional
        readOnly defaults to false (read/write). ReadOnly here will force
        the ReadOnly setting in VolumeMounts.
        More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    secretRef : MonitoringCoreosComV1PrometheusSpecVolumesItems0CinderSecretRef, default is Undefined, optional
        secret ref
    volumeID : str, default is Undefined, required
        volumeID used to identify the volume in cinder.
        More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    """
    fsType?: str
    readOnly?: bool
    secretRef?: MonitoringCoreosComV1PrometheusSpecVolumesItems0CinderSecretRef
    volumeID: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0CinderSecretRef:
    r"""
    secretRef is optional: points to a secret object containing parameters used to connect
    to OpenStack.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    name?: str = ""

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0ConfigMap:
    r"""
    configMap represents a configMap that should populate this volume

    Attributes
    ----------
    defaultMode : int, default is Undefined, optional
        defaultMode is optional: mode bits used to set permissions on created files by default.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        Defaults to 0644.
        Directories within the path are not affected by this setting.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    items : [MonitoringCoreosComV1PrometheusSpecVolumesItems0ConfigMapItemsItems0], default is Undefined, optional
        items if unspecified, each key-value pair in the Data field of the referenced
        ConfigMap will be projected into the volume as a file whose name is the
        key and content is the value. If specified, the listed keys will be
        projected into the specified paths, and unlisted keys will not be
        present. If a key is specified which is not present in the ConfigMap,
        the volume setup will error unless it is marked optional. Paths must be
        relative and may not contain the '..' path or start with '..'.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        optional specify whether the ConfigMap or its keys must be defined
    """
    defaultMode?: int
    items?: [MonitoringCoreosComV1PrometheusSpecVolumesItems0ConfigMapItemsItems0]
    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0ConfigMapItemsItems0:
    r"""
    Maps a string key to a path within a volume.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the key to project.
    mode : int, default is Undefined, optional
        mode is Optional: mode bits used to set permissions on this file.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        If not specified, the volume defaultMode will be used.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    path : str, default is Undefined, required
        path is the relative path of the file to map the key to.
        May not be an absolute path.
        May not contain the path element '..'.
        May not start with the string '..'.
    """
    key: str

    mode?: int
    path: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0Csi:
    r"""
    csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.

    Attributes
    ----------
    driver : str, default is Undefined, required
        driver is the name of the CSI driver that handles this volume.
        Consult with your admin for the correct name as registered in the cluster.
    fsType : str, default is Undefined, optional
        fsType to mount. Ex. "ext4", "xfs", "ntfs".
        If not provided, the empty value is passed to the associated CSI driver
        which will determine the default filesystem to apply.
    nodePublishSecretRef : MonitoringCoreosComV1PrometheusSpecVolumesItems0CsiNodePublishSecretRef, default is Undefined, optional
        node publish secret ref
    readOnly : bool, default is Undefined, optional
        readOnly specifies a read-only configuration for the volume.
        Defaults to false (read/write).
    volumeAttributes : {str:str}, default is Undefined, optional
        volumeAttributes stores driver-specific properties that are passed to the CSI
        driver. Consult your driver's documentation for supported values.
    """
    driver: str

    fsType?: str
    nodePublishSecretRef?: MonitoringCoreosComV1PrometheusSpecVolumesItems0CsiNodePublishSecretRef
    readOnly?: bool
    volumeAttributes?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0CsiNodePublishSecretRef:
    r"""
    nodePublishSecretRef is a reference to the secret object containing
    sensitive information to pass to the CSI driver to complete the CSI
    NodePublishVolume and NodeUnpublishVolume calls.
    This field is optional, and  may be empty if no secret is required. If the
    secret object contains more than one secret, all secret references are passed.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    name?: str = ""

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0DownwardAPI:
    r"""
    downwardAPI represents downward API about the pod that should populate this volume

    Attributes
    ----------
    defaultMode : int, default is Undefined, optional
        Optional: mode bits to use on created files by default. Must be a
        Optional: mode bits used to set permissions on created files by default.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        Defaults to 0644.
        Directories within the path are not affected by this setting.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    items : [MonitoringCoreosComV1PrometheusSpecVolumesItems0DownwardAPIItemsItems0], default is Undefined, optional
        Items is a list of downward API volume file
    """
    defaultMode?: int
    items?: [MonitoringCoreosComV1PrometheusSpecVolumesItems0DownwardAPIItemsItems0]

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0DownwardAPIItemsItems0:
    r"""
    DownwardAPIVolumeFile represents information to create the file containing the pod field

    Attributes
    ----------
    fieldRef : MonitoringCoreosComV1PrometheusSpecVolumesItems0DownwardAPIItemsItems0FieldRef, default is Undefined, optional
        field ref
    mode : int, default is Undefined, optional
        Optional: mode bits used to set permissions on this file, must be an octal value
        between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        If not specified, the volume defaultMode will be used.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    path : str, default is Undefined, required
        Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
    resourceFieldRef : MonitoringCoreosComV1PrometheusSpecVolumesItems0DownwardAPIItemsItems0ResourceFieldRef, default is Undefined, optional
        resource field ref
    """
    fieldRef?: MonitoringCoreosComV1PrometheusSpecVolumesItems0DownwardAPIItemsItems0FieldRef
    mode?: int
    path: str

    resourceFieldRef?: MonitoringCoreosComV1PrometheusSpecVolumesItems0DownwardAPIItemsItems0ResourceFieldRef

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0DownwardAPIItemsItems0FieldRef:
    r"""
    Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, default is Undefined, required
        Path of the field to select in the specified API version.
    """
    apiVersion?: str
    fieldPath: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0DownwardAPIItemsItems0ResourceFieldRef:
    r"""
    Selects a resource of the container: only resources limits and requests
    (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Container name: required for volumes, optional for env vars
    divisor : int | str, default is Undefined, optional
        Specifies the output format of the exposed resources, defaults to "1"
    resource : str, default is Undefined, required
        Required: resource to select
    """
    containerName?: str
    divisor?: int | str
    resource: str

    check:
        _regex_match(str(divisor), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if divisor

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0EmptyDir:
    r"""
    emptyDir represents a temporary directory that shares a pod's lifetime.
    More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir

    Attributes
    ----------
    medium : str, default is Undefined, optional
        medium represents what type of storage medium should back this directory.
        The default is "" which means to use the node's default medium.
        Must be an empty string (default) or Memory.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    sizeLimit : int | str, default is Undefined, optional
        sizeLimit is the total amount of local storage required for this EmptyDir volume.
        The size limit is also applicable for memory medium.
        The maximum usage on memory medium EmptyDir would be the minimum value between
        the SizeLimit specified here and the sum of memory limits of all containers in a pod.
        The default is nil which means that the limit is undefined.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    """
    medium?: str
    sizeLimit?: int | str

    check:
        _regex_match(str(sizeLimit), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if sizeLimit

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0Ephemeral:
    r"""
    ephemeral represents a volume that is handled by a cluster storage driver.
    The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
    and deleted when the pod is removed.

    Use this if:
    a) the volume is only needed while the pod runs,
    b) features of normal volumes like restoring from snapshot or capacity
       tracking are needed,
    c) the storage driver is specified through a storage class, and
    d) the storage driver supports dynamic volume provisioning through
       a PersistentVolumeClaim (see EphemeralVolumeSource for more
       information on the connection between this volume type
       and PersistentVolumeClaim).

    Use PersistentVolumeClaim or one of the vendor-specific
    APIs for volumes that persist for longer than the lifecycle
    of an individual pod.

    Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
    be used that way - see the documentation of the driver for
    more information.

    A pod can use both types of ephemeral volumes and
    persistent volumes at the same time.

    Attributes
    ----------
    volumeClaimTemplate : MonitoringCoreosComV1PrometheusSpecVolumesItems0EphemeralVolumeClaimTemplate, default is Undefined, optional
        volume claim template
    """
    volumeClaimTemplate?: MonitoringCoreosComV1PrometheusSpecVolumesItems0EphemeralVolumeClaimTemplate

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0EphemeralVolumeClaimTemplate:
    r"""
    Will be used to create a stand-alone PVC to provision the volume.
    The pod in which this EphemeralVolumeSource is embedded will be the
    owner of the PVC, i.e. the PVC will be deleted together with the
    pod.  The name of the PVC will be `<pod name>-<volume name>` where
    `<volume name>` is the name from the `PodSpec.Volumes` array
    entry. Pod validation will reject the pod if the concatenated name
    is not valid for a PVC (for example, too long).

    An existing PVC with that name that is not owned by the pod
    will *not* be used for the pod to avoid using an unrelated
    volume by mistake. Starting the pod is then blocked until
    the unrelated PVC is removed. If such a pre-created PVC is
    meant to be used by the pod, the PVC has to updated with an
    owner reference to the pod once the pod exists. Normally
    this should not be necessary, but it may be useful when
    manually reconstructing a broken cluster.

    This field is read-only and no changes will be made by Kubernetes
    to the PVC after it has been created.

    Required, must not be nil.

    Attributes
    ----------
    metadata : any, default is Undefined, optional
        May contain labels and annotations that will be copied into the PVC
        when creating it. No other fields are allowed and will be rejected during
        validation.
    spec : MonitoringCoreosComV1PrometheusSpecVolumesItems0EphemeralVolumeClaimTemplateSpec, default is Undefined, required
        spec
    """
    metadata?: any
    spec: MonitoringCoreosComV1PrometheusSpecVolumesItems0EphemeralVolumeClaimTemplateSpec

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0EphemeralVolumeClaimTemplateSpec:
    r"""
    The specification for the PersistentVolumeClaim. The entire content is
    copied unchanged into the PVC that gets created from this
    template. The same fields as in a PersistentVolumeClaim
    are also valid here.

    Attributes
    ----------
    accessModes : [str], default is Undefined, optional
        accessModes contains the desired access modes the volume should have.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    dataSource : MonitoringCoreosComV1PrometheusSpecVolumesItems0EphemeralVolumeClaimTemplateSpecDataSource, default is Undefined, optional
        data source
    dataSourceRef : MonitoringCoreosComV1PrometheusSpecVolumesItems0EphemeralVolumeClaimTemplateSpecDataSourceRef, default is Undefined, optional
        data source ref
    resources : MonitoringCoreosComV1PrometheusSpecVolumesItems0EphemeralVolumeClaimTemplateSpecResources, default is Undefined, optional
        resources
    selector : MonitoringCoreosComV1PrometheusSpecVolumesItems0EphemeralVolumeClaimTemplateSpecSelector, default is Undefined, optional
        selector
    storageClassName : str, default is Undefined, optional
        storageClassName is the name of the StorageClass required by the claim.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    volumeAttributesClassName : str, default is Undefined, optional
        volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
        If specified, the CSI driver will create or update the volume with the attributes defined
        in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
        it can be changed after the claim is created. An empty string or nil value indicates that no
        VolumeAttributesClass will be applied to the claim. If the claim enters an Infeasible error state,
        this field can be reset to its previous value (including nil) to cancel the modification.
        If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
        set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
        exists.
        More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
    volumeMode : str, default is Undefined, optional
        volumeMode defines what type of volume is required by the claim.
        Value of Filesystem is implied when not included in claim spec.
    volumeName : str, default is Undefined, optional
        volumeName is the binding reference to the PersistentVolume backing this claim.
    """
    accessModes?: [str]
    dataSource?: MonitoringCoreosComV1PrometheusSpecVolumesItems0EphemeralVolumeClaimTemplateSpecDataSource
    dataSourceRef?: MonitoringCoreosComV1PrometheusSpecVolumesItems0EphemeralVolumeClaimTemplateSpecDataSourceRef
    resources?: MonitoringCoreosComV1PrometheusSpecVolumesItems0EphemeralVolumeClaimTemplateSpecResources
    selector?: MonitoringCoreosComV1PrometheusSpecVolumesItems0EphemeralVolumeClaimTemplateSpecSelector
    storageClassName?: str
    volumeAttributesClassName?: str
    volumeMode?: str
    volumeName?: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0EphemeralVolumeClaimTemplateSpecDataSource:
    r"""
    dataSource field can be used to specify either:
    * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
    * An existing PVC (PersistentVolumeClaim)
    If the provisioner or an external controller can support the specified data source,
    it will create a new volume based on the contents of the specified data source.
    When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
    and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
    If the namespace is specified, then dataSourceRef will not be copied to dataSource.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    """
    apiGroup?: str
    kind: str

    name: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0EphemeralVolumeClaimTemplateSpecDataSourceRef:
    r"""
    dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
    volume is desired. This may be any object from a non-empty API group (non
    core object) or a PersistentVolumeClaim object.
    When this field is specified, volume binding will only succeed if the type of
    the specified object matches some installed volume populator or dynamic
    provisioner.
    This field will replace the functionality of the dataSource field and as such
    if both fields are non-empty, they must have the same value. For backwards
    compatibility, when namespace isn't specified in dataSourceRef,
    both fields (dataSource and dataSourceRef) will be set to the same
    value automatically if one of them is empty and the other is non-empty.
    When namespace is specified in dataSourceRef,
    dataSource isn't set to the same value and must be empty.
    There are three important differences between dataSource and dataSourceRef:
    * While dataSource only allows two specific types of objects, dataSourceRef
      allows any non-core object, as well as PersistentVolumeClaim objects.
    * While dataSource ignores disallowed values (dropping them), dataSourceRef
      preserves all values, and generates an error if a disallowed value is
      specified.
    * While dataSource only allows local objects, dataSourceRef allows objects
      in any namespaces.
    (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
    (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    namespace : str, default is Undefined, optional
        Namespace is the namespace of resource being referenced
        Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
        (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
    """
    apiGroup?: str
    kind: str

    name: str

    namespace?: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0EphemeralVolumeClaimTemplateSpecResources:
    r"""
    resources represents the minimum resources the volume should have.
    If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
    that are lower than previous value but must still be higher than capacity recorded in the
    status field of the claim.
    More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources

    Attributes
    ----------
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """
    limits?: {str:int | str}
    requests?: {str:int | str}

    check:
        all _, limits in limits {_regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits} if limits
        all _, requests in requests {_regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests} if requests

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0EphemeralVolumeClaimTemplateSpecSelector:
    r"""
    selector is a label query over volumes to consider for binding.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecVolumesItems0EphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecVolumesItems0EphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0EphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0Fc:
    r"""
    fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.

    Attributes
    ----------
    fsType : str, default is Undefined, optional
        fsType is the filesystem type to mount.
        Must be a filesystem type supported by the host operating system.
        Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    lun : int, default is Undefined, optional
        lun is Optional: FC target lun number
    readOnly : bool, default is Undefined, optional
        readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
        the ReadOnly setting in VolumeMounts.
    targetWWNs : [str], default is Undefined, optional
        targetWWNs is Optional: FC target worldwide names (WWNs)
    wwids : [str], default is Undefined, optional
        wwids Optional: FC volume world wide identifiers (wwids)
        Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
    """
    fsType?: str
    lun?: int
    readOnly?: bool
    targetWWNs?: [str]
    wwids?: [str]

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0FlexVolume:
    r"""
    flexVolume represents a generic volume resource that is
    provisioned/attached using an exec based plugin.
    Deprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.

    Attributes
    ----------
    driver : str, default is Undefined, required
        driver is the name of the driver to use for this volume.
    fsType : str, default is Undefined, optional
        fsType is the filesystem type to mount.
        Must be a filesystem type supported by the host operating system.
        Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
    options : {str:str}, default is Undefined, optional
        options is Optional: this field holds extra command options if any.
    readOnly : bool, default is Undefined, optional
        readOnly is Optional: defaults to false (read/write). ReadOnly here will force
        the ReadOnly setting in VolumeMounts.
    secretRef : MonitoringCoreosComV1PrometheusSpecVolumesItems0FlexVolumeSecretRef, default is Undefined, optional
        secret ref
    """
    driver: str

    fsType?: str
    options?: {str:str}
    readOnly?: bool
    secretRef?: MonitoringCoreosComV1PrometheusSpecVolumesItems0FlexVolumeSecretRef

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0FlexVolumeSecretRef:
    r"""
    secretRef is Optional: secretRef is reference to the secret object containing
    sensitive information to pass to the plugin scripts. This may be
    empty if no secret object is specified. If the secret object
    contains more than one secret, all secrets are passed to the plugin
    scripts.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    name?: str = ""

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0Flocker:
    r"""
    flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.
    Deprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.

    Attributes
    ----------
    datasetName : str, default is Undefined, optional
        datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
        should be considered as deprecated
    datasetUUID : str, default is Undefined, optional
        datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
    """
    datasetName?: str
    datasetUUID?: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0GcePersistentDisk:
    r"""
    gcePersistentDisk represents a GCE Disk resource that is attached to a
    kubelet's host machine and then exposed to the pod.
    Deprecated: GCEPersistentDisk is deprecated. All operations for the in-tree
    gcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.
    More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk

    Attributes
    ----------
    fsType : str, default is Undefined, optional
        fsType is filesystem type of the volume that you want to mount.
        Tip: Ensure that the filesystem type is supported by the host operating system.
        Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    partition : int, default is Undefined, optional
        partition is the partition in the volume that you want to mount.
        If omitted, the default is to mount by volume name.
        Examples: For volume /dev/sda1, you specify the partition as "1".
        Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    pdName : str, default is Undefined, required
        pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    readOnly : bool, default is Undefined, optional
        readOnly here will force the ReadOnly setting in VolumeMounts.
        Defaults to false.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    """
    fsType?: str
    partition?: int
    pdName: str

    readOnly?: bool

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0GitRepo:
    r"""
    gitRepo represents a git repository at a particular revision.
    Deprecated: GitRepo is deprecated. To provision a container with a git repo, mount an
    EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
    into the Pod's container.

    Attributes
    ----------
    directory : str, default is Undefined, optional
        directory is the target directory name.
        Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
        git repository.  Otherwise, if specified, the volume will contain the git repository in
        the subdirectory with the given name.
    repository : str, default is Undefined, required
        repository is the URL
    revision : str, default is Undefined, optional
        revision is the commit hash for the specified revision.
    """
    directory?: str
    repository: str

    revision?: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0Glusterfs:
    r"""
    glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
    Deprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.

    Attributes
    ----------
    endpoints : str, default is Undefined, required
        endpoints is the endpoint name that details Glusterfs topology.
    path : str, default is Undefined, required
        path is the Glusterfs volume path.
        More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    readOnly : bool, default is Undefined, optional
        readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
        Defaults to false.
        More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    """
    endpoints: str

    path: str

    readOnly?: bool

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0HostPath:
    r"""
    hostPath represents a pre-existing file or directory on the host
    machine that is directly exposed to the container. This is generally
    used for system agents or other privileged things that are allowed
    to see the host machine. Most containers will NOT need this.
    More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath

    Attributes
    ----------
    path : str, default is Undefined, required
        path of the directory on the host.
        If the path is a symlink, it will follow the link to the real path.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    $type : str, default is Undefined, optional
        type for HostPath Volume
        Defaults to ""
        More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    """
    path: str

    $type?: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0Image:
    r"""
    image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.
    The volume is resolved at pod startup depending on which PullPolicy value is provided:

    - Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
    - Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
    - IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.

    The volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.
    A failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.
    The types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.
    The OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.
    The volume will be mounted read-only (ro) and non-executable files (noexec).
    Sub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath) before 1.33.
    The field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.

    Attributes
    ----------
    pullPolicy : str, default is Undefined, optional
        Policy for pulling OCI objects. Possible values are:
        Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
        Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
        IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
        Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
    reference : str, default is Undefined, optional
        Required: Image or artifact reference to be used.
        Behaves in the same way as pod.spec.containers[*].image.
        Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.
        More info: https://kubernetes.io/docs/concepts/containers/images
        This field is optional to allow higher level config management to default or override
        container images in workload controllers like Deployments and StatefulSets.
    """
    pullPolicy?: str
    reference?: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0Iscsi:
    r"""
    iscsi represents an ISCSI Disk resource that is attached to a
    kubelet's host machine and then exposed to the pod.
    More info: https://kubernetes.io/docs/concepts/storage/volumes/#iscsi

    Attributes
    ----------
    chapAuthDiscovery : bool, default is Undefined, optional
        chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
    chapAuthSession : bool, default is Undefined, optional
        chapAuthSession defines whether support iSCSI Session CHAP authentication
    fsType : str, default is Undefined, optional
        fsType is the filesystem type of the volume that you want to mount.
        Tip: Ensure that the filesystem type is supported by the host operating system.
        Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
    initiatorName : str, default is Undefined, optional
        initiatorName is the custom iSCSI Initiator Name.
        If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
        <target portal>:<volume name> will be created for the connection.
    iqn : str, default is Undefined, required
        iqn is the target iSCSI Qualified Name.
    iscsiInterface : str, default is "default", optional
        iscsiInterface is the interface Name that uses an iSCSI transport.
        Defaults to 'default' (tcp).
    lun : int, default is Undefined, required
        lun represents iSCSI Target Lun number.
    portals : [str], default is Undefined, optional
        portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
        is other than default (typically TCP ports 860 and 3260).
    readOnly : bool, default is Undefined, optional
        readOnly here will force the ReadOnly setting in VolumeMounts.
        Defaults to false.
    secretRef : MonitoringCoreosComV1PrometheusSpecVolumesItems0IscsiSecretRef, default is Undefined, optional
        secret ref
    targetPortal : str, default is Undefined, required
        targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
        is other than default (typically TCP ports 860 and 3260).
    """
    chapAuthDiscovery?: bool
    chapAuthSession?: bool
    fsType?: str
    initiatorName?: str
    iqn: str

    iscsiInterface?: str = "default"
    lun: int

    portals?: [str]
    readOnly?: bool
    secretRef?: MonitoringCoreosComV1PrometheusSpecVolumesItems0IscsiSecretRef
    targetPortal: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0IscsiSecretRef:
    r"""
    secretRef is the CHAP Secret for iSCSI target and initiator authentication

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    name?: str = ""

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0Nfs:
    r"""
    nfs represents an NFS mount on the host that shares a pod's lifetime
    More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs

    Attributes
    ----------
    path : str, default is Undefined, required
        path that is exported by the NFS server.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    readOnly : bool, default is Undefined, optional
        readOnly here will force the NFS export to be mounted with read-only permissions.
        Defaults to false.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    server : str, default is Undefined, required
        server is the hostname or IP address of the NFS server.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    """
    path: str

    readOnly?: bool
    server: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0PersistentVolumeClaim:
    r"""
    persistentVolumeClaimVolumeSource represents a reference to a
    PersistentVolumeClaim in the same namespace.
    More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims

    Attributes
    ----------
    claimName : str, default is Undefined, required
        claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    readOnly : bool, default is Undefined, optional
        readOnly Will force the ReadOnly setting in VolumeMounts.
        Default false.
    """
    claimName: str

    readOnly?: bool

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0PhotonPersistentDisk:
    r"""
    photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.
    Deprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.

    Attributes
    ----------
    fsType : str, default is Undefined, optional
        fsType is the filesystem type to mount.
        Must be a filesystem type supported by the host operating system.
        Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    pdID : str, default is Undefined, required
        pdID is the ID that identifies Photon Controller persistent disk
    """
    fsType?: str
    pdID: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0PortworxVolume:
    r"""
    portworxVolume represents a portworx volume attached and mounted on kubelets host machine.
    Deprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type
    are redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate
    is on.

    Attributes
    ----------
    fsType : str, default is Undefined, optional
        fSType represents the filesystem type to mount
        Must be a filesystem type supported by the host operating system.
        Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
    readOnly : bool, default is Undefined, optional
        readOnly defaults to false (read/write). ReadOnly here will force
        the ReadOnly setting in VolumeMounts.
    volumeID : str, default is Undefined, required
        volumeID uniquely identifies a Portworx volume
    """
    fsType?: str
    readOnly?: bool
    volumeID: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0Projected:
    r"""
    projected items for all in one resources secrets, configmaps, and downward API

    Attributes
    ----------
    defaultMode : int, default is Undefined, optional
        defaultMode are the mode bits used to set permissions on created files by default.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        Directories within the path are not affected by this setting.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    sources : [MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0], default is Undefined, optional
        sources is the list of volume projections. Each entry in this list
        handles one source.
    """
    defaultMode?: int
    sources?: [MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0]

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0:
    r"""
    Projection that may be projected along with other supported volume types.
    Exactly one of these fields must be set.

    Attributes
    ----------
    clusterTrustBundle : MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0ClusterTrustBundle, default is Undefined, optional
        cluster trust bundle
    configMap : MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0ConfigMap, default is Undefined, optional
        config map
    downwardAPI : MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0DownwardAPI, default is Undefined, optional
        downward API
    podCertificate : MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0PodCertificate, default is Undefined, optional
        pod certificate
    secret : MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0Secret, default is Undefined, optional
        secret
    serviceAccountToken : MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0ServiceAccountToken, default is Undefined, optional
        service account token
    """
    clusterTrustBundle?: MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0ClusterTrustBundle
    configMap?: MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0ConfigMap
    downwardAPI?: MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0DownwardAPI
    podCertificate?: MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0PodCertificate
    secret?: MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0Secret
    serviceAccountToken?: MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0ServiceAccountToken

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0ClusterTrustBundle:
    r"""
    ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
    of ClusterTrustBundle objects in an auto-updating file.

    Alpha, gated by the ClusterTrustBundleProjection feature gate.

    ClusterTrustBundle objects can either be selected by name, or by the
    combination of signer name and a label selector.

    Kubelet performs aggressive normalization of the PEM contents written
    into the pod filesystem.  Esoteric PEM features such as inter-block
    comments and block headers are stripped.  Certificates are deduplicated.
    The ordering of certificates within the file is arbitrary, and Kubelet
    may change the order over time.

    Attributes
    ----------
    labelSelector : MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelector, default is Undefined, optional
        label selector
    name : str, default is Undefined, optional
        Select a single ClusterTrustBundle by object name.  Mutually-exclusive
        with signerName and labelSelector.
    optional : bool, default is Undefined, optional
        If true, don't block pod startup if the referenced ClusterTrustBundle(s)
        aren't available.  If using name, then the named ClusterTrustBundle is
        allowed not to exist.  If using signerName, then the combination of
        signerName and labelSelector is allowed to match zero
        ClusterTrustBundles.
    path : str, default is Undefined, required
        Relative path from the volume root to write the bundle.
    signerName : str, default is Undefined, optional
        Select all ClusterTrustBundles that match this signer name.
        Mutually-exclusive with name.  The contents of all selected
        ClusterTrustBundles will be unified and deduplicated.
    """
    labelSelector?: MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelector
    name?: str
    optional?: bool
    path: str

    signerName?: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelector:
    r"""
    Select all ClusterTrustBundles that match this label selector.  Only has
    effect if signerName is set.  Mutually-exclusive with name.  If unset,
    interpreted as "match nothing".  If set but empty, interpreted as "match
    everything".

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0ConfigMap:
    r"""
    configMap information about the configMap data to project

    Attributes
    ----------
    items : [MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0ConfigMapItemsItems0], default is Undefined, optional
        items if unspecified, each key-value pair in the Data field of the referenced
        ConfigMap will be projected into the volume as a file whose name is the
        key and content is the value. If specified, the listed keys will be
        projected into the specified paths, and unlisted keys will not be
        present. If a key is specified which is not present in the ConfigMap,
        the volume setup will error unless it is marked optional. Paths must be
        relative and may not contain the '..' path or start with '..'.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        optional specify whether the ConfigMap or its keys must be defined
    """
    items?: [MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0ConfigMapItemsItems0]
    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0ConfigMapItemsItems0:
    r"""
    Maps a string key to a path within a volume.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the key to project.
    mode : int, default is Undefined, optional
        mode is Optional: mode bits used to set permissions on this file.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        If not specified, the volume defaultMode will be used.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    path : str, default is Undefined, required
        path is the relative path of the file to map the key to.
        May not be an absolute path.
        May not contain the path element '..'.
        May not start with the string '..'.
    """
    key: str

    mode?: int
    path: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0DownwardAPI:
    r"""
    downwardAPI information about the downwardAPI data to project

    Attributes
    ----------
    items : [MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0DownwardAPIItemsItems0], default is Undefined, optional
        Items is a list of DownwardAPIVolume file
    """
    items?: [MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0DownwardAPIItemsItems0]

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0DownwardAPIItemsItems0:
    r"""
    DownwardAPIVolumeFile represents information to create the file containing the pod field

    Attributes
    ----------
    fieldRef : MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0DownwardAPIItemsItems0FieldRef, default is Undefined, optional
        field ref
    mode : int, default is Undefined, optional
        Optional: mode bits used to set permissions on this file, must be an octal value
        between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        If not specified, the volume defaultMode will be used.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    path : str, default is Undefined, required
        Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
    resourceFieldRef : MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0DownwardAPIItemsItems0ResourceFieldRef, default is Undefined, optional
        resource field ref
    """
    fieldRef?: MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0DownwardAPIItemsItems0FieldRef
    mode?: int
    path: str

    resourceFieldRef?: MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0DownwardAPIItemsItems0ResourceFieldRef

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0DownwardAPIItemsItems0FieldRef:
    r"""
    Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, default is Undefined, required
        Path of the field to select in the specified API version.
    """
    apiVersion?: str
    fieldPath: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0DownwardAPIItemsItems0ResourceFieldRef:
    r"""
    Selects a resource of the container: only resources limits and requests
    (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Container name: required for volumes, optional for env vars
    divisor : int | str, default is Undefined, optional
        Specifies the output format of the exposed resources, defaults to "1"
    resource : str, default is Undefined, required
        Required: resource to select
    """
    containerName?: str
    divisor?: int | str
    resource: str

    check:
        _regex_match(str(divisor), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if divisor

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0PodCertificate:
    r"""
    Projects an auto-rotating credential bundle (private key and certificate
    chain) that the pod can use either as a TLS client or server.

    Kubelet generates a private key and uses it to send a
    PodCertificateRequest to the named signer.  Once the signer approves the
    request and issues a certificate chain, Kubelet writes the key and
    certificate chain to the pod filesystem.  The pod does not start until
    certificates have been issued for each podCertificate projected volume
    source in its spec.

    Kubelet will begin trying to rotate the certificate at the time indicated
    by the signer using the PodCertificateRequest.Status.BeginRefreshAt
    timestamp.

    Kubelet can write a single file, indicated by the credentialBundlePath
    field, or separate files, indicated by the keyPath and
    certificateChainPath fields.

    The credential bundle is a single file in PEM format.  The first PEM
    entry is the private key (in PKCS#8 format), and the remaining PEM
    entries are the certificate chain issued by the signer (typically,
    signers will return their certificate chain in leaf-to-root order).

    Prefer using the credential bundle format, since your application code
    can read it atomically.  If you use keyPath and certificateChainPath,
    your application must make two separate file reads. If these coincide
    with a certificate rotation, it is possible that the private key and leaf
    certificate you read may not correspond to each other.  Your application
    will need to check for this condition, and re-read until they are
    consistent.

    The named signer controls chooses the format of the certificate it
    issues; consult the signer implementation's documentation to learn how to
    use the certificates it issues.

    Attributes
    ----------
    certificateChainPath : str, default is Undefined, optional
        Write the certificate chain at this path in the projected volume.

        Most applications should use credentialBundlePath.  When using keyPath
        and certificateChainPath, your application needs to check that the key
        and leaf certificate are consistent, because it is possible to read the
        files mid-rotation.
    credentialBundlePath : str, default is Undefined, optional
        Write the credential bundle at this path in the projected volume.

        The credential bundle is a single file that contains multiple PEM blocks.
        The first PEM block is a PRIVATE KEY block, containing a PKCS#8 private
        key.

        The remaining blocks are CERTIFICATE blocks, containing the issued
        certificate chain from the signer (leaf and any intermediates).

        Using credentialBundlePath lets your Pod's application code make a single
        atomic read that retrieves a consistent key and certificate chain.  If you
        project them to separate files, your application code will need to
        additionally check that the leaf certificate was issued to the key.
    keyPath : str, default is Undefined, optional
        Write the key at this path in the projected volume.

        Most applications should use credentialBundlePath.  When using keyPath
        and certificateChainPath, your application needs to check that the key
        and leaf certificate are consistent, because it is possible to read the
        files mid-rotation.
    keyType : str, default is Undefined, required
        The type of keypair Kubelet will generate for the pod.

        Valid values are "RSA3072", "RSA4096", "ECDSAP256", "ECDSAP384",
        "ECDSAP521", and "ED25519".
    maxExpirationSeconds : int, default is Undefined, optional
        maxExpirationSeconds is the maximum lifetime permitted for the
        certificate.

        Kubelet copies this value verbatim into the PodCertificateRequests it
        generates for this projection.

        If omitted, kube-apiserver will set it to 86400(24 hours). kube-apiserver
        will reject values shorter than 3600 (1 hour).  The maximum allowable
        value is 7862400 (91 days).

        The signer implementation is then free to issue a certificate with any
        lifetime *shorter* than MaxExpirationSeconds, but no shorter than 3600
        seconds (1 hour).  This constraint is enforced by kube-apiserver.
        `kubernetes.io` signers will never issue certificates with a lifetime
        longer than 24 hours.
    signerName : str, default is Undefined, required
        Kubelet's generated CSRs will be addressed to this signer.
    """
    certificateChainPath?: str
    credentialBundlePath?: str
    keyPath?: str
    keyType: str

    maxExpirationSeconds?: int
    signerName: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0Secret:
    r"""
    secret information about the secret data to project

    Attributes
    ----------
    items : [MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0SecretItemsItems0], default is Undefined, optional
        items if unspecified, each key-value pair in the Data field of the referenced
        Secret will be projected into the volume as a file whose name is the
        key and content is the value. If specified, the listed keys will be
        projected into the specified paths, and unlisted keys will not be
        present. If a key is specified which is not present in the Secret,
        the volume setup will error unless it is marked optional. Paths must be
        relative and may not contain the '..' path or start with '..'.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        optional field specify whether the Secret or its key must be defined
    """
    items?: [MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0SecretItemsItems0]
    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0SecretItemsItems0:
    r"""
    Maps a string key to a path within a volume.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the key to project.
    mode : int, default is Undefined, optional
        mode is Optional: mode bits used to set permissions on this file.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        If not specified, the volume defaultMode will be used.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    path : str, default is Undefined, required
        path is the relative path of the file to map the key to.
        May not be an absolute path.
        May not contain the path element '..'.
        May not start with the string '..'.
    """
    key: str

    mode?: int
    path: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0ProjectedSourcesItems0ServiceAccountToken:
    r"""
    serviceAccountToken is information about the serviceAccountToken data to project

    Attributes
    ----------
    audience : str, default is Undefined, optional
        audience is the intended audience of the token. A recipient of a token
        must identify itself with an identifier specified in the audience of the
        token, and otherwise should reject the token. The audience defaults to the
        identifier of the apiserver.
    expirationSeconds : int, default is Undefined, optional
        expirationSeconds is the requested duration of validity of the service
        account token. As the token approaches expiration, the kubelet volume
        plugin will proactively rotate the service account token. The kubelet will
        start trying to rotate the token if the token is older than 80 percent of
        its time to live or if the token is older than 24 hours.Defaults to 1 hour
        and must be at least 10 minutes.
    path : str, default is Undefined, required
        path is the path relative to the mount point of the file to project the
        token into.
    """
    audience?: str
    expirationSeconds?: int
    path: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0Quobyte:
    r"""
    quobyte represents a Quobyte mount on the host that shares a pod's lifetime.
    Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.

    Attributes
    ----------
    group : str, default is Undefined, optional
        group to map volume access to
        Default is no group
    readOnly : bool, default is Undefined, optional
        readOnly here will force the Quobyte volume to be mounted with read-only permissions.
        Defaults to false.
    registry : str, default is Undefined, required
        registry represents a single or multiple Quobyte Registry services
        specified as a string as host:port pair (multiple entries are separated with commas)
        which acts as the central registry for volumes
    tenant : str, default is Undefined, optional
        tenant owning the given Quobyte volume in the Backend
        Used with dynamically provisioned Quobyte volumes, value is set by the plugin
    user : str, default is Undefined, optional
        user to map volume access to
        Defaults to serivceaccount user
    volume : str, default is Undefined, required
        volume is a string that references an already created Quobyte volume by name.
    """
    group?: str
    readOnly?: bool
    registry: str

    tenant?: str
    user?: str
    volume: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0Rbd:
    r"""
    rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
    Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported.

    Attributes
    ----------
    fsType : str, default is Undefined, optional
        fsType is the filesystem type of the volume that you want to mount.
        Tip: Ensure that the filesystem type is supported by the host operating system.
        Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
    image : str, default is Undefined, required
        image is the rados image name.
        More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    keyring : str, default is "/etc/ceph/keyring", optional
        keyring is the path to key ring for RBDUser.
        Default is /etc/ceph/keyring.
        More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    monitors : [str], default is Undefined, required
        monitors is a collection of Ceph monitors.
        More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    pool : str, default is "rbd", optional
        pool is the rados pool name.
        Default is rbd.
        More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    readOnly : bool, default is Undefined, optional
        readOnly here will force the ReadOnly setting in VolumeMounts.
        Defaults to false.
        More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    secretRef : MonitoringCoreosComV1PrometheusSpecVolumesItems0RbdSecretRef, default is Undefined, optional
        secret ref
    user : str, default is "admin", optional
        user is the rados user name.
        Default is admin.
        More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    """
    fsType?: str
    image: str

    keyring?: str = "/etc/ceph/keyring"
    monitors: [str]

    pool?: str = "rbd"
    readOnly?: bool
    secretRef?: MonitoringCoreosComV1PrometheusSpecVolumesItems0RbdSecretRef
    user?: str = "admin"

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0RbdSecretRef:
    r"""
    secretRef is name of the authentication secret for RBDUser. If provided
    overrides keyring.
    Default is nil.
    More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    name?: str = ""

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0ScaleIO:
    r"""
    scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
    Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.

    Attributes
    ----------
    fsType : str, default is "xfs", optional
        fsType is the filesystem type to mount.
        Must be a filesystem type supported by the host operating system.
        Ex. "ext4", "xfs", "ntfs".
        Default is "xfs".
    gateway : str, default is Undefined, required
        gateway is the host address of the ScaleIO API Gateway.
    protectionDomain : str, default is Undefined, optional
        protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
    readOnly : bool, default is Undefined, optional
        readOnly Defaults to false (read/write). ReadOnly here will force
        the ReadOnly setting in VolumeMounts.
    secretRef : MonitoringCoreosComV1PrometheusSpecVolumesItems0ScaleIOSecretRef, default is Undefined, required
        secret ref
    sslEnabled : bool, default is Undefined, optional
        sslEnabled Flag enable/disable SSL communication with Gateway, default false
    storageMode : str, default is "ThinProvisioned", optional
        storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
        Default is ThinProvisioned.
    storagePool : str, default is Undefined, optional
        storagePool is the ScaleIO Storage Pool associated with the protection domain.
    system : str, default is Undefined, required
        system is the name of the storage system as configured in ScaleIO.
    volumeName : str, default is Undefined, optional
        volumeName is the name of a volume already created in the ScaleIO system
        that is associated with this volume source.
    """
    fsType?: str = "xfs"
    gateway: str

    protectionDomain?: str
    readOnly?: bool
    secretRef: MonitoringCoreosComV1PrometheusSpecVolumesItems0ScaleIOSecretRef

    sslEnabled?: bool
    storageMode?: str = "ThinProvisioned"
    storagePool?: str
    system: str

    volumeName?: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0ScaleIOSecretRef:
    r"""
    secretRef references to the secret for ScaleIO user and other
    sensitive information. If this is not provided, Login operation will fail.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    name?: str = ""

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0Secret:
    r"""
    secret represents a secret that should populate this volume.
    More info: https://kubernetes.io/docs/concepts/storage/volumes#secret

    Attributes
    ----------
    defaultMode : int, default is Undefined, optional
        defaultMode is Optional: mode bits used to set permissions on created files by default.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values
        for mode bits. Defaults to 0644.
        Directories within the path are not affected by this setting.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    items : [MonitoringCoreosComV1PrometheusSpecVolumesItems0SecretItemsItems0], default is Undefined, optional
        items If unspecified, each key-value pair in the Data field of the referenced
        Secret will be projected into the volume as a file whose name is the
        key and content is the value. If specified, the listed keys will be
        projected into the specified paths, and unlisted keys will not be
        present. If a key is specified which is not present in the Secret,
        the volume setup will error unless it is marked optional. Paths must be
        relative and may not contain the '..' path or start with '..'.
    optional : bool, default is Undefined, optional
        optional field specify whether the Secret or its keys must be defined
    secretName : str, default is Undefined, optional
        secretName is the name of the secret in the pod's namespace to use.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    """
    defaultMode?: int
    items?: [MonitoringCoreosComV1PrometheusSpecVolumesItems0SecretItemsItems0]
    optional?: bool
    secretName?: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0SecretItemsItems0:
    r"""
    Maps a string key to a path within a volume.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the key to project.
    mode : int, default is Undefined, optional
        mode is Optional: mode bits used to set permissions on this file.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        If not specified, the volume defaultMode will be used.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    path : str, default is Undefined, required
        path is the relative path of the file to map the key to.
        May not be an absolute path.
        May not contain the path element '..'.
        May not start with the string '..'.
    """
    key: str

    mode?: int
    path: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0Storageos:
    r"""
    storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
    Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.

    Attributes
    ----------
    fsType : str, default is Undefined, optional
        fsType is the filesystem type to mount.
        Must be a filesystem type supported by the host operating system.
        Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    readOnly : bool, default is Undefined, optional
        readOnly defaults to false (read/write). ReadOnly here will force
        the ReadOnly setting in VolumeMounts.
    secretRef : MonitoringCoreosComV1PrometheusSpecVolumesItems0StorageosSecretRef, default is Undefined, optional
        secret ref
    volumeName : str, default is Undefined, optional
        volumeName is the human-readable name of the StorageOS volume.  Volume
        names are only unique within a namespace.
    volumeNamespace : str, default is Undefined, optional
        volumeNamespace specifies the scope of the volume within StorageOS.  If no
        namespace is specified then the Pod's namespace will be used.  This allows the
        Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
        Set VolumeName to any name to override the default behaviour.
        Set to "default" if you are not using namespaces within StorageOS.
        Namespaces that do not pre-exist within StorageOS will be created.
    """
    fsType?: str
    readOnly?: bool
    secretRef?: MonitoringCoreosComV1PrometheusSpecVolumesItems0StorageosSecretRef
    volumeName?: str
    volumeNamespace?: str

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0StorageosSecretRef:
    r"""
    secretRef specifies the secret to use for obtaining the StorageOS API
    credentials.  If not specified, default values will be attempted.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    name?: str = ""

schema MonitoringCoreosComV1PrometheusSpecVolumesItems0VsphereVolume:
    r"""
    vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.
    Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type
    are redirected to the csi.vsphere.vmware.com CSI driver.

    Attributes
    ----------
    fsType : str, default is Undefined, optional
        fsType is filesystem type to mount.
        Must be a filesystem type supported by the host operating system.
        Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    storagePolicyID : str, default is Undefined, optional
        storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
    storagePolicyName : str, default is Undefined, optional
        storagePolicyName is the storage Policy Based Management (SPBM) profile name.
    volumePath : str, default is Undefined, required
        volumePath is the path that identifies vSphere volume vmdk
    """
    fsType?: str
    storagePolicyID?: str
    storagePolicyName?: str
    volumePath: str

schema MonitoringCoreosComV1PrometheusSpecWeb:
    r"""
    web defines the configuration of the Prometheus web server.

    Attributes
    ----------
    httpConfig : MonitoringCoreosComV1PrometheusSpecWebHTTPConfig, default is Undefined, optional
        http config
    maxConnections : int, default is Undefined, optional
        maxConnections defines the maximum number of simultaneous connections
        A zero value means that Prometheus doesn't accept any incoming connection.
    pageTitle : str, default is Undefined, optional
        pageTitle defines the prometheus web page title.
    tlsConfig : MonitoringCoreosComV1PrometheusSpecWebTLSConfig, default is Undefined, optional
        tls config
    """
    httpConfig?: MonitoringCoreosComV1PrometheusSpecWebHTTPConfig
    maxConnections?: int
    pageTitle?: str
    tlsConfig?: MonitoringCoreosComV1PrometheusSpecWebTLSConfig

    check:
        maxConnections >= 0 if maxConnections not in [None, Undefined]

schema MonitoringCoreosComV1PrometheusSpecWebHTTPConfig:
    r"""
    httpConfig defines HTTP parameters for web server.

    Attributes
    ----------
    headers : MonitoringCoreosComV1PrometheusSpecWebHTTPConfigHeaders, default is Undefined, optional
        headers
    http2 : bool, default is Undefined, optional
        http2 enable HTTP/2 support. Note that HTTP/2 is only supported with TLS.
        When TLSConfig is not configured, HTTP/2 will be disabled.
        Whenever the value of the field changes, a rolling update will be triggered.
    """
    headers?: MonitoringCoreosComV1PrometheusSpecWebHTTPConfigHeaders
    http2?: bool

schema MonitoringCoreosComV1PrometheusSpecWebHTTPConfigHeaders:
    r"""
    headers defines a list of headers that can be added to HTTP responses.

    Attributes
    ----------
    contentSecurityPolicy : str, default is Undefined, optional
        contentSecurityPolicy defines the Content-Security-Policy header to HTTP responses.
        Unset if blank.
    strictTransportSecurity : str, default is Undefined, optional
        strictTransportSecurity defines the Strict-Transport-Security header to HTTP responses.
        Unset if blank.
        Please make sure that you use this with care as this header might force
        browsers to load Prometheus and the other applications hosted on the same
        domain and subdomains over HTTPS.
        https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
    xContentTypeOptions : str, default is Undefined, optional
        xContentTypeOptions defines the X-Content-Type-Options header to HTTP responses.
        Unset if blank. Accepted value is nosniff.
        https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
    xFrameOptions : str, default is Undefined, optional
        xFrameOptions defines the X-Frame-Options header to HTTP responses.
        Unset if blank. Accepted values are deny and sameorigin.
        https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
    xXSSProtection : str, default is Undefined, optional
        xXSSProtection defines the X-XSS-Protection header to all responses.
        Unset if blank.
        https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
    """
    contentSecurityPolicy?: str
    strictTransportSecurity?: str
    xContentTypeOptions?: "" | "NoSniff"
    xFrameOptions?: "" | "Deny" | "SameOrigin"
    xXSSProtection?: str

schema MonitoringCoreosComV1PrometheusSpecWebTLSConfig:
    r"""
    tlsConfig defines the TLS parameters for HTTPS.

    Attributes
    ----------
    cert : MonitoringCoreosComV1PrometheusSpecWebTLSConfigCert, default is Undefined, optional
        cert
    certFile : str, default is Undefined, optional
        certFile defines the path to the TLS certificate file in the container for the web server.

        Either `keySecret` or `keyFile` must be defined.

        It is mutually exclusive with `cert`.
    cipherSuites : [str], default is Undefined, optional
        cipherSuites defines the list of supported cipher suites for TLS versions up to TLS 1.2.

        If not defined, the Go default cipher suites are used.
        Available cipher suites are documented in the Go documentation:
        https://golang.org/pkg/crypto/tls/#pkg-constants
    clientAuthType : str, default is Undefined, optional
        clientAuthType defines the server policy for client TLS authentication.

        For more detail on clientAuth options:
        https://golang.org/pkg/crypto/tls/#ClientAuthType
    clientCAFile : str, default is Undefined, optional
        clientCAFile defines the path to the CA certificate file for client certificate authentication to
        the server.

        It is mutually exclusive with `client_ca`.
    client_ca : MonitoringCoreosComV1PrometheusSpecWebTLSConfigClientCa, default is Undefined, optional
        client ca
    curvePreferences : [str], default is Undefined, optional
        curvePreferences defines elliptic curves that will be used in an ECDHE handshake, in preference
        order.

        Available curves are documented in the Go documentation:
        https://golang.org/pkg/crypto/tls/#CurveID
    keyFile : str, default is Undefined, optional
        keyFile defines the path to the TLS private key file in the container for the web server.

        If defined, either `cert` or `certFile` must be defined.

        It is mutually exclusive with `keySecret`.
    keySecret : MonitoringCoreosComV1PrometheusSpecWebTLSConfigKeySecret, default is Undefined, optional
        key secret
    maxVersion : str, default is Undefined, optional
        maxVersion defines the Maximum TLS version that is acceptable.
    minVersion : str, default is Undefined, optional
        minVersion defines the minimum TLS version that is acceptable.
    preferServerCipherSuites : bool, default is Undefined, optional
        preferServerCipherSuites defines whether the server selects the client's most preferred cipher
        suite, or the server's most preferred cipher suite.

        If true then the server's preference, as expressed in
        the order of elements in cipherSuites, is used.
    """
    cert?: MonitoringCoreosComV1PrometheusSpecWebTLSConfigCert
    certFile?: str
    cipherSuites?: [str]
    clientAuthType?: str
    clientCAFile?: str
    client_ca?: MonitoringCoreosComV1PrometheusSpecWebTLSConfigClientCa
    curvePreferences?: [str]
    keyFile?: str
    keySecret?: MonitoringCoreosComV1PrometheusSpecWebTLSConfigKeySecret
    maxVersion?: str
    minVersion?: str
    preferServerCipherSuites?: bool

schema MonitoringCoreosComV1PrometheusSpecWebTLSConfigCert:
    r"""
    cert defines the Secret or ConfigMap containing the TLS certificate for the web server.

    Either `keySecret` or `keyFile` must be defined.

    It is mutually exclusive with `certFile`.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1PrometheusSpecWebTLSConfigCertConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1PrometheusSpecWebTLSConfigCertSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1PrometheusSpecWebTLSConfigCertConfigMap
    secret?: MonitoringCoreosComV1PrometheusSpecWebTLSConfigCertSecret

schema MonitoringCoreosComV1PrometheusSpecWebTLSConfigCertConfigMap:
    r"""
    configMap defines the ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecWebTLSConfigCertSecret:
    r"""
    secret defines the Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecWebTLSConfigClientCa:
    r"""
    client_ca defines the Secret or ConfigMap containing the CA certificate for client certificate
    authentication to the server.

    It is mutually exclusive with `clientCAFile`.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1PrometheusSpecWebTLSConfigClientCaConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1PrometheusSpecWebTLSConfigClientCaSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1PrometheusSpecWebTLSConfigClientCaConfigMap
    secret?: MonitoringCoreosComV1PrometheusSpecWebTLSConfigClientCaSecret

schema MonitoringCoreosComV1PrometheusSpecWebTLSConfigClientCaConfigMap:
    r"""
    configMap defines the ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecWebTLSConfigClientCaSecret:
    r"""
    secret defines the Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusSpecWebTLSConfigKeySecret:
    r"""
    keySecret defines the secret containing the TLS private key for the web server.

    Either `cert` or `certFile` must be defined.

    It is mutually exclusive with `keyFile`.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1PrometheusStatus:
    r"""
    status defines the most recent observed status of the Prometheus cluster. Read-only.
    More info:
    https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

    Attributes
    ----------
    availableReplicas : int, default is Undefined, optional
        availableReplicas defines the total number of available pods (ready for at least minReadySeconds)
        targeted by this Prometheus deployment.
    conditions : [MonitoringCoreosComV1PrometheusStatusConditionsItems0], default is Undefined, optional
        conditions defines the current state of the Prometheus deployment.
    paused : bool, default is Undefined, optional
        paused defines whether any actions on the underlying managed objects are
        being performed. Only delete actions will be performed.
    replicas : int, default is Undefined, optional
        replicas defines the total number of non-terminated pods targeted by this Prometheus deployment
        (their labels match the selector).
    selector : str, default is Undefined, optional
        selector used to match the pods targeted by this Prometheus resource.
    shardStatuses : [MonitoringCoreosComV1PrometheusStatusShardStatusesItems0], default is Undefined, optional
        shardStatuses defines the list has one entry per shard. Each entry provides a summary of the shard status.
    shards : int, default is Undefined, optional
        shards defines the most recently observed number of shards.
    unavailableReplicas : int, default is Undefined, optional
        unavailableReplicas defines the total number of unavailable pods targeted by this Prometheus deployment.
    updatedReplicas : int, default is Undefined, optional
        updatedReplicas defines the total number of non-terminated pods targeted by this Prometheus deployment
        that have the desired version spec.
    """
    availableReplicas?: int
    conditions?: [MonitoringCoreosComV1PrometheusStatusConditionsItems0]
    paused?: bool
    replicas?: int
    selector?: str
    shardStatuses?: [MonitoringCoreosComV1PrometheusStatusShardStatusesItems0]
    shards?: int
    unavailableReplicas?: int
    updatedReplicas?: int

schema MonitoringCoreosComV1PrometheusStatusConditionsItems0:
    r"""
    Condition represents the state of the resources associated with the
    Prometheus, Alertmanager or ThanosRuler resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        lastTransitionTime is the time of the last update to the current status property.
    message : str, default is Undefined, optional
        message defines human-readable message indicating details for the condition's last transition.
    observedGeneration : int, default is Undefined, optional
        observedGeneration defines the .metadata.generation that the
        condition was set based upon. For instance, if `.metadata.generation` is
        currently 12, but the `.status.conditions[].observedGeneration` is 9, the
        condition is out of date with respect to the current state of the
        instance.
    reason : str, default is Undefined, optional
        reason for the condition's last transition.
    status : str, default is Undefined, required
        status of the condition.
    $type : str, default is Undefined, required
        type of the condition being reported.
    """
    lastTransitionTime: str

    message?: str
    observedGeneration?: int
    reason?: str
    status: str

    $type: str

    check:
        len(status) >= 1
        len($type) >= 1

schema MonitoringCoreosComV1PrometheusStatusShardStatusesItems0:
    r"""
    monitoring coreos com v1 prometheus status shard statuses items0

    Attributes
    ----------
    availableReplicas : int, default is Undefined, required
        availableReplicas defines the total number of available pods (ready for at least minReadySeconds)
        targeted by this shard.
    replicas : int, default is Undefined, required
        replicas defines the total number of pods targeted by this shard.
    shardID : str, default is Undefined, required
        shardID defines the identifier of the shard.
    unavailableReplicas : int, default is Undefined, required
        unavailableReplicas defines the Total number of unavailable pods targeted by this shard.
    updatedReplicas : int, default is Undefined, required
        updatedReplicas defines the total number of non-terminated pods targeted by this shard
        that have the desired spec.
    """
    availableReplicas: int

    replicas: int

    shardID: str

    unavailableReplicas: int

    updatedReplicas: int

