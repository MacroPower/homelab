"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""

import regex
import k8s.apimachinery.pkg.apis.meta.v1

_regex_match = regex.match

schema Alertmanager:
    r"""
    The `Alertmanager` custom resource definition (CRD) defines a desired [Alertmanager](https://prometheus.io/docs/alerting) setup to run in a Kubernetes cluster. It allows to specify many options such as the number of replicas, persistent storage and many more.

    For each `Alertmanager` resource, the Operator deploys a `StatefulSet` in the same namespace. When there are two or more configured replicas, the Operator runs the Alertmanager instances in high-availability mode.

    The resource defines via label and namespace selectors which `AlertmanagerConfig` objects should be associated to the deployed Alertmanager instances.

    Attributes
    ----------
    apiVersion : str, default is "monitoring.coreos.com/v1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Alertmanager", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : MonitoringCoreosComV1AlertmanagerSpec, default is Undefined, required
        spec
    status : MonitoringCoreosComV1AlertmanagerStatus, default is Undefined, optional
        status
    """
    apiVersion: "monitoring.coreos.com/v1" = "monitoring.coreos.com/v1"

    kind: "Alertmanager" = "Alertmanager"

    metadata?: v1.ObjectMeta
    spec: MonitoringCoreosComV1AlertmanagerSpec

    status?: MonitoringCoreosComV1AlertmanagerStatus

schema MonitoringCoreosComV1AlertmanagerSpec:
    r"""
    Specification of the desired behavior of the Alertmanager cluster. More info:
    https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

    Attributes
    ----------
    additionalArgs : [MonitoringCoreosComV1AlertmanagerSpecAdditionalArgsItems0], default is Undefined, optional
        AdditionalArgs allows setting additional arguments for the 'Alertmanager' container.
        It is intended for e.g. activating hidden flags which are not supported by
        the dedicated configuration options yet. The arguments are passed as-is to the
        Alertmanager container which may cause issues if they are invalid or not supported
        by the given Alertmanager version.
    additionalPeers : [str], default is Undefined, optional
        AdditionalPeers allows injecting a set of additional Alertmanagers to peer with to form a highly available cluster.
    affinity : MonitoringCoreosComV1AlertmanagerSpecAffinity, default is Undefined, optional
        affinity
    alertmanagerConfigMatcherStrategy : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigMatcherStrategy, default is Undefined, optional
        alertmanager config matcher strategy
    alertmanagerConfigNamespaceSelector : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigNamespaceSelector, default is Undefined, optional
        alertmanager config namespace selector
    alertmanagerConfigSelector : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigSelector, default is Undefined, optional
        alertmanager config selector
    alertmanagerConfiguration : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfiguration, default is Undefined, optional
        alertmanager configuration
    automountServiceAccountToken : bool, default is Undefined, optional
        AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in the pod.
        If the service account has `automountServiceAccountToken: true`, set the field to `false` to opt out of automounting API credentials.
    baseImage : str, default is Undefined, optional
        Base image that is used to deploy pods, without tag.
        Deprecated: use 'image' instead.
    clusterAdvertiseAddress : str, default is Undefined, optional
        ClusterAdvertiseAddress is the explicit address to advertise in cluster.
        Needs to be provided for non RFC1918 [1] (public) addresses.
        [1] RFC1918: https://tools.ietf.org/html/rfc1918
    clusterGossipInterval : str, default is Undefined, optional
        Interval between gossip attempts.
    clusterLabel : str, default is Undefined, optional
        Defines the identifier that uniquely identifies the Alertmanager cluster.
        You should only set it when the Alertmanager cluster includes Alertmanager instances which are external to this Alertmanager resource. In practice, the addresses of the external instances are provided via the `.spec.additionalPeers` field.
    clusterPeerTimeout : str, default is Undefined, optional
        Timeout for cluster peering.
    clusterPushpullInterval : str, default is Undefined, optional
        Interval between pushpull attempts.
    clusterTLS : MonitoringCoreosComV1AlertmanagerSpecClusterTLS, default is Undefined, optional
        cluster TLS
    configMaps : [str], default is Undefined, optional
        ConfigMaps is a list of ConfigMaps in the same namespace as the Alertmanager
        object, which shall be mounted into the Alertmanager Pods.
        Each ConfigMap is added to the StatefulSet definition as a volume named `configmap-<configmap-name>`.
        The ConfigMaps are mounted into `/etc/alertmanager/configmaps/<configmap-name>` in the 'alertmanager' container.
    configSecret : str, default is Undefined, optional
        ConfigSecret is the name of a Kubernetes Secret in the same namespace as the
        Alertmanager object, which contains the configuration for this Alertmanager
        instance. If empty, it defaults to `alertmanager-<alertmanager-name>`.

        The Alertmanager configuration should be available under the
        `alertmanager.yaml` key. Additional keys from the original secret are
        copied to the generated secret and mounted into the
        `/etc/alertmanager/config` directory in the `alertmanager` container.

        If either the secret or the `alertmanager.yaml` key is missing, the
        operator provisions a minimal Alertmanager configuration with one empty
        receiver (effectively dropping alert notifications).
    containers : [MonitoringCoreosComV1AlertmanagerSpecContainersItems0], default is Undefined, optional
        Containers allows injecting additional containers. This is meant to
        allow adding an authentication proxy to an Alertmanager pod.
        Containers described here modify an operator generated container if they
        share the same name and modifications are done via a strategic merge
        patch. The current container names are: `alertmanager` and
        `config-reloader`. Overriding containers is entirely outside the scope
        of what the maintainers will support and by doing so, you accept that
        this behaviour may break at any time without notice.
    dnsConfig : MonitoringCoreosComV1AlertmanagerSpecDNSConfig, default is Undefined, optional
        dns config
    dnsPolicy : str, default is Undefined, optional
        Defines the DNS policy for the pods.
    enableFeatures : [str], default is Undefined, optional
        Enable access to Alertmanager feature flags. By default, no features are enabled.
        Enabling features which are disabled by default is entirely outside the
        scope of what the maintainers will support and by doing so, you accept
        that this behaviour may break at any time without notice.

        It requires Alertmanager >= 0.27.0.
    enableServiceLinks : bool, default is Undefined, optional
        Indicates whether information about services should be injected into pod's environment variables
    externalUrl : str, default is Undefined, optional
        The external URL the Alertmanager instances will be available under. This is
        necessary to generate correct URLs. This is necessary if Alertmanager is not
        served from root of a DNS name.
    forceEnableClusterMode : bool, default is Undefined, optional
        ForceEnableClusterMode ensures Alertmanager does not deactivate the cluster mode when running with a single replica.
        Use case is e.g. spanning an Alertmanager cluster across Kubernetes clusters with a single replica in each.
    hostAliases : [MonitoringCoreosComV1AlertmanagerSpecHostAliasesItems0], default is Undefined, optional
        Pods' hostAliases configuration
    hostUsers : bool, default is Undefined, optional
        HostUsers supports the user space in Kubernetes.

        More info: https://kubernetes.io/docs/tasks/configure-pod-container/user-namespaces/

        The feature requires at least Kubernetes 1.28 with the `UserNamespacesSupport` feature gate enabled.
        Starting Kubernetes 1.33, the feature is enabled by default.
    image : str, default is Undefined, optional
        Image if specified has precedence over baseImage, tag and sha
        combinations. Specifying the version is still necessary to ensure the
        Prometheus Operator knows what version of Alertmanager is being
        configured.
    imagePullPolicy : str, default is Undefined, optional
        Image pull policy for the 'alertmanager', 'init-config-reloader' and 'config-reloader' containers.
        See https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy for more details.
    imagePullSecrets : [MonitoringCoreosComV1AlertmanagerSpecImagePullSecretsItems0], default is Undefined, optional
        An optional list of references to secrets in the same namespace
        to use for pulling prometheus and alertmanager images from registries
        see https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    initContainers : [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0], default is Undefined, optional
        InitContainers allows adding initContainers to the pod definition. Those can be used to e.g.
        fetch secrets for injection into the Alertmanager configuration from external sources. Any
        errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
        InitContainers described here modify an operator
        generated init containers if they share the same name and modifications are
        done via a strategic merge patch. The current init container name is:
        `init-config-reloader`. Overriding init containers is entirely outside the
        scope of what the maintainers will support and by doing so, you accept that
        this behaviour may break at any time without notice.
    limits : MonitoringCoreosComV1AlertmanagerSpecLimits, default is Undefined, optional
        limits
    listenLocal : bool, default is Undefined, optional
        ListenLocal makes the Alertmanager server listen on loopback, so that it
        does not bind against the Pod IP. Note this is only for the Alertmanager
        UI, not the gossip communication.
    logFormat : str, default is Undefined, optional
        Log format for Alertmanager to be configured with.
    logLevel : str, default is Undefined, optional
        Log level for Alertmanager to be configured with.
    minReadySeconds : int, default is Undefined, optional
        Minimum number of seconds for which a newly created pod should be ready
        without any of its container crashing for it to be considered available.

        If unset, pods will be considered available as soon as they are ready.
    nodeSelector : {str:str}, default is Undefined, optional
        Define which Nodes the Pods are scheduled on.
    paused : bool, default is Undefined, optional
        If set to true all actions on the underlying managed objects are not
        going to be performed, except for delete actions.
    persistentVolumeClaimRetentionPolicy : MonitoringCoreosComV1AlertmanagerSpecPersistentVolumeClaimRetentionPolicy, default is Undefined, optional
        persistent volume claim retention policy
    podMetadata : MonitoringCoreosComV1AlertmanagerSpecPodMetadata, default is Undefined, optional
        pod metadata
    portName : str, default is "web", optional
        Port name used for the pods and governing service.
        Defaults to `web`.
    priorityClassName : str, default is Undefined, optional
        Priority class assigned to the Pods
    replicas : int, default is Undefined, optional
        Size is the expected size of the alertmanager cluster. The controller will
        eventually make the size of the running cluster equal to the expected
        size.
    resources : MonitoringCoreosComV1AlertmanagerSpecResources, default is Undefined, optional
        resources
    retention : str, default is "120h", optional
        Time duration Alertmanager shall retain data for. Default is '120h',
        and must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).
    routePrefix : str, default is Undefined, optional
        The route prefix Alertmanager registers HTTP handlers for. This is useful,
        if using ExternalURL and a proxy is rewriting HTTP routes of a request,
        and the actual ExternalURL is still true, but the server serves requests
        under a different route prefix. For example for use with `kubectl proxy`.
    secrets : [str], default is Undefined, optional
        Secrets is a list of Secrets in the same namespace as the Alertmanager
        object, which shall be mounted into the Alertmanager Pods.
        Each Secret is added to the StatefulSet definition as a volume named `secret-<secret-name>`.
        The Secrets are mounted into `/etc/alertmanager/secrets/<secret-name>` in the 'alertmanager' container.
    securityContext : MonitoringCoreosComV1AlertmanagerSpecSecurityContext, default is Undefined, optional
        security context
    serviceAccountName : str, default is Undefined, optional
        ServiceAccountName is the name of the ServiceAccount to use to run the
        Prometheus Pods.
    serviceName : str, default is Undefined, optional
        The name of the service name used by the underlying StatefulSet(s) as the governing service.
        If defined, the Service  must be created before the Alertmanager resource in the same namespace and it must define a selector that matches the pod labels.
        If empty, the operator will create and manage a headless service named `alertmanager-operated` for Alermanager resources.
        When deploying multiple Alertmanager resources in the same namespace, it is recommended to specify a different value for each.
        See https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#stable-network-id for more details.
    sha : str, default is Undefined, optional
        SHA of Alertmanager container image to be deployed. Defaults to the value of `version`.
        Similar to a tag, but the SHA explicitly deploys an immutable container image.
        Version and Tag are ignored if SHA is set.
        Deprecated: use 'image' instead. The image digest can be specified as part of the image URL.
    storage : MonitoringCoreosComV1AlertmanagerSpecStorage, default is Undefined, optional
        storage
    tag : str, default is Undefined, optional
        Tag of Alertmanager container image to be deployed. Defaults to the value of `version`.
        Version is ignored if Tag is set.
        Deprecated: use 'image' instead. The image tag can be specified as part of the image URL.
    terminationGracePeriodSeconds : int, default is Undefined, optional
        Optional duration in seconds the pod needs to terminate gracefully.
        Value must be non-negative integer. The value zero indicates stop immediately via
        the kill signal (no opportunity to shut down) which may lead to data corruption.

        Defaults to 120 seconds.
    tolerations : [MonitoringCoreosComV1AlertmanagerSpecTolerationsItems0], default is Undefined, optional
        If specified, the pod's tolerations.
    topologySpreadConstraints : [MonitoringCoreosComV1AlertmanagerSpecTopologySpreadConstraintsItems0], default is Undefined, optional
        If specified, the pod's topology spread constraints.
    version : str, default is Undefined, optional
        Version the cluster should be on.
    volumeMounts : [MonitoringCoreosComV1AlertmanagerSpecVolumeMountsItems0], default is Undefined, optional
        VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition.
        VolumeMounts specified will be appended to other VolumeMounts in the alertmanager container,
        that are generated as a result of StorageSpec objects.
    volumes : [MonitoringCoreosComV1AlertmanagerSpecVolumesItems0], default is Undefined, optional
        Volumes allows configuration of additional volumes on the output StatefulSet definition.
        Volumes specified will be appended to other volumes that are generated as a result of
        StorageSpec objects.
    web : MonitoringCoreosComV1AlertmanagerSpecWeb, default is Undefined, optional
        web
    """
    additionalArgs?: [MonitoringCoreosComV1AlertmanagerSpecAdditionalArgsItems0]
    additionalPeers?: [str]
    affinity?: MonitoringCoreosComV1AlertmanagerSpecAffinity
    alertmanagerConfigMatcherStrategy?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigMatcherStrategy
    alertmanagerConfigNamespaceSelector?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigNamespaceSelector
    alertmanagerConfigSelector?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigSelector
    alertmanagerConfiguration?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfiguration
    automountServiceAccountToken?: bool
    baseImage?: str
    clusterAdvertiseAddress?: str
    clusterGossipInterval?: str
    clusterLabel?: str
    clusterPeerTimeout?: str
    clusterPushpullInterval?: str
    clusterTLS?: MonitoringCoreosComV1AlertmanagerSpecClusterTLS
    configMaps?: [str]
    configSecret?: str
    containers?: [MonitoringCoreosComV1AlertmanagerSpecContainersItems0]
    dnsConfig?: MonitoringCoreosComV1AlertmanagerSpecDNSConfig
    dnsPolicy?: "ClusterFirstWithHostNet" | "ClusterFirst" | "Default" | "None"
    enableFeatures?: [str]
    enableServiceLinks?: bool
    externalUrl?: str
    forceEnableClusterMode?: bool
    hostAliases?: [MonitoringCoreosComV1AlertmanagerSpecHostAliasesItems0]
    hostUsers?: bool
    image?: str
    imagePullPolicy?: "" | "Always" | "Never" | "IfNotPresent"
    imagePullSecrets?: [MonitoringCoreosComV1AlertmanagerSpecImagePullSecretsItems0]
    initContainers?: [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0]
    limits?: MonitoringCoreosComV1AlertmanagerSpecLimits
    listenLocal?: bool
    logFormat?: "" | "logfmt" | "json"
    logLevel?: "" | "debug" | "info" | "warn" | "error"
    minReadySeconds?: int
    nodeSelector?: {str:str}
    paused?: bool
    persistentVolumeClaimRetentionPolicy?: MonitoringCoreosComV1AlertmanagerSpecPersistentVolumeClaimRetentionPolicy
    podMetadata?: MonitoringCoreosComV1AlertmanagerSpecPodMetadata
    portName?: str = "web"
    priorityClassName?: str
    replicas?: int
    resources?: MonitoringCoreosComV1AlertmanagerSpecResources
    retention?: str = "120h"
    routePrefix?: str
    secrets?: [str]
    securityContext?: MonitoringCoreosComV1AlertmanagerSpecSecurityContext
    serviceAccountName?: str
    serviceName?: str
    sha?: str
    storage?: MonitoringCoreosComV1AlertmanagerSpecStorage
    tag?: str
    terminationGracePeriodSeconds?: int
    tolerations?: [MonitoringCoreosComV1AlertmanagerSpecTolerationsItems0]
    topologySpreadConstraints?: [MonitoringCoreosComV1AlertmanagerSpecTopologySpreadConstraintsItems0]
    version?: str
    volumeMounts?: [MonitoringCoreosComV1AlertmanagerSpecVolumeMountsItems0]
    volumes?: [MonitoringCoreosComV1AlertmanagerSpecVolumesItems0]
    web?: MonitoringCoreosComV1AlertmanagerSpecWeb

    check:
        _regex_match(str(clusterGossipInterval), r"^(0|(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if clusterGossipInterval
        _regex_match(str(clusterPeerTimeout), r"^(0|(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if clusterPeerTimeout
        _regex_match(str(clusterPushpullInterval), r"^(0|(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if clusterPushpullInterval
        minReadySeconds >= 0 if minReadySeconds not in [None, Undefined]
        _regex_match(str(retention), r"^(0|(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if retention
        len(serviceName) >= 1 if serviceName
        terminationGracePeriodSeconds >= 0 if terminationGracePeriodSeconds not in [None, Undefined]

schema MonitoringCoreosComV1AlertmanagerSpecAdditionalArgsItems0:
    r"""
    Argument as part of the AdditionalArgs list.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the argument, e.g. "scrape.discovery-reload-interval".
    value : str, default is Undefined, optional
        Argument value, e.g. 30s. Can be empty for name-only arguments (e.g. --storage.tsdb.no-lockfile)
    """
    name: str

    value?: str

    check:
        len(name) >= 1

schema MonitoringCoreosComV1AlertmanagerSpecAffinity:
    r"""
    If specified, the pod's scheduling constraints.

    Attributes
    ----------
    nodeAffinity : MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinity, default is Undefined, optional
        node affinity
    podAffinity : MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinity, default is Undefined, optional
        pod affinity
    podAntiAffinity : MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinity, default is Undefined, optional
        pod anti affinity
    """
    nodeAffinity?: MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinity
    podAffinity?: MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinity
    podAntiAffinity?: MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinity

schema MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinity:
    r"""
    Describes node affinity scheduling rules for the pod.

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution, default is Undefined, optional
        required during scheduling ignored during execution
    """
    preferredDuringSchedulingIgnoredDuringExecution?: [MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]
    requiredDuringSchedulingIgnoredDuringExecution?: MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution

schema MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    An empty preferred scheduling term matches all objects with implicit weight 0
    (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).

    Attributes
    ----------
    preference : MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference, default is Undefined, required
        preference
    weight : int, default is Undefined, required
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
    """
    preference: MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference

    weight: int

schema MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference:
    r"""
    A node selector term, associated with the corresponding weight.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0], default is Undefined, optional
        A list of node selector requirements by node's labels.
    matchFields : [MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0], default is Undefined, optional
        A list of node selector requirements by node's fields.
    """
    matchExpressions?: [MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0]
    matchFields?: [MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0]

schema MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution:
    r"""
    If the affinity requirements specified by this field are not met at
    scheduling time, the pod will not be scheduled onto the node.
    If the affinity requirements specified by this field cease to be met
    at some point during pod execution (e.g. due to an update), the system
    may or may not try to eventually evict the pod from its node.

    Attributes
    ----------
    nodeSelectorTerms : [MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0], default is Undefined, required
        Required. A list of node selector terms. The terms are ORed.
    """
    nodeSelectorTerms: [MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0]

schema MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0:
    r"""
    A null or empty node selector term matches no objects. The requirements of
    them are ANDed.
    The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0], default is Undefined, optional
        A list of node selector requirements by node's labels.
    matchFields : [MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0], default is Undefined, optional
        A list of node selector requirements by node's fields.
    """
    matchExpressions?: [MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0]
    matchFields?: [MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0]

schema MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinity:
    r"""
    Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
    """
    preferredDuringSchedulingIgnoredDuringExecution?: [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]
    requiredDuringSchedulingIgnoredDuringExecution?: [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0]

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)

    Attributes
    ----------
    podAffinityTerm : MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm, default is Undefined, required
        pod affinity term
    weight : int, default is Undefined, required
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
    """
    podAffinityTerm: MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm

    weight: int

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm:
    r"""
    Required. A pod affinity term, associated with the corresponding weight.

    Attributes
    ----------
    labelSelector : MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
    namespaceSelector : MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """
    labelSelector?: MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    Defines a set of pods (namely those matching the labelSelector
    relative to the given namespace(s)) that this pod should be
    co-located (affinity) or not co-located (anti-affinity) with,
    where co-located is defined as running on a node whose value of
    the label with key <topologyKey> matches that of any node on which
    a pod of the set of pods is running

    Attributes
    ----------
    labelSelector : MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
    namespaceSelector : MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """
    labelSelector?: MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinity:
    r"""
    Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
    """
    preferredDuringSchedulingIgnoredDuringExecution?: [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]
    requiredDuringSchedulingIgnoredDuringExecution?: [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0]

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)

    Attributes
    ----------
    podAffinityTerm : MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm, default is Undefined, required
        pod affinity term
    weight : int, default is Undefined, required
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
    """
    podAffinityTerm: MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm

    weight: int

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm:
    r"""
    Required. A pod affinity term, associated with the corresponding weight.

    Attributes
    ----------
    labelSelector : MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
    namespaceSelector : MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """
    labelSelector?: MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    Defines a set of pods (namely those matching the labelSelector
    relative to the given namespace(s)) that this pod should be
    co-located (affinity) or not co-located (anti-affinity) with,
    where co-located is defined as running on a node whose value of
    the label with key <topologyKey> matches that of any node on which
    a pod of the set of pods is running

    Attributes
    ----------
    labelSelector : MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
    namespaceSelector : MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """
    labelSelector?: MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigMatcherStrategy:
    r"""
    AlertmanagerConfigMatcherStrategy defines how AlertmanagerConfig objects
    process incoming alerts.

    Attributes
    ----------
    $type : str, default is "OnNamespace", optional
        AlertmanagerConfigMatcherStrategyType defines the strategy used by
        AlertmanagerConfig objects to match alerts in the routes and inhibition
        rules.

        The default value is `OnNamespace`.
    """
    $type?: "OnNamespace" | "OnNamespaceExceptForAlertmanagerNamespace" | "None" = "OnNamespace"

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigNamespaceSelector:
    r"""
    Namespaces to be selected for AlertmanagerConfig discovery. If nil, only
    check own namespace.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigNamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigSelector:
    r"""
    AlertmanagerConfigs to be selected for to merge and configure Alertmanager with.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfiguration:
    r"""
    alertmanagerConfiguration specifies the configuration of Alertmanager.

    If defined, it takes precedence over the `configSecret` field.

    This is an *experimental feature*, it may change in any upcoming release
    in a breaking way.

    Attributes
    ----------
    global : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobal, default is Undefined, optional
        global
    name : str, default is Undefined, optional
        The name of the AlertmanagerConfig resource which is used to generate the Alertmanager configuration.
        It must be defined in the same namespace as the Alertmanager object.
        The operator will not enforce a `namespace` label for routes and inhibition rules.
    templates : [MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationTemplatesItems0], default is Undefined, optional
        Custom notification templates.
    """
    global?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobal
    name?: str
    templates?: [MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationTemplatesItems0]

    check:
        len(name) >= 1 if name

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobal:
    r"""
    Defines the global parameters of the Alertmanager configuration.

    Attributes
    ----------
    httpConfig : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfig, default is Undefined, optional
        http config
    jira : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalJira, default is Undefined, optional
        jira
    opsGenieApiKey : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalOpsGenieAPIKey, default is Undefined, optional
        ops genie Api key
    opsGenieApiUrl : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalOpsGenieAPIURL, default is Undefined, optional
        ops genie Api Url
    pagerdutyUrl : str, default is Undefined, optional
        The default Pagerduty URL.
    resolveTimeout : str, default is Undefined, optional
        ResolveTimeout is the default value used by alertmanager if the alert does
        not include EndsAt, after this time passes it can declare the alert as resolved if it has not been updated.
        This has no impact on alerts from Prometheus, as they always include EndsAt.
    rocketChat : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalRocketChat, default is Undefined, optional
        rocket chat
    slackApiUrl : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSlackAPIURL, default is Undefined, optional
        slack Api Url
    smtp : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTP, default is Undefined, optional
        smtp
    telegram : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalTelegram, default is Undefined, optional
        telegram
    victorops : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalVictorops, default is Undefined, optional
        victorops
    webex : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalWebex, default is Undefined, optional
        webex
    wechat : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalWechat, default is Undefined, optional
        wechat
    """
    httpConfig?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfig
    jira?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalJira
    opsGenieApiKey?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalOpsGenieAPIKey
    opsGenieApiUrl?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalOpsGenieAPIURL
    pagerdutyUrl?: str
    resolveTimeout?: str
    rocketChat?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalRocketChat
    slackApiUrl?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSlackAPIURL
    smtp?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTP
    telegram?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalTelegram
    victorops?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalVictorops
    webex?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalWebex
    wechat?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalWechat

    check:
        _regex_match(str(resolveTimeout), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if resolveTimeout

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfig:
    r"""
    HTTP client configuration.

    Attributes
    ----------
    authorization : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigAuthorization, default is Undefined, optional
        authorization
    basicAuth : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigBasicAuth, default is Undefined, optional
        basic auth
    bearerTokenSecret : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigBearerTokenSecret, default is Undefined, optional
        bearer token secret
    followRedirects : bool, default is Undefined, optional
        FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
    noProxy : str, default is Undefined, optional
        `noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names
        that should be excluded from proxying. IP and domain names can
        contain port numbers.

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    oauth2 : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2, default is Undefined, optional
        oauth2
    proxyConnectHeader : {str:[MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigProxyConnectHeaderItems0]}, default is Undefined, optional
        ProxyConnectHeader optionally specifies headers to send to
        proxies during CONNECT requests.

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyFromEnvironment : bool, default is Undefined, optional
        Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyUrl : str, default is Undefined, optional
        `proxyURL` defines the HTTP proxy server to use.
    tlsConfig : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfig, default is Undefined, optional
        tls config
    """
    authorization?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigAuthorization
    basicAuth?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigBasicAuth
    bearerTokenSecret?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigBearerTokenSecret
    followRedirects?: bool
    noProxy?: str
    oauth2?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2
    proxyConnectHeader?: {str:[MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigProxyConnectHeaderItems0]}
    proxyFromEnvironment?: bool
    proxyUrl?: str
    tlsConfig?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfig

    check:
        _regex_match(str(proxyUrl), r"^(http|https|socks5)://.+$") if proxyUrl

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigAuthorization:
    r"""
    Authorization header configuration for the client.
    This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.

    Attributes
    ----------
    credentials : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigAuthorizationCredentials, default is Undefined, optional
        credentials
    $type : str, default is Undefined, optional
        Defines the authentication type. The value is case-insensitive.

        "Basic" is not a supported value.

        Default: "Bearer"
    """
    credentials?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigAuthorizationCredentials
    $type?: str

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigAuthorizationCredentials:
    r"""
    Selects a key of a Secret in the namespace that contains the credentials for authentication.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigBasicAuth:
    r"""
    BasicAuth for the client.
    This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.

    Attributes
    ----------
    password : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigBasicAuthPassword, default is Undefined, optional
        password
    username : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigBasicAuthUsername, default is Undefined, optional
        username
    """
    password?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigBasicAuthPassword
    username?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigBasicAuthUsername

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigBasicAuthPassword:
    r"""
    `password` specifies a key of a Secret containing the password for
    authentication.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigBasicAuthUsername:
    r"""
    `username` specifies a key of a Secret containing the username for
    authentication.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigBearerTokenSecret:
    r"""
    The secret's key that contains the bearer token to be used by the client
    for authentication.
    The secret needs to be in the same namespace as the Alertmanager
    object and accessible by the Prometheus Operator.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2:
    r"""
    OAuth2 client credentials used to fetch a token for the targets.

    Attributes
    ----------
    clientId : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2ClientID, default is Undefined, required
        client Id
    clientSecret : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2ClientSecret, default is Undefined, required
        client secret
    endpointParams : {str:str}, default is Undefined, optional
        `endpointParams` configures the HTTP parameters to append to the token
        URL.
    noProxy : str, default is Undefined, optional
        `noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names
        that should be excluded from proxying. IP and domain names can
        contain port numbers.

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyConnectHeader : {str:[MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2ProxyConnectHeaderItems0]}, default is Undefined, optional
        ProxyConnectHeader optionally specifies headers to send to
        proxies during CONNECT requests.

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyFromEnvironment : bool, default is Undefined, optional
        Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyUrl : str, default is Undefined, optional
        `proxyURL` defines the HTTP proxy server to use.
    scopes : [str], default is Undefined, optional
        `scopes` defines the OAuth2 scopes used for the token request.
    tlsConfig : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfig, default is Undefined, optional
        tls config
    tokenUrl : str, default is Undefined, required
        `tokenURL` configures the URL to fetch the token from.
    """
    clientId: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2ClientID

    clientSecret: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2ClientSecret

    endpointParams?: {str:str}
    noProxy?: str
    proxyConnectHeader?: {str:[MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2ProxyConnectHeaderItems0]}
    proxyFromEnvironment?: bool
    proxyUrl?: str
    scopes?: [str]
    tlsConfig?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfig
    tokenUrl: str

    check:
        _regex_match(str(proxyUrl), r"^(http|https|socks5)://.+$") if proxyUrl
        len(tokenUrl) >= 1

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2ClientID:
    r"""
    `clientId` specifies a key of a Secret or ConfigMap containing the
    OAuth2 client's ID.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2ClientIDConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2ClientIDSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2ClientIDConfigMap
    secret?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2ClientIDSecret

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2ClientIDConfigMap:
    r"""
    ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2ClientIDSecret:
    r"""
    Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2ClientSecret:
    r"""
    `clientSecret` specifies a key of a Secret containing the OAuth2
    client's secret.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2ProxyConnectHeaderItems0:
    r"""
    SecretKeySelector selects a key of a Secret.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfig:
    r"""
    TLS configuration to use when connecting to the OAuth2 server.
    It requires Prometheus >= v2.43.0.

    Attributes
    ----------
    ca : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfigCa, default is Undefined, optional
        ca
    cert : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfigCert, default is Undefined, optional
        cert
    insecureSkipVerify : bool, default is Undefined, optional
        Disable target certificate validation.
    keySecret : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfigKeySecret, default is Undefined, optional
        key secret
    maxVersion : str, default is Undefined, optional
        Maximum acceptable TLS version.

        It requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.
    minVersion : str, default is Undefined, optional
        Minimum acceptable TLS version.

        It requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.
    serverName : str, default is Undefined, optional
        Used to verify the hostname for the targets.
    """
    ca?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfigCa
    cert?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfigCert
    insecureSkipVerify?: bool
    keySecret?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfigKeySecret
    maxVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    minVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    serverName?: str

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfigCa:
    r"""
    Certificate authority used when verifying server certificates.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfigCaConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfigCaSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfigCaConfigMap
    secret?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfigCaSecret

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfigCaConfigMap:
    r"""
    ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfigCaSecret:
    r"""
    Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfigCert:
    r"""
    Client certificate to present when doing client-authentication.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfigCertConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfigCertSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfigCertConfigMap
    secret?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfigCertSecret

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfigCertConfigMap:
    r"""
    ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfigCertSecret:
    r"""
    Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigOauth2TLSConfigKeySecret:
    r"""
    Secret containing the client key file for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigProxyConnectHeaderItems0:
    r"""
    SecretKeySelector selects a key of a Secret.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfig:
    r"""
    TLS configuration for the client.

    Attributes
    ----------
    ca : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfigCa, default is Undefined, optional
        ca
    cert : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfigCert, default is Undefined, optional
        cert
    insecureSkipVerify : bool, default is Undefined, optional
        Disable target certificate validation.
    keySecret : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfigKeySecret, default is Undefined, optional
        key secret
    maxVersion : str, default is Undefined, optional
        Maximum acceptable TLS version.

        It requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.
    minVersion : str, default is Undefined, optional
        Minimum acceptable TLS version.

        It requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.
    serverName : str, default is Undefined, optional
        Used to verify the hostname for the targets.
    """
    ca?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfigCa
    cert?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfigCert
    insecureSkipVerify?: bool
    keySecret?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfigKeySecret
    maxVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    minVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    serverName?: str

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfigCa:
    r"""
    Certificate authority used when verifying server certificates.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfigCaConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfigCaSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfigCaConfigMap
    secret?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfigCaSecret

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfigCaConfigMap:
    r"""
    ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfigCaSecret:
    r"""
    Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfigCert:
    r"""
    Client certificate to present when doing client-authentication.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfigCertConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfigCertSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfigCertConfigMap
    secret?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfigCertSecret

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfigCertConfigMap:
    r"""
    ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfigCertSecret:
    r"""
    Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalHTTPConfigTLSConfigKeySecret:
    r"""
    Secret containing the client key file for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalJira:
    r"""
    The default configuration for Jira.

    Attributes
    ----------
    apiURL : str, default is Undefined, optional
        The default Jira API URL.

        It requires Alertmanager >= v0.28.0.
    """
    apiURL?: str

    check:
        _regex_match(str(apiURL), r"^(http|https)://.+$") if apiURL

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalOpsGenieAPIKey:
    r"""
    The default OpsGenie API Key.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalOpsGenieAPIURL:
    r"""
    The default OpsGenie API URL.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalRocketChat:
    r"""
    The default configuration for Rocket Chat.

    Attributes
    ----------
    apiURL : str, default is Undefined, optional
        The default Rocket Chat API URL.

        It requires Alertmanager >= v0.28.0.
    token : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalRocketChatToken, default is Undefined, optional
        token
    tokenID : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalRocketChatTokenID, default is Undefined, optional
        token ID
    """
    apiURL?: str
    token?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalRocketChatToken
    tokenID?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalRocketChatTokenID

    check:
        _regex_match(str(apiURL), r"^(http|https)://.+$") if apiURL

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalRocketChatToken:
    r"""
    The default Rocket Chat token.

    It requires Alertmanager >= v0.28.0.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalRocketChatTokenID:
    r"""
    The default Rocket Chat Token ID.

    It requires Alertmanager >= v0.28.0.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTP:
    r"""
    Configures global SMTP parameters.

    Attributes
    ----------
    authIdentity : str, default is Undefined, optional
        SMTP Auth using PLAIN
    authPassword : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPAuthPassword, default is Undefined, optional
        auth password
    authSecret : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPAuthSecret, default is Undefined, optional
        auth secret
    authUsername : str, default is Undefined, optional
        SMTP Auth using CRAM-MD5, LOGIN and PLAIN. If empty, Alertmanager doesn't authenticate to the SMTP server.
    from : str, default is Undefined, optional
        The default SMTP From header field.
    hello : str, default is Undefined, optional
        The default hostname to identify to the SMTP server.
    requireTLS : bool, default is Undefined, optional
        The default SMTP TLS requirement.
        Note that Go does not support unencrypted connections to remote SMTP endpoints.
    smartHost : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPSmartHost, default is Undefined, optional
        smart host
    tlsConfig : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfig, default is Undefined, optional
        tls config
    """
    authIdentity?: str
    authPassword?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPAuthPassword
    authSecret?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPAuthSecret
    authUsername?: str
    from?: str
    hello?: str
    requireTLS?: bool
    smartHost?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPSmartHost
    tlsConfig?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfig

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPAuthPassword:
    r"""
    SMTP Auth using LOGIN and PLAIN.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPAuthSecret:
    r"""
    SMTP Auth using CRAM-MD5.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPSmartHost:
    r"""
    The default SMTP smarthost used for sending emails.

    Attributes
    ----------
    host : str, default is Undefined, required
        Defines the host's address, it can be a DNS name or a literal IP address.
    port : str, default is Undefined, required
        Defines the host's port, it can be a literal port number or a port name.
    """
    host: str

    port: str

    check:
        len(host) >= 1
        len(port) >= 1

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfig:
    r"""
    The default TLS configuration for SMTP receivers

    Attributes
    ----------
    ca : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfigCa, default is Undefined, optional
        ca
    cert : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfigCert, default is Undefined, optional
        cert
    insecureSkipVerify : bool, default is Undefined, optional
        Disable target certificate validation.
    keySecret : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfigKeySecret, default is Undefined, optional
        key secret
    maxVersion : str, default is Undefined, optional
        Maximum acceptable TLS version.

        It requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.
    minVersion : str, default is Undefined, optional
        Minimum acceptable TLS version.

        It requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.
    serverName : str, default is Undefined, optional
        Used to verify the hostname for the targets.
    """
    ca?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfigCa
    cert?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfigCert
    insecureSkipVerify?: bool
    keySecret?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfigKeySecret
    maxVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    minVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    serverName?: str

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfigCa:
    r"""
    Certificate authority used when verifying server certificates.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfigCaConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfigCaSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfigCaConfigMap
    secret?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfigCaSecret

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfigCaConfigMap:
    r"""
    ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfigCaSecret:
    r"""
    Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfigCert:
    r"""
    Client certificate to present when doing client-authentication.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfigCertConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfigCertSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfigCertConfigMap
    secret?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfigCertSecret

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfigCertConfigMap:
    r"""
    ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfigCertSecret:
    r"""
    Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSMTPTLSConfigKeySecret:
    r"""
    Secret containing the client key file for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalSlackAPIURL:
    r"""
    The default Slack API URL.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalTelegram:
    r"""
    The default Telegram config

    Attributes
    ----------
    apiURL : str, default is Undefined, optional
        The default Telegram API URL.

        It requires Alertmanager >= v0.24.0.
    """
    apiURL?: str

    check:
        _regex_match(str(apiURL), r"^(http|https)://.+$") if apiURL

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalVictorops:
    r"""
    The default configuration for VictorOps.

    Attributes
    ----------
    apiKey : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalVictoropsAPIKey, default is Undefined, optional
        api key
    apiURL : str, default is Undefined, optional
        The default VictorOps API URL.
    """
    apiKey?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalVictoropsAPIKey
    apiURL?: str

    check:
        _regex_match(str(apiURL), r"^(http|https)://.+$") if apiURL

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalVictoropsAPIKey:
    r"""
    The default VictorOps API Key.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalWebex:
    r"""
    The default configuration for Jira.

    Attributes
    ----------
    apiURL : str, default is Undefined, optional
        The default Webex API URL.

        It requires Alertmanager >= v0.25.0.
    """
    apiURL?: str

    check:
        _regex_match(str(apiURL), r"^(http|https)://.+$") if apiURL

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalWechat:
    r"""
    The default WeChat Config

    Attributes
    ----------
    apiCorpID : str, default is Undefined, optional
        The default WeChat API Corporate ID.
    apiSecret : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalWechatAPISecret, default is Undefined, optional
        api secret
    apiURL : str, default is Undefined, optional
        The default WeChat API URL.
        The default value is "https://qyapi.weixin.qq.com/cgi-bin/"
    """
    apiCorpID?: str
    apiSecret?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalWechatAPISecret
    apiURL?: str

    check:
        len(apiCorpID) >= 1 if apiCorpID
        _regex_match(str(apiURL), r"^(http|https)://.+$") if apiURL

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationGlobalWechatAPISecret:
    r"""
    The default WeChat API Secret.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationTemplatesItems0:
    r"""
    SecretOrConfigMap allows to specify data as a Secret or ConfigMap. Fields are mutually exclusive.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationTemplatesItems0ConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationTemplatesItems0Secret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationTemplatesItems0ConfigMap
    secret?: MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationTemplatesItems0Secret

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationTemplatesItems0ConfigMap:
    r"""
    ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecAlertmanagerConfigurationTemplatesItems0Secret:
    r"""
    Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecClusterTLS:
    r"""
    Configures the mutual TLS configuration for the Alertmanager cluster's gossip protocol.

    It requires Alertmanager >= 0.24.0.

    Attributes
    ----------
    client : MonitoringCoreosComV1AlertmanagerSpecClusterTLSClient, default is Undefined, required
        client
    server : MonitoringCoreosComV1AlertmanagerSpecClusterTLSServer, default is Undefined, required
        server
    """
    client: MonitoringCoreosComV1AlertmanagerSpecClusterTLSClient

    server: MonitoringCoreosComV1AlertmanagerSpecClusterTLSServer

schema MonitoringCoreosComV1AlertmanagerSpecClusterTLSClient:
    r"""
    Client-side configuration for mutual TLS.

    Attributes
    ----------
    ca : MonitoringCoreosComV1AlertmanagerSpecClusterTLSClientCa, default is Undefined, optional
        ca
    cert : MonitoringCoreosComV1AlertmanagerSpecClusterTLSClientCert, default is Undefined, optional
        cert
    insecureSkipVerify : bool, default is Undefined, optional
        Disable target certificate validation.
    keySecret : MonitoringCoreosComV1AlertmanagerSpecClusterTLSClientKeySecret, default is Undefined, optional
        key secret
    maxVersion : str, default is Undefined, optional
        Maximum acceptable TLS version.

        It requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.
    minVersion : str, default is Undefined, optional
        Minimum acceptable TLS version.

        It requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.
    serverName : str, default is Undefined, optional
        Used to verify the hostname for the targets.
    """
    ca?: MonitoringCoreosComV1AlertmanagerSpecClusterTLSClientCa
    cert?: MonitoringCoreosComV1AlertmanagerSpecClusterTLSClientCert
    insecureSkipVerify?: bool
    keySecret?: MonitoringCoreosComV1AlertmanagerSpecClusterTLSClientKeySecret
    maxVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    minVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    serverName?: str

schema MonitoringCoreosComV1AlertmanagerSpecClusterTLSClientCa:
    r"""
    Certificate authority used when verifying server certificates.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1AlertmanagerSpecClusterTLSClientCaConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1AlertmanagerSpecClusterTLSClientCaSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1AlertmanagerSpecClusterTLSClientCaConfigMap
    secret?: MonitoringCoreosComV1AlertmanagerSpecClusterTLSClientCaSecret

schema MonitoringCoreosComV1AlertmanagerSpecClusterTLSClientCaConfigMap:
    r"""
    ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecClusterTLSClientCaSecret:
    r"""
    Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecClusterTLSClientCert:
    r"""
    Client certificate to present when doing client-authentication.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1AlertmanagerSpecClusterTLSClientCertConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1AlertmanagerSpecClusterTLSClientCertSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1AlertmanagerSpecClusterTLSClientCertConfigMap
    secret?: MonitoringCoreosComV1AlertmanagerSpecClusterTLSClientCertSecret

schema MonitoringCoreosComV1AlertmanagerSpecClusterTLSClientCertConfigMap:
    r"""
    ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecClusterTLSClientCertSecret:
    r"""
    Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecClusterTLSClientKeySecret:
    r"""
    Secret containing the client key file for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecClusterTLSServer:
    r"""
    Server-side configuration for mutual TLS.

    Attributes
    ----------
    cert : MonitoringCoreosComV1AlertmanagerSpecClusterTLSServerCert, default is Undefined, optional
        cert
    certFile : str, default is Undefined, optional
        Path to the TLS certificate file in the container for the web server.

        Either `keySecret` or `keyFile` must be defined.

        It is mutually exclusive with `cert`.
    cipherSuites : [str], default is Undefined, optional
        List of supported cipher suites for TLS versions up to TLS 1.2.

        If not defined, the Go default cipher suites are used.
        Available cipher suites are documented in the Go documentation:
        https://golang.org/pkg/crypto/tls/#pkg-constants
    clientAuthType : str, default is Undefined, optional
        The server policy for client TLS authentication.

        For more detail on clientAuth options:
        https://golang.org/pkg/crypto/tls/#ClientAuthType
    clientCAFile : str, default is Undefined, optional
        Path to the CA certificate file for client certificate authentication to
        the server.

        It is mutually exclusive with `client_ca`.
    client_ca : MonitoringCoreosComV1AlertmanagerSpecClusterTLSServerClientCa, default is Undefined, optional
        client ca
    curvePreferences : [str], default is Undefined, optional
        Elliptic curves that will be used in an ECDHE handshake, in preference
        order.

        Available curves are documented in the Go documentation:
        https://golang.org/pkg/crypto/tls/#CurveID
    keyFile : str, default is Undefined, optional
        Path to the TLS private key file in the container for the web server.

        If defined, either `cert` or `certFile` must be defined.

        It is mutually exclusive with `keySecret`.
    keySecret : MonitoringCoreosComV1AlertmanagerSpecClusterTLSServerKeySecret, default is Undefined, optional
        key secret
    maxVersion : str, default is Undefined, optional
        Maximum TLS version that is acceptable.
    minVersion : str, default is Undefined, optional
        Minimum TLS version that is acceptable.
    preferServerCipherSuites : bool, default is Undefined, optional
        Controls whether the server selects the client's most preferred cipher
        suite, or the server's most preferred cipher suite.

        If true then the server's preference, as expressed in
        the order of elements in cipherSuites, is used.
    """
    cert?: MonitoringCoreosComV1AlertmanagerSpecClusterTLSServerCert
    certFile?: str
    cipherSuites?: [str]
    clientAuthType?: str
    clientCAFile?: str
    client_ca?: MonitoringCoreosComV1AlertmanagerSpecClusterTLSServerClientCa
    curvePreferences?: [str]
    keyFile?: str
    keySecret?: MonitoringCoreosComV1AlertmanagerSpecClusterTLSServerKeySecret
    maxVersion?: str
    minVersion?: str
    preferServerCipherSuites?: bool

schema MonitoringCoreosComV1AlertmanagerSpecClusterTLSServerCert:
    r"""
    Secret or ConfigMap containing the TLS certificate for the web server.

    Either `keySecret` or `keyFile` must be defined.

    It is mutually exclusive with `certFile`.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1AlertmanagerSpecClusterTLSServerCertConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1AlertmanagerSpecClusterTLSServerCertSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1AlertmanagerSpecClusterTLSServerCertConfigMap
    secret?: MonitoringCoreosComV1AlertmanagerSpecClusterTLSServerCertSecret

schema MonitoringCoreosComV1AlertmanagerSpecClusterTLSServerCertConfigMap:
    r"""
    ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecClusterTLSServerCertSecret:
    r"""
    Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecClusterTLSServerClientCa:
    r"""
    Secret or ConfigMap containing the CA certificate for client certificate
    authentication to the server.

    It is mutually exclusive with `clientCAFile`.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1AlertmanagerSpecClusterTLSServerClientCaConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1AlertmanagerSpecClusterTLSServerClientCaSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1AlertmanagerSpecClusterTLSServerClientCaConfigMap
    secret?: MonitoringCoreosComV1AlertmanagerSpecClusterTLSServerClientCaSecret

schema MonitoringCoreosComV1AlertmanagerSpecClusterTLSServerClientCaConfigMap:
    r"""
    ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecClusterTLSServerClientCaSecret:
    r"""
    Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecClusterTLSServerKeySecret:
    r"""
    Secret containing the TLS private key for the web server.

    Either `cert` or `certFile` must be defined.

    It is mutually exclusive with `keyFile`.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0:
    r"""
    A single application container that you want to run within a pod.

    Attributes
    ----------
    args : [str], default is Undefined, optional
        Arguments to the entrypoint.
        The container image's CMD is used if this is not provided.
        Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
        cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
        produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
        of whether the variable exists or not. Cannot be updated.
        More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    command : [str], default is Undefined, optional
        Entrypoint array. Not executed within a shell.
        The container image's ENTRYPOINT is used if this is not provided.
        Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
        cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
        produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
        of whether the variable exists or not. Cannot be updated.
        More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    env : [MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvItems0], default is Undefined, optional
        List of environment variables to set in the container.
        Cannot be updated.
    envFrom : [MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvFromItems0], default is Undefined, optional
        List of sources to populate environment variables in the container.
        The keys defined within a source must be a C_IDENTIFIER. All invalid keys
        will be reported as an event when the container is starting. When a key exists in multiple
        sources, the value associated with the last source will take precedence.
        Values defined by an Env with a duplicate key will take precedence.
        Cannot be updated.
    image : str, default is Undefined, optional
        Container image name.
        More info: https://kubernetes.io/docs/concepts/containers/images
        This field is optional to allow higher level config management to default or override
        container images in workload controllers like Deployments and StatefulSets.
    imagePullPolicy : str, default is Undefined, optional
        Image pull policy.
        One of Always, Never, IfNotPresent.
        Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
        Cannot be updated.
        More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
    lifecycle : MonitoringCoreosComV1AlertmanagerSpecContainersItems0Lifecycle, default is Undefined, optional
        lifecycle
    livenessProbe : MonitoringCoreosComV1AlertmanagerSpecContainersItems0LivenessProbe, default is Undefined, optional
        liveness probe
    name : str, default is Undefined, required
        Name of the container specified as a DNS_LABEL.
        Each container in a pod must have a unique name (DNS_LABEL).
        Cannot be updated.
    ports : [MonitoringCoreosComV1AlertmanagerSpecContainersItems0PortsItems0], default is Undefined, optional
        List of ports to expose from the container. Not specifying a port here
        DOES NOT prevent that port from being exposed. Any port which is
        listening on the default "0.0.0.0" address inside a container will be
        accessible from the network.
        Modifying this array with strategic merge patch may corrupt the data.
        For more information See https://github.com/kubernetes/kubernetes/issues/108255.
        Cannot be updated.
    readinessProbe : MonitoringCoreosComV1AlertmanagerSpecContainersItems0ReadinessProbe, default is Undefined, optional
        readiness probe
    resizePolicy : [MonitoringCoreosComV1AlertmanagerSpecContainersItems0ResizePolicyItems0], default is Undefined, optional
        Resources resize policy for the container.
    resources : MonitoringCoreosComV1AlertmanagerSpecContainersItems0Resources, default is Undefined, optional
        resources
    restartPolicy : str, default is Undefined, optional
        RestartPolicy defines the restart behavior of individual containers in a pod.
        This field may only be set for init containers, and the only allowed value is "Always".
        For non-init containers or when this field is not specified,
        the restart behavior is defined by the Pod's restart policy and the container type.
        Setting the RestartPolicy as "Always" for the init container will have the following effect:
        this init container will be continually restarted on
        exit until all regular containers have terminated. Once all regular
        containers have completed, all init containers with restartPolicy "Always"
        will be shut down. This lifecycle differs from normal init containers and
        is often referred to as a "sidecar" container. Although this init
        container still starts in the init container sequence, it does not wait
        for the container to complete before proceeding to the next init
        container. Instead, the next init container starts immediately after this
        init container is started, or after any startupProbe has successfully
        completed.
    securityContext : MonitoringCoreosComV1AlertmanagerSpecContainersItems0SecurityContext, default is Undefined, optional
        security context
    startupProbe : MonitoringCoreosComV1AlertmanagerSpecContainersItems0StartupProbe, default is Undefined, optional
        startup probe
    stdin : bool, default is Undefined, optional
        Whether this container should allocate a buffer for stdin in the container runtime. If this
        is not set, reads from stdin in the container will always result in EOF.
        Default is false.
    stdinOnce : bool, default is Undefined, optional
        Whether the container runtime should close the stdin channel after it has been opened by
        a single attach. When stdin is true the stdin stream will remain open across multiple attach
        sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
        first client attaches to stdin, and then remains open and accepts data until the client disconnects,
        at which time stdin is closed and remains closed until the container is restarted. If this
        flag is false, a container processes that reads from stdin will never receive an EOF.
        Default is false
    terminationMessagePath : str, default is Undefined, optional
        Optional: Path at which the file to which the container's termination message
        will be written is mounted into the container's filesystem.
        Message written is intended to be brief final status, such as an assertion failure message.
        Will be truncated by the node if greater than 4096 bytes. The total message length across
        all containers will be limited to 12kb.
        Defaults to /dev/termination-log.
        Cannot be updated.
    terminationMessagePolicy : str, default is Undefined, optional
        Indicate how the termination message should be populated. File will use the contents of
        terminationMessagePath to populate the container status message on both success and failure.
        FallbackToLogsOnError will use the last chunk of container log output if the termination
        message file is empty and the container exited with an error.
        The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
        Defaults to File.
        Cannot be updated.
    tty : bool, default is Undefined, optional
        Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
        Default is false.
    volumeDevices : [MonitoringCoreosComV1AlertmanagerSpecContainersItems0VolumeDevicesItems0], default is Undefined, optional
        volumeDevices is the list of block devices to be used by the container.
    volumeMounts : [MonitoringCoreosComV1AlertmanagerSpecContainersItems0VolumeMountsItems0], default is Undefined, optional
        Pod volumes to mount into the container's filesystem.
        Cannot be updated.
    workingDir : str, default is Undefined, optional
        Container's working directory.
        If not specified, the container runtime's default will be used, which
        might be configured in the container image.
        Cannot be updated.
    """
    args?: [str]
    command?: [str]
    env?: [MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvItems0]
    envFrom?: [MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvFromItems0]
    image?: str
    imagePullPolicy?: str
    lifecycle?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0Lifecycle
    livenessProbe?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0LivenessProbe
    name: str

    ports?: [MonitoringCoreosComV1AlertmanagerSpecContainersItems0PortsItems0]
    readinessProbe?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0ReadinessProbe
    resizePolicy?: [MonitoringCoreosComV1AlertmanagerSpecContainersItems0ResizePolicyItems0]
    resources?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0Resources
    restartPolicy?: str
    securityContext?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0SecurityContext
    startupProbe?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0StartupProbe
    stdin?: bool
    stdinOnce?: bool
    terminationMessagePath?: str
    terminationMessagePolicy?: str
    tty?: bool
    volumeDevices?: [MonitoringCoreosComV1AlertmanagerSpecContainersItems0VolumeDevicesItems0]
    volumeMounts?: [MonitoringCoreosComV1AlertmanagerSpecContainersItems0VolumeMountsItems0]
    workingDir?: str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvFromItems0:
    r"""
    EnvFromSource represents the source of a set of ConfigMaps or Secrets

    Attributes
    ----------
    configMapRef : MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvFromItems0ConfigMapRef, default is Undefined, optional
        config map ref
    prefix : str, default is Undefined, optional
        Optional text to prepend to the name of each environment variable. Must be a C_IDENTIFIER.
    secretRef : MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvFromItems0SecretRef, default is Undefined, optional
        secret ref
    """
    configMapRef?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvFromItems0ConfigMapRef
    prefix?: str
    secretRef?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvFromItems0SecretRef

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvFromItems0ConfigMapRef:
    r"""
    The ConfigMap to select from

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap must be defined
    """
    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvFromItems0SecretRef:
    r"""
    The Secret to select from

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret must be defined
    """
    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvItems0:
    r"""
    EnvVar represents an environment variable present in a Container.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the environment variable. Must be a C_IDENTIFIER.
    value : str, default is Undefined, optional
        Variable references $(VAR_NAME) are expanded
        using the previously defined environment variables in the container and
        any service environment variables. If a variable cannot be resolved,
        the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
        "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
        Escaped references will never be expanded, regardless of whether the variable
        exists or not.
        Defaults to "".
    valueFrom : MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvItems0ValueFrom, default is Undefined, optional
        value from
    """
    name: str

    value?: str
    valueFrom?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvItems0ValueFrom

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvItems0ValueFrom:
    r"""
    Source for the environment variable's value. Cannot be used if value is not empty.

    Attributes
    ----------
    configMapKeyRef : MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvItems0ValueFromConfigMapKeyRef, default is Undefined, optional
        config map key ref
    fieldRef : MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvItems0ValueFromFieldRef, default is Undefined, optional
        field ref
    resourceFieldRef : MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvItems0ValueFromResourceFieldRef, default is Undefined, optional
        resource field ref
    secretKeyRef : MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvItems0ValueFromSecretKeyRef, default is Undefined, optional
        secret key ref
    """
    configMapKeyRef?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvItems0ValueFromConfigMapKeyRef
    fieldRef?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvItems0ValueFromFieldRef
    resourceFieldRef?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvItems0ValueFromResourceFieldRef
    secretKeyRef?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvItems0ValueFromSecretKeyRef

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvItems0ValueFromConfigMapKeyRef:
    r"""
    Selects a key of a ConfigMap.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvItems0ValueFromFieldRef:
    r"""
    Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
    spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, default is Undefined, required
        Path of the field to select in the specified API version.
    """
    apiVersion?: str
    fieldPath: str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvItems0ValueFromResourceFieldRef:
    r"""
    Selects a resource of the container: only resources limits and requests
    (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Container name: required for volumes, optional for env vars
    divisor : int | str, default is Undefined, optional
        Specifies the output format of the exposed resources, defaults to "1"
    resource : str, default is Undefined, required
        Required: resource to select
    """
    containerName?: str
    divisor?: int | str
    resource: str

    check:
        _regex_match(str(divisor), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if divisor

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0EnvItems0ValueFromSecretKeyRef:
    r"""
    Selects a key of a secret in the pod's namespace

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0Lifecycle:
    r"""
    Actions that the management system should take in response to container lifecycle events.
    Cannot be updated.

    Attributes
    ----------
    postStart : MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePostStart, default is Undefined, optional
        post start
    preStop : MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePreStop, default is Undefined, optional
        pre stop
    stopSignal : str, default is Undefined, optional
        StopSignal defines which signal will be sent to a container when it is being stopped.
        If not specified, the default is defined by the container runtime in use.
        StopSignal can only be set for Pods with a non-empty .spec.os.name
    """
    postStart?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePostStart
    preStop?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePreStop
    stopSignal?: str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePostStart:
    r"""
    PostStart is called immediately after a container is created. If the handler fails,
    the container is terminated and restarted according to its restart policy.
    Other management of the container blocks until the hook completes.
    More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks

    Attributes
    ----------
    exec : MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePostStartExec, default is Undefined, optional
        exec
    httpGet : MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePostStartHTTPGet, default is Undefined, optional
        http get
    sleep : MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePostStartSleep, default is Undefined, optional
        sleep
    tcpSocket : MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePostStartTCPSocket, default is Undefined, optional
        tcp socket
    """
    exec?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePostStartExec
    httpGet?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePostStartHTTPGet
    sleep?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePostStartSleep
    tcpSocket?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePostStartTCPSocket

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePostStartExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """
    command?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePostStartHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePostStartHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """
    host?: str
    httpHeaders?: [MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePostStartHTTPGetHTTPHeadersItems0]
    path?: str
    port: int | str

    scheme?: str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePostStartHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """
    name: str

    value: str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePostStartSleep:
    r"""
    Sleep represents a duration that the container should sleep.

    Attributes
    ----------
    seconds : int, default is Undefined, required
        Seconds is the number of seconds to sleep.
    """
    seconds: int

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePostStartTCPSocket:
    r"""
    Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
    for backward compatibility. There is no validation of this field and
    lifecycle hooks will fail at runtime when it is specified.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """
    host?: str
    port: int | str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePreStop:
    r"""
    PreStop is called immediately before a container is terminated due to an
    API request or management event such as liveness/startup probe failure,
    preemption, resource contention, etc. The handler is not called if the
    container crashes or exits. The Pod's termination grace period countdown begins before the
    PreStop hook is executed. Regardless of the outcome of the handler, the
    container will eventually terminate within the Pod's termination grace
    period (unless delayed by finalizers). Other management of the container blocks until the hook completes
    or until the termination grace period is reached.
    More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks

    Attributes
    ----------
    exec : MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePreStopExec, default is Undefined, optional
        exec
    httpGet : MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePreStopHTTPGet, default is Undefined, optional
        http get
    sleep : MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePreStopSleep, default is Undefined, optional
        sleep
    tcpSocket : MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePreStopTCPSocket, default is Undefined, optional
        tcp socket
    """
    exec?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePreStopExec
    httpGet?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePreStopHTTPGet
    sleep?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePreStopSleep
    tcpSocket?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePreStopTCPSocket

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePreStopExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """
    command?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePreStopHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePreStopHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """
    host?: str
    httpHeaders?: [MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePreStopHTTPGetHTTPHeadersItems0]
    path?: str
    port: int | str

    scheme?: str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePreStopHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """
    name: str

    value: str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePreStopSleep:
    r"""
    Sleep represents a duration that the container should sleep.

    Attributes
    ----------
    seconds : int, default is Undefined, required
        Seconds is the number of seconds to sleep.
    """
    seconds: int

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0LifecyclePreStopTCPSocket:
    r"""
    Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
    for backward compatibility. There is no validation of this field and
    lifecycle hooks will fail at runtime when it is specified.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """
    host?: str
    port: int | str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0LivenessProbe:
    r"""
    Periodic probe of container liveness.
    Container will be restarted if the probe fails.
    Cannot be updated.
    More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

    Attributes
    ----------
    exec : MonitoringCoreosComV1AlertmanagerSpecContainersItems0LivenessProbeExec, default is Undefined, optional
        exec
    failureThreshold : int, default is Undefined, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded.
        Defaults to 3. Minimum value is 1.
    grpc : MonitoringCoreosComV1AlertmanagerSpecContainersItems0LivenessProbeGrpc, default is Undefined, optional
        grpc
    httpGet : MonitoringCoreosComV1AlertmanagerSpecContainersItems0LivenessProbeHTTPGet, default is Undefined, optional
        http get
    initialDelaySeconds : int, default is Undefined, optional
        Number of seconds after the container has started before liveness probes are initiated.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, default is Undefined, optional
        How often (in seconds) to perform the probe.
        Default to 10 seconds. Minimum value is 1.
    successThreshold : int, default is Undefined, optional
        Minimum consecutive successes for the probe to be considered successful after having failed.
        Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : MonitoringCoreosComV1AlertmanagerSpecContainersItems0LivenessProbeTCPSocket, default is Undefined, optional
        tcp socket
    terminationGracePeriodSeconds : int, default is Undefined, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
        The grace period is the duration in seconds after the processes running in the pod are sent
        a termination signal and the time when the processes are forcibly halted with a kill signal.
        Set this value longer than the expected cleanup time for your process.
        If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
        value overrides the value provided by the pod spec.
        Value must be non-negative integer. The value zero indicates stop immediately via
        the kill signal (no opportunity to shut down).
        This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
        Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, default is Undefined, optional
        Number of seconds after which the probe times out.
        Defaults to 1 second. Minimum value is 1.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """
    exec?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0LivenessProbeExec
    failureThreshold?: int
    grpc?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0LivenessProbeGrpc
    httpGet?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0LivenessProbeHTTPGet
    initialDelaySeconds?: int
    periodSeconds?: int
    successThreshold?: int
    tcpSocket?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0LivenessProbeTCPSocket
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0LivenessProbeExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """
    command?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0LivenessProbeGrpc:
    r"""
    GRPC specifies a GRPC HealthCheckRequest.

    Attributes
    ----------
    port : int, default is Undefined, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, default is Undefined, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest
        (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """
    port: int

    service?: str = ""

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0LivenessProbeHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [MonitoringCoreosComV1AlertmanagerSpecContainersItems0LivenessProbeHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """
    host?: str
    httpHeaders?: [MonitoringCoreosComV1AlertmanagerSpecContainersItems0LivenessProbeHTTPGetHTTPHeadersItems0]
    path?: str
    port: int | str

    scheme?: str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0LivenessProbeHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """
    name: str

    value: str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0LivenessProbeTCPSocket:
    r"""
    TCPSocket specifies a connection to a TCP port.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """
    host?: str
    port: int | str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0PortsItems0:
    r"""
    ContainerPort represents a network port in a single container.

    Attributes
    ----------
    containerPort : int, default is Undefined, required
        Number of port to expose on the pod's IP address.
        This must be a valid port number, 0 < x < 65536.
    hostIP : str, default is Undefined, optional
        What host IP to bind the external port to.
    hostPort : int, default is Undefined, optional
        Number of port to expose on the host.
        If specified, this must be a valid port number, 0 < x < 65536.
        If HostNetwork is specified, this must match ContainerPort.
        Most containers do not need this.
    name : str, default is Undefined, optional
        If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
        named port in a pod must have a unique name. Name for the port that can be
        referred to by services.
    $protocol : str, default is "TCP", optional
        Protocol for port. Must be UDP, TCP, or SCTP.
        Defaults to "TCP".
    """
    containerPort: int

    hostIP?: str
    hostPort?: int
    name?: str
    $protocol?: str = "TCP"

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0ReadinessProbe:
    r"""
    Periodic probe of container service readiness.
    Container will be removed from service endpoints if the probe fails.
    Cannot be updated.
    More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

    Attributes
    ----------
    exec : MonitoringCoreosComV1AlertmanagerSpecContainersItems0ReadinessProbeExec, default is Undefined, optional
        exec
    failureThreshold : int, default is Undefined, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded.
        Defaults to 3. Minimum value is 1.
    grpc : MonitoringCoreosComV1AlertmanagerSpecContainersItems0ReadinessProbeGrpc, default is Undefined, optional
        grpc
    httpGet : MonitoringCoreosComV1AlertmanagerSpecContainersItems0ReadinessProbeHTTPGet, default is Undefined, optional
        http get
    initialDelaySeconds : int, default is Undefined, optional
        Number of seconds after the container has started before liveness probes are initiated.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, default is Undefined, optional
        How often (in seconds) to perform the probe.
        Default to 10 seconds. Minimum value is 1.
    successThreshold : int, default is Undefined, optional
        Minimum consecutive successes for the probe to be considered successful after having failed.
        Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : MonitoringCoreosComV1AlertmanagerSpecContainersItems0ReadinessProbeTCPSocket, default is Undefined, optional
        tcp socket
    terminationGracePeriodSeconds : int, default is Undefined, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
        The grace period is the duration in seconds after the processes running in the pod are sent
        a termination signal and the time when the processes are forcibly halted with a kill signal.
        Set this value longer than the expected cleanup time for your process.
        If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
        value overrides the value provided by the pod spec.
        Value must be non-negative integer. The value zero indicates stop immediately via
        the kill signal (no opportunity to shut down).
        This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
        Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, default is Undefined, optional
        Number of seconds after which the probe times out.
        Defaults to 1 second. Minimum value is 1.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """
    exec?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0ReadinessProbeExec
    failureThreshold?: int
    grpc?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0ReadinessProbeGrpc
    httpGet?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0ReadinessProbeHTTPGet
    initialDelaySeconds?: int
    periodSeconds?: int
    successThreshold?: int
    tcpSocket?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0ReadinessProbeTCPSocket
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0ReadinessProbeExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """
    command?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0ReadinessProbeGrpc:
    r"""
    GRPC specifies a GRPC HealthCheckRequest.

    Attributes
    ----------
    port : int, default is Undefined, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, default is Undefined, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest
        (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """
    port: int

    service?: str = ""

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0ReadinessProbeHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [MonitoringCoreosComV1AlertmanagerSpecContainersItems0ReadinessProbeHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """
    host?: str
    httpHeaders?: [MonitoringCoreosComV1AlertmanagerSpecContainersItems0ReadinessProbeHTTPGetHTTPHeadersItems0]
    path?: str
    port: int | str

    scheme?: str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0ReadinessProbeHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """
    name: str

    value: str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0ReadinessProbeTCPSocket:
    r"""
    TCPSocket specifies a connection to a TCP port.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """
    host?: str
    port: int | str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0ResizePolicyItems0:
    r"""
    ContainerResizePolicy represents resource resize policy for the container.

    Attributes
    ----------
    resourceName : str, default is Undefined, required
        Name of the resource to which this resource resize policy applies.
        Supported values: cpu, memory.
    restartPolicy : str, default is Undefined, required
        Restart policy to apply when specified resource is resized.
        If not specified, it defaults to NotRequired.
    """
    resourceName: str

    restartPolicy: str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0Resources:
    r"""
    Compute Resources required by this container.
    Cannot be updated.
    More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/

    Attributes
    ----------
    claims : [MonitoringCoreosComV1AlertmanagerSpecContainersItems0ResourcesClaimsItems0], default is Undefined, optional
        Claims lists the names of resources, defined in spec.resourceClaims,
        that are used by this container.

        This is an alpha field and requires enabling the
        DynamicResourceAllocation feature gate.

        This field is immutable. It can only be set for containers.
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """
    claims?: [MonitoringCoreosComV1AlertmanagerSpecContainersItems0ResourcesClaimsItems0]
    limits?: {str:int | str}
    requests?: {str:int | str}

    check:
        all _, limits in limits {_regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits} if limits
        all _, requests in requests {_regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests} if requests

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0ResourcesClaimsItems0:
    r"""
    ResourceClaim references one entry in PodSpec.ResourceClaims.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name must match the name of one entry in pod.spec.resourceClaims of
        the Pod where this field is used. It makes that resource available
        inside a container.
    request : str, default is Undefined, optional
        Request is the name chosen for a request in the referenced claim.
        If empty, everything from the claim is made available, otherwise
        only the result of this request.
    """
    name: str

    request?: str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0SecurityContext:
    r"""
    SecurityContext defines the security options the container should be run with.
    If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
    More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/

    Attributes
    ----------
    allowPrivilegeEscalation : bool, default is Undefined, optional
        AllowPrivilegeEscalation controls whether a process can gain more
        privileges than its parent process. This bool directly controls if
        the no_new_privs flag will be set on the container process.
        AllowPrivilegeEscalation is true always when the container is:
        1) run as Privileged
        2) has CAP_SYS_ADMIN
        Note that this field cannot be set when spec.os.name is windows.
    appArmorProfile : MonitoringCoreosComV1AlertmanagerSpecContainersItems0SecurityContextAppArmorProfile, default is Undefined, optional
        app armor profile
    capabilities : MonitoringCoreosComV1AlertmanagerSpecContainersItems0SecurityContextCapabilities, default is Undefined, optional
        capabilities
    privileged : bool, default is Undefined, optional
        Run container in privileged mode.
        Processes in privileged containers are essentially equivalent to root on the host.
        Defaults to false.
        Note that this field cannot be set when spec.os.name is windows.
    procMount : str, default is Undefined, optional
        procMount denotes the type of proc mount to use for the containers.
        The default value is Default which uses the container runtime defaults for
        readonly paths and masked paths.
        This requires the ProcMountType feature flag to be enabled.
        Note that this field cannot be set when spec.os.name is windows.
    readOnlyRootFilesystem : bool, default is Undefined, optional
        Whether this container has a read-only root filesystem.
        Default is false.
        Note that this field cannot be set when spec.os.name is windows.
    runAsGroup : int, default is Undefined, optional
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        Note that this field cannot be set when spec.os.name is windows.
    runAsNonRoot : bool, default is Undefined, optional
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
    runAsUser : int, default is Undefined, optional
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        Note that this field cannot be set when spec.os.name is windows.
    seLinuxOptions : MonitoringCoreosComV1AlertmanagerSpecContainersItems0SecurityContextSeLinuxOptions, default is Undefined, optional
        se linux options
    seccompProfile : MonitoringCoreosComV1AlertmanagerSpecContainersItems0SecurityContextSeccompProfile, default is Undefined, optional
        seccomp profile
    windowsOptions : MonitoringCoreosComV1AlertmanagerSpecContainersItems0SecurityContextWindowsOptions, default is Undefined, optional
        windows options
    """
    allowPrivilegeEscalation?: bool
    appArmorProfile?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0SecurityContextAppArmorProfile
    capabilities?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0SecurityContextCapabilities
    privileged?: bool
    procMount?: str
    readOnlyRootFilesystem?: bool
    runAsGroup?: int
    runAsNonRoot?: bool
    runAsUser?: int
    seLinuxOptions?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0SecurityContextSeLinuxOptions
    seccompProfile?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0SecurityContextSeccompProfile
    windowsOptions?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0SecurityContextWindowsOptions

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0SecurityContextAppArmorProfile:
    r"""
    appArmorProfile is the AppArmor options to use by this container. If set, this profile
    overrides the pod's appArmorProfile.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    localhostProfile : str, default is Undefined, optional
        localhostProfile indicates a profile loaded on the node that should be used.
        The profile must be preconfigured on the node to work.
        Must match the loaded name of the profile.
        Must be set if and only if type is "Localhost".
    $type : str, default is Undefined, required
        type indicates which kind of AppArmor profile will be applied.
        Valid options are:
          Localhost - a profile pre-loaded on the node.
          RuntimeDefault - the container runtime's default profile.
          Unconfined - no AppArmor enforcement.
    """
    localhostProfile?: str
    $type: str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0SecurityContextCapabilities:
    r"""
    The capabilities to add/drop when running containers.
    Defaults to the default set of capabilities granted by the container runtime.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    add : [str], default is Undefined, optional
        Added capabilities
    drop : [str], default is Undefined, optional
        Removed capabilities
    """
    add?: [str]
    drop?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0SecurityContextSeLinuxOptions:
    r"""
    The SELinux context to be applied to the container.
    If unspecified, the container runtime will allocate a random SELinux context for each
    container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
    PodSecurityContext, the value specified in SecurityContext takes precedence.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    level : str, default is Undefined, optional
        Level is SELinux level label that applies to the container.
    role : str, default is Undefined, optional
        Role is a SELinux role label that applies to the container.
    $type : str, default is Undefined, optional
        Type is a SELinux type label that applies to the container.
    user : str, default is Undefined, optional
        User is a SELinux user label that applies to the container.
    """
    level?: str
    role?: str
    $type?: str
    user?: str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0SecurityContextSeccompProfile:
    r"""
    The seccomp options to use by this container. If seccomp options are
    provided at both the pod & container level, the container options
    override the pod options.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    localhostProfile : str, default is Undefined, optional
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
    $type : str, default is Undefined, required
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
    """
    localhostProfile?: str
    $type: str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0SecurityContextWindowsOptions:
    r"""
    The Windows specific settings applied to all containers.
    If unspecified, the options from the PodSecurityContext will be used.
    If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    Note that this field cannot be set when spec.os.name is linux.

    Attributes
    ----------
    gmsaCredentialSpec : str, default is Undefined, optional
        GMSACredentialSpec is where the GMSA admission webhook
        (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
        GMSA credential spec named by the GMSACredentialSpecName field.
    gmsaCredentialSpecName : str, default is Undefined, optional
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
    hostProcess : bool, default is Undefined, optional
        HostProcess determines if a container should be run as a 'Host Process' container.
        All of a Pod's containers must have the same effective HostProcess value
        (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
        In addition, if HostProcess is true then HostNetwork must also be set to true.
    runAsUserName : str, default is Undefined, optional
        The UserName in Windows to run the entrypoint of the container process.
        Defaults to the user specified in image metadata if unspecified.
        May also be set in PodSecurityContext. If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
    """
    gmsaCredentialSpec?: str
    gmsaCredentialSpecName?: str
    hostProcess?: bool
    runAsUserName?: str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0StartupProbe:
    r"""
    StartupProbe indicates that the Pod has successfully initialized.
    If specified, no other probes are executed until this completes successfully.
    If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
    This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
    when it might take a long time to load data or warm a cache, than during steady-state operation.
    This cannot be updated.
    More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

    Attributes
    ----------
    exec : MonitoringCoreosComV1AlertmanagerSpecContainersItems0StartupProbeExec, default is Undefined, optional
        exec
    failureThreshold : int, default is Undefined, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded.
        Defaults to 3. Minimum value is 1.
    grpc : MonitoringCoreosComV1AlertmanagerSpecContainersItems0StartupProbeGrpc, default is Undefined, optional
        grpc
    httpGet : MonitoringCoreosComV1AlertmanagerSpecContainersItems0StartupProbeHTTPGet, default is Undefined, optional
        http get
    initialDelaySeconds : int, default is Undefined, optional
        Number of seconds after the container has started before liveness probes are initiated.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, default is Undefined, optional
        How often (in seconds) to perform the probe.
        Default to 10 seconds. Minimum value is 1.
    successThreshold : int, default is Undefined, optional
        Minimum consecutive successes for the probe to be considered successful after having failed.
        Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : MonitoringCoreosComV1AlertmanagerSpecContainersItems0StartupProbeTCPSocket, default is Undefined, optional
        tcp socket
    terminationGracePeriodSeconds : int, default is Undefined, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
        The grace period is the duration in seconds after the processes running in the pod are sent
        a termination signal and the time when the processes are forcibly halted with a kill signal.
        Set this value longer than the expected cleanup time for your process.
        If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
        value overrides the value provided by the pod spec.
        Value must be non-negative integer. The value zero indicates stop immediately via
        the kill signal (no opportunity to shut down).
        This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
        Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, default is Undefined, optional
        Number of seconds after which the probe times out.
        Defaults to 1 second. Minimum value is 1.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """
    exec?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0StartupProbeExec
    failureThreshold?: int
    grpc?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0StartupProbeGrpc
    httpGet?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0StartupProbeHTTPGet
    initialDelaySeconds?: int
    periodSeconds?: int
    successThreshold?: int
    tcpSocket?: MonitoringCoreosComV1AlertmanagerSpecContainersItems0StartupProbeTCPSocket
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0StartupProbeExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """
    command?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0StartupProbeGrpc:
    r"""
    GRPC specifies a GRPC HealthCheckRequest.

    Attributes
    ----------
    port : int, default is Undefined, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, default is Undefined, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest
        (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """
    port: int

    service?: str = ""

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0StartupProbeHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [MonitoringCoreosComV1AlertmanagerSpecContainersItems0StartupProbeHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """
    host?: str
    httpHeaders?: [MonitoringCoreosComV1AlertmanagerSpecContainersItems0StartupProbeHTTPGetHTTPHeadersItems0]
    path?: str
    port: int | str

    scheme?: str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0StartupProbeHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """
    name: str

    value: str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0StartupProbeTCPSocket:
    r"""
    TCPSocket specifies a connection to a TCP port.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """
    host?: str
    port: int | str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0VolumeDevicesItems0:
    r"""
    volumeDevice describes a mapping of a raw block device within a container.

    Attributes
    ----------
    devicePath : str, default is Undefined, required
        devicePath is the path inside of the container that the device will be mapped to.
    name : str, default is Undefined, required
        name must match the name of a persistentVolumeClaim in the pod
    """
    devicePath: str

    name: str

schema MonitoringCoreosComV1AlertmanagerSpecContainersItems0VolumeMountsItems0:
    r"""
    VolumeMount describes a mounting of a Volume within a container.

    Attributes
    ----------
    mountPath : str, default is Undefined, required
        Path within the container at which the volume should be mounted.  Must
        not contain ':'.
    mountPropagation : str, default is Undefined, optional
        mountPropagation determines how mounts are propagated from the host
        to container and the other way around.
        When not set, MountPropagationNone is used.
        This field is beta in 1.10.
        When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
        (which defaults to None).
    name : str, default is Undefined, required
        This must match the Name of a Volume.
    readOnly : bool, default is Undefined, optional
        Mounted read-only if true, read-write otherwise (false or unspecified).
        Defaults to false.
    recursiveReadOnly : str, default is Undefined, optional
        RecursiveReadOnly specifies whether read-only mounts should be handled
        recursively.

        If ReadOnly is false, this field has no meaning and must be unspecified.

        If ReadOnly is true, and this field is set to Disabled, the mount is not made
        recursively read-only.  If this field is set to IfPossible, the mount is made
        recursively read-only, if it is supported by the container runtime.  If this
        field is set to Enabled, the mount is made recursively read-only if it is
        supported by the container runtime, otherwise the pod will not be started and
        an error will be generated to indicate the reason.

        If this field is set to IfPossible or Enabled, MountPropagation must be set to
        None (or be unspecified, which defaults to None).

        If this field is not specified, it is treated as an equivalent of Disabled.
    subPath : str, default is Undefined, optional
        Path within the volume from which the container's volume should be mounted.
        Defaults to "" (volume's root).
    subPathExpr : str, default is Undefined, optional
        Expanded path within the volume from which the container's volume should be mounted.
        Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
        Defaults to "" (volume's root).
        SubPathExpr and SubPath are mutually exclusive.
    """
    mountPath: str

    mountPropagation?: str
    name: str

    readOnly?: bool
    recursiveReadOnly?: str
    subPath?: str
    subPathExpr?: str

schema MonitoringCoreosComV1AlertmanagerSpecDNSConfig:
    r"""
    Defines the DNS configuration for the pods.

    Attributes
    ----------
    nameservers : [str], default is Undefined, optional
        A list of DNS name server IP addresses.
        This will be appended to the base nameservers generated from DNSPolicy.
    options : [MonitoringCoreosComV1AlertmanagerSpecDNSConfigOptionsItems0], default is Undefined, optional
        A list of DNS resolver options.
        This will be merged with the base options generated from DNSPolicy.
        Resolution options given in Options
        will override those that appear in the base DNSPolicy.
    searches : [str], default is Undefined, optional
        A list of DNS search domains for host-name lookup.
        This will be appended to the base search paths generated from DNSPolicy.
    """
    nameservers?: [str]
    options?: [MonitoringCoreosComV1AlertmanagerSpecDNSConfigOptionsItems0]
    searches?: [str]

    check:
        all nameservers in nameservers {len(nameservers) >= 1 if nameservers not in [None, Undefined]} if nameservers
        all searches in searches {len(searches) >= 1 if searches not in [None, Undefined]} if searches

schema MonitoringCoreosComV1AlertmanagerSpecDNSConfigOptionsItems0:
    r"""
    PodDNSConfigOption defines DNS resolver options of a pod.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is required and must be unique.
    value : str, default is Undefined, optional
        Value is optional.
    """
    name: str

    value?: str

    check:
        len(name) >= 1

schema MonitoringCoreosComV1AlertmanagerSpecHostAliasesItems0:
    r"""
    HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
    pod's hosts file.

    Attributes
    ----------
    hostnames : [str], default is Undefined, required
        Hostnames for the above IP address.
    ip : str, default is Undefined, required
        IP address of the host file entry.
    """
    hostnames: [str]

    ip: str

schema MonitoringCoreosComV1AlertmanagerSpecImagePullSecretsItems0:
    r"""
    LocalObjectReference contains enough information to let you locate the
    referenced object inside the same namespace.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    name?: str = ""

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0:
    r"""
    A single application container that you want to run within a pod.

    Attributes
    ----------
    args : [str], default is Undefined, optional
        Arguments to the entrypoint.
        The container image's CMD is used if this is not provided.
        Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
        cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
        produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
        of whether the variable exists or not. Cannot be updated.
        More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    command : [str], default is Undefined, optional
        Entrypoint array. Not executed within a shell.
        The container image's ENTRYPOINT is used if this is not provided.
        Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
        cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
        produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
        of whether the variable exists or not. Cannot be updated.
        More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    env : [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvItems0], default is Undefined, optional
        List of environment variables to set in the container.
        Cannot be updated.
    envFrom : [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvFromItems0], default is Undefined, optional
        List of sources to populate environment variables in the container.
        The keys defined within a source must be a C_IDENTIFIER. All invalid keys
        will be reported as an event when the container is starting. When a key exists in multiple
        sources, the value associated with the last source will take precedence.
        Values defined by an Env with a duplicate key will take precedence.
        Cannot be updated.
    image : str, default is Undefined, optional
        Container image name.
        More info: https://kubernetes.io/docs/concepts/containers/images
        This field is optional to allow higher level config management to default or override
        container images in workload controllers like Deployments and StatefulSets.
    imagePullPolicy : str, default is Undefined, optional
        Image pull policy.
        One of Always, Never, IfNotPresent.
        Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
        Cannot be updated.
        More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
    lifecycle : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0Lifecycle, default is Undefined, optional
        lifecycle
    livenessProbe : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LivenessProbe, default is Undefined, optional
        liveness probe
    name : str, default is Undefined, required
        Name of the container specified as a DNS_LABEL.
        Each container in a pod must have a unique name (DNS_LABEL).
        Cannot be updated.
    ports : [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0PortsItems0], default is Undefined, optional
        List of ports to expose from the container. Not specifying a port here
        DOES NOT prevent that port from being exposed. Any port which is
        listening on the default "0.0.0.0" address inside a container will be
        accessible from the network.
        Modifying this array with strategic merge patch may corrupt the data.
        For more information See https://github.com/kubernetes/kubernetes/issues/108255.
        Cannot be updated.
    readinessProbe : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ReadinessProbe, default is Undefined, optional
        readiness probe
    resizePolicy : [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ResizePolicyItems0], default is Undefined, optional
        Resources resize policy for the container.
    resources : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0Resources, default is Undefined, optional
        resources
    restartPolicy : str, default is Undefined, optional
        RestartPolicy defines the restart behavior of individual containers in a pod.
        This field may only be set for init containers, and the only allowed value is "Always".
        For non-init containers or when this field is not specified,
        the restart behavior is defined by the Pod's restart policy and the container type.
        Setting the RestartPolicy as "Always" for the init container will have the following effect:
        this init container will be continually restarted on
        exit until all regular containers have terminated. Once all regular
        containers have completed, all init containers with restartPolicy "Always"
        will be shut down. This lifecycle differs from normal init containers and
        is often referred to as a "sidecar" container. Although this init
        container still starts in the init container sequence, it does not wait
        for the container to complete before proceeding to the next init
        container. Instead, the next init container starts immediately after this
        init container is started, or after any startupProbe has successfully
        completed.
    securityContext : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0SecurityContext, default is Undefined, optional
        security context
    startupProbe : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0StartupProbe, default is Undefined, optional
        startup probe
    stdin : bool, default is Undefined, optional
        Whether this container should allocate a buffer for stdin in the container runtime. If this
        is not set, reads from stdin in the container will always result in EOF.
        Default is false.
    stdinOnce : bool, default is Undefined, optional
        Whether the container runtime should close the stdin channel after it has been opened by
        a single attach. When stdin is true the stdin stream will remain open across multiple attach
        sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
        first client attaches to stdin, and then remains open and accepts data until the client disconnects,
        at which time stdin is closed and remains closed until the container is restarted. If this
        flag is false, a container processes that reads from stdin will never receive an EOF.
        Default is false
    terminationMessagePath : str, default is Undefined, optional
        Optional: Path at which the file to which the container's termination message
        will be written is mounted into the container's filesystem.
        Message written is intended to be brief final status, such as an assertion failure message.
        Will be truncated by the node if greater than 4096 bytes. The total message length across
        all containers will be limited to 12kb.
        Defaults to /dev/termination-log.
        Cannot be updated.
    terminationMessagePolicy : str, default is Undefined, optional
        Indicate how the termination message should be populated. File will use the contents of
        terminationMessagePath to populate the container status message on both success and failure.
        FallbackToLogsOnError will use the last chunk of container log output if the termination
        message file is empty and the container exited with an error.
        The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
        Defaults to File.
        Cannot be updated.
    tty : bool, default is Undefined, optional
        Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
        Default is false.
    volumeDevices : [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0VolumeDevicesItems0], default is Undefined, optional
        volumeDevices is the list of block devices to be used by the container.
    volumeMounts : [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0VolumeMountsItems0], default is Undefined, optional
        Pod volumes to mount into the container's filesystem.
        Cannot be updated.
    workingDir : str, default is Undefined, optional
        Container's working directory.
        If not specified, the container runtime's default will be used, which
        might be configured in the container image.
        Cannot be updated.
    """
    args?: [str]
    command?: [str]
    env?: [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvItems0]
    envFrom?: [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvFromItems0]
    image?: str
    imagePullPolicy?: str
    lifecycle?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0Lifecycle
    livenessProbe?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LivenessProbe
    name: str

    ports?: [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0PortsItems0]
    readinessProbe?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ReadinessProbe
    resizePolicy?: [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ResizePolicyItems0]
    resources?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0Resources
    restartPolicy?: str
    securityContext?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0SecurityContext
    startupProbe?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0StartupProbe
    stdin?: bool
    stdinOnce?: bool
    terminationMessagePath?: str
    terminationMessagePolicy?: str
    tty?: bool
    volumeDevices?: [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0VolumeDevicesItems0]
    volumeMounts?: [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0VolumeMountsItems0]
    workingDir?: str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvFromItems0:
    r"""
    EnvFromSource represents the source of a set of ConfigMaps or Secrets

    Attributes
    ----------
    configMapRef : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvFromItems0ConfigMapRef, default is Undefined, optional
        config map ref
    prefix : str, default is Undefined, optional
        Optional text to prepend to the name of each environment variable. Must be a C_IDENTIFIER.
    secretRef : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvFromItems0SecretRef, default is Undefined, optional
        secret ref
    """
    configMapRef?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvFromItems0ConfigMapRef
    prefix?: str
    secretRef?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvFromItems0SecretRef

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvFromItems0ConfigMapRef:
    r"""
    The ConfigMap to select from

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap must be defined
    """
    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvFromItems0SecretRef:
    r"""
    The Secret to select from

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret must be defined
    """
    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvItems0:
    r"""
    EnvVar represents an environment variable present in a Container.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the environment variable. Must be a C_IDENTIFIER.
    value : str, default is Undefined, optional
        Variable references $(VAR_NAME) are expanded
        using the previously defined environment variables in the container and
        any service environment variables. If a variable cannot be resolved,
        the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
        "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
        Escaped references will never be expanded, regardless of whether the variable
        exists or not.
        Defaults to "".
    valueFrom : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvItems0ValueFrom, default is Undefined, optional
        value from
    """
    name: str

    value?: str
    valueFrom?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvItems0ValueFrom

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvItems0ValueFrom:
    r"""
    Source for the environment variable's value. Cannot be used if value is not empty.

    Attributes
    ----------
    configMapKeyRef : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvItems0ValueFromConfigMapKeyRef, default is Undefined, optional
        config map key ref
    fieldRef : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvItems0ValueFromFieldRef, default is Undefined, optional
        field ref
    resourceFieldRef : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvItems0ValueFromResourceFieldRef, default is Undefined, optional
        resource field ref
    secretKeyRef : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvItems0ValueFromSecretKeyRef, default is Undefined, optional
        secret key ref
    """
    configMapKeyRef?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvItems0ValueFromConfigMapKeyRef
    fieldRef?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvItems0ValueFromFieldRef
    resourceFieldRef?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvItems0ValueFromResourceFieldRef
    secretKeyRef?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvItems0ValueFromSecretKeyRef

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvItems0ValueFromConfigMapKeyRef:
    r"""
    Selects a key of a ConfigMap.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvItems0ValueFromFieldRef:
    r"""
    Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
    spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, default is Undefined, required
        Path of the field to select in the specified API version.
    """
    apiVersion?: str
    fieldPath: str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvItems0ValueFromResourceFieldRef:
    r"""
    Selects a resource of the container: only resources limits and requests
    (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Container name: required for volumes, optional for env vars
    divisor : int | str, default is Undefined, optional
        Specifies the output format of the exposed resources, defaults to "1"
    resource : str, default is Undefined, required
        Required: resource to select
    """
    containerName?: str
    divisor?: int | str
    resource: str

    check:
        _regex_match(str(divisor), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if divisor

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0EnvItems0ValueFromSecretKeyRef:
    r"""
    Selects a key of a secret in the pod's namespace

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0Lifecycle:
    r"""
    Actions that the management system should take in response to container lifecycle events.
    Cannot be updated.

    Attributes
    ----------
    postStart : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePostStart, default is Undefined, optional
        post start
    preStop : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePreStop, default is Undefined, optional
        pre stop
    stopSignal : str, default is Undefined, optional
        StopSignal defines which signal will be sent to a container when it is being stopped.
        If not specified, the default is defined by the container runtime in use.
        StopSignal can only be set for Pods with a non-empty .spec.os.name
    """
    postStart?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePostStart
    preStop?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePreStop
    stopSignal?: str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePostStart:
    r"""
    PostStart is called immediately after a container is created. If the handler fails,
    the container is terminated and restarted according to its restart policy.
    Other management of the container blocks until the hook completes.
    More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks

    Attributes
    ----------
    exec : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePostStartExec, default is Undefined, optional
        exec
    httpGet : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePostStartHTTPGet, default is Undefined, optional
        http get
    sleep : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePostStartSleep, default is Undefined, optional
        sleep
    tcpSocket : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePostStartTCPSocket, default is Undefined, optional
        tcp socket
    """
    exec?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePostStartExec
    httpGet?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePostStartHTTPGet
    sleep?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePostStartSleep
    tcpSocket?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePostStartTCPSocket

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePostStartExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """
    command?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePostStartHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePostStartHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """
    host?: str
    httpHeaders?: [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePostStartHTTPGetHTTPHeadersItems0]
    path?: str
    port: int | str

    scheme?: str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePostStartHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """
    name: str

    value: str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePostStartSleep:
    r"""
    Sleep represents a duration that the container should sleep.

    Attributes
    ----------
    seconds : int, default is Undefined, required
        Seconds is the number of seconds to sleep.
    """
    seconds: int

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePostStartTCPSocket:
    r"""
    Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
    for backward compatibility. There is no validation of this field and
    lifecycle hooks will fail at runtime when it is specified.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """
    host?: str
    port: int | str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePreStop:
    r"""
    PreStop is called immediately before a container is terminated due to an
    API request or management event such as liveness/startup probe failure,
    preemption, resource contention, etc. The handler is not called if the
    container crashes or exits. The Pod's termination grace period countdown begins before the
    PreStop hook is executed. Regardless of the outcome of the handler, the
    container will eventually terminate within the Pod's termination grace
    period (unless delayed by finalizers). Other management of the container blocks until the hook completes
    or until the termination grace period is reached.
    More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks

    Attributes
    ----------
    exec : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePreStopExec, default is Undefined, optional
        exec
    httpGet : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePreStopHTTPGet, default is Undefined, optional
        http get
    sleep : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePreStopSleep, default is Undefined, optional
        sleep
    tcpSocket : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePreStopTCPSocket, default is Undefined, optional
        tcp socket
    """
    exec?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePreStopExec
    httpGet?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePreStopHTTPGet
    sleep?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePreStopSleep
    tcpSocket?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePreStopTCPSocket

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePreStopExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """
    command?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePreStopHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePreStopHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """
    host?: str
    httpHeaders?: [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePreStopHTTPGetHTTPHeadersItems0]
    path?: str
    port: int | str

    scheme?: str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePreStopHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """
    name: str

    value: str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePreStopSleep:
    r"""
    Sleep represents a duration that the container should sleep.

    Attributes
    ----------
    seconds : int, default is Undefined, required
        Seconds is the number of seconds to sleep.
    """
    seconds: int

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LifecyclePreStopTCPSocket:
    r"""
    Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
    for backward compatibility. There is no validation of this field and
    lifecycle hooks will fail at runtime when it is specified.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """
    host?: str
    port: int | str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LivenessProbe:
    r"""
    Periodic probe of container liveness.
    Container will be restarted if the probe fails.
    Cannot be updated.
    More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

    Attributes
    ----------
    exec : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LivenessProbeExec, default is Undefined, optional
        exec
    failureThreshold : int, default is Undefined, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded.
        Defaults to 3. Minimum value is 1.
    grpc : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LivenessProbeGrpc, default is Undefined, optional
        grpc
    httpGet : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LivenessProbeHTTPGet, default is Undefined, optional
        http get
    initialDelaySeconds : int, default is Undefined, optional
        Number of seconds after the container has started before liveness probes are initiated.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, default is Undefined, optional
        How often (in seconds) to perform the probe.
        Default to 10 seconds. Minimum value is 1.
    successThreshold : int, default is Undefined, optional
        Minimum consecutive successes for the probe to be considered successful after having failed.
        Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LivenessProbeTCPSocket, default is Undefined, optional
        tcp socket
    terminationGracePeriodSeconds : int, default is Undefined, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
        The grace period is the duration in seconds after the processes running in the pod are sent
        a termination signal and the time when the processes are forcibly halted with a kill signal.
        Set this value longer than the expected cleanup time for your process.
        If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
        value overrides the value provided by the pod spec.
        Value must be non-negative integer. The value zero indicates stop immediately via
        the kill signal (no opportunity to shut down).
        This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
        Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, default is Undefined, optional
        Number of seconds after which the probe times out.
        Defaults to 1 second. Minimum value is 1.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """
    exec?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LivenessProbeExec
    failureThreshold?: int
    grpc?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LivenessProbeGrpc
    httpGet?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LivenessProbeHTTPGet
    initialDelaySeconds?: int
    periodSeconds?: int
    successThreshold?: int
    tcpSocket?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LivenessProbeTCPSocket
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LivenessProbeExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """
    command?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LivenessProbeGrpc:
    r"""
    GRPC specifies a GRPC HealthCheckRequest.

    Attributes
    ----------
    port : int, default is Undefined, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, default is Undefined, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest
        (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """
    port: int

    service?: str = ""

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LivenessProbeHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LivenessProbeHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """
    host?: str
    httpHeaders?: [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LivenessProbeHTTPGetHTTPHeadersItems0]
    path?: str
    port: int | str

    scheme?: str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LivenessProbeHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """
    name: str

    value: str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0LivenessProbeTCPSocket:
    r"""
    TCPSocket specifies a connection to a TCP port.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """
    host?: str
    port: int | str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0PortsItems0:
    r"""
    ContainerPort represents a network port in a single container.

    Attributes
    ----------
    containerPort : int, default is Undefined, required
        Number of port to expose on the pod's IP address.
        This must be a valid port number, 0 < x < 65536.
    hostIP : str, default is Undefined, optional
        What host IP to bind the external port to.
    hostPort : int, default is Undefined, optional
        Number of port to expose on the host.
        If specified, this must be a valid port number, 0 < x < 65536.
        If HostNetwork is specified, this must match ContainerPort.
        Most containers do not need this.
    name : str, default is Undefined, optional
        If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
        named port in a pod must have a unique name. Name for the port that can be
        referred to by services.
    $protocol : str, default is "TCP", optional
        Protocol for port. Must be UDP, TCP, or SCTP.
        Defaults to "TCP".
    """
    containerPort: int

    hostIP?: str
    hostPort?: int
    name?: str
    $protocol?: str = "TCP"

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ReadinessProbe:
    r"""
    Periodic probe of container service readiness.
    Container will be removed from service endpoints if the probe fails.
    Cannot be updated.
    More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

    Attributes
    ----------
    exec : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ReadinessProbeExec, default is Undefined, optional
        exec
    failureThreshold : int, default is Undefined, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded.
        Defaults to 3. Minimum value is 1.
    grpc : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ReadinessProbeGrpc, default is Undefined, optional
        grpc
    httpGet : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ReadinessProbeHTTPGet, default is Undefined, optional
        http get
    initialDelaySeconds : int, default is Undefined, optional
        Number of seconds after the container has started before liveness probes are initiated.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, default is Undefined, optional
        How often (in seconds) to perform the probe.
        Default to 10 seconds. Minimum value is 1.
    successThreshold : int, default is Undefined, optional
        Minimum consecutive successes for the probe to be considered successful after having failed.
        Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ReadinessProbeTCPSocket, default is Undefined, optional
        tcp socket
    terminationGracePeriodSeconds : int, default is Undefined, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
        The grace period is the duration in seconds after the processes running in the pod are sent
        a termination signal and the time when the processes are forcibly halted with a kill signal.
        Set this value longer than the expected cleanup time for your process.
        If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
        value overrides the value provided by the pod spec.
        Value must be non-negative integer. The value zero indicates stop immediately via
        the kill signal (no opportunity to shut down).
        This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
        Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, default is Undefined, optional
        Number of seconds after which the probe times out.
        Defaults to 1 second. Minimum value is 1.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """
    exec?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ReadinessProbeExec
    failureThreshold?: int
    grpc?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ReadinessProbeGrpc
    httpGet?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ReadinessProbeHTTPGet
    initialDelaySeconds?: int
    periodSeconds?: int
    successThreshold?: int
    tcpSocket?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ReadinessProbeTCPSocket
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ReadinessProbeExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """
    command?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ReadinessProbeGrpc:
    r"""
    GRPC specifies a GRPC HealthCheckRequest.

    Attributes
    ----------
    port : int, default is Undefined, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, default is Undefined, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest
        (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """
    port: int

    service?: str = ""

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ReadinessProbeHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ReadinessProbeHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """
    host?: str
    httpHeaders?: [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ReadinessProbeHTTPGetHTTPHeadersItems0]
    path?: str
    port: int | str

    scheme?: str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ReadinessProbeHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """
    name: str

    value: str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ReadinessProbeTCPSocket:
    r"""
    TCPSocket specifies a connection to a TCP port.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """
    host?: str
    port: int | str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ResizePolicyItems0:
    r"""
    ContainerResizePolicy represents resource resize policy for the container.

    Attributes
    ----------
    resourceName : str, default is Undefined, required
        Name of the resource to which this resource resize policy applies.
        Supported values: cpu, memory.
    restartPolicy : str, default is Undefined, required
        Restart policy to apply when specified resource is resized.
        If not specified, it defaults to NotRequired.
    """
    resourceName: str

    restartPolicy: str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0Resources:
    r"""
    Compute Resources required by this container.
    Cannot be updated.
    More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/

    Attributes
    ----------
    claims : [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ResourcesClaimsItems0], default is Undefined, optional
        Claims lists the names of resources, defined in spec.resourceClaims,
        that are used by this container.

        This is an alpha field and requires enabling the
        DynamicResourceAllocation feature gate.

        This field is immutable. It can only be set for containers.
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """
    claims?: [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ResourcesClaimsItems0]
    limits?: {str:int | str}
    requests?: {str:int | str}

    check:
        all _, limits in limits {_regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits} if limits
        all _, requests in requests {_regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests} if requests

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0ResourcesClaimsItems0:
    r"""
    ResourceClaim references one entry in PodSpec.ResourceClaims.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name must match the name of one entry in pod.spec.resourceClaims of
        the Pod where this field is used. It makes that resource available
        inside a container.
    request : str, default is Undefined, optional
        Request is the name chosen for a request in the referenced claim.
        If empty, everything from the claim is made available, otherwise
        only the result of this request.
    """
    name: str

    request?: str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0SecurityContext:
    r"""
    SecurityContext defines the security options the container should be run with.
    If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
    More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/

    Attributes
    ----------
    allowPrivilegeEscalation : bool, default is Undefined, optional
        AllowPrivilegeEscalation controls whether a process can gain more
        privileges than its parent process. This bool directly controls if
        the no_new_privs flag will be set on the container process.
        AllowPrivilegeEscalation is true always when the container is:
        1) run as Privileged
        2) has CAP_SYS_ADMIN
        Note that this field cannot be set when spec.os.name is windows.
    appArmorProfile : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0SecurityContextAppArmorProfile, default is Undefined, optional
        app armor profile
    capabilities : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0SecurityContextCapabilities, default is Undefined, optional
        capabilities
    privileged : bool, default is Undefined, optional
        Run container in privileged mode.
        Processes in privileged containers are essentially equivalent to root on the host.
        Defaults to false.
        Note that this field cannot be set when spec.os.name is windows.
    procMount : str, default is Undefined, optional
        procMount denotes the type of proc mount to use for the containers.
        The default value is Default which uses the container runtime defaults for
        readonly paths and masked paths.
        This requires the ProcMountType feature flag to be enabled.
        Note that this field cannot be set when spec.os.name is windows.
    readOnlyRootFilesystem : bool, default is Undefined, optional
        Whether this container has a read-only root filesystem.
        Default is false.
        Note that this field cannot be set when spec.os.name is windows.
    runAsGroup : int, default is Undefined, optional
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        Note that this field cannot be set when spec.os.name is windows.
    runAsNonRoot : bool, default is Undefined, optional
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
    runAsUser : int, default is Undefined, optional
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in PodSecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
        Note that this field cannot be set when spec.os.name is windows.
    seLinuxOptions : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0SecurityContextSeLinuxOptions, default is Undefined, optional
        se linux options
    seccompProfile : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0SecurityContextSeccompProfile, default is Undefined, optional
        seccomp profile
    windowsOptions : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0SecurityContextWindowsOptions, default is Undefined, optional
        windows options
    """
    allowPrivilegeEscalation?: bool
    appArmorProfile?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0SecurityContextAppArmorProfile
    capabilities?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0SecurityContextCapabilities
    privileged?: bool
    procMount?: str
    readOnlyRootFilesystem?: bool
    runAsGroup?: int
    runAsNonRoot?: bool
    runAsUser?: int
    seLinuxOptions?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0SecurityContextSeLinuxOptions
    seccompProfile?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0SecurityContextSeccompProfile
    windowsOptions?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0SecurityContextWindowsOptions

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0SecurityContextAppArmorProfile:
    r"""
    appArmorProfile is the AppArmor options to use by this container. If set, this profile
    overrides the pod's appArmorProfile.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    localhostProfile : str, default is Undefined, optional
        localhostProfile indicates a profile loaded on the node that should be used.
        The profile must be preconfigured on the node to work.
        Must match the loaded name of the profile.
        Must be set if and only if type is "Localhost".
    $type : str, default is Undefined, required
        type indicates which kind of AppArmor profile will be applied.
        Valid options are:
          Localhost - a profile pre-loaded on the node.
          RuntimeDefault - the container runtime's default profile.
          Unconfined - no AppArmor enforcement.
    """
    localhostProfile?: str
    $type: str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0SecurityContextCapabilities:
    r"""
    The capabilities to add/drop when running containers.
    Defaults to the default set of capabilities granted by the container runtime.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    add : [str], default is Undefined, optional
        Added capabilities
    drop : [str], default is Undefined, optional
        Removed capabilities
    """
    add?: [str]
    drop?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0SecurityContextSeLinuxOptions:
    r"""
    The SELinux context to be applied to the container.
    If unspecified, the container runtime will allocate a random SELinux context for each
    container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
    PodSecurityContext, the value specified in SecurityContext takes precedence.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    level : str, default is Undefined, optional
        Level is SELinux level label that applies to the container.
    role : str, default is Undefined, optional
        Role is a SELinux role label that applies to the container.
    $type : str, default is Undefined, optional
        Type is a SELinux type label that applies to the container.
    user : str, default is Undefined, optional
        User is a SELinux user label that applies to the container.
    """
    level?: str
    role?: str
    $type?: str
    user?: str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0SecurityContextSeccompProfile:
    r"""
    The seccomp options to use by this container. If seccomp options are
    provided at both the pod & container level, the container options
    override the pod options.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    localhostProfile : str, default is Undefined, optional
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
    $type : str, default is Undefined, required
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
    """
    localhostProfile?: str
    $type: str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0SecurityContextWindowsOptions:
    r"""
    The Windows specific settings applied to all containers.
    If unspecified, the options from the PodSecurityContext will be used.
    If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    Note that this field cannot be set when spec.os.name is linux.

    Attributes
    ----------
    gmsaCredentialSpec : str, default is Undefined, optional
        GMSACredentialSpec is where the GMSA admission webhook
        (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
        GMSA credential spec named by the GMSACredentialSpecName field.
    gmsaCredentialSpecName : str, default is Undefined, optional
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
    hostProcess : bool, default is Undefined, optional
        HostProcess determines if a container should be run as a 'Host Process' container.
        All of a Pod's containers must have the same effective HostProcess value
        (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
        In addition, if HostProcess is true then HostNetwork must also be set to true.
    runAsUserName : str, default is Undefined, optional
        The UserName in Windows to run the entrypoint of the container process.
        Defaults to the user specified in image metadata if unspecified.
        May also be set in PodSecurityContext. If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
    """
    gmsaCredentialSpec?: str
    gmsaCredentialSpecName?: str
    hostProcess?: bool
    runAsUserName?: str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0StartupProbe:
    r"""
    StartupProbe indicates that the Pod has successfully initialized.
    If specified, no other probes are executed until this completes successfully.
    If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
    This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
    when it might take a long time to load data or warm a cache, than during steady-state operation.
    This cannot be updated.
    More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes

    Attributes
    ----------
    exec : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0StartupProbeExec, default is Undefined, optional
        exec
    failureThreshold : int, default is Undefined, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded.
        Defaults to 3. Minimum value is 1.
    grpc : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0StartupProbeGrpc, default is Undefined, optional
        grpc
    httpGet : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0StartupProbeHTTPGet, default is Undefined, optional
        http get
    initialDelaySeconds : int, default is Undefined, optional
        Number of seconds after the container has started before liveness probes are initiated.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, default is Undefined, optional
        How often (in seconds) to perform the probe.
        Default to 10 seconds. Minimum value is 1.
    successThreshold : int, default is Undefined, optional
        Minimum consecutive successes for the probe to be considered successful after having failed.
        Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0StartupProbeTCPSocket, default is Undefined, optional
        tcp socket
    terminationGracePeriodSeconds : int, default is Undefined, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
        The grace period is the duration in seconds after the processes running in the pod are sent
        a termination signal and the time when the processes are forcibly halted with a kill signal.
        Set this value longer than the expected cleanup time for your process.
        If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
        value overrides the value provided by the pod spec.
        Value must be non-negative integer. The value zero indicates stop immediately via
        the kill signal (no opportunity to shut down).
        This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
        Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, default is Undefined, optional
        Number of seconds after which the probe times out.
        Defaults to 1 second. Minimum value is 1.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """
    exec?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0StartupProbeExec
    failureThreshold?: int
    grpc?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0StartupProbeGrpc
    httpGet?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0StartupProbeHTTPGet
    initialDelaySeconds?: int
    periodSeconds?: int
    successThreshold?: int
    tcpSocket?: MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0StartupProbeTCPSocket
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0StartupProbeExec:
    r"""
    Exec specifies a command to execute in the container.

    Attributes
    ----------
    command : [str], default is Undefined, optional
        Command is the command line to execute inside the container, the working directory for the
        command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
        not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
        a shell, you need to explicitly call out to that shell.
        Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """
    command?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0StartupProbeGrpc:
    r"""
    GRPC specifies a GRPC HealthCheckRequest.

    Attributes
    ----------
    port : int, default is Undefined, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, default is Undefined, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest
        (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """
    port: int

    service?: str = ""

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0StartupProbeHTTPGet:
    r"""
    HTTPGet specifies an HTTP GET request to perform.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Host name to connect to, defaults to the pod IP. You probably want to set
        "Host" in httpHeaders instead.
    httpHeaders : [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0StartupProbeHTTPGetHTTPHeadersItems0], default is Undefined, optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, default is Undefined, optional
        Path to access on the HTTP server.
    port : int | str, default is Undefined, required
        Name or number of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    scheme : str, default is Undefined, optional
        Scheme to use for connecting to the host.
        Defaults to HTTP.
    """
    host?: str
    httpHeaders?: [MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0StartupProbeHTTPGetHTTPHeadersItems0]
    path?: str
    port: int | str

    scheme?: str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0StartupProbeHTTPGetHTTPHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, default is Undefined, required
        The header field name.
        This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, default is Undefined, required
        The header field value
    """
    name: str

    value: str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0StartupProbeTCPSocket:
    r"""
    TCPSocket specifies a connection to a TCP port.

    Attributes
    ----------
    host : str, default is Undefined, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : int | str, default is Undefined, required
        Number or name of the port to access on the container.
        Number must be in the range 1 to 65535.
        Name must be an IANA_SVC_NAME.
    """
    host?: str
    port: int | str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0VolumeDevicesItems0:
    r"""
    volumeDevice describes a mapping of a raw block device within a container.

    Attributes
    ----------
    devicePath : str, default is Undefined, required
        devicePath is the path inside of the container that the device will be mapped to.
    name : str, default is Undefined, required
        name must match the name of a persistentVolumeClaim in the pod
    """
    devicePath: str

    name: str

schema MonitoringCoreosComV1AlertmanagerSpecInitContainersItems0VolumeMountsItems0:
    r"""
    VolumeMount describes a mounting of a Volume within a container.

    Attributes
    ----------
    mountPath : str, default is Undefined, required
        Path within the container at which the volume should be mounted.  Must
        not contain ':'.
    mountPropagation : str, default is Undefined, optional
        mountPropagation determines how mounts are propagated from the host
        to container and the other way around.
        When not set, MountPropagationNone is used.
        This field is beta in 1.10.
        When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
        (which defaults to None).
    name : str, default is Undefined, required
        This must match the Name of a Volume.
    readOnly : bool, default is Undefined, optional
        Mounted read-only if true, read-write otherwise (false or unspecified).
        Defaults to false.
    recursiveReadOnly : str, default is Undefined, optional
        RecursiveReadOnly specifies whether read-only mounts should be handled
        recursively.

        If ReadOnly is false, this field has no meaning and must be unspecified.

        If ReadOnly is true, and this field is set to Disabled, the mount is not made
        recursively read-only.  If this field is set to IfPossible, the mount is made
        recursively read-only, if it is supported by the container runtime.  If this
        field is set to Enabled, the mount is made recursively read-only if it is
        supported by the container runtime, otherwise the pod will not be started and
        an error will be generated to indicate the reason.

        If this field is set to IfPossible or Enabled, MountPropagation must be set to
        None (or be unspecified, which defaults to None).

        If this field is not specified, it is treated as an equivalent of Disabled.
    subPath : str, default is Undefined, optional
        Path within the volume from which the container's volume should be mounted.
        Defaults to "" (volume's root).
    subPathExpr : str, default is Undefined, optional
        Expanded path within the volume from which the container's volume should be mounted.
        Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
        Defaults to "" (volume's root).
        SubPathExpr and SubPath are mutually exclusive.
    """
    mountPath: str

    mountPropagation?: str
    name: str

    readOnly?: bool
    recursiveReadOnly?: str
    subPath?: str
    subPathExpr?: str

schema MonitoringCoreosComV1AlertmanagerSpecLimits:
    r"""
    Defines the limits command line flags when starting Alertmanager.

    Attributes
    ----------
    maxPerSilenceBytes : str, default is Undefined, optional
        The maximum size of an individual silence as stored on disk. This corresponds to the Alertmanager's
        `--silences.max-per-silence-bytes` flag.
        It requires Alertmanager >= v0.28.0.
    maxSilences : int, default is Undefined, optional
        The maximum number active and pending silences. This corresponds to the
        Alertmanager's `--silences.max-silences` flag.
        It requires Alertmanager >= v0.28.0.
    """
    maxPerSilenceBytes?: str
    maxSilences?: int

    check:
        _regex_match(str(maxPerSilenceBytes), r"(^0|([0-9]*[.])?[0-9]+((K|M|G|T|E|P)i?)?B)$") if maxPerSilenceBytes
        maxSilences >= 0 if maxSilences not in [None, Undefined]

schema MonitoringCoreosComV1AlertmanagerSpecPersistentVolumeClaimRetentionPolicy:
    r"""
    The field controls if and how PVCs are deleted during the lifecycle of a StatefulSet.
    The default behavior is all PVCs are retained.
    This is an alpha field from kubernetes 1.23 until 1.26 and a beta field from 1.26.
    It requires enabling the StatefulSetAutoDeletePVC feature gate.

    Attributes
    ----------
    whenDeleted : str, default is Undefined, optional
        WhenDeleted specifies what happens to PVCs created from StatefulSet
        VolumeClaimTemplates when the StatefulSet is deleted. The default policy
        of `Retain` causes PVCs to not be affected by StatefulSet deletion. The
        `Delete` policy causes those PVCs to be deleted.
    whenScaled : str, default is Undefined, optional
        WhenScaled specifies what happens to PVCs created from StatefulSet
        VolumeClaimTemplates when the StatefulSet is scaled down. The default
        policy of `Retain` causes PVCs to not be affected by a scaledown. The
        `Delete` policy causes the associated PVCs for any excess pods above
        the replica count to be deleted.
    """
    whenDeleted?: str
    whenScaled?: str

schema MonitoringCoreosComV1AlertmanagerSpecPodMetadata:
    r"""
    PodMetadata configures labels and annotations which are propagated to the Alertmanager pods.

    The following items are reserved and cannot be overridden:
    * "alertmanager" label, set to the name of the Alertmanager instance.
    * "app.kubernetes.io/instance" label, set to the name of the Alertmanager instance.
    * "app.kubernetes.io/managed-by" label, set to "prometheus-operator".
    * "app.kubernetes.io/name" label, set to "alertmanager".
    * "app.kubernetes.io/version" label, set to the Alertmanager version.
    * "kubectl.kubernetes.io/default-container" annotation, set to "alertmanager".

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is an unstructured key value map stored with a resource that may be
        set by external tools to store and retrieve arbitrary metadata. They are not
        queryable and should be preserved when modifying objects.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    labels : {str:str}, default is Undefined, optional
        Map of string keys and values that can be used to organize and categorize
        (scope and select) objects. May match selectors of replication controllers
        and services.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    name : str, default is Undefined, optional
        Name must be unique within a namespace. Is required when creating resources, although
        some resources may allow a client to request the generation of an appropriate name
        automatically. Name is primarily intended for creation idempotence and configuration
        definition.
        Cannot be updated.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/
    """
    annotations?: {str:str}
    labels?: {str:str}
    name?: str

schema MonitoringCoreosComV1AlertmanagerSpecResources:
    r"""
    Define resources requests and limits for single Pods.

    Attributes
    ----------
    claims : [MonitoringCoreosComV1AlertmanagerSpecResourcesClaimsItems0], default is Undefined, optional
        Claims lists the names of resources, defined in spec.resourceClaims,
        that are used by this container.

        This is an alpha field and requires enabling the
        DynamicResourceAllocation feature gate.

        This field is immutable. It can only be set for containers.
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """
    claims?: [MonitoringCoreosComV1AlertmanagerSpecResourcesClaimsItems0]
    limits?: {str:int | str}
    requests?: {str:int | str}

    check:
        all _, limits in limits {_regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits} if limits
        all _, requests in requests {_regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests} if requests

schema MonitoringCoreosComV1AlertmanagerSpecResourcesClaimsItems0:
    r"""
    ResourceClaim references one entry in PodSpec.ResourceClaims.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name must match the name of one entry in pod.spec.resourceClaims of
        the Pod where this field is used. It makes that resource available
        inside a container.
    request : str, default is Undefined, optional
        Request is the name chosen for a request in the referenced claim.
        If empty, everything from the claim is made available, otherwise
        only the result of this request.
    """
    name: str

    request?: str

schema MonitoringCoreosComV1AlertmanagerSpecSecurityContext:
    r"""
    SecurityContext holds pod-level security attributes and common container settings.
    This defaults to the default PodSecurityContext.

    Attributes
    ----------
    appArmorProfile : MonitoringCoreosComV1AlertmanagerSpecSecurityContextAppArmorProfile, default is Undefined, optional
        app armor profile
    fsGroup : int, default is Undefined, optional
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
    fsGroupChangePolicy : str, default is Undefined, optional
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
    runAsGroup : int, default is Undefined, optional
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
    runAsNonRoot : bool, default is Undefined, optional
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
    runAsUser : int, default is Undefined, optional
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
    seLinuxChangePolicy : str, default is Undefined, optional
        seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.
        It has no effect on nodes that do not support SELinux or to volumes does not support SELinux.
        Valid values are "MountOption" and "Recursive".

        "Recursive" means relabeling of all files on all Pod volumes by the container runtime.
        This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.

        "MountOption" mounts all eligible Pod volumes with `-o context` mount option.
        This requires all Pods that share the same volume to use the same SELinux label.
        It is not possible to share the same volume among privileged and unprivileged Pods.
        Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes
        whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their
        CSIDriver instance. Other volumes are always re-labelled recursively.
        "MountOption" value is allowed only when SELinuxMount feature gate is enabled.

        If not specified and SELinuxMount feature gate is enabled, "MountOption" is used.
        If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes
        and "Recursive" for all other volumes.

        This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.

        All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.
        Note that this field cannot be set when spec.os.name is windows.
    seLinuxOptions : MonitoringCoreosComV1AlertmanagerSpecSecurityContextSeLinuxOptions, default is Undefined, optional
        se linux options
    seccompProfile : MonitoringCoreosComV1AlertmanagerSpecSecurityContextSeccompProfile, default is Undefined, optional
        seccomp profile
    supplementalGroups : [int], default is Undefined, optional
        A list of groups applied to the first process run in each container, in
        addition to the container's primary GID and fsGroup (if specified).  If
        the SupplementalGroupsPolicy feature is enabled, the
        supplementalGroupsPolicy field determines whether these are in addition
        to or instead of any group memberships defined in the container image.
        If unspecified, no additional groups are added, though group memberships
        defined in the container image may still be used, depending on the
        supplementalGroupsPolicy field.
        Note that this field cannot be set when spec.os.name is windows.
    supplementalGroupsPolicy : str, default is Undefined, optional
        Defines how supplemental groups of the first container processes are calculated.
        Valid values are "Merge" and "Strict". If not specified, "Merge" is used.
        (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled
        and the container runtime must implement support for this feature.
        Note that this field cannot be set when spec.os.name is windows.
    sysctls : [MonitoringCoreosComV1AlertmanagerSpecSecurityContextSysctlsItems0], default is Undefined, optional
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
    windowsOptions : MonitoringCoreosComV1AlertmanagerSpecSecurityContextWindowsOptions, default is Undefined, optional
        windows options
    """
    appArmorProfile?: MonitoringCoreosComV1AlertmanagerSpecSecurityContextAppArmorProfile
    fsGroup?: int
    fsGroupChangePolicy?: str
    runAsGroup?: int
    runAsNonRoot?: bool
    runAsUser?: int
    seLinuxChangePolicy?: str
    seLinuxOptions?: MonitoringCoreosComV1AlertmanagerSpecSecurityContextSeLinuxOptions
    seccompProfile?: MonitoringCoreosComV1AlertmanagerSpecSecurityContextSeccompProfile
    supplementalGroups?: [int]
    supplementalGroupsPolicy?: str
    sysctls?: [MonitoringCoreosComV1AlertmanagerSpecSecurityContextSysctlsItems0]
    windowsOptions?: MonitoringCoreosComV1AlertmanagerSpecSecurityContextWindowsOptions

schema MonitoringCoreosComV1AlertmanagerSpecSecurityContextAppArmorProfile:
    r"""
    appArmorProfile is the AppArmor options to use by the containers in this pod.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    localhostProfile : str, default is Undefined, optional
        localhostProfile indicates a profile loaded on the node that should be used.
        The profile must be preconfigured on the node to work.
        Must match the loaded name of the profile.
        Must be set if and only if type is "Localhost".
    $type : str, default is Undefined, required
        type indicates which kind of AppArmor profile will be applied.
        Valid options are:
          Localhost - a profile pre-loaded on the node.
          RuntimeDefault - the container runtime's default profile.
          Unconfined - no AppArmor enforcement.
    """
    localhostProfile?: str
    $type: str

schema MonitoringCoreosComV1AlertmanagerSpecSecurityContextSeLinuxOptions:
    r"""
    The SELinux context to be applied to all containers.
    If unspecified, the container runtime will allocate a random SELinux context for each
    container.  May also be set in SecurityContext.  If set in
    both SecurityContext and PodSecurityContext, the value specified in SecurityContext
    takes precedence for that container.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    level : str, default is Undefined, optional
        Level is SELinux level label that applies to the container.
    role : str, default is Undefined, optional
        Role is a SELinux role label that applies to the container.
    $type : str, default is Undefined, optional
        Type is a SELinux type label that applies to the container.
    user : str, default is Undefined, optional
        User is a SELinux user label that applies to the container.
    """
    level?: str
    role?: str
    $type?: str
    user?: str

schema MonitoringCoreosComV1AlertmanagerSpecSecurityContextSeccompProfile:
    r"""
    The seccomp options to use by the containers in this pod.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    localhostProfile : str, default is Undefined, optional
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
    $type : str, default is Undefined, required
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
    """
    localhostProfile?: str
    $type: str

schema MonitoringCoreosComV1AlertmanagerSpecSecurityContextSysctlsItems0:
    r"""
    Sysctl defines a kernel parameter to be set

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of a property to set
    value : str, default is Undefined, required
        Value of a property to set
    """
    name: str

    value: str

schema MonitoringCoreosComV1AlertmanagerSpecSecurityContextWindowsOptions:
    r"""
    The Windows specific settings applied to all containers.
    If unspecified, the options within a container's SecurityContext will be used.
    If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    Note that this field cannot be set when spec.os.name is linux.

    Attributes
    ----------
    gmsaCredentialSpec : str, default is Undefined, optional
        GMSACredentialSpec is where the GMSA admission webhook
        (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
        GMSA credential spec named by the GMSACredentialSpecName field.
    gmsaCredentialSpecName : str, default is Undefined, optional
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
    hostProcess : bool, default is Undefined, optional
        HostProcess determines if a container should be run as a 'Host Process' container.
        All of a Pod's containers must have the same effective HostProcess value
        (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
        In addition, if HostProcess is true then HostNetwork must also be set to true.
    runAsUserName : str, default is Undefined, optional
        The UserName in Windows to run the entrypoint of the container process.
        Defaults to the user specified in image metadata if unspecified.
        May also be set in PodSecurityContext. If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
    """
    gmsaCredentialSpec?: str
    gmsaCredentialSpecName?: str
    hostProcess?: bool
    runAsUserName?: str

schema MonitoringCoreosComV1AlertmanagerSpecStorage:
    r"""
    Storage is the definition of how storage will be used by the Alertmanager
    instances.

    Attributes
    ----------
    disableMountSubPath : bool, default is Undefined, optional
        Deprecated: subPath usage will be removed in a future release.
    emptyDir : MonitoringCoreosComV1AlertmanagerSpecStorageEmptyDir, default is Undefined, optional
        empty dir
    ephemeral : MonitoringCoreosComV1AlertmanagerSpecStorageEphemeral, default is Undefined, optional
        ephemeral
    volumeClaimTemplate : MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplate, default is Undefined, optional
        volume claim template
    """
    disableMountSubPath?: bool
    emptyDir?: MonitoringCoreosComV1AlertmanagerSpecStorageEmptyDir
    ephemeral?: MonitoringCoreosComV1AlertmanagerSpecStorageEphemeral
    volumeClaimTemplate?: MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplate

schema MonitoringCoreosComV1AlertmanagerSpecStorageEmptyDir:
    r"""
    EmptyDirVolumeSource to be used by the StatefulSet.
    If specified, it takes precedence over `ephemeral` and `volumeClaimTemplate`.
    More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir

    Attributes
    ----------
    medium : str, default is Undefined, optional
        medium represents what type of storage medium should back this directory.
        The default is "" which means to use the node's default medium.
        Must be an empty string (default) or Memory.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    sizeLimit : int | str, default is Undefined, optional
        sizeLimit is the total amount of local storage required for this EmptyDir volume.
        The size limit is also applicable for memory medium.
        The maximum usage on memory medium EmptyDir would be the minimum value between
        the SizeLimit specified here and the sum of memory limits of all containers in a pod.
        The default is nil which means that the limit is undefined.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    """
    medium?: str
    sizeLimit?: int | str

    check:
        _regex_match(str(sizeLimit), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if sizeLimit

schema MonitoringCoreosComV1AlertmanagerSpecStorageEphemeral:
    r"""
    EphemeralVolumeSource to be used by the StatefulSet.
    This is a beta field in k8s 1.21 and GA in 1.15.
    For lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate.
    More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes

    Attributes
    ----------
    volumeClaimTemplate : MonitoringCoreosComV1AlertmanagerSpecStorageEphemeralVolumeClaimTemplate, default is Undefined, optional
        volume claim template
    """
    volumeClaimTemplate?: MonitoringCoreosComV1AlertmanagerSpecStorageEphemeralVolumeClaimTemplate

schema MonitoringCoreosComV1AlertmanagerSpecStorageEphemeralVolumeClaimTemplate:
    r"""
    Will be used to create a stand-alone PVC to provision the volume.
    The pod in which this EphemeralVolumeSource is embedded will be the
    owner of the PVC, i.e. the PVC will be deleted together with the
    pod.  The name of the PVC will be `<pod name>-<volume name>` where
    `<volume name>` is the name from the `PodSpec.Volumes` array
    entry. Pod validation will reject the pod if the concatenated name
    is not valid for a PVC (for example, too long).

    An existing PVC with that name that is not owned by the pod
    will *not* be used for the pod to avoid using an unrelated
    volume by mistake. Starting the pod is then blocked until
    the unrelated PVC is removed. If such a pre-created PVC is
    meant to be used by the pod, the PVC has to updated with an
    owner reference to the pod once the pod exists. Normally
    this should not be necessary, but it may be useful when
    manually reconstructing a broken cluster.

    This field is read-only and no changes will be made by Kubernetes
    to the PVC after it has been created.

    Required, must not be nil.

    Attributes
    ----------
    metadata : any, default is Undefined, optional
        May contain labels and annotations that will be copied into the PVC
        when creating it. No other fields are allowed and will be rejected during
        validation.
    spec : MonitoringCoreosComV1AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpec, default is Undefined, required
        spec
    """
    metadata?: any
    spec: MonitoringCoreosComV1AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpec

schema MonitoringCoreosComV1AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpec:
    r"""
    The specification for the PersistentVolumeClaim. The entire content is
    copied unchanged into the PVC that gets created from this
    template. The same fields as in a PersistentVolumeClaim
    are also valid here.

    Attributes
    ----------
    accessModes : [str], default is Undefined, optional
        accessModes contains the desired access modes the volume should have.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    dataSource : MonitoringCoreosComV1AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource, default is Undefined, optional
        data source
    dataSourceRef : MonitoringCoreosComV1AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef, default is Undefined, optional
        data source ref
    resources : MonitoringCoreosComV1AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecResources, default is Undefined, optional
        resources
    selector : MonitoringCoreosComV1AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecSelector, default is Undefined, optional
        selector
    storageClassName : str, default is Undefined, optional
        storageClassName is the name of the StorageClass required by the claim.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    volumeAttributesClassName : str, default is Undefined, optional
        volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
        If specified, the CSI driver will create or update the volume with the attributes defined
        in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
        it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
        will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
        If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
        will be set by the persistentvolume controller if it exists.
        If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
        set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
        exists.
        More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
        (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
    volumeMode : str, default is Undefined, optional
        volumeMode defines what type of volume is required by the claim.
        Value of Filesystem is implied when not included in claim spec.
    volumeName : str, default is Undefined, optional
        volumeName is the binding reference to the PersistentVolume backing this claim.
    """
    accessModes?: [str]
    dataSource?: MonitoringCoreosComV1AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource
    dataSourceRef?: MonitoringCoreosComV1AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef
    resources?: MonitoringCoreosComV1AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecResources
    selector?: MonitoringCoreosComV1AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecSelector
    storageClassName?: str
    volumeAttributesClassName?: str
    volumeMode?: str
    volumeName?: str

schema MonitoringCoreosComV1AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource:
    r"""
    dataSource field can be used to specify either:
    * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
    * An existing PVC (PersistentVolumeClaim)
    If the provisioner or an external controller can support the specified data source,
    it will create a new volume based on the contents of the specified data source.
    When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
    and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
    If the namespace is specified, then dataSourceRef will not be copied to dataSource.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    """
    apiGroup?: str
    kind: str

    name: str

schema MonitoringCoreosComV1AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef:
    r"""
    dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
    volume is desired. This may be any object from a non-empty API group (non
    core object) or a PersistentVolumeClaim object.
    When this field is specified, volume binding will only succeed if the type of
    the specified object matches some installed volume populator or dynamic
    provisioner.
    This field will replace the functionality of the dataSource field and as such
    if both fields are non-empty, they must have the same value. For backwards
    compatibility, when namespace isn't specified in dataSourceRef,
    both fields (dataSource and dataSourceRef) will be set to the same
    value automatically if one of them is empty and the other is non-empty.
    When namespace is specified in dataSourceRef,
    dataSource isn't set to the same value and must be empty.
    There are three important differences between dataSource and dataSourceRef:
    * While dataSource only allows two specific types of objects, dataSourceRef
      allows any non-core object, as well as PersistentVolumeClaim objects.
    * While dataSource ignores disallowed values (dropping them), dataSourceRef
      preserves all values, and generates an error if a disallowed value is
      specified.
    * While dataSource only allows local objects, dataSourceRef allows objects
      in any namespaces.
    (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
    (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    namespace : str, default is Undefined, optional
        Namespace is the namespace of resource being referenced
        Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
        (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
    """
    apiGroup?: str
    kind: str

    name: str

    namespace?: str

schema MonitoringCoreosComV1AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecResources:
    r"""
    resources represents the minimum resources the volume should have.
    If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
    that are lower than previous value but must still be higher than capacity recorded in the
    status field of the claim.
    More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources

    Attributes
    ----------
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """
    limits?: {str:int | str}
    requests?: {str:int | str}

    check:
        all _, limits in limits {_regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits} if limits
        all _, requests in requests {_regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests} if requests

schema MonitoringCoreosComV1AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecSelector:
    r"""
    selector is a label query over volumes to consider for binding.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplate:
    r"""
    Defines the PVC spec to be used by the Prometheus StatefulSets.
    The easiest way to use a volume that cannot be automatically provisioned
    is to use a label selector alongside manually created PersistentVolumes.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        APIVersion defines the versioned schema of this representation of an object.
        Servers should convert recognized schemas to the latest internal value, and
        may reject unrecognized values.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is Undefined, optional
        Kind is a string value representing the REST resource this object represents.
        Servers may infer this from the endpoint the client submits requests to.
        Cannot be updated.
        In CamelCase.
        More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateMetadata, default is Undefined, optional
        metadata
    spec : MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateSpec, default is Undefined, optional
        spec
    status : MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateStatus, default is Undefined, optional
        status
    """
    apiVersion?: str
    kind?: str
    metadata?: MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateMetadata
    spec?: MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateSpec
    status?: MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateStatus

schema MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateMetadata:
    r"""
    EmbeddedMetadata contains metadata relevant to an EmbeddedResource.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is an unstructured key value map stored with a resource that may be
        set by external tools to store and retrieve arbitrary metadata. They are not
        queryable and should be preserved when modifying objects.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    labels : {str:str}, default is Undefined, optional
        Map of string keys and values that can be used to organize and categorize
        (scope and select) objects. May match selectors of replication controllers
        and services.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    name : str, default is Undefined, optional
        Name must be unique within a namespace. Is required when creating resources, although
        some resources may allow a client to request the generation of an appropriate name
        automatically. Name is primarily intended for creation idempotence and configuration
        definition.
        Cannot be updated.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/
    """
    annotations?: {str:str}
    labels?: {str:str}
    name?: str

schema MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateSpec:
    r"""
    Defines the desired characteristics of a volume requested by a pod author.
    More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims

    Attributes
    ----------
    accessModes : [str], default is Undefined, optional
        accessModes contains the desired access modes the volume should have.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    dataSource : MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSource, default is Undefined, optional
        data source
    dataSourceRef : MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceRef, default is Undefined, optional
        data source ref
    resources : MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateSpecResources, default is Undefined, optional
        resources
    selector : MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateSpecSelector, default is Undefined, optional
        selector
    storageClassName : str, default is Undefined, optional
        storageClassName is the name of the StorageClass required by the claim.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    volumeAttributesClassName : str, default is Undefined, optional
        volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
        If specified, the CSI driver will create or update the volume with the attributes defined
        in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
        it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
        will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
        If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
        will be set by the persistentvolume controller if it exists.
        If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
        set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
        exists.
        More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
        (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
    volumeMode : str, default is Undefined, optional
        volumeMode defines what type of volume is required by the claim.
        Value of Filesystem is implied when not included in claim spec.
    volumeName : str, default is Undefined, optional
        volumeName is the binding reference to the PersistentVolume backing this claim.
    """
    accessModes?: [str]
    dataSource?: MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSource
    dataSourceRef?: MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceRef
    resources?: MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateSpecResources
    selector?: MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateSpecSelector
    storageClassName?: str
    volumeAttributesClassName?: str
    volumeMode?: str
    volumeName?: str

schema MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSource:
    r"""
    dataSource field can be used to specify either:
    * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
    * An existing PVC (PersistentVolumeClaim)
    If the provisioner or an external controller can support the specified data source,
    it will create a new volume based on the contents of the specified data source.
    When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
    and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
    If the namespace is specified, then dataSourceRef will not be copied to dataSource.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    """
    apiGroup?: str
    kind: str

    name: str

schema MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceRef:
    r"""
    dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
    volume is desired. This may be any object from a non-empty API group (non
    core object) or a PersistentVolumeClaim object.
    When this field is specified, volume binding will only succeed if the type of
    the specified object matches some installed volume populator or dynamic
    provisioner.
    This field will replace the functionality of the dataSource field and as such
    if both fields are non-empty, they must have the same value. For backwards
    compatibility, when namespace isn't specified in dataSourceRef,
    both fields (dataSource and dataSourceRef) will be set to the same
    value automatically if one of them is empty and the other is non-empty.
    When namespace is specified in dataSourceRef,
    dataSource isn't set to the same value and must be empty.
    There are three important differences between dataSource and dataSourceRef:
    * While dataSource only allows two specific types of objects, dataSourceRef
      allows any non-core object, as well as PersistentVolumeClaim objects.
    * While dataSource ignores disallowed values (dropping them), dataSourceRef
      preserves all values, and generates an error if a disallowed value is
      specified.
    * While dataSource only allows local objects, dataSourceRef allows objects
      in any namespaces.
    (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
    (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    namespace : str, default is Undefined, optional
        Namespace is the namespace of resource being referenced
        Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
        (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
    """
    apiGroup?: str
    kind: str

    name: str

    namespace?: str

schema MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateSpecResources:
    r"""
    resources represents the minimum resources the volume should have.
    If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
    that are lower than previous value but must still be higher than capacity recorded in the
    status field of the claim.
    More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources

    Attributes
    ----------
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """
    limits?: {str:int | str}
    requests?: {str:int | str}

    check:
        all _, limits in limits {_regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits} if limits
        all _, requests in requests {_regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests} if requests

schema MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateSpecSelector:
    r"""
    selector is a label query over volumes to consider for binding.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateStatus:
    r"""
    Deprecated: this field is never set.

    Attributes
    ----------
    accessModes : [str], default is Undefined, optional
        accessModes contains the actual access modes the volume backing the PVC has.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    allocatedResourceStatuses : {str:str}, default is Undefined, optional
        allocatedResourceStatuses stores status of resource being resized for the given PVC.
        Key names follow standard Kubernetes label syntax. Valid values are either:
        	* Un-prefixed keys:
        		- storage - the capacity of the volume.
        	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
        Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
        reserved and hence may not be used.

        ClaimResourceStatus can be in any of following states:
        	- ControllerResizeInProgress:
        		State set when resize controller starts resizing the volume in control-plane.
        	- ControllerResizeFailed:
        		State set when resize has failed in resize controller with a terminal error.
        	- NodeResizePending:
        		State set when resize controller has finished resizing the volume but further resizing of
        		volume is needed on the node.
        	- NodeResizeInProgress:
        		State set when kubelet starts resizing the volume.
        	- NodeResizeFailed:
        		State set when resizing has failed in kubelet with a terminal error. Transient errors don't set
        		NodeResizeFailed.
        For example: if expanding a PVC for more capacity - this field can be one of the following states:
        	- pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"
             - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"
             - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"
             - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"
             - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed"
        When this field is not set, it means that no resize operation is in progress for the given PVC.

        A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus
        should ignore the update for the purpose it was designed. For example - a controller that
        only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
        resources associated with PVC.

        This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
    allocatedResources : {str:int | str}, default is Undefined, optional
        allocatedResources tracks the resources allocated to a PVC including its capacity.
        Key names follow standard Kubernetes label syntax. Valid values are either:
        	* Un-prefixed keys:
        		- storage - the capacity of the volume.
        	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
        Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
        reserved and hence may not be used.

        Capacity reported here may be larger than the actual capacity when a volume expansion operation
        is requested.
        For storage quota, the larger value from allocatedResources and PVC.spec.resources is used.
        If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation.
        If a volume expansion capacity request is lowered, allocatedResources is only
        lowered if there are no expansion operations in progress and if the actual volume capacity
        is equal or lower than the requested capacity.

        A controller that receives PVC update with previously unknown resourceName
        should ignore the update for the purpose it was designed. For example - a controller that
        only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
        resources associated with PVC.

        This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
    capacity : {str:int | str}, default is Undefined, optional
        capacity represents the actual resources of the underlying volume.
    conditions : [MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsItems0], default is Undefined, optional
        conditions is the current Condition of persistent volume claim. If underlying persistent volume is being
        resized then the Condition will be set to 'Resizing'.
    currentVolumeAttributesClassName : str, default is Undefined, optional
        currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using.
        When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim
        This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
    modifyVolumeStatus : MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus, default is Undefined, optional
        modify volume status
    phase : str, default is Undefined, optional
        phase represents the current phase of PersistentVolumeClaim.
    """
    accessModes?: [str]
    allocatedResourceStatuses?: {str:str}
    allocatedResources?: {str:int | str}
    capacity?: {str:int | str}
    conditions?: [MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsItems0]
    currentVolumeAttributesClassName?: str
    modifyVolumeStatus?: MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus
    phase?: str

    check:
        all _, allocatedResources in allocatedResources {_regex_match(str(allocatedResources), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if allocatedResources} if allocatedResources
        all _, capacity in capacity {_regex_match(str(capacity), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if capacity} if capacity

schema MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateStatusConditionsItems0:
    r"""
    PersistentVolumeClaimCondition contains details about state of pvc

    Attributes
    ----------
    lastProbeTime : str, default is Undefined, optional
        lastProbeTime is the time we probed the condition.
    lastTransitionTime : str, default is Undefined, optional
        lastTransitionTime is the time the condition transitioned from one status to another.
    message : str, default is Undefined, optional
        message is the human-readable message indicating details about last transition.
    reason : str, default is Undefined, optional
        reason is a unique, this should be a short, machine understandable string that gives the reason
        for condition's last transition. If it reports "Resizing" that means the underlying
        persistent volume is being resized.
    status : str, default is Undefined, required
        Status is the status of the condition.
        Can be True, False, Unknown.
        More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=state%20of%20pvc-,conditions.status,-(string)%2C%20required
    $type : str, default is Undefined, required
        Type is the type of the condition.
        More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=set%20to%20%27ResizeStarted%27.-,PersistentVolumeClaimCondition,-contains%20details%20about
    """
    lastProbeTime?: str
    lastTransitionTime?: str
    message?: str
    reason?: str
    status: str

    $type: str

schema MonitoringCoreosComV1AlertmanagerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus:
    r"""
    ModifyVolumeStatus represents the status object of ControllerModifyVolume operation.
    When this is unset, there is no ModifyVolume operation being attempted.
    This is a beta field and requires enabling VolumeAttributesClass feature (off by default).

    Attributes
    ----------
    status : str, default is Undefined, required
        status is the status of the ControllerModifyVolume operation. It can be in any of following states:
         - Pending
           Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as
           the specified VolumeAttributesClass not existing.
         - InProgress
           InProgress indicates that the volume is being modified.
         - Infeasible
          Infeasible indicates that the request has been rejected as invalid by the CSI driver. To
        	  resolve the error, a valid VolumeAttributesClass needs to be specified.
        Note: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.
    targetVolumeAttributesClassName : str, default is Undefined, optional
        targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled
    """
    status: str

    targetVolumeAttributesClassName?: str

schema MonitoringCoreosComV1AlertmanagerSpecTolerationsItems0:
    r"""
    The pod this Toleration is attached to tolerates any taint that matches
    the triple <key,value,effect> using the matching operator <operator>.

    Attributes
    ----------
    effect : str, default is Undefined, optional
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    key : str, default is Undefined, optional
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    operator : str, default is Undefined, optional
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
    tolerationSeconds : int, default is Undefined, optional
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
    value : str, default is Undefined, optional
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
    """
    effect?: str
    key?: str
    operator?: str
    tolerationSeconds?: int
    value?: str

schema MonitoringCoreosComV1AlertmanagerSpecTopologySpreadConstraintsItems0:
    r"""
    TopologySpreadConstraint specifies how to spread matching pods among the given topology.

    Attributes
    ----------
    labelSelector : MonitoringCoreosComV1AlertmanagerSpecTopologySpreadConstraintsItems0LabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select the pods over which
        spreading will be calculated. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are ANDed with labelSelector
        to select the group of existing pods over which spreading will be calculated
        for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
        MatchLabelKeys cannot be set when LabelSelector isn't set.
        Keys that don't exist in the incoming pod labels will
        be ignored. A null or empty list means only match against labelSelector.

        This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
    maxSkew : int, default is Undefined, required
        MaxSkew describes the degree to which pods may be unevenly distributed.
        When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
        between the number of matching pods in the target topology and the global minimum.
        The global minimum is the minimum number of matching pods in an eligible domain
        or zero if the number of eligible domains is less than MinDomains.
        For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
        labelSelector spread as 2/2/1:
        In this case, the global minimum is 1.
        | zone1 | zone2 | zone3 |
        |  P P  |  P P  |   P   |
        - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
        scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
        violate MaxSkew(1).
        - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
        When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
        to topologies that satisfy it.
        It's a required field. Default value is 1 and 0 is not allowed.
    minDomains : int, default is Undefined, optional
        MinDomains indicates a minimum number of eligible domains.
        When the number of eligible domains with matching topology keys is less than minDomains,
        Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
        And when the number of eligible domains with matching topology keys equals or greater than minDomains,
        this value has no effect on scheduling.
        As a result, when the number of eligible domains is less than minDomains,
        scheduler won't schedule more than maxSkew Pods to those domains.
        If value is nil, the constraint behaves as if MinDomains is equal to 1.
        Valid values are integers greater than 0.
        When value is not nil, WhenUnsatisfiable must be DoNotSchedule.

        For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
        labelSelector spread as 2/2/2:
        | zone1 | zone2 | zone3 |
        |  P P  |  P P  |  P P  |
        The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
        In this situation, new pod with the same labelSelector cannot be scheduled,
        because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
        it will violate MaxSkew.
    nodeAffinityPolicy : str, default is Undefined, optional
        NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
        when calculating pod topology spread skew. Options are:
        - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
        - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.

        If this value is nil, the behavior is equivalent to the Honor policy.
    nodeTaintsPolicy : str, default is Undefined, optional
        NodeTaintsPolicy indicates how we will treat node taints when calculating
        pod topology spread skew. Options are:
        - Honor: nodes without taints, along with tainted nodes for which the incoming pod
        has a toleration, are included.
        - Ignore: node taints are ignored. All nodes are included.

        If this value is nil, the behavior is equivalent to the Ignore policy.
    topologyKey : str, default is Undefined, required
        TopologyKey is the key of node labels. Nodes that have a label with this key
        and identical values are considered to be in the same topology.
        We consider each <key, value> as a "bucket", and try to put balanced number
        of pods into each bucket.
        We define a domain as a particular instance of a topology.
        Also, we define an eligible domain as a domain whose nodes meet the requirements of
        nodeAffinityPolicy and nodeTaintsPolicy.
        e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
        And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
        It's a required field.
    whenUnsatisfiable : str, default is Undefined, required
        WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
        the spread constraint.
        - DoNotSchedule (default) tells the scheduler not to schedule it.
        - ScheduleAnyway tells the scheduler to schedule the pod in any location,
          but giving higher precedence to topologies that would help reduce the
          skew.
        A constraint is considered "Unsatisfiable" for an incoming pod
        if and only if every possible node assignment for that pod would violate
        "MaxSkew" on some topology.
        For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
        labelSelector spread as 3/1/1:
        | zone1 | zone2 | zone3 |
        | P P P |   P   |   P   |
        If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
        to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
        MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
        won't make it *more* imbalanced.
        It's a required field.
    """
    labelSelector?: MonitoringCoreosComV1AlertmanagerSpecTopologySpreadConstraintsItems0LabelSelector
    matchLabelKeys?: [str]
    maxSkew: int

    minDomains?: int
    nodeAffinityPolicy?: str
    nodeTaintsPolicy?: str
    topologyKey: str

    whenUnsatisfiable: str

schema MonitoringCoreosComV1AlertmanagerSpecTopologySpreadConstraintsItems0LabelSelector:
    r"""
    LabelSelector is used to find matching pods.
    Pods that match this label selector are counted to determine the number of pods
    in their corresponding topology domain.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1AlertmanagerSpecTopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1AlertmanagerSpecTopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1AlertmanagerSpecTopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecVolumeMountsItems0:
    r"""
    VolumeMount describes a mounting of a Volume within a container.

    Attributes
    ----------
    mountPath : str, default is Undefined, required
        Path within the container at which the volume should be mounted.  Must
        not contain ':'.
    mountPropagation : str, default is Undefined, optional
        mountPropagation determines how mounts are propagated from the host
        to container and the other way around.
        When not set, MountPropagationNone is used.
        This field is beta in 1.10.
        When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
        (which defaults to None).
    name : str, default is Undefined, required
        This must match the Name of a Volume.
    readOnly : bool, default is Undefined, optional
        Mounted read-only if true, read-write otherwise (false or unspecified).
        Defaults to false.
    recursiveReadOnly : str, default is Undefined, optional
        RecursiveReadOnly specifies whether read-only mounts should be handled
        recursively.

        If ReadOnly is false, this field has no meaning and must be unspecified.

        If ReadOnly is true, and this field is set to Disabled, the mount is not made
        recursively read-only.  If this field is set to IfPossible, the mount is made
        recursively read-only, if it is supported by the container runtime.  If this
        field is set to Enabled, the mount is made recursively read-only if it is
        supported by the container runtime, otherwise the pod will not be started and
        an error will be generated to indicate the reason.

        If this field is set to IfPossible or Enabled, MountPropagation must be set to
        None (or be unspecified, which defaults to None).

        If this field is not specified, it is treated as an equivalent of Disabled.
    subPath : str, default is Undefined, optional
        Path within the volume from which the container's volume should be mounted.
        Defaults to "" (volume's root).
    subPathExpr : str, default is Undefined, optional
        Expanded path within the volume from which the container's volume should be mounted.
        Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
        Defaults to "" (volume's root).
        SubPathExpr and SubPath are mutually exclusive.
    """
    mountPath: str

    mountPropagation?: str
    name: str

    readOnly?: bool
    recursiveReadOnly?: str
    subPath?: str
    subPathExpr?: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0:
    r"""
    Volume represents a named volume in a pod that may be accessed by any container in the pod.

    Attributes
    ----------
    awsElasticBlockStore : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0AwsElasticBlockStore, default is Undefined, optional
        aws elastic block store
    azureDisk : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0AzureDisk, default is Undefined, optional
        azure disk
    azureFile : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0AzureFile, default is Undefined, optional
        azure file
    cephfs : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Cephfs, default is Undefined, optional
        cephfs
    cinder : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Cinder, default is Undefined, optional
        cinder
    configMap : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ConfigMap, default is Undefined, optional
        config map
    csi : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Csi, default is Undefined, optional
        csi
    downwardAPI : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0DownwardAPI, default is Undefined, optional
        downward API
    emptyDir : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EmptyDir, default is Undefined, optional
        empty dir
    ephemeral : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Ephemeral, default is Undefined, optional
        ephemeral
    fc : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Fc, default is Undefined, optional
        fc
    flexVolume : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0FlexVolume, default is Undefined, optional
        flex volume
    flocker : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Flocker, default is Undefined, optional
        flocker
    gcePersistentDisk : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0GcePersistentDisk, default is Undefined, optional
        gce persistent disk
    gitRepo : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0GitRepo, default is Undefined, optional
        git repo
    glusterfs : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Glusterfs, default is Undefined, optional
        glusterfs
    hostPath : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0HostPath, default is Undefined, optional
        host path
    image : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Image, default is Undefined, optional
        image
    iscsi : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Iscsi, default is Undefined, optional
        iscsi
    name : str, default is Undefined, required
        name of the volume.
        Must be a DNS_LABEL and unique within the pod.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    nfs : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Nfs, default is Undefined, optional
        nfs
    persistentVolumeClaim : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0PersistentVolumeClaim, default is Undefined, optional
        persistent volume claim
    photonPersistentDisk : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0PhotonPersistentDisk, default is Undefined, optional
        photon persistent disk
    portworxVolume : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0PortworxVolume, default is Undefined, optional
        portworx volume
    projected : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Projected, default is Undefined, optional
        projected
    quobyte : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Quobyte, default is Undefined, optional
        quobyte
    rbd : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Rbd, default is Undefined, optional
        rbd
    scaleIO : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ScaleIO, default is Undefined, optional
        scale i o
    secret : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Secret, default is Undefined, optional
        secret
    storageos : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Storageos, default is Undefined, optional
        storageos
    vsphereVolume : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0VsphereVolume, default is Undefined, optional
        vsphere volume
    """
    awsElasticBlockStore?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0AwsElasticBlockStore
    azureDisk?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0AzureDisk
    azureFile?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0AzureFile
    cephfs?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Cephfs
    cinder?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Cinder
    configMap?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ConfigMap
    csi?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Csi
    downwardAPI?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0DownwardAPI
    emptyDir?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EmptyDir
    ephemeral?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Ephemeral
    fc?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Fc
    flexVolume?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0FlexVolume
    flocker?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Flocker
    gcePersistentDisk?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0GcePersistentDisk
    gitRepo?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0GitRepo
    glusterfs?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Glusterfs
    hostPath?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0HostPath
    image?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Image
    iscsi?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Iscsi
    name: str

    nfs?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Nfs
    persistentVolumeClaim?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0PersistentVolumeClaim
    photonPersistentDisk?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0PhotonPersistentDisk
    portworxVolume?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0PortworxVolume
    projected?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Projected
    quobyte?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Quobyte
    rbd?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Rbd
    scaleIO?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ScaleIO
    secret?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Secret
    storageos?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Storageos
    vsphereVolume?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0VsphereVolume

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0AwsElasticBlockStore:
    r"""
    awsElasticBlockStore represents an AWS Disk resource that is attached to a
    kubelet's host machine and then exposed to the pod.
    Deprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree
    awsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.
    More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore

    Attributes
    ----------
    fsType : str, default is Undefined, optional
        fsType is the filesystem type of the volume that you want to mount.
        Tip: Ensure that the filesystem type is supported by the host operating system.
        Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    partition : int, default is Undefined, optional
        partition is the partition in the volume that you want to mount.
        If omitted, the default is to mount by volume name.
        Examples: For volume /dev/sda1, you specify the partition as "1".
        Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
    readOnly : bool, default is Undefined, optional
        readOnly value true will force the readOnly setting in VolumeMounts.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    volumeID : str, default is Undefined, required
        volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
        More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    """
    fsType?: str
    partition?: int
    readOnly?: bool
    volumeID: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0AzureDisk:
    r"""
    azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
    Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type
    are redirected to the disk.csi.azure.com CSI driver.

    Attributes
    ----------
    cachingMode : str, default is Undefined, optional
        cachingMode is the Host Caching mode: None, Read Only, Read Write.
    diskName : str, default is Undefined, required
        diskName is the Name of the data disk in the blob storage
    diskURI : str, default is Undefined, required
        diskURI is the URI of data disk in the blob storage
    fsType : str, default is "ext4", optional
        fsType is Filesystem type to mount.
        Must be a filesystem type supported by the host operating system.
        Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    kind : str, default is Undefined, optional
        kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
    readOnly : bool, default is Undefined, optional
        readOnly Defaults to false (read/write). ReadOnly here will force
        the ReadOnly setting in VolumeMounts.
    """
    cachingMode?: str
    diskName: str

    diskURI: str

    fsType?: str = "ext4"
    kind?: str
    readOnly?: bool = False

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0AzureFile:
    r"""
    azureFile represents an Azure File Service mount on the host and bind mount to the pod.
    Deprecated: AzureFile is deprecated. All operations for the in-tree azureFile type
    are redirected to the file.csi.azure.com CSI driver.

    Attributes
    ----------
    readOnly : bool, default is Undefined, optional
        readOnly defaults to false (read/write). ReadOnly here will force
        the ReadOnly setting in VolumeMounts.
    secretName : str, default is Undefined, required
        secretName is the  name of secret that contains Azure Storage Account Name and Key
    shareName : str, default is Undefined, required
        shareName is the azure share Name
    """
    readOnly?: bool
    secretName: str

    shareName: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Cephfs:
    r"""
    cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.
    Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.

    Attributes
    ----------
    monitors : [str], default is Undefined, required
        monitors is Required: Monitors is a collection of Ceph monitors
        More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    path : str, default is Undefined, optional
        path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
    readOnly : bool, default is Undefined, optional
        readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
        the ReadOnly setting in VolumeMounts.
        More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    secretFile : str, default is Undefined, optional
        secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
        More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    secretRef : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0CephfsSecretRef, default is Undefined, optional
        secret ref
    user : str, default is Undefined, optional
        user is optional: User is the rados user name, default is admin
        More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    """
    monitors: [str]

    path?: str
    readOnly?: bool
    secretFile?: str
    secretRef?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0CephfsSecretRef
    user?: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0CephfsSecretRef:
    r"""
    secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
    More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    name?: str = ""

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Cinder:
    r"""
    cinder represents a cinder volume attached and mounted on kubelets host machine.
    Deprecated: Cinder is deprecated. All operations for the in-tree cinder type
    are redirected to the cinder.csi.openstack.org CSI driver.
    More info: https://examples.k8s.io/mysql-cinder-pd/README.md

    Attributes
    ----------
    fsType : str, default is Undefined, optional
        fsType is the filesystem type to mount.
        Must be a filesystem type supported by the host operating system.
        Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    readOnly : bool, default is Undefined, optional
        readOnly defaults to false (read/write). ReadOnly here will force
        the ReadOnly setting in VolumeMounts.
        More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    secretRef : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0CinderSecretRef, default is Undefined, optional
        secret ref
    volumeID : str, default is Undefined, required
        volumeID used to identify the volume in cinder.
        More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    """
    fsType?: str
    readOnly?: bool
    secretRef?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0CinderSecretRef
    volumeID: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0CinderSecretRef:
    r"""
    secretRef is optional: points to a secret object containing parameters used to connect
    to OpenStack.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    name?: str = ""

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ConfigMap:
    r"""
    configMap represents a configMap that should populate this volume

    Attributes
    ----------
    defaultMode : int, default is Undefined, optional
        defaultMode is optional: mode bits used to set permissions on created files by default.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        Defaults to 0644.
        Directories within the path are not affected by this setting.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    items : [MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ConfigMapItemsItems0], default is Undefined, optional
        items if unspecified, each key-value pair in the Data field of the referenced
        ConfigMap will be projected into the volume as a file whose name is the
        key and content is the value. If specified, the listed keys will be
        projected into the specified paths, and unlisted keys will not be
        present. If a key is specified which is not present in the ConfigMap,
        the volume setup will error unless it is marked optional. Paths must be
        relative and may not contain the '..' path or start with '..'.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        optional specify whether the ConfigMap or its keys must be defined
    """
    defaultMode?: int
    items?: [MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ConfigMapItemsItems0]
    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ConfigMapItemsItems0:
    r"""
    Maps a string key to a path within a volume.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the key to project.
    mode : int, default is Undefined, optional
        mode is Optional: mode bits used to set permissions on this file.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        If not specified, the volume defaultMode will be used.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    path : str, default is Undefined, required
        path is the relative path of the file to map the key to.
        May not be an absolute path.
        May not contain the path element '..'.
        May not start with the string '..'.
    """
    key: str

    mode?: int
    path: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Csi:
    r"""
    csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.

    Attributes
    ----------
    driver : str, default is Undefined, required
        driver is the name of the CSI driver that handles this volume.
        Consult with your admin for the correct name as registered in the cluster.
    fsType : str, default is Undefined, optional
        fsType to mount. Ex. "ext4", "xfs", "ntfs".
        If not provided, the empty value is passed to the associated CSI driver
        which will determine the default filesystem to apply.
    nodePublishSecretRef : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0CsiNodePublishSecretRef, default is Undefined, optional
        node publish secret ref
    readOnly : bool, default is Undefined, optional
        readOnly specifies a read-only configuration for the volume.
        Defaults to false (read/write).
    volumeAttributes : {str:str}, default is Undefined, optional
        volumeAttributes stores driver-specific properties that are passed to the CSI
        driver. Consult your driver's documentation for supported values.
    """
    driver: str

    fsType?: str
    nodePublishSecretRef?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0CsiNodePublishSecretRef
    readOnly?: bool
    volumeAttributes?: {str:str}

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0CsiNodePublishSecretRef:
    r"""
    nodePublishSecretRef is a reference to the secret object containing
    sensitive information to pass to the CSI driver to complete the CSI
    NodePublishVolume and NodeUnpublishVolume calls.
    This field is optional, and  may be empty if no secret is required. If the
    secret object contains more than one secret, all secret references are passed.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    name?: str = ""

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0DownwardAPI:
    r"""
    downwardAPI represents downward API about the pod that should populate this volume

    Attributes
    ----------
    defaultMode : int, default is Undefined, optional
        Optional: mode bits to use on created files by default. Must be a
        Optional: mode bits used to set permissions on created files by default.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        Defaults to 0644.
        Directories within the path are not affected by this setting.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    items : [MonitoringCoreosComV1AlertmanagerSpecVolumesItems0DownwardAPIItemsItems0], default is Undefined, optional
        Items is a list of downward API volume file
    """
    defaultMode?: int
    items?: [MonitoringCoreosComV1AlertmanagerSpecVolumesItems0DownwardAPIItemsItems0]

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0DownwardAPIItemsItems0:
    r"""
    DownwardAPIVolumeFile represents information to create the file containing the pod field

    Attributes
    ----------
    fieldRef : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0DownwardAPIItemsItems0FieldRef, default is Undefined, optional
        field ref
    mode : int, default is Undefined, optional
        Optional: mode bits used to set permissions on this file, must be an octal value
        between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        If not specified, the volume defaultMode will be used.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    path : str, default is Undefined, required
        Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
    resourceFieldRef : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0DownwardAPIItemsItems0ResourceFieldRef, default is Undefined, optional
        resource field ref
    """
    fieldRef?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0DownwardAPIItemsItems0FieldRef
    mode?: int
    path: str

    resourceFieldRef?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0DownwardAPIItemsItems0ResourceFieldRef

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0DownwardAPIItemsItems0FieldRef:
    r"""
    Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, default is Undefined, required
        Path of the field to select in the specified API version.
    """
    apiVersion?: str
    fieldPath: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0DownwardAPIItemsItems0ResourceFieldRef:
    r"""
    Selects a resource of the container: only resources limits and requests
    (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Container name: required for volumes, optional for env vars
    divisor : int | str, default is Undefined, optional
        Specifies the output format of the exposed resources, defaults to "1"
    resource : str, default is Undefined, required
        Required: resource to select
    """
    containerName?: str
    divisor?: int | str
    resource: str

    check:
        _regex_match(str(divisor), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if divisor

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EmptyDir:
    r"""
    emptyDir represents a temporary directory that shares a pod's lifetime.
    More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir

    Attributes
    ----------
    medium : str, default is Undefined, optional
        medium represents what type of storage medium should back this directory.
        The default is "" which means to use the node's default medium.
        Must be an empty string (default) or Memory.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    sizeLimit : int | str, default is Undefined, optional
        sizeLimit is the total amount of local storage required for this EmptyDir volume.
        The size limit is also applicable for memory medium.
        The maximum usage on memory medium EmptyDir would be the minimum value between
        the SizeLimit specified here and the sum of memory limits of all containers in a pod.
        The default is nil which means that the limit is undefined.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    """
    medium?: str
    sizeLimit?: int | str

    check:
        _regex_match(str(sizeLimit), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if sizeLimit

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Ephemeral:
    r"""
    ephemeral represents a volume that is handled by a cluster storage driver.
    The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
    and deleted when the pod is removed.

    Use this if:
    a) the volume is only needed while the pod runs,
    b) features of normal volumes like restoring from snapshot or capacity
       tracking are needed,
    c) the storage driver is specified through a storage class, and
    d) the storage driver supports dynamic volume provisioning through
       a PersistentVolumeClaim (see EphemeralVolumeSource for more
       information on the connection between this volume type
       and PersistentVolumeClaim).

    Use PersistentVolumeClaim or one of the vendor-specific
    APIs for volumes that persist for longer than the lifecycle
    of an individual pod.

    Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
    be used that way - see the documentation of the driver for
    more information.

    A pod can use both types of ephemeral volumes and
    persistent volumes at the same time.

    Attributes
    ----------
    volumeClaimTemplate : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EphemeralVolumeClaimTemplate, default is Undefined, optional
        volume claim template
    """
    volumeClaimTemplate?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EphemeralVolumeClaimTemplate

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EphemeralVolumeClaimTemplate:
    r"""
    Will be used to create a stand-alone PVC to provision the volume.
    The pod in which this EphemeralVolumeSource is embedded will be the
    owner of the PVC, i.e. the PVC will be deleted together with the
    pod.  The name of the PVC will be `<pod name>-<volume name>` where
    `<volume name>` is the name from the `PodSpec.Volumes` array
    entry. Pod validation will reject the pod if the concatenated name
    is not valid for a PVC (for example, too long).

    An existing PVC with that name that is not owned by the pod
    will *not* be used for the pod to avoid using an unrelated
    volume by mistake. Starting the pod is then blocked until
    the unrelated PVC is removed. If such a pre-created PVC is
    meant to be used by the pod, the PVC has to updated with an
    owner reference to the pod once the pod exists. Normally
    this should not be necessary, but it may be useful when
    manually reconstructing a broken cluster.

    This field is read-only and no changes will be made by Kubernetes
    to the PVC after it has been created.

    Required, must not be nil.

    Attributes
    ----------
    metadata : any, default is Undefined, optional
        May contain labels and annotations that will be copied into the PVC
        when creating it. No other fields are allowed and will be rejected during
        validation.
    spec : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EphemeralVolumeClaimTemplateSpec, default is Undefined, required
        spec
    """
    metadata?: any
    spec: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EphemeralVolumeClaimTemplateSpec

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EphemeralVolumeClaimTemplateSpec:
    r"""
    The specification for the PersistentVolumeClaim. The entire content is
    copied unchanged into the PVC that gets created from this
    template. The same fields as in a PersistentVolumeClaim
    are also valid here.

    Attributes
    ----------
    accessModes : [str], default is Undefined, optional
        accessModes contains the desired access modes the volume should have.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    dataSource : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EphemeralVolumeClaimTemplateSpecDataSource, default is Undefined, optional
        data source
    dataSourceRef : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EphemeralVolumeClaimTemplateSpecDataSourceRef, default is Undefined, optional
        data source ref
    resources : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EphemeralVolumeClaimTemplateSpecResources, default is Undefined, optional
        resources
    selector : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EphemeralVolumeClaimTemplateSpecSelector, default is Undefined, optional
        selector
    storageClassName : str, default is Undefined, optional
        storageClassName is the name of the StorageClass required by the claim.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    volumeAttributesClassName : str, default is Undefined, optional
        volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
        If specified, the CSI driver will create or update the volume with the attributes defined
        in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
        it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
        will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
        If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
        will be set by the persistentvolume controller if it exists.
        If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
        set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
        exists.
        More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
        (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
    volumeMode : str, default is Undefined, optional
        volumeMode defines what type of volume is required by the claim.
        Value of Filesystem is implied when not included in claim spec.
    volumeName : str, default is Undefined, optional
        volumeName is the binding reference to the PersistentVolume backing this claim.
    """
    accessModes?: [str]
    dataSource?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EphemeralVolumeClaimTemplateSpecDataSource
    dataSourceRef?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EphemeralVolumeClaimTemplateSpecDataSourceRef
    resources?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EphemeralVolumeClaimTemplateSpecResources
    selector?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EphemeralVolumeClaimTemplateSpecSelector
    storageClassName?: str
    volumeAttributesClassName?: str
    volumeMode?: str
    volumeName?: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EphemeralVolumeClaimTemplateSpecDataSource:
    r"""
    dataSource field can be used to specify either:
    * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
    * An existing PVC (PersistentVolumeClaim)
    If the provisioner or an external controller can support the specified data source,
    it will create a new volume based on the contents of the specified data source.
    When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
    and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
    If the namespace is specified, then dataSourceRef will not be copied to dataSource.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    """
    apiGroup?: str
    kind: str

    name: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EphemeralVolumeClaimTemplateSpecDataSourceRef:
    r"""
    dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
    volume is desired. This may be any object from a non-empty API group (non
    core object) or a PersistentVolumeClaim object.
    When this field is specified, volume binding will only succeed if the type of
    the specified object matches some installed volume populator or dynamic
    provisioner.
    This field will replace the functionality of the dataSource field and as such
    if both fields are non-empty, they must have the same value. For backwards
    compatibility, when namespace isn't specified in dataSourceRef,
    both fields (dataSource and dataSourceRef) will be set to the same
    value automatically if one of them is empty and the other is non-empty.
    When namespace is specified in dataSourceRef,
    dataSource isn't set to the same value and must be empty.
    There are three important differences between dataSource and dataSourceRef:
    * While dataSource only allows two specific types of objects, dataSourceRef
      allows any non-core object, as well as PersistentVolumeClaim objects.
    * While dataSource ignores disallowed values (dropping them), dataSourceRef
      preserves all values, and generates an error if a disallowed value is
      specified.
    * While dataSource only allows local objects, dataSourceRef allows objects
      in any namespaces.
    (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
    (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    namespace : str, default is Undefined, optional
        Namespace is the namespace of resource being referenced
        Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
        (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
    """
    apiGroup?: str
    kind: str

    name: str

    namespace?: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EphemeralVolumeClaimTemplateSpecResources:
    r"""
    resources represents the minimum resources the volume should have.
    If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
    that are lower than previous value but must still be higher than capacity recorded in the
    status field of the claim.
    More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources

    Attributes
    ----------
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """
    limits?: {str:int | str}
    requests?: {str:int | str}

    check:
        all _, limits in limits {_regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits} if limits
        all _, requests in requests {_regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests} if requests

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EphemeralVolumeClaimTemplateSpecSelector:
    r"""
    selector is a label query over volumes to consider for binding.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0EphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Fc:
    r"""
    fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.

    Attributes
    ----------
    fsType : str, default is Undefined, optional
        fsType is the filesystem type to mount.
        Must be a filesystem type supported by the host operating system.
        Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    lun : int, default is Undefined, optional
        lun is Optional: FC target lun number
    readOnly : bool, default is Undefined, optional
        readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
        the ReadOnly setting in VolumeMounts.
    targetWWNs : [str], default is Undefined, optional
        targetWWNs is Optional: FC target worldwide names (WWNs)
    wwids : [str], default is Undefined, optional
        wwids Optional: FC volume world wide identifiers (wwids)
        Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
    """
    fsType?: str
    lun?: int
    readOnly?: bool
    targetWWNs?: [str]
    wwids?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0FlexVolume:
    r"""
    flexVolume represents a generic volume resource that is
    provisioned/attached using an exec based plugin.
    Deprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.

    Attributes
    ----------
    driver : str, default is Undefined, required
        driver is the name of the driver to use for this volume.
    fsType : str, default is Undefined, optional
        fsType is the filesystem type to mount.
        Must be a filesystem type supported by the host operating system.
        Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
    options : {str:str}, default is Undefined, optional
        options is Optional: this field holds extra command options if any.
    readOnly : bool, default is Undefined, optional
        readOnly is Optional: defaults to false (read/write). ReadOnly here will force
        the ReadOnly setting in VolumeMounts.
    secretRef : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0FlexVolumeSecretRef, default is Undefined, optional
        secret ref
    """
    driver: str

    fsType?: str
    options?: {str:str}
    readOnly?: bool
    secretRef?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0FlexVolumeSecretRef

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0FlexVolumeSecretRef:
    r"""
    secretRef is Optional: secretRef is reference to the secret object containing
    sensitive information to pass to the plugin scripts. This may be
    empty if no secret object is specified. If the secret object
    contains more than one secret, all secrets are passed to the plugin
    scripts.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    name?: str = ""

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Flocker:
    r"""
    flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.
    Deprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.

    Attributes
    ----------
    datasetName : str, default is Undefined, optional
        datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
        should be considered as deprecated
    datasetUUID : str, default is Undefined, optional
        datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
    """
    datasetName?: str
    datasetUUID?: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0GcePersistentDisk:
    r"""
    gcePersistentDisk represents a GCE Disk resource that is attached to a
    kubelet's host machine and then exposed to the pod.
    Deprecated: GCEPersistentDisk is deprecated. All operations for the in-tree
    gcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.
    More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk

    Attributes
    ----------
    fsType : str, default is Undefined, optional
        fsType is filesystem type of the volume that you want to mount.
        Tip: Ensure that the filesystem type is supported by the host operating system.
        Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    partition : int, default is Undefined, optional
        partition is the partition in the volume that you want to mount.
        If omitted, the default is to mount by volume name.
        Examples: For volume /dev/sda1, you specify the partition as "1".
        Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    pdName : str, default is Undefined, required
        pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    readOnly : bool, default is Undefined, optional
        readOnly here will force the ReadOnly setting in VolumeMounts.
        Defaults to false.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    """
    fsType?: str
    partition?: int
    pdName: str

    readOnly?: bool

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0GitRepo:
    r"""
    gitRepo represents a git repository at a particular revision.
    Deprecated: GitRepo is deprecated. To provision a container with a git repo, mount an
    EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
    into the Pod's container.

    Attributes
    ----------
    directory : str, default is Undefined, optional
        directory is the target directory name.
        Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
        git repository.  Otherwise, if specified, the volume will contain the git repository in
        the subdirectory with the given name.
    repository : str, default is Undefined, required
        repository is the URL
    revision : str, default is Undefined, optional
        revision is the commit hash for the specified revision.
    """
    directory?: str
    repository: str

    revision?: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Glusterfs:
    r"""
    glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
    Deprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.
    More info: https://examples.k8s.io/volumes/glusterfs/README.md

    Attributes
    ----------
    endpoints : str, default is Undefined, required
        endpoints is the endpoint name that details Glusterfs topology.
        More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    path : str, default is Undefined, required
        path is the Glusterfs volume path.
        More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    readOnly : bool, default is Undefined, optional
        readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
        Defaults to false.
        More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    """
    endpoints: str

    path: str

    readOnly?: bool

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0HostPath:
    r"""
    hostPath represents a pre-existing file or directory on the host
    machine that is directly exposed to the container. This is generally
    used for system agents or other privileged things that are allowed
    to see the host machine. Most containers will NOT need this.
    More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath

    Attributes
    ----------
    path : str, default is Undefined, required
        path of the directory on the host.
        If the path is a symlink, it will follow the link to the real path.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    $type : str, default is Undefined, optional
        type for HostPath Volume
        Defaults to ""
        More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    """
    path: str

    $type?: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Image:
    r"""
    image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.
    The volume is resolved at pod startup depending on which PullPolicy value is provided:

    - Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
    - Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
    - IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.

    The volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.
    A failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.
    The types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.
    The OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.
    The volume will be mounted read-only (ro) and non-executable files (noexec).
    Sub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath) before 1.33.
    The field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.

    Attributes
    ----------
    pullPolicy : str, default is Undefined, optional
        Policy for pulling OCI objects. Possible values are:
        Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
        Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
        IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
        Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
    reference : str, default is Undefined, optional
        Required: Image or artifact reference to be used.
        Behaves in the same way as pod.spec.containers[*].image.
        Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.
        More info: https://kubernetes.io/docs/concepts/containers/images
        This field is optional to allow higher level config management to default or override
        container images in workload controllers like Deployments and StatefulSets.
    """
    pullPolicy?: str
    reference?: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Iscsi:
    r"""
    iscsi represents an ISCSI Disk resource that is attached to a
    kubelet's host machine and then exposed to the pod.
    More info: https://examples.k8s.io/volumes/iscsi/README.md

    Attributes
    ----------
    chapAuthDiscovery : bool, default is Undefined, optional
        chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
    chapAuthSession : bool, default is Undefined, optional
        chapAuthSession defines whether support iSCSI Session CHAP authentication
    fsType : str, default is Undefined, optional
        fsType is the filesystem type of the volume that you want to mount.
        Tip: Ensure that the filesystem type is supported by the host operating system.
        Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
    initiatorName : str, default is Undefined, optional
        initiatorName is the custom iSCSI Initiator Name.
        If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
        <target portal>:<volume name> will be created for the connection.
    iqn : str, default is Undefined, required
        iqn is the target iSCSI Qualified Name.
    iscsiInterface : str, default is "default", optional
        iscsiInterface is the interface Name that uses an iSCSI transport.
        Defaults to 'default' (tcp).
    lun : int, default is Undefined, required
        lun represents iSCSI Target Lun number.
    portals : [str], default is Undefined, optional
        portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
        is other than default (typically TCP ports 860 and 3260).
    readOnly : bool, default is Undefined, optional
        readOnly here will force the ReadOnly setting in VolumeMounts.
        Defaults to false.
    secretRef : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0IscsiSecretRef, default is Undefined, optional
        secret ref
    targetPortal : str, default is Undefined, required
        targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
        is other than default (typically TCP ports 860 and 3260).
    """
    chapAuthDiscovery?: bool
    chapAuthSession?: bool
    fsType?: str
    initiatorName?: str
    iqn: str

    iscsiInterface?: str = "default"
    lun: int

    portals?: [str]
    readOnly?: bool
    secretRef?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0IscsiSecretRef
    targetPortal: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0IscsiSecretRef:
    r"""
    secretRef is the CHAP Secret for iSCSI target and initiator authentication

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    name?: str = ""

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Nfs:
    r"""
    nfs represents an NFS mount on the host that shares a pod's lifetime
    More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs

    Attributes
    ----------
    path : str, default is Undefined, required
        path that is exported by the NFS server.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    readOnly : bool, default is Undefined, optional
        readOnly here will force the NFS export to be mounted with read-only permissions.
        Defaults to false.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    server : str, default is Undefined, required
        server is the hostname or IP address of the NFS server.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    """
    path: str

    readOnly?: bool
    server: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0PersistentVolumeClaim:
    r"""
    persistentVolumeClaimVolumeSource represents a reference to a
    PersistentVolumeClaim in the same namespace.
    More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims

    Attributes
    ----------
    claimName : str, default is Undefined, required
        claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    readOnly : bool, default is Undefined, optional
        readOnly Will force the ReadOnly setting in VolumeMounts.
        Default false.
    """
    claimName: str

    readOnly?: bool

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0PhotonPersistentDisk:
    r"""
    photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.
    Deprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.

    Attributes
    ----------
    fsType : str, default is Undefined, optional
        fsType is the filesystem type to mount.
        Must be a filesystem type supported by the host operating system.
        Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    pdID : str, default is Undefined, required
        pdID is the ID that identifies Photon Controller persistent disk
    """
    fsType?: str
    pdID: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0PortworxVolume:
    r"""
    portworxVolume represents a portworx volume attached and mounted on kubelets host machine.
    Deprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type
    are redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate
    is on.

    Attributes
    ----------
    fsType : str, default is Undefined, optional
        fSType represents the filesystem type to mount
        Must be a filesystem type supported by the host operating system.
        Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
    readOnly : bool, default is Undefined, optional
        readOnly defaults to false (read/write). ReadOnly here will force
        the ReadOnly setting in VolumeMounts.
    volumeID : str, default is Undefined, required
        volumeID uniquely identifies a Portworx volume
    """
    fsType?: str
    readOnly?: bool
    volumeID: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Projected:
    r"""
    projected items for all in one resources secrets, configmaps, and downward API

    Attributes
    ----------
    defaultMode : int, default is Undefined, optional
        defaultMode are the mode bits used to set permissions on created files by default.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        Directories within the path are not affected by this setting.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    sources : [MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0], default is Undefined, optional
        sources is the list of volume projections. Each entry in this list
        handles one source.
    """
    defaultMode?: int
    sources?: [MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0]

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0:
    r"""
    Projection that may be projected along with other supported volume types.
    Exactly one of these fields must be set.

    Attributes
    ----------
    clusterTrustBundle : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0ClusterTrustBundle, default is Undefined, optional
        cluster trust bundle
    configMap : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0ConfigMap, default is Undefined, optional
        config map
    downwardAPI : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0DownwardAPI, default is Undefined, optional
        downward API
    secret : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0Secret, default is Undefined, optional
        secret
    serviceAccountToken : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0ServiceAccountToken, default is Undefined, optional
        service account token
    """
    clusterTrustBundle?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0ClusterTrustBundle
    configMap?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0ConfigMap
    downwardAPI?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0DownwardAPI
    secret?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0Secret
    serviceAccountToken?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0ServiceAccountToken

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0ClusterTrustBundle:
    r"""
    ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
    of ClusterTrustBundle objects in an auto-updating file.

    Alpha, gated by the ClusterTrustBundleProjection feature gate.

    ClusterTrustBundle objects can either be selected by name, or by the
    combination of signer name and a label selector.

    Kubelet performs aggressive normalization of the PEM contents written
    into the pod filesystem.  Esoteric PEM features such as inter-block
    comments and block headers are stripped.  Certificates are deduplicated.
    The ordering of certificates within the file is arbitrary, and Kubelet
    may change the order over time.

    Attributes
    ----------
    labelSelector : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelector, default is Undefined, optional
        label selector
    name : str, default is Undefined, optional
        Select a single ClusterTrustBundle by object name.  Mutually-exclusive
        with signerName and labelSelector.
    optional : bool, default is Undefined, optional
        If true, don't block pod startup if the referenced ClusterTrustBundle(s)
        aren't available.  If using name, then the named ClusterTrustBundle is
        allowed not to exist.  If using signerName, then the combination of
        signerName and labelSelector is allowed to match zero
        ClusterTrustBundles.
    path : str, default is Undefined, required
        Relative path from the volume root to write the bundle.
    signerName : str, default is Undefined, optional
        Select all ClusterTrustBundles that match this signer name.
        Mutually-exclusive with name.  The contents of all selected
        ClusterTrustBundles will be unified and deduplicated.
    """
    labelSelector?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelector
    name?: str
    optional?: bool
    path: str

    signerName?: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelector:
    r"""
    Select all ClusterTrustBundles that match this label selector.  Only has
    effect if signerName is set.  Mutually-exclusive with name.  If unset,
    interpreted as "match nothing".  If set but empty, interpreted as "match
    everything".

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0ConfigMap:
    r"""
    configMap information about the configMap data to project

    Attributes
    ----------
    items : [MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0ConfigMapItemsItems0], default is Undefined, optional
        items if unspecified, each key-value pair in the Data field of the referenced
        ConfigMap will be projected into the volume as a file whose name is the
        key and content is the value. If specified, the listed keys will be
        projected into the specified paths, and unlisted keys will not be
        present. If a key is specified which is not present in the ConfigMap,
        the volume setup will error unless it is marked optional. Paths must be
        relative and may not contain the '..' path or start with '..'.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        optional specify whether the ConfigMap or its keys must be defined
    """
    items?: [MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0ConfigMapItemsItems0]
    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0ConfigMapItemsItems0:
    r"""
    Maps a string key to a path within a volume.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the key to project.
    mode : int, default is Undefined, optional
        mode is Optional: mode bits used to set permissions on this file.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        If not specified, the volume defaultMode will be used.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    path : str, default is Undefined, required
        path is the relative path of the file to map the key to.
        May not be an absolute path.
        May not contain the path element '..'.
        May not start with the string '..'.
    """
    key: str

    mode?: int
    path: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0DownwardAPI:
    r"""
    downwardAPI information about the downwardAPI data to project

    Attributes
    ----------
    items : [MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0DownwardAPIItemsItems0], default is Undefined, optional
        Items is a list of DownwardAPIVolume file
    """
    items?: [MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0DownwardAPIItemsItems0]

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0DownwardAPIItemsItems0:
    r"""
    DownwardAPIVolumeFile represents information to create the file containing the pod field

    Attributes
    ----------
    fieldRef : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0DownwardAPIItemsItems0FieldRef, default is Undefined, optional
        field ref
    mode : int, default is Undefined, optional
        Optional: mode bits used to set permissions on this file, must be an octal value
        between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        If not specified, the volume defaultMode will be used.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    path : str, default is Undefined, required
        Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
    resourceFieldRef : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0DownwardAPIItemsItems0ResourceFieldRef, default is Undefined, optional
        resource field ref
    """
    fieldRef?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0DownwardAPIItemsItems0FieldRef
    mode?: int
    path: str

    resourceFieldRef?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0DownwardAPIItemsItems0ResourceFieldRef

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0DownwardAPIItemsItems0FieldRef:
    r"""
    Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, default is Undefined, required
        Path of the field to select in the specified API version.
    """
    apiVersion?: str
    fieldPath: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0DownwardAPIItemsItems0ResourceFieldRef:
    r"""
    Selects a resource of the container: only resources limits and requests
    (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Container name: required for volumes, optional for env vars
    divisor : int | str, default is Undefined, optional
        Specifies the output format of the exposed resources, defaults to "1"
    resource : str, default is Undefined, required
        Required: resource to select
    """
    containerName?: str
    divisor?: int | str
    resource: str

    check:
        _regex_match(str(divisor), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if divisor

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0Secret:
    r"""
    secret information about the secret data to project

    Attributes
    ----------
    items : [MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0SecretItemsItems0], default is Undefined, optional
        items if unspecified, each key-value pair in the Data field of the referenced
        Secret will be projected into the volume as a file whose name is the
        key and content is the value. If specified, the listed keys will be
        projected into the specified paths, and unlisted keys will not be
        present. If a key is specified which is not present in the Secret,
        the volume setup will error unless it is marked optional. Paths must be
        relative and may not contain the '..' path or start with '..'.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        optional field specify whether the Secret or its key must be defined
    """
    items?: [MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0SecretItemsItems0]
    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0SecretItemsItems0:
    r"""
    Maps a string key to a path within a volume.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the key to project.
    mode : int, default is Undefined, optional
        mode is Optional: mode bits used to set permissions on this file.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        If not specified, the volume defaultMode will be used.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    path : str, default is Undefined, required
        path is the relative path of the file to map the key to.
        May not be an absolute path.
        May not contain the path element '..'.
        May not start with the string '..'.
    """
    key: str

    mode?: int
    path: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ProjectedSourcesItems0ServiceAccountToken:
    r"""
    serviceAccountToken is information about the serviceAccountToken data to project

    Attributes
    ----------
    audience : str, default is Undefined, optional
        audience is the intended audience of the token. A recipient of a token
        must identify itself with an identifier specified in the audience of the
        token, and otherwise should reject the token. The audience defaults to the
        identifier of the apiserver.
    expirationSeconds : int, default is Undefined, optional
        expirationSeconds is the requested duration of validity of the service
        account token. As the token approaches expiration, the kubelet volume
        plugin will proactively rotate the service account token. The kubelet will
        start trying to rotate the token if the token is older than 80 percent of
        its time to live or if the token is older than 24 hours.Defaults to 1 hour
        and must be at least 10 minutes.
    path : str, default is Undefined, required
        path is the path relative to the mount point of the file to project the
        token into.
    """
    audience?: str
    expirationSeconds?: int
    path: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Quobyte:
    r"""
    quobyte represents a Quobyte mount on the host that shares a pod's lifetime.
    Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.

    Attributes
    ----------
    group : str, default is Undefined, optional
        group to map volume access to
        Default is no group
    readOnly : bool, default is Undefined, optional
        readOnly here will force the Quobyte volume to be mounted with read-only permissions.
        Defaults to false.
    registry : str, default is Undefined, required
        registry represents a single or multiple Quobyte Registry services
        specified as a string as host:port pair (multiple entries are separated with commas)
        which acts as the central registry for volumes
    tenant : str, default is Undefined, optional
        tenant owning the given Quobyte volume in the Backend
        Used with dynamically provisioned Quobyte volumes, value is set by the plugin
    user : str, default is Undefined, optional
        user to map volume access to
        Defaults to serivceaccount user
    volume : str, default is Undefined, required
        volume is a string that references an already created Quobyte volume by name.
    """
    group?: str
    readOnly?: bool
    registry: str

    tenant?: str
    user?: str
    volume: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Rbd:
    r"""
    rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
    Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported.
    More info: https://examples.k8s.io/volumes/rbd/README.md

    Attributes
    ----------
    fsType : str, default is Undefined, optional
        fsType is the filesystem type of the volume that you want to mount.
        Tip: Ensure that the filesystem type is supported by the host operating system.
        Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
    image : str, default is Undefined, required
        image is the rados image name.
        More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    keyring : str, default is "/etc/ceph/keyring", optional
        keyring is the path to key ring for RBDUser.
        Default is /etc/ceph/keyring.
        More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    monitors : [str], default is Undefined, required
        monitors is a collection of Ceph monitors.
        More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    pool : str, default is "rbd", optional
        pool is the rados pool name.
        Default is rbd.
        More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    readOnly : bool, default is Undefined, optional
        readOnly here will force the ReadOnly setting in VolumeMounts.
        Defaults to false.
        More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    secretRef : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0RbdSecretRef, default is Undefined, optional
        secret ref
    user : str, default is "admin", optional
        user is the rados user name.
        Default is admin.
        More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    """
    fsType?: str
    image: str

    keyring?: str = "/etc/ceph/keyring"
    monitors: [str]

    pool?: str = "rbd"
    readOnly?: bool
    secretRef?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0RbdSecretRef
    user?: str = "admin"

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0RbdSecretRef:
    r"""
    secretRef is name of the authentication secret for RBDUser. If provided
    overrides keyring.
    Default is nil.
    More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    name?: str = ""

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ScaleIO:
    r"""
    scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
    Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.

    Attributes
    ----------
    fsType : str, default is "xfs", optional
        fsType is the filesystem type to mount.
        Must be a filesystem type supported by the host operating system.
        Ex. "ext4", "xfs", "ntfs".
        Default is "xfs".
    gateway : str, default is Undefined, required
        gateway is the host address of the ScaleIO API Gateway.
    protectionDomain : str, default is Undefined, optional
        protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
    readOnly : bool, default is Undefined, optional
        readOnly Defaults to false (read/write). ReadOnly here will force
        the ReadOnly setting in VolumeMounts.
    secretRef : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ScaleIOSecretRef, default is Undefined, required
        secret ref
    sslEnabled : bool, default is Undefined, optional
        sslEnabled Flag enable/disable SSL communication with Gateway, default false
    storageMode : str, default is "ThinProvisioned", optional
        storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
        Default is ThinProvisioned.
    storagePool : str, default is Undefined, optional
        storagePool is the ScaleIO Storage Pool associated with the protection domain.
    system : str, default is Undefined, required
        system is the name of the storage system as configured in ScaleIO.
    volumeName : str, default is Undefined, optional
        volumeName is the name of a volume already created in the ScaleIO system
        that is associated with this volume source.
    """
    fsType?: str = "xfs"
    gateway: str

    protectionDomain?: str
    readOnly?: bool
    secretRef: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ScaleIOSecretRef

    sslEnabled?: bool
    storageMode?: str = "ThinProvisioned"
    storagePool?: str
    system: str

    volumeName?: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0ScaleIOSecretRef:
    r"""
    secretRef references to the secret for ScaleIO user and other
    sensitive information. If this is not provided, Login operation will fail.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    name?: str = ""

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Secret:
    r"""
    secret represents a secret that should populate this volume.
    More info: https://kubernetes.io/docs/concepts/storage/volumes#secret

    Attributes
    ----------
    defaultMode : int, default is Undefined, optional
        defaultMode is Optional: mode bits used to set permissions on created files by default.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values
        for mode bits. Defaults to 0644.
        Directories within the path are not affected by this setting.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    items : [MonitoringCoreosComV1AlertmanagerSpecVolumesItems0SecretItemsItems0], default is Undefined, optional
        items If unspecified, each key-value pair in the Data field of the referenced
        Secret will be projected into the volume as a file whose name is the
        key and content is the value. If specified, the listed keys will be
        projected into the specified paths, and unlisted keys will not be
        present. If a key is specified which is not present in the Secret,
        the volume setup will error unless it is marked optional. Paths must be
        relative and may not contain the '..' path or start with '..'.
    optional : bool, default is Undefined, optional
        optional field specify whether the Secret or its keys must be defined
    secretName : str, default is Undefined, optional
        secretName is the name of the secret in the pod's namespace to use.
        More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    """
    defaultMode?: int
    items?: [MonitoringCoreosComV1AlertmanagerSpecVolumesItems0SecretItemsItems0]
    optional?: bool
    secretName?: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0SecretItemsItems0:
    r"""
    Maps a string key to a path within a volume.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the key to project.
    mode : int, default is Undefined, optional
        mode is Optional: mode bits used to set permissions on this file.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        If not specified, the volume defaultMode will be used.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    path : str, default is Undefined, required
        path is the relative path of the file to map the key to.
        May not be an absolute path.
        May not contain the path element '..'.
        May not start with the string '..'.
    """
    key: str

    mode?: int
    path: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0Storageos:
    r"""
    storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
    Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.

    Attributes
    ----------
    fsType : str, default is Undefined, optional
        fsType is the filesystem type to mount.
        Must be a filesystem type supported by the host operating system.
        Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    readOnly : bool, default is Undefined, optional
        readOnly defaults to false (read/write). ReadOnly here will force
        the ReadOnly setting in VolumeMounts.
    secretRef : MonitoringCoreosComV1AlertmanagerSpecVolumesItems0StorageosSecretRef, default is Undefined, optional
        secret ref
    volumeName : str, default is Undefined, optional
        volumeName is the human-readable name of the StorageOS volume.  Volume
        names are only unique within a namespace.
    volumeNamespace : str, default is Undefined, optional
        volumeNamespace specifies the scope of the volume within StorageOS.  If no
        namespace is specified then the Pod's namespace will be used.  This allows the
        Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
        Set VolumeName to any name to override the default behaviour.
        Set to "default" if you are not using namespaces within StorageOS.
        Namespaces that do not pre-exist within StorageOS will be created.
    """
    fsType?: str
    readOnly?: bool
    secretRef?: MonitoringCoreosComV1AlertmanagerSpecVolumesItems0StorageosSecretRef
    volumeName?: str
    volumeNamespace?: str

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0StorageosSecretRef:
    r"""
    secretRef specifies the secret to use for obtaining the StorageOS API
    credentials.  If not specified, default values will be attempted.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    name?: str = ""

schema MonitoringCoreosComV1AlertmanagerSpecVolumesItems0VsphereVolume:
    r"""
    vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.
    Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type
    are redirected to the csi.vsphere.vmware.com CSI driver.

    Attributes
    ----------
    fsType : str, default is Undefined, optional
        fsType is filesystem type to mount.
        Must be a filesystem type supported by the host operating system.
        Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    storagePolicyID : str, default is Undefined, optional
        storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
    storagePolicyName : str, default is Undefined, optional
        storagePolicyName is the storage Policy Based Management (SPBM) profile name.
    volumePath : str, default is Undefined, required
        volumePath is the path that identifies vSphere volume vmdk
    """
    fsType?: str
    storagePolicyID?: str
    storagePolicyName?: str
    volumePath: str

schema MonitoringCoreosComV1AlertmanagerSpecWeb:
    r"""
    Defines the web command line flags when starting Alertmanager.

    Attributes
    ----------
    getConcurrency : int, default is Undefined, optional
        Maximum number of GET requests processed concurrently. This corresponds to the
        Alertmanager's `--web.get-concurrency` flag.
    httpConfig : MonitoringCoreosComV1AlertmanagerSpecWebHTTPConfig, default is Undefined, optional
        http config
    timeout : int, default is Undefined, optional
        Timeout for HTTP requests. This corresponds to the Alertmanager's
        `--web.timeout` flag.
    tlsConfig : MonitoringCoreosComV1AlertmanagerSpecWebTLSConfig, default is Undefined, optional
        tls config
    """
    getConcurrency?: int
    httpConfig?: MonitoringCoreosComV1AlertmanagerSpecWebHTTPConfig
    timeout?: int
    tlsConfig?: MonitoringCoreosComV1AlertmanagerSpecWebTLSConfig

schema MonitoringCoreosComV1AlertmanagerSpecWebHTTPConfig:
    r"""
    Defines HTTP parameters for web server.

    Attributes
    ----------
    headers : MonitoringCoreosComV1AlertmanagerSpecWebHTTPConfigHeaders, default is Undefined, optional
        headers
    http2 : bool, default is Undefined, optional
        Enable HTTP/2 support. Note that HTTP/2 is only supported with TLS.
        When TLSConfig is not configured, HTTP/2 will be disabled.
        Whenever the value of the field changes, a rolling update will be triggered.
    """
    headers?: MonitoringCoreosComV1AlertmanagerSpecWebHTTPConfigHeaders
    http2?: bool

schema MonitoringCoreosComV1AlertmanagerSpecWebHTTPConfigHeaders:
    r"""
    List of headers that can be added to HTTP responses.

    Attributes
    ----------
    contentSecurityPolicy : str, default is Undefined, optional
        Set the Content-Security-Policy header to HTTP responses.
        Unset if blank.
    strictTransportSecurity : str, default is Undefined, optional
        Set the Strict-Transport-Security header to HTTP responses.
        Unset if blank.
        Please make sure that you use this with care as this header might force
        browsers to load Prometheus and the other applications hosted on the same
        domain and subdomains over HTTPS.
        https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
    xContentTypeOptions : str, default is Undefined, optional
        Set the X-Content-Type-Options header to HTTP responses.
        Unset if blank. Accepted value is nosniff.
        https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
    xFrameOptions : str, default is Undefined, optional
        Set the X-Frame-Options header to HTTP responses.
        Unset if blank. Accepted values are deny and sameorigin.
        https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
    xXSSProtection : str, default is Undefined, optional
        Set the X-XSS-Protection header to all responses.
        Unset if blank.
        https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
    """
    contentSecurityPolicy?: str
    strictTransportSecurity?: str
    xContentTypeOptions?: "" | "NoSniff"
    xFrameOptions?: "" | "Deny" | "SameOrigin"
    xXSSProtection?: str

schema MonitoringCoreosComV1AlertmanagerSpecWebTLSConfig:
    r"""
    Defines the TLS parameters for HTTPS.

    Attributes
    ----------
    cert : MonitoringCoreosComV1AlertmanagerSpecWebTLSConfigCert, default is Undefined, optional
        cert
    certFile : str, default is Undefined, optional
        Path to the TLS certificate file in the container for the web server.

        Either `keySecret` or `keyFile` must be defined.

        It is mutually exclusive with `cert`.
    cipherSuites : [str], default is Undefined, optional
        List of supported cipher suites for TLS versions up to TLS 1.2.

        If not defined, the Go default cipher suites are used.
        Available cipher suites are documented in the Go documentation:
        https://golang.org/pkg/crypto/tls/#pkg-constants
    clientAuthType : str, default is Undefined, optional
        The server policy for client TLS authentication.

        For more detail on clientAuth options:
        https://golang.org/pkg/crypto/tls/#ClientAuthType
    clientCAFile : str, default is Undefined, optional
        Path to the CA certificate file for client certificate authentication to
        the server.

        It is mutually exclusive with `client_ca`.
    client_ca : MonitoringCoreosComV1AlertmanagerSpecWebTLSConfigClientCa, default is Undefined, optional
        client ca
    curvePreferences : [str], default is Undefined, optional
        Elliptic curves that will be used in an ECDHE handshake, in preference
        order.

        Available curves are documented in the Go documentation:
        https://golang.org/pkg/crypto/tls/#CurveID
    keyFile : str, default is Undefined, optional
        Path to the TLS private key file in the container for the web server.

        If defined, either `cert` or `certFile` must be defined.

        It is mutually exclusive with `keySecret`.
    keySecret : MonitoringCoreosComV1AlertmanagerSpecWebTLSConfigKeySecret, default is Undefined, optional
        key secret
    maxVersion : str, default is Undefined, optional
        Maximum TLS version that is acceptable.
    minVersion : str, default is Undefined, optional
        Minimum TLS version that is acceptable.
    preferServerCipherSuites : bool, default is Undefined, optional
        Controls whether the server selects the client's most preferred cipher
        suite, or the server's most preferred cipher suite.

        If true then the server's preference, as expressed in
        the order of elements in cipherSuites, is used.
    """
    cert?: MonitoringCoreosComV1AlertmanagerSpecWebTLSConfigCert
    certFile?: str
    cipherSuites?: [str]
    clientAuthType?: str
    clientCAFile?: str
    client_ca?: MonitoringCoreosComV1AlertmanagerSpecWebTLSConfigClientCa
    curvePreferences?: [str]
    keyFile?: str
    keySecret?: MonitoringCoreosComV1AlertmanagerSpecWebTLSConfigKeySecret
    maxVersion?: str
    minVersion?: str
    preferServerCipherSuites?: bool

schema MonitoringCoreosComV1AlertmanagerSpecWebTLSConfigCert:
    r"""
    Secret or ConfigMap containing the TLS certificate for the web server.

    Either `keySecret` or `keyFile` must be defined.

    It is mutually exclusive with `certFile`.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1AlertmanagerSpecWebTLSConfigCertConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1AlertmanagerSpecWebTLSConfigCertSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1AlertmanagerSpecWebTLSConfigCertConfigMap
    secret?: MonitoringCoreosComV1AlertmanagerSpecWebTLSConfigCertSecret

schema MonitoringCoreosComV1AlertmanagerSpecWebTLSConfigCertConfigMap:
    r"""
    ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecWebTLSConfigCertSecret:
    r"""
    Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecWebTLSConfigClientCa:
    r"""
    Secret or ConfigMap containing the CA certificate for client certificate
    authentication to the server.

    It is mutually exclusive with `clientCAFile`.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1AlertmanagerSpecWebTLSConfigClientCaConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1AlertmanagerSpecWebTLSConfigClientCaSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1AlertmanagerSpecWebTLSConfigClientCaConfigMap
    secret?: MonitoringCoreosComV1AlertmanagerSpecWebTLSConfigClientCaSecret

schema MonitoringCoreosComV1AlertmanagerSpecWebTLSConfigClientCaConfigMap:
    r"""
    ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecWebTLSConfigClientCaSecret:
    r"""
    Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerSpecWebTLSConfigKeySecret:
    r"""
    Secret containing the TLS private key for the web server.

    Either `cert` or `certFile` must be defined.

    It is mutually exclusive with `keyFile`.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1AlertmanagerStatus:
    r"""
    Most recent observed status of the Alertmanager cluster. Read-only.
    More info:
    https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

    Attributes
    ----------
    availableReplicas : int, default is Undefined, required
        Total number of available pods (ready for at least minReadySeconds)
        targeted by this Alertmanager cluster.
    conditions : [MonitoringCoreosComV1AlertmanagerStatusConditionsItems0], default is Undefined, optional
        The current state of the Alertmanager object.
    paused : bool, default is Undefined, required
        Represents whether any actions on the underlying managed objects are
        being performed. Only delete actions will be performed.
    replicas : int, default is Undefined, required
        Total number of non-terminated pods targeted by this Alertmanager
        object (their labels match the selector).
    selector : str, default is Undefined, optional
        The selector used to match the pods targeted by this Alertmanager object.
    unavailableReplicas : int, default is Undefined, required
        Total number of unavailable pods targeted by this Alertmanager object.
    updatedReplicas : int, default is Undefined, required
        Total number of non-terminated pods targeted by this Alertmanager
        object that have the desired version spec.
    """
    availableReplicas: int

    conditions?: [MonitoringCoreosComV1AlertmanagerStatusConditionsItems0]
    paused: bool

    replicas: int

    selector?: str
    unavailableReplicas: int

    updatedReplicas: int

schema MonitoringCoreosComV1AlertmanagerStatusConditionsItems0:
    r"""
    Condition represents the state of the resources associated with the
    Prometheus, Alertmanager or ThanosRuler resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        lastTransitionTime is the time of the last update to the current status property.
    message : str, default is Undefined, optional
        Human-readable message indicating details for the condition's last transition.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the
        condition was set based upon. For instance, if `.metadata.generation` is
        currently 12, but the `.status.conditions[].observedGeneration` is 9, the
        condition is out of date with respect to the current state of the
        instance.
    reason : str, default is Undefined, optional
        Reason for the condition's last transition.
    status : str, default is Undefined, required
        Status of the condition.
    $type : str, default is Undefined, required
        Type of the condition being reported.
    """
    lastTransitionTime: str

    message?: str
    observedGeneration?: int
    reason?: str
    status: str

    $type: str

    check:
        len(status) >= 1
        len($type) >= 1

