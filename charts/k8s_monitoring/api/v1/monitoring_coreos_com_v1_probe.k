"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""

import regex
import k8s.apimachinery.pkg.apis.meta.v1

_regex_match = regex.match

schema Probe:
    r"""
    The `Probe` custom resource definition (CRD) defines how to scrape metrics from prober exporters such as the [blackbox exporter](https://github.com/prometheus/blackbox_exporter).

    The `Probe` resource needs 2 pieces of information:
    * The list of probed addresses which can be defined statically or by discovering Kubernetes Ingress objects.
    * The prober which exposes the availability of probed endpoints (over various protocols such HTTP, TCP, ICMP, ...) as Prometheus metrics.

    `Prometheus` and `PrometheusAgent` objects select `Probe` objects using label and namespace selectors.

    Attributes
    ----------
    apiVersion : str, default is "monitoring.coreos.com/v1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Probe", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : MonitoringCoreosComV1ProbeSpec, default is Undefined, required
        spec
    """
    apiVersion: "monitoring.coreos.com/v1" = "monitoring.coreos.com/v1"

    kind: "Probe" = "Probe"

    metadata?: v1.ObjectMeta
    spec: MonitoringCoreosComV1ProbeSpec

schema MonitoringCoreosComV1ProbeSpec:
    r"""
    Specification of desired Ingress selection for target discovery by Prometheus.

    Attributes
    ----------
    authorization : MonitoringCoreosComV1ProbeSpecAuthorization, default is Undefined, optional
        authorization
    basicAuth : MonitoringCoreosComV1ProbeSpecBasicAuth, default is Undefined, optional
        basic auth
    bearerTokenSecret : MonitoringCoreosComV1ProbeSpecBearerTokenSecret, default is Undefined, optional
        bearer token secret
    convertClassicHistogramsToNHCB : bool, default is Undefined, optional
        Whether to convert all scraped classic histograms into a native histogram with custom buckets.
        It requires Prometheus >= v3.0.0.
    fallbackScrapeProtocol : str, default is Undefined, optional
        The protocol to use if a scrape returns blank, unparseable, or otherwise invalid Content-Type.

        It requires Prometheus >= v3.0.0.
    interval : str, default is Undefined, optional
        Interval at which targets are probed using the configured prober.
        If not specified Prometheus' global scrape interval is used.
    jobName : str, default is Undefined, optional
        The job name assigned to scraped metrics by default.
    keepDroppedTargets : int, default is Undefined, optional
        Per-scrape limit on the number of targets dropped by relabeling
        that will be kept in memory. 0 means no limit.

        It requires Prometheus >= v2.47.0.
    labelLimit : int, default is Undefined, optional
        Per-scrape limit on number of labels that will be accepted for a sample.
        Only valid in Prometheus versions 2.27.0 and newer.
    labelNameLengthLimit : int, default is Undefined, optional
        Per-scrape limit on length of labels name that will be accepted for a sample.
        Only valid in Prometheus versions 2.27.0 and newer.
    labelValueLengthLimit : int, default is Undefined, optional
        Per-scrape limit on length of labels value that will be accepted for a sample.
        Only valid in Prometheus versions 2.27.0 and newer.
    metricRelabelings : [MonitoringCoreosComV1ProbeSpecMetricRelabelingsItems0], default is Undefined, optional
        MetricRelabelConfigs to apply to samples before ingestion.
    module : str, default is Undefined, optional
        The module to use for probing specifying how to probe the target.
        Example module configuring in the blackbox exporter:
        https://github.com/prometheus/blackbox_exporter/blob/master/example.yml
    nativeHistogramBucketLimit : int, default is Undefined, optional
        If there are more than this many buckets in a native histogram,
        buckets will be merged to stay within the limit.
        It requires Prometheus >= v2.45.0.
    nativeHistogramMinBucketFactor : int | str, default is Undefined, optional
        If the growth factor of one bucket to the next is smaller than this,
        buckets will be merged to increase the factor sufficiently.
        It requires Prometheus >= v2.50.0.
    oauth2 : MonitoringCoreosComV1ProbeSpecOauth2, default is Undefined, optional
        oauth2
    params : [MonitoringCoreosComV1ProbeSpecParamsItems0], default is Undefined, optional
        The list of HTTP query parameters for the scrape.
        Please note that the `.spec.module` field takes precedence over the `module` parameter from this list when both are defined.
        The module name must be added using Module under ProbeSpec.
    prober : MonitoringCoreosComV1ProbeSpecProber, default is Undefined, optional
        prober
    sampleLimit : int, default is Undefined, optional
        SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.
    scrapeClass : str, default is Undefined, optional
        The scrape class to apply.
    scrapeClassicHistograms : bool, default is Undefined, optional
        Whether to scrape a classic histogram that is also exposed as a native histogram.
        It requires Prometheus >= v2.45.0.

        Notice: `scrapeClassicHistograms` corresponds to the `always_scrape_classic_histograms` field in the Prometheus configuration.
    scrapeProtocols : [str], default is Undefined, optional
        `scrapeProtocols` defines the protocols to negotiate during a scrape. It tells clients the
        protocols supported by Prometheus in order of preference (from most to least preferred).

        If unset, Prometheus uses its default value.

        It requires Prometheus >= v2.49.0.
    scrapeTimeout : str, default is Undefined, optional
        Timeout for scraping metrics from the Prometheus exporter.
        If not specified, the Prometheus global scrape timeout is used.
        The value cannot be greater than the scrape interval otherwise the operator will reject the resource.
    targetLimit : int, default is Undefined, optional
        TargetLimit defines a limit on the number of scraped targets that will be accepted.
    targets : MonitoringCoreosComV1ProbeSpecTargets, default is Undefined, optional
        targets
    tlsConfig : MonitoringCoreosComV1ProbeSpecTLSConfig, default is Undefined, optional
        tls config
    """
    authorization?: MonitoringCoreosComV1ProbeSpecAuthorization
    basicAuth?: MonitoringCoreosComV1ProbeSpecBasicAuth
    bearerTokenSecret?: MonitoringCoreosComV1ProbeSpecBearerTokenSecret
    convertClassicHistogramsToNHCB?: bool
    fallbackScrapeProtocol?: "PrometheusProto" | "OpenMetricsText0.0.1" | "OpenMetricsText1.0.0" | "PrometheusText0.0.4" | "PrometheusText1.0.0"
    interval?: str
    jobName?: str
    keepDroppedTargets?: int
    labelLimit?: int
    labelNameLengthLimit?: int
    labelValueLengthLimit?: int
    metricRelabelings?: [MonitoringCoreosComV1ProbeSpecMetricRelabelingsItems0]
    module?: str
    nativeHistogramBucketLimit?: int
    nativeHistogramMinBucketFactor?: int | str
    oauth2?: MonitoringCoreosComV1ProbeSpecOauth2
    params?: [MonitoringCoreosComV1ProbeSpecParamsItems0]
    prober?: MonitoringCoreosComV1ProbeSpecProber
    sampleLimit?: int
    scrapeClass?: str
    scrapeClassicHistograms?: bool
    scrapeProtocols?: [str]
    scrapeTimeout?: str
    targetLimit?: int
    targets?: MonitoringCoreosComV1ProbeSpecTargets
    tlsConfig?: MonitoringCoreosComV1ProbeSpecTLSConfig

    check:
        _regex_match(str(interval), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if interval
        _regex_match(str(nativeHistogramMinBucketFactor), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if nativeHistogramMinBucketFactor
        len(params) >= 1 if params
        len(scrapeClass) >= 1 if scrapeClass
        _regex_match(str(scrapeTimeout), r"^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$") if scrapeTimeout

schema MonitoringCoreosComV1ProbeSpecAuthorization:
    r"""
    Authorization section for this endpoint

    Attributes
    ----------
    credentials : MonitoringCoreosComV1ProbeSpecAuthorizationCredentials, default is Undefined, optional
        credentials
    $type : str, default is Undefined, optional
        Defines the authentication type. The value is case-insensitive.

        "Basic" is not a supported value.

        Default: "Bearer"
    """
    credentials?: MonitoringCoreosComV1ProbeSpecAuthorizationCredentials
    $type?: str

schema MonitoringCoreosComV1ProbeSpecAuthorizationCredentials:
    r"""
    Selects a key of a Secret in the namespace that contains the credentials for authentication.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1ProbeSpecBasicAuth:
    r"""
    BasicAuth allow an endpoint to authenticate over basic authentication.
    More info: https://prometheus.io/docs/operating/configuration/#endpoint

    Attributes
    ----------
    password : MonitoringCoreosComV1ProbeSpecBasicAuthPassword, default is Undefined, optional
        password
    username : MonitoringCoreosComV1ProbeSpecBasicAuthUsername, default is Undefined, optional
        username
    """
    password?: MonitoringCoreosComV1ProbeSpecBasicAuthPassword
    username?: MonitoringCoreosComV1ProbeSpecBasicAuthUsername

schema MonitoringCoreosComV1ProbeSpecBasicAuthPassword:
    r"""
    `password` specifies a key of a Secret containing the password for
    authentication.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1ProbeSpecBasicAuthUsername:
    r"""
    `username` specifies a key of a Secret containing the username for
    authentication.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1ProbeSpecBearerTokenSecret:
    r"""
    Secret to mount to read bearer token for scraping targets. The secret
    needs to be in the same namespace as the probe and accessible by
    the Prometheus Operator.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1ProbeSpecMetricRelabelingsItems0:
    r"""
    RelabelConfig allows dynamic rewriting of the label set for targets, alerts,
    scraped samples and remote write samples.

    More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config

    Attributes
    ----------
    action : str, default is "replace", optional
        Action to perform based on the regex matching.

        `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.
        `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.

        Default: "Replace"
    modulus : int, default is Undefined, optional
        Modulus to take of the hash of the source label values.

        Only applicable when the action is `HashMod`.
    regex : str, default is Undefined, optional
        Regular expression against which the extracted value is matched.
    replacement : str, default is Undefined, optional
        Replacement value against which a Replace action is performed if the
        regular expression matches.

        Regex capture groups are available.
    separator : str, default is Undefined, optional
        Separator is the string between concatenated SourceLabels.
    sourceLabels : [str], default is Undefined, optional
        The source labels select values from existing labels. Their content is
        concatenated using the configured Separator and matched against the
        configured regular expression.
    targetLabel : str, default is Undefined, optional
        Label to which the resulting string is written in a replacement.

        It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,
        `KeepEqual` and `DropEqual` actions.

        Regex capture groups are available.
    """
    action?: "replace" | "Replace" | "keep" | "Keep" | "drop" | "Drop" | "hashmod" | "HashMod" | "labelmap" | "LabelMap" | "labeldrop" | "LabelDrop" | "labelkeep" | "LabelKeep" | "lowercase" | "Lowercase" | "uppercase" | "Uppercase" | "keepequal" | "KeepEqual" | "dropequal" | "DropEqual" = "replace"
    modulus?: int
    regex?: str
    replacement?: str
    separator?: str
    sourceLabels?: [str]
    targetLabel?: str

    check:
        all sourceLabels in sourceLabels {_regex_match(str(sourceLabels), r"^[a-zA-Z_][a-zA-Z0-9_]*$") if sourceLabels} if sourceLabels

schema MonitoringCoreosComV1ProbeSpecOauth2:
    r"""
    OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.

    Attributes
    ----------
    clientId : MonitoringCoreosComV1ProbeSpecOauth2ClientID, default is Undefined, required
        client Id
    clientSecret : MonitoringCoreosComV1ProbeSpecOauth2ClientSecret, default is Undefined, required
        client secret
    endpointParams : {str:str}, default is Undefined, optional
        `endpointParams` configures the HTTP parameters to append to the token
        URL.
    noProxy : str, default is Undefined, optional
        `noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names
        that should be excluded from proxying. IP and domain names can
        contain port numbers.

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyConnectHeader : {str:[MonitoringCoreosComV1ProbeSpecOauth2ProxyConnectHeaderItems0]}, default is Undefined, optional
        ProxyConnectHeader optionally specifies headers to send to
        proxies during CONNECT requests.

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyFromEnvironment : bool, default is Undefined, optional
        Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyUrl : str, default is Undefined, optional
        `proxyURL` defines the HTTP proxy server to use.
    scopes : [str], default is Undefined, optional
        `scopes` defines the OAuth2 scopes used for the token request.
    tlsConfig : MonitoringCoreosComV1ProbeSpecOauth2TLSConfig, default is Undefined, optional
        tls config
    tokenUrl : str, default is Undefined, required
        `tokenURL` configures the URL to fetch the token from.
    """
    clientId: MonitoringCoreosComV1ProbeSpecOauth2ClientID

    clientSecret: MonitoringCoreosComV1ProbeSpecOauth2ClientSecret

    endpointParams?: {str:str}
    noProxy?: str
    proxyConnectHeader?: {str:[MonitoringCoreosComV1ProbeSpecOauth2ProxyConnectHeaderItems0]}
    proxyFromEnvironment?: bool
    proxyUrl?: str
    scopes?: [str]
    tlsConfig?: MonitoringCoreosComV1ProbeSpecOauth2TLSConfig
    tokenUrl: str

    check:
        _regex_match(str(proxyUrl), r"^(http|https|socks5)://.+$") if proxyUrl
        len(tokenUrl) >= 1

schema MonitoringCoreosComV1ProbeSpecOauth2ClientID:
    r"""
    `clientId` specifies a key of a Secret or ConfigMap containing the
    OAuth2 client's ID.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1ProbeSpecOauth2ClientIDConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1ProbeSpecOauth2ClientIDSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1ProbeSpecOauth2ClientIDConfigMap
    secret?: MonitoringCoreosComV1ProbeSpecOauth2ClientIDSecret

schema MonitoringCoreosComV1ProbeSpecOauth2ClientIDConfigMap:
    r"""
    ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1ProbeSpecOauth2ClientIDSecret:
    r"""
    Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1ProbeSpecOauth2ClientSecret:
    r"""
    `clientSecret` specifies a key of a Secret containing the OAuth2
    client's secret.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1ProbeSpecOauth2ProxyConnectHeaderItems0:
    r"""
    SecretKeySelector selects a key of a Secret.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1ProbeSpecOauth2TLSConfig:
    r"""
    TLS configuration to use when connecting to the OAuth2 server.
    It requires Prometheus >= v2.43.0.

    Attributes
    ----------
    ca : MonitoringCoreosComV1ProbeSpecOauth2TLSConfigCa, default is Undefined, optional
        ca
    cert : MonitoringCoreosComV1ProbeSpecOauth2TLSConfigCert, default is Undefined, optional
        cert
    insecureSkipVerify : bool, default is Undefined, optional
        Disable target certificate validation.
    keySecret : MonitoringCoreosComV1ProbeSpecOauth2TLSConfigKeySecret, default is Undefined, optional
        key secret
    maxVersion : str, default is Undefined, optional
        Maximum acceptable TLS version.

        It requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.
    minVersion : str, default is Undefined, optional
        Minimum acceptable TLS version.

        It requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.
    serverName : str, default is Undefined, optional
        Used to verify the hostname for the targets.
    """
    ca?: MonitoringCoreosComV1ProbeSpecOauth2TLSConfigCa
    cert?: MonitoringCoreosComV1ProbeSpecOauth2TLSConfigCert
    insecureSkipVerify?: bool
    keySecret?: MonitoringCoreosComV1ProbeSpecOauth2TLSConfigKeySecret
    maxVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    minVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    serverName?: str

schema MonitoringCoreosComV1ProbeSpecOauth2TLSConfigCa:
    r"""
    Certificate authority used when verifying server certificates.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1ProbeSpecOauth2TLSConfigCaConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1ProbeSpecOauth2TLSConfigCaSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1ProbeSpecOauth2TLSConfigCaConfigMap
    secret?: MonitoringCoreosComV1ProbeSpecOauth2TLSConfigCaSecret

schema MonitoringCoreosComV1ProbeSpecOauth2TLSConfigCaConfigMap:
    r"""
    ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1ProbeSpecOauth2TLSConfigCaSecret:
    r"""
    Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1ProbeSpecOauth2TLSConfigCert:
    r"""
    Client certificate to present when doing client-authentication.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1ProbeSpecOauth2TLSConfigCertConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1ProbeSpecOauth2TLSConfigCertSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1ProbeSpecOauth2TLSConfigCertConfigMap
    secret?: MonitoringCoreosComV1ProbeSpecOauth2TLSConfigCertSecret

schema MonitoringCoreosComV1ProbeSpecOauth2TLSConfigCertConfigMap:
    r"""
    ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1ProbeSpecOauth2TLSConfigCertSecret:
    r"""
    Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1ProbeSpecOauth2TLSConfigKeySecret:
    r"""
    Secret containing the client key file for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1ProbeSpecParamsItems0:
    r"""
    ProbeParam defines specification of extra parameters for a Probe.

    Attributes
    ----------
    name : str, default is Undefined, required
        The parameter name
    values : [str], default is Undefined, optional
        The parameter values
    """
    name: str

    values?: [str]

    check:
        len(name) >= 1
        len(values) >= 1 if values
        all values in values {len(values) >= 1 if values not in [None, Undefined]} if values

schema MonitoringCoreosComV1ProbeSpecProber:
    r"""
    Specification for the prober to use for probing targets.
    The prober.URL parameter is required. Targets cannot be probed if left empty.

    Attributes
    ----------
    noProxy : str, default is Undefined, optional
        `noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names
        that should be excluded from proxying. IP and domain names can
        contain port numbers.

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    path : str, default is "/probe", optional
        Path to collect metrics from.
        Defaults to `/probe`.
    proxyConnectHeader : {str:[MonitoringCoreosComV1ProbeSpecProberProxyConnectHeaderItems0]}, default is Undefined, optional
        ProxyConnectHeader optionally specifies headers to send to
        proxies during CONNECT requests.

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyFromEnvironment : bool, default is Undefined, optional
        Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).

        It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
    proxyUrl : str, default is Undefined, optional
        `proxyURL` defines the HTTP proxy server to use.
    scheme : str, default is Undefined, optional
        HTTP scheme to use for scraping.
        `http` and `https` are the expected values unless you rewrite the `__scheme__` label via relabeling.
        If empty, Prometheus uses the default value `http`.
    url : str, default is Undefined, required
        Mandatory URL of the prober.
    """
    noProxy?: str
    path?: str = "/probe"
    proxyConnectHeader?: {str:[MonitoringCoreosComV1ProbeSpecProberProxyConnectHeaderItems0]}
    proxyFromEnvironment?: bool
    proxyUrl?: str
    scheme?: "http" | "https"
    url: str

    check:
        _regex_match(str(proxyUrl), r"^(http|https|socks5)://.+$") if proxyUrl

schema MonitoringCoreosComV1ProbeSpecProberProxyConnectHeaderItems0:
    r"""
    SecretKeySelector selects a key of a Secret.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1ProbeSpecTLSConfig:
    r"""
    TLS configuration to use when scraping the endpoint.

    Attributes
    ----------
    ca : MonitoringCoreosComV1ProbeSpecTLSConfigCa, default is Undefined, optional
        ca
    cert : MonitoringCoreosComV1ProbeSpecTLSConfigCert, default is Undefined, optional
        cert
    insecureSkipVerify : bool, default is Undefined, optional
        Disable target certificate validation.
    keySecret : MonitoringCoreosComV1ProbeSpecTLSConfigKeySecret, default is Undefined, optional
        key secret
    maxVersion : str, default is Undefined, optional
        Maximum acceptable TLS version.

        It requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.
    minVersion : str, default is Undefined, optional
        Minimum acceptable TLS version.

        It requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.
    serverName : str, default is Undefined, optional
        Used to verify the hostname for the targets.
    """
    ca?: MonitoringCoreosComV1ProbeSpecTLSConfigCa
    cert?: MonitoringCoreosComV1ProbeSpecTLSConfigCert
    insecureSkipVerify?: bool
    keySecret?: MonitoringCoreosComV1ProbeSpecTLSConfigKeySecret
    maxVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    minVersion?: "TLS10" | "TLS11" | "TLS12" | "TLS13"
    serverName?: str

schema MonitoringCoreosComV1ProbeSpecTLSConfigCa:
    r"""
    Certificate authority used when verifying server certificates.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1ProbeSpecTLSConfigCaConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1ProbeSpecTLSConfigCaSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1ProbeSpecTLSConfigCaConfigMap
    secret?: MonitoringCoreosComV1ProbeSpecTLSConfigCaSecret

schema MonitoringCoreosComV1ProbeSpecTLSConfigCaConfigMap:
    r"""
    ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1ProbeSpecTLSConfigCaSecret:
    r"""
    Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1ProbeSpecTLSConfigCert:
    r"""
    Client certificate to present when doing client-authentication.

    Attributes
    ----------
    configMap : MonitoringCoreosComV1ProbeSpecTLSConfigCertConfigMap, default is Undefined, optional
        config map
    secret : MonitoringCoreosComV1ProbeSpecTLSConfigCertSecret, default is Undefined, optional
        secret
    """
    configMap?: MonitoringCoreosComV1ProbeSpecTLSConfigCertConfigMap
    secret?: MonitoringCoreosComV1ProbeSpecTLSConfigCertSecret

schema MonitoringCoreosComV1ProbeSpecTLSConfigCertConfigMap:
    r"""
    ConfigMap containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1ProbeSpecTLSConfigCertSecret:
    r"""
    Secret containing data to use for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1ProbeSpecTLSConfigKeySecret:
    r"""
    Secret containing the client key file for the targets.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema MonitoringCoreosComV1ProbeSpecTargets:
    r"""
    Targets defines a set of static or dynamically discovered targets to probe.

    Attributes
    ----------
    ingress : MonitoringCoreosComV1ProbeSpecTargetsIngress, default is Undefined, optional
        ingress
    staticConfig : MonitoringCoreosComV1ProbeSpecTargetsStaticConfig, default is Undefined, optional
        static config
    """
    ingress?: MonitoringCoreosComV1ProbeSpecTargetsIngress
    staticConfig?: MonitoringCoreosComV1ProbeSpecTargetsStaticConfig

schema MonitoringCoreosComV1ProbeSpecTargetsIngress:
    r"""
    ingress defines the Ingress objects to probe and the relabeling
    configuration.
    If `staticConfig` is also defined, `staticConfig` takes precedence.

    Attributes
    ----------
    namespaceSelector : MonitoringCoreosComV1ProbeSpecTargetsIngressNamespaceSelector, default is Undefined, optional
        namespace selector
    relabelingConfigs : [MonitoringCoreosComV1ProbeSpecTargetsIngressRelabelingConfigsItems0], default is Undefined, optional
        RelabelConfigs to apply to the label set of the target before it gets
        scraped.
        The original ingress address is available via the
        `__tmp_prometheus_ingress_address` label. It can be used to customize the
        probed URL.
        The original scrape job's name is available via the `__tmp_prometheus_job_name` label.
        More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
    selector : MonitoringCoreosComV1ProbeSpecTargetsIngressSelector, default is Undefined, optional
        selector
    """
    namespaceSelector?: MonitoringCoreosComV1ProbeSpecTargetsIngressNamespaceSelector
    relabelingConfigs?: [MonitoringCoreosComV1ProbeSpecTargetsIngressRelabelingConfigsItems0]
    selector?: MonitoringCoreosComV1ProbeSpecTargetsIngressSelector

schema MonitoringCoreosComV1ProbeSpecTargetsIngressNamespaceSelector:
    r"""
    From which namespaces to select Ingress objects.

    Attributes
    ----------
    any : bool, default is Undefined, optional
        Boolean describing whether all namespaces are selected in contrast to a
        list restricting them.
    matchNames : [str], default is Undefined, optional
        List of namespace names to select from.
    """
    any?: bool
    matchNames?: [str]

schema MonitoringCoreosComV1ProbeSpecTargetsIngressRelabelingConfigsItems0:
    r"""
    RelabelConfig allows dynamic rewriting of the label set for targets, alerts,
    scraped samples and remote write samples.

    More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config

    Attributes
    ----------
    action : str, default is "replace", optional
        Action to perform based on the regex matching.

        `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.
        `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.

        Default: "Replace"
    modulus : int, default is Undefined, optional
        Modulus to take of the hash of the source label values.

        Only applicable when the action is `HashMod`.
    regex : str, default is Undefined, optional
        Regular expression against which the extracted value is matched.
    replacement : str, default is Undefined, optional
        Replacement value against which a Replace action is performed if the
        regular expression matches.

        Regex capture groups are available.
    separator : str, default is Undefined, optional
        Separator is the string between concatenated SourceLabels.
    sourceLabels : [str], default is Undefined, optional
        The source labels select values from existing labels. Their content is
        concatenated using the configured Separator and matched against the
        configured regular expression.
    targetLabel : str, default is Undefined, optional
        Label to which the resulting string is written in a replacement.

        It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,
        `KeepEqual` and `DropEqual` actions.

        Regex capture groups are available.
    """
    action?: "replace" | "Replace" | "keep" | "Keep" | "drop" | "Drop" | "hashmod" | "HashMod" | "labelmap" | "LabelMap" | "labeldrop" | "LabelDrop" | "labelkeep" | "LabelKeep" | "lowercase" | "Lowercase" | "uppercase" | "Uppercase" | "keepequal" | "KeepEqual" | "dropequal" | "DropEqual" = "replace"
    modulus?: int
    regex?: str
    replacement?: str
    separator?: str
    sourceLabels?: [str]
    targetLabel?: str

    check:
        all sourceLabels in sourceLabels {_regex_match(str(sourceLabels), r"^[a-zA-Z_][a-zA-Z0-9_]*$") if sourceLabels} if sourceLabels

schema MonitoringCoreosComV1ProbeSpecTargetsIngressSelector:
    r"""
    Selector to select the Ingress objects.

    Attributes
    ----------
    matchExpressions : [MonitoringCoreosComV1ProbeSpecTargetsIngressSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringCoreosComV1ProbeSpecTargetsIngressSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringCoreosComV1ProbeSpecTargetsIngressSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringCoreosComV1ProbeSpecTargetsStaticConfig:
    r"""
    staticConfig defines the static list of targets to probe and the
    relabeling configuration.
    If `ingress` is also defined, `staticConfig` takes precedence.
    More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#static_config.

    Attributes
    ----------
    labels : {str:str}, default is Undefined, optional
        Labels assigned to all metrics scraped from the targets.
    relabelingConfigs : [MonitoringCoreosComV1ProbeSpecTargetsStaticConfigRelabelingConfigsItems0], default is Undefined, optional
        RelabelConfigs to apply to the label set of the targets before it gets
        scraped.
        More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
    static : [str], default is Undefined, optional
        The list of hosts to probe.
    """
    labels?: {str:str}
    relabelingConfigs?: [MonitoringCoreosComV1ProbeSpecTargetsStaticConfigRelabelingConfigsItems0]
    static?: [str]

schema MonitoringCoreosComV1ProbeSpecTargetsStaticConfigRelabelingConfigsItems0:
    r"""
    RelabelConfig allows dynamic rewriting of the label set for targets, alerts,
    scraped samples and remote write samples.

    More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config

    Attributes
    ----------
    action : str, default is "replace", optional
        Action to perform based on the regex matching.

        `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.
        `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.

        Default: "Replace"
    modulus : int, default is Undefined, optional
        Modulus to take of the hash of the source label values.

        Only applicable when the action is `HashMod`.
    regex : str, default is Undefined, optional
        Regular expression against which the extracted value is matched.
    replacement : str, default is Undefined, optional
        Replacement value against which a Replace action is performed if the
        regular expression matches.

        Regex capture groups are available.
    separator : str, default is Undefined, optional
        Separator is the string between concatenated SourceLabels.
    sourceLabels : [str], default is Undefined, optional
        The source labels select values from existing labels. Their content is
        concatenated using the configured Separator and matched against the
        configured regular expression.
    targetLabel : str, default is Undefined, optional
        Label to which the resulting string is written in a replacement.

        It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,
        `KeepEqual` and `DropEqual` actions.

        Regex capture groups are available.
    """
    action?: "replace" | "Replace" | "keep" | "Keep" | "drop" | "Drop" | "hashmod" | "HashMod" | "labelmap" | "LabelMap" | "labeldrop" | "LabelDrop" | "labelkeep" | "LabelKeep" | "lowercase" | "Lowercase" | "uppercase" | "Uppercase" | "keepequal" | "KeepEqual" | "dropequal" | "DropEqual" = "replace"
    modulus?: int
    regex?: str
    replacement?: str
    separator?: str
    sourceLabels?: [str]
    targetLabel?: str

    check:
        all sourceLabels in sourceLabels {_regex_match(str(sourceLabels), r"^[a-zA-Z_][a-zA-Z0-9_]*$") if sourceLabels} if sourceLabels

