"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1

_regex_match = regex.match

schema Issuer:
    r"""
    An Issuer represents a certificate issuing authority which can be
    referenced as part of `issuerRef` fields.
    It is scoped to a single namespace and can therefore only be referenced by
    resources within the same namespace.

    Attributes
    ----------
    apiVersion : str, default is "cert-manager.io/v1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Issuer", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : CertManagerIoV1IssuerSpec, default is Undefined, required
        spec
    status : CertManagerIoV1IssuerStatus, default is Undefined, optional
        status
    """
    apiVersion: "cert-manager.io/v1" = "cert-manager.io/v1"

    kind: "Issuer" = "Issuer"

    metadata?: v1.ObjectMeta
    spec: CertManagerIoV1IssuerSpec

    status?: CertManagerIoV1IssuerStatus

schema CertManagerIoV1IssuerSpec:
    r"""
    Desired state of the Issuer resource.

    Attributes
    ----------
    acme : CertManagerIoV1IssuerSpecAcme, default is Undefined, optional
        acme
    ca : CertManagerIoV1IssuerSpecCa, default is Undefined, optional
        ca
    selfSigned : CertManagerIoV1IssuerSpecSelfSigned, default is Undefined, optional
        self signed
    vault : CertManagerIoV1IssuerSpecVault, default is Undefined, optional
        vault
    venafi : CertManagerIoV1IssuerSpecVenafi, default is Undefined, optional
        venafi
    """
    acme?: CertManagerIoV1IssuerSpecAcme
    ca?: CertManagerIoV1IssuerSpecCa
    selfSigned?: CertManagerIoV1IssuerSpecSelfSigned
    vault?: CertManagerIoV1IssuerSpecVault
    venafi?: CertManagerIoV1IssuerSpecVenafi

schema CertManagerIoV1IssuerSpecAcme:
    r"""
    ACME configures this issuer to communicate with a RFC8555 (ACME) server
    to obtain signed x509 certificates.

    Attributes
    ----------
    caBundle : str, default is Undefined, optional
        Base64-encoded bundle of PEM CAs which can be used to validate the certificate
        chain presented by the ACME server.
        Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various
        kinds of security vulnerabilities.
        If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
        the container is used to validate the TLS connection.
    disableAccountKeyGeneration : bool, default is Undefined, optional
        Enables or disables generating a new ACME account key.
        If true, the Issuer resource will *not* request a new account but will expect
        the account key to be supplied via an existing secret.
        If false, the cert-manager system will generate a new ACME account key
        for the Issuer.
        Defaults to false.
    email : str, default is Undefined, optional
        Email is the email address to be associated with the ACME account.
        This field is optional, but it is strongly recommended to be set.
        It will be used to contact you in case of issues with your account or
        certificates, including expiry notification emails.
        This field may be updated after the account is initially registered.
    enableDurationFeature : bool, default is Undefined, optional
        Enables requesting a Not After date on certificates that matches the
        duration of the certificate. This is not supported by all ACME servers
        like Let's Encrypt. If set to true when the ACME server does not support
        it, it will create an error on the Order.
        Defaults to false.
    externalAccountBinding : CertManagerIoV1IssuerSpecAcmeExternalAccountBinding, default is Undefined, optional
        external account binding
    preferredChain : str, default is Undefined, optional
        PreferredChain is the chain to use if the ACME server outputs multiple.
        PreferredChain is no guarantee that this one gets delivered by the ACME
        endpoint.
        For example, for Let's Encrypt's DST crosssign you would use:
        "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA.
        This value picks the first certificate bundle in the combined set of
        ACME default and alternative chains that has a root-most certificate with
        this value as its issuer's commonname.
    privateKeySecretRef : CertManagerIoV1IssuerSpecAcmePrivateKeySecretRef, default is Undefined, required
        private key secret ref
    server : str, default is Undefined, required
        Server is the URL used to access the ACME server's 'directory' endpoint.
        For example, for Let's Encrypt's staging endpoint, you would use:
        "https://acme-staging-v02.api.letsencrypt.org/directory".
        Only ACME v2 endpoints (i.e. RFC 8555) are supported.
    skipTLSVerify : bool, default is Undefined, optional
        INSECURE: Enables or disables validation of the ACME server TLS certificate.
        If true, requests to the ACME server will not have the TLS certificate chain
        validated.
        Mutually exclusive with CABundle; prefer using CABundle to prevent various
        kinds of security vulnerabilities.
        Only enable this option in development environments.
        If CABundle and SkipTLSVerify are unset, the system certificate bundle inside
        the container is used to validate the TLS connection.
        Defaults to false.
    solvers : [CertManagerIoV1IssuerSpecAcmeSolversItems0], default is Undefined, optional
        Solvers is a list of challenge solvers that will be used to solve
        ACME challenges for the matching domains.
        Solver configurations must be provided in order to obtain certificates
        from an ACME server.
        For more information, see: https://cert-manager.io/docs/configuration/acme/
    """
    caBundle?: str
    disableAccountKeyGeneration?: bool
    email?: str
    enableDurationFeature?: bool
    externalAccountBinding?: CertManagerIoV1IssuerSpecAcmeExternalAccountBinding
    preferredChain?: str
    privateKeySecretRef: CertManagerIoV1IssuerSpecAcmePrivateKeySecretRef

    server: str

    skipTLSVerify?: bool
    solvers?: [CertManagerIoV1IssuerSpecAcmeSolversItems0]

    check:
        len(preferredChain) <= 64 if preferredChain

schema CertManagerIoV1IssuerSpecAcmeExternalAccountBinding:
    r"""
    ExternalAccountBinding is a reference to a CA external account of the ACME
    server.
    If set, upon registration cert-manager will attempt to associate the given
    external account credentials with the registered ACME account.

    Attributes
    ----------
    keyAlgorithm : str, default is Undefined, optional
        Deprecated: keyAlgorithm field exists for historical compatibility
        reasons and should not be used. The algorithm is now hardcoded to HS256
        in golang/x/crypto/acme.
    keyID : str, default is Undefined, required
        keyID is the ID of the CA key that the External Account is bound to.
    keySecretRef : CertManagerIoV1IssuerSpecAcmeExternalAccountBindingKeySecretRef, default is Undefined, required
        key secret ref
    """
    keyAlgorithm?: "HS256" | "HS384" | "HS512"
    keyID: str

    keySecretRef: CertManagerIoV1IssuerSpecAcmeExternalAccountBindingKeySecretRef

schema CertManagerIoV1IssuerSpecAcmeExternalAccountBindingKeySecretRef:
    r"""
    keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes
    Secret which holds the symmetric MAC key of the External Account Binding.
    The `key` is the index string that is paired with the key data in the
    Secret and should not be confused with the key data itself, or indeed with
    the External Account Binding keyID above.
    The secret key stored in the Secret **must** be un-padded, base64 URL
    encoded data.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    key?: str
    name: str

schema CertManagerIoV1IssuerSpecAcmePrivateKeySecretRef:
    r"""
    PrivateKey is the name of a Kubernetes Secret resource that will be used to
    store the automatically generated ACME account private key.
    Optionally, a `key` may be specified to select a specific entry within
    the named Secret resource.
    If `key` is not specified, a default of `tls.key` will be used.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    key?: str
    name: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0:
    r"""
    An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of.
    A selector may be provided to use different solving strategies for different DNS names.
    Only one of HTTP01 or DNS01 must be provided.

    Attributes
    ----------
    dns01 : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01, default is Undefined, optional
        dns01
    http01 : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01, default is Undefined, optional
        http01
    selector : CertManagerIoV1IssuerSpecAcmeSolversItems0Selector, default is Undefined, optional
        selector
    """
    dns01?: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01
    http01?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01
    selector?: CertManagerIoV1IssuerSpecAcmeSolversItems0Selector

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01:
    r"""
    Configures cert-manager to attempt to complete authorizations by
    performing the DNS01 challenge flow.

    Attributes
    ----------
    acmeDNS : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AcmeDNS, default is Undefined, optional
        acme DNS
    akamai : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Akamai, default is Undefined, optional
        akamai
    azureDNS : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AzureDNS, default is Undefined, optional
        azure DNS
    cloudDNS : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01CloudDNS, default is Undefined, optional
        cloud DNS
    cloudflare : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Cloudflare, default is Undefined, optional
        cloudflare
    cnameStrategy : str, default is Undefined, optional
        CNAMEStrategy configures how the DNS01 provider should handle CNAME
        records when found in DNS zones.
    digitalocean : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Digitalocean, default is Undefined, optional
        digitalocean
    rfc2136 : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Rfc2136, default is Undefined, optional
        rfc2136
    route53 : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Route53, default is Undefined, optional
        route53
    webhook : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Webhook, default is Undefined, optional
        webhook
    """
    acmeDNS?: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AcmeDNS
    akamai?: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Akamai
    azureDNS?: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AzureDNS
    cloudDNS?: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01CloudDNS
    cloudflare?: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Cloudflare
    cnameStrategy?: "None" | "Follow"
    digitalocean?: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Digitalocean
    rfc2136?: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Rfc2136
    route53?: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Route53
    webhook?: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Webhook

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AcmeDNS:
    r"""
    Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage
    DNS01 challenge records.

    Attributes
    ----------
    accountSecretRef : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AcmeDNSAccountSecretRef, default is Undefined, required
        account secret ref
    host : str, default is Undefined, required
        host
    """
    accountSecretRef: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AcmeDNSAccountSecretRef

    host: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AcmeDNSAccountSecretRef:
    r"""
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    key?: str
    name: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Akamai:
    r"""
    Use the Akamai DNS zone management API to manage DNS01 challenge records.

    Attributes
    ----------
    accessTokenSecretRef : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AkamaiAccessTokenSecretRef, default is Undefined, required
        access token secret ref
    clientSecretSecretRef : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AkamaiClientSecretSecretRef, default is Undefined, required
        client secret secret ref
    clientTokenSecretRef : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AkamaiClientTokenSecretRef, default is Undefined, required
        client token secret ref
    serviceConsumerDomain : str, default is Undefined, required
        service consumer domain
    """
    accessTokenSecretRef: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AkamaiAccessTokenSecretRef

    clientSecretSecretRef: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AkamaiClientSecretSecretRef

    clientTokenSecretRef: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AkamaiClientTokenSecretRef

    serviceConsumerDomain: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AkamaiAccessTokenSecretRef:
    r"""
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    key?: str
    name: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AkamaiClientSecretSecretRef:
    r"""
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    key?: str
    name: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AkamaiClientTokenSecretRef:
    r"""
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    key?: str
    name: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AzureDNS:
    r"""
    Use the Microsoft Azure DNS API to manage DNS01 challenge records.

    Attributes
    ----------
    clientID : str, default is Undefined, optional
        Auth: Azure Service Principal:
        The ClientID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientSecret and TenantID must also be set.
    clientSecretSecretRef : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AzureDNSClientSecretSecretRef, default is Undefined, optional
        client secret secret ref
    environment : str, default is Undefined, optional
        name of the Azure environment (default AzurePublicCloud)
    hostedZoneName : str, default is Undefined, optional
        name of the DNS zone that should be used
    managedIdentity : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AzureDNSManagedIdentity, default is Undefined, optional
        managed identity
    resourceGroupName : str, default is Undefined, required
        resource group the DNS zone is located in
    subscriptionID : str, default is Undefined, required
        ID of the Azure subscription
    tenantID : str, default is Undefined, optional
        Auth: Azure Service Principal:
        The TenantID of the Azure Service Principal used to authenticate with Azure DNS.
        If set, ClientID and ClientSecret must also be set.
    """
    clientID?: str
    clientSecretSecretRef?: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AzureDNSClientSecretSecretRef
    environment?: "AzurePublicCloud" | "AzureChinaCloud" | "AzureGermanCloud" | "AzureUSGovernmentCloud"
    hostedZoneName?: str
    managedIdentity?: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AzureDNSManagedIdentity
    resourceGroupName: str

    subscriptionID: str

    tenantID?: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AzureDNSClientSecretSecretRef:
    r"""
    Auth: Azure Service Principal:
    A reference to a Secret containing the password associated with the Service Principal.
    If set, ClientID and TenantID must also be set.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    key?: str
    name: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01AzureDNSManagedIdentity:
    r"""
    Auth: Azure Workload Identity or Azure Managed Service Identity:
    Settings to enable Azure Workload Identity or Azure Managed Service Identity
    If set, ClientID, ClientSecret and TenantID must not be set.

    Attributes
    ----------
    clientID : str, default is Undefined, optional
        client ID of the managed identity, can not be used at the same time as resourceID
    resourceID : str, default is Undefined, optional
        resource ID of the managed identity, can not be used at the same time as clientID
        Cannot be used for Azure Managed Service Identity
    tenantID : str, default is Undefined, optional
        tenant ID of the managed identity, can not be used at the same time as resourceID
    """
    clientID?: str
    resourceID?: str
    tenantID?: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01CloudDNS:
    r"""
    Use the Google Cloud DNS API to manage DNS01 challenge records.

    Attributes
    ----------
    hostedZoneName : str, default is Undefined, optional
        HostedZoneName is an optional field that tells cert-manager in which
        Cloud DNS zone the challenge record has to be created.
        If left empty cert-manager will automatically choose a zone.
    project : str, default is Undefined, required
        project
    serviceAccountSecretRef : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01CloudDNSServiceAccountSecretRef, default is Undefined, optional
        service account secret ref
    """
    hostedZoneName?: str
    project: str

    serviceAccountSecretRef?: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01CloudDNSServiceAccountSecretRef

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01CloudDNSServiceAccountSecretRef:
    r"""
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    key?: str
    name: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Cloudflare:
    r"""
    Use the Cloudflare API to manage DNS01 challenge records.

    Attributes
    ----------
    apiKeySecretRef : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01CloudflareAPIKeySecretRef, default is Undefined, optional
        api key secret ref
    apiTokenSecretRef : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01CloudflareAPITokenSecretRef, default is Undefined, optional
        api token secret ref
    email : str, default is Undefined, optional
        Email of the account, only required when using API key based authentication.
    """
    apiKeySecretRef?: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01CloudflareAPIKeySecretRef
    apiTokenSecretRef?: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01CloudflareAPITokenSecretRef
    email?: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01CloudflareAPIKeySecretRef:
    r"""
    API key to use to authenticate with Cloudflare.
    Note: using an API token to authenticate is now the recommended method
    as it allows greater control of permissions.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    key?: str
    name: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01CloudflareAPITokenSecretRef:
    r"""
    API token used to authenticate with Cloudflare.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    key?: str
    name: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Digitalocean:
    r"""
    Use the DigitalOcean DNS API to manage DNS01 challenge records.

    Attributes
    ----------
    tokenSecretRef : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01DigitaloceanTokenSecretRef, default is Undefined, required
        token secret ref
    """
    tokenSecretRef: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01DigitaloceanTokenSecretRef

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01DigitaloceanTokenSecretRef:
    r"""
    A reference to a specific 'key' within a Secret resource.
    In some instances, `key` is a required field.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    key?: str
    name: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Rfc2136:
    r"""
    Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/)
    to manage DNS01 challenge records.

    Attributes
    ----------
    nameserver : str, default is Undefined, required
        The IP address or hostname of an authoritative DNS server supporting
        RFC2136 in the form host:port. If the host is an IPv6 address it must be
        enclosed in square brackets (e.g [2001:db8::1]) ; port is optional.
        This field is required.
    tsigAlgorithm : str, default is Undefined, optional
        The TSIG Algorithm configured in the DNS supporting RFC2136. Used only
        when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined.
        Supported values are (case-insensitive): ``HMACMD5`` (default),
        ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
    tsigKeyName : str, default is Undefined, optional
        The TSIG Key name configured in the DNS.
        If ``tsigSecretSecretRef`` is defined, this field is required.
    tsigSecretSecretRef : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Rfc2136TsigSecretSecretRef, default is Undefined, optional
        tsig secret secret ref
    """
    nameserver: str

    tsigAlgorithm?: str
    tsigKeyName?: str
    tsigSecretSecretRef?: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Rfc2136TsigSecretSecretRef

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Rfc2136TsigSecretSecretRef:
    r"""
    The name of the secret containing the TSIG value.
    If ``tsigKeyName`` is defined, this field is required.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    key?: str
    name: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Route53:
    r"""
    Use the AWS Route53 API to manage DNS01 challenge records.

    Attributes
    ----------
    accessKeyID : str, default is Undefined, optional
        The AccessKeyID is used for authentication.
        Cannot be set when SecretAccessKeyID is set.
        If neither the Access Key nor Key ID are set, we fall-back to using env
        vars, shared credentials file or AWS Instance metadata,
        see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
    accessKeyIDSecretRef : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Route53AccessKeyIDSecretRef, default is Undefined, optional
        access key ID secret ref
    auth : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Route53Auth, default is Undefined, optional
        auth
    hostedZoneID : str, default is Undefined, optional
        If set, the provider will manage only this zone in Route53 and will not do a lookup using the route53:ListHostedZonesByName api call.
    region : str, default is Undefined, optional
        Override the AWS region.

        Route53 is a global service and does not have regional endpoints but the
        region specified here (or via environment variables) is used as a hint to
        help compute the correct AWS credential scope and partition when it
        connects to Route53. See:
        - [Amazon Route 53 endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/r53.html)
        - [Global services](https://docs.aws.amazon.com/whitepapers/latest/aws-fault-isolation-boundaries/global-services.html)

        If you omit this region field, cert-manager will use the region from
        AWS_REGION and AWS_DEFAULT_REGION environment variables, if they are set
        in the cert-manager controller Pod.

        The `region` field is not needed if you use [IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Webhook](https://github.com/aws/amazon-eks-pod-identity-webhook).
        In this case this `region` field value is ignored.

        The `region` field is not needed if you use [EKS Pod Identities](https://docs.aws.amazon.com/eks/latest/userguide/pod-identities.html).
        Instead an AWS_REGION environment variable is added to the cert-manager controller Pod by:
        [Amazon EKS Pod Identity Agent](https://github.com/aws/eks-pod-identity-agent),
        In this case this `region` field value is ignored.
    role : str, default is Undefined, optional
        Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey
        or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
    secretAccessKeySecretRef : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Route53SecretAccessKeySecretRef, default is Undefined, optional
        secret access key secret ref
    """
    accessKeyID?: str
    accessKeyIDSecretRef?: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Route53AccessKeyIDSecretRef
    auth?: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Route53Auth
    hostedZoneID?: str
    region?: str
    role?: str
    secretAccessKeySecretRef?: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Route53SecretAccessKeySecretRef

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Route53AccessKeyIDSecretRef:
    r"""
    The SecretAccessKey is used for authentication. If set, pull the AWS
    access key ID from a key within a Kubernetes Secret.
    Cannot be set when AccessKeyID is set.
    If neither the Access Key nor Key ID are set, we fall-back to using env
    vars, shared credentials file or AWS Instance metadata,
    see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    key?: str
    name: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Route53Auth:
    r"""
    Auth configures how cert-manager authenticates.

    Attributes
    ----------
    kubernetes : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Route53AuthKubernetes, default is Undefined, required
        kubernetes
    """
    kubernetes: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Route53AuthKubernetes

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Route53AuthKubernetes:
    r"""
    Kubernetes authenticates with Route53 using AssumeRoleWithWebIdentity
    by passing a bound ServiceAccount token.

    Attributes
    ----------
    serviceAccountRef : CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Route53AuthKubernetesServiceAccountRef, default is Undefined, required
        service account ref
    """
    serviceAccountRef: CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Route53AuthKubernetesServiceAccountRef

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Route53AuthKubernetesServiceAccountRef:
    r"""
    A reference to a service account that will be used to request a bound
    token (also known as "projected token"). To use this field, you must
    configure an RBAC rule to let cert-manager request a token.

    Attributes
    ----------
    audiences : [str], default is Undefined, optional
        TokenAudiences is an optional list of audiences to include in the
        token passed to AWS. The default token consisting of the issuer's namespace
        and name is always included.
        If unset the audience defaults to `sts.amazonaws.com`.
    name : str, default is Undefined, required
        Name of the ServiceAccount used to request a token.
    """
    audiences?: [str]
    name: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Route53SecretAccessKeySecretRef:
    r"""
    The SecretAccessKey is used for authentication.
    If neither the Access Key nor Key ID are set, we fall-back to using env
    vars, shared credentials file or AWS Instance metadata,
    see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    key?: str
    name: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Dns01Webhook:
    r"""
    Configure an external webhook based DNS01 challenge solver to manage
    DNS01 challenge records.

    Attributes
    ----------
    config : any, default is Undefined, optional
        Additional configuration that should be passed to the webhook apiserver
        when challenges are processed.
        This can contain arbitrary JSON data.
        Secret values should not be specified in this stanza.
        If secret values are needed (e.g. credentials for a DNS service), you
        should use a SecretKeySelector to reference a Secret resource.
        For details on the schema of this field, consult the webhook provider
        implementation's documentation.
    groupName : str, default is Undefined, required
        The API group name that should be used when POSTing ChallengePayload
        resources to the webhook apiserver.
        This should be the same as the GroupName specified in the webhook
        provider implementation.
    solverName : str, default is Undefined, required
        The name of the solver to use, as defined in the webhook provider
        implementation.
        This will typically be the name of the provider, e.g. 'cloudflare'.
    """
    config?: any
    groupName: str

    solverName: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01:
    r"""
    Configures cert-manager to attempt to complete authorizations by
    performing the HTTP01 challenge flow.
    It is not possible to obtain certificates for wildcard domain names
    (e.g. `*.example.com`) using the HTTP01 challenge mechanism.

    Attributes
    ----------
    gatewayHTTPRoute : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoute, default is Undefined, optional
        gateway HTTP route
    ingress : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01Ingress, default is Undefined, optional
        ingress
    """
    gatewayHTTPRoute?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoute
    ingress?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01Ingress

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoute:
    r"""
    The Gateway API is a sig-network community API that models service networking
    in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will
    create HTTPRoutes with the specified labels in the same namespace as the challenge.
    This solver is experimental, and fields / behaviour may change in the future.

    Attributes
    ----------
    labels : {str:str}, default is Undefined, optional
        Custom labels that will be applied to HTTPRoutes created by cert-manager
        while solving HTTP-01 challenges.
    parentRefs : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRouteParentRefsItems0], default is Undefined, optional
        When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute.
        cert-manager needs to know which parentRefs should be used when creating
        the HTTPRoute. Usually, the parentRef references a Gateway. See:
        https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
    podTemplate : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplate, default is Undefined, optional
        pod template
    serviceType : str, default is Undefined, optional
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
    """
    labels?: {str:str}
    parentRefs?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRouteParentRefsItems0]
    podTemplate?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplate
    serviceType?: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRouteParentRefsItems0:
    r"""
    ParentReference identifies an API object (usually a Gateway) that can be considered
    a parent of this resource (usually a route). There are two kinds of parent resources
    with "Core" support:

    * Gateway (Gateway conformance profile)
    * Service (Mesh conformance profile, ClusterIP Services only)

    This API may be extended in the future to support additional kinds of parent
    resources.

    The API object must be valid in the cluster; the Group and Kind must
    be registered in the cluster for this reference to be valid.

    Attributes
    ----------
    group : str, default is "gateway.networking.k8s.io", optional
        Group is the group of the referent.
        When unspecified, "gateway.networking.k8s.io" is inferred.
        To set the core API group (such as for a "Service" kind referent),
        Group must be explicitly set to "" (empty string).

        Support: Core
    kind : str, default is "Gateway", optional
        Kind is kind of the referent.

        There are two kinds of parent resources with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        Support for other resources is Implementation-Specific.
    name : str, default is Undefined, required
        Name is the name of the referent.

        Support: Core
    namespace : str, default is Undefined, optional
        Namespace is the namespace of the referent. When unspecified, this refers
        to the local namespace of the Route.

        Note that there are specific rules for ParentRefs which cross namespace
        boundaries. Cross-namespace references are only valid if they are explicitly
        allowed by something in the namespace they are referring to. For example:
        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
        generic way to enable any other kind of cross-namespace reference.

        <gateway:experimental:description>
        ParentRefs from a Route to a Service in the same namespace are "producer"
        routes, which apply default routing rules to inbound connections from
        any namespace to the Service.

        ParentRefs from a Route to a Service in a different namespace are
        "consumer" routes, and these routing rules are only applied to outbound
        connections originating from the same namespace as the Route, for which
        the intended destination of the connections are a Service targeted as a
        ParentRef of the Route.
        </gateway:experimental:description>

        Support: Core
    port : int, default is Undefined, optional
        Port is the network port this Route targets. It can be interpreted
        differently based on the type of parent resource.

        When the parent resource is a Gateway, this targets all listeners
        listening on the specified port that also support this kind of Route(and
        select this Route). It's not recommended to set `Port` unless the
        networking behaviors specified in a Route must apply to a specific port
        as opposed to a listener(s) whose port(s) may be changed. When both Port
        and SectionName are specified, the name and port of the selected listener
        must match both specified values.

        <gateway:experimental:description>
        When the parent resource is a Service, this targets a specific port in the
        Service spec. When both Port (experimental) and SectionName are specified,
        the name and port of the selected port must match both specified values.
        </gateway:experimental:description>

        Implementations MAY choose to support other parent resources.
        Implementations supporting other types of parent resources MUST clearly
        document how/if Port is interpreted.

        For the purpose of status, an attachment is considered successful as
        long as the parent resource accepts it partially. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
        from the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route,
        the Route MUST be considered detached from the Gateway.

        Support: Extended
    sectionName : str, default is Undefined, optional
        SectionName is the name of a section within the target resource. In the
        following resources, SectionName is interpreted as the following:

        * Gateway: Listener name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.
        * Service: Port name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.

        Implementations MAY choose to support attaching Routes to other resources.
        If that is the case, they MUST clearly document how SectionName is
        interpreted.

        When unspecified (empty string), this will reference the entire resource.
        For the purpose of status, an attachment is considered successful if at
        least one section in the parent resource accepts it. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
        the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route, the
        Route MUST be considered detached from the Gateway.

        Support: Core
    """
    group?: str = "gateway.networking.k8s.io"
    kind?: str = "Gateway"
    name: str

    namespace?: str
    port?: int
    sectionName?: str

    check:
        len(group) <= 253 if group
        _regex_match(str(group), r"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if group
        len(kind) <= 63 if kind
        len(kind) >= 1 if kind
        _regex_match(str(kind), r"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$") if kind
        len(name) <= 253
        len(name) >= 1
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace
        port <= 65535 if port not in [None, Undefined]
        port >= 1 if port not in [None, Undefined]
        len(sectionName) <= 253 if sectionName
        len(sectionName) >= 1 if sectionName
        _regex_match(str(sectionName), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if sectionName

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplate:
    r"""
    Optional pod template used to configure the ACME challenge solver pods
    used for HTTP01 challenges.

    Attributes
    ----------
    metadata : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateMetadata, default is Undefined, optional
        metadata
    spec : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpec, default is Undefined, optional
        spec
    """
    metadata?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateMetadata
    spec?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpec

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateMetadata:
    r"""
    ObjectMeta overrides for the pod used to solve HTTP01 challenges.
    Only the 'labels' and 'annotations' fields may be set.
    If labels or annotations overlap with in-built values, the values here
    will override the in-built values.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations that should be added to the created ACME HTTP01 solver pods.
    labels : {str:str}, default is Undefined, optional
        Labels that should be added to the created ACME HTTP01 solver pods.
    """
    annotations?: {str:str}
    labels?: {str:str}

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpec:
    r"""
    PodSpec defines overrides for the HTTP01 challenge solver pod.
    Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
    All other fields will be ignored.

    Attributes
    ----------
    affinity : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinity, default is Undefined, optional
        affinity
    imagePullSecrets : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecImagePullSecretsItems0], default is Undefined, optional
        If specified, the pod's imagePullSecrets
    nodeSelector : {str:str}, default is Undefined, optional
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    priorityClassName : str, default is Undefined, optional
        If specified, the pod's priorityClassName.
    securityContext : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecSecurityContext, default is Undefined, optional
        security context
    serviceAccountName : str, default is Undefined, optional
        If specified, the pod's service account
    tolerations : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecTolerationsItems0], default is Undefined, optional
        If specified, the pod's tolerations.
    """
    affinity?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinity
    imagePullSecrets?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecImagePullSecretsItems0]
    nodeSelector?: {str:str}
    priorityClassName?: str
    securityContext?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecSecurityContext
    serviceAccountName?: str
    tolerations?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecTolerationsItems0]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinity:
    r"""
    If specified, the pod's scheduling constraints

    Attributes
    ----------
    nodeAffinity : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinity, default is Undefined, optional
        node affinity
    podAffinity : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinity, default is Undefined, optional
        pod affinity
    podAntiAffinity : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinity, default is Undefined, optional
        pod anti affinity
    """
    nodeAffinity?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinity
    podAffinity?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinity
    podAntiAffinity?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinity

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinity:
    r"""
    Describes node affinity scheduling rules for the pod.

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution, default is Undefined, optional
        required during scheduling ignored during execution
    """
    preferredDuringSchedulingIgnoredDuringExecution?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]
    requiredDuringSchedulingIgnoredDuringExecution?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    An empty preferred scheduling term matches all objects with implicit weight 0
    (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).

    Attributes
    ----------
    preference : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference, default is Undefined, required
        preference
    weight : int, default is Undefined, required
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
    """
    preference: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference

    weight: int

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference:
    r"""
    A node selector term, associated with the corresponding weight.

    Attributes
    ----------
    matchExpressions : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0], default is Undefined, optional
        A list of node selector requirements by node's labels.
    matchFields : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0], default is Undefined, optional
        A list of node selector requirements by node's fields.
    """
    matchExpressions?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0]
    matchFields?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution:
    r"""
    If the affinity requirements specified by this field are not met at
    scheduling time, the pod will not be scheduled onto the node.
    If the affinity requirements specified by this field cease to be met
    at some point during pod execution (e.g. due to an update), the system
    may or may not try to eventually evict the pod from its node.

    Attributes
    ----------
    nodeSelectorTerms : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0], default is Undefined, required
        Required. A list of node selector terms. The terms are ORed.
    """
    nodeSelectorTerms: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0:
    r"""
    A null or empty node selector term matches no objects. The requirements of
    them are ANDed.
    The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.

    Attributes
    ----------
    matchExpressions : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0], default is Undefined, optional
        A list of node selector requirements by node's labels.
    matchFields : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0], default is Undefined, optional
        A list of node selector requirements by node's fields.
    """
    matchExpressions?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0]
    matchFields?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinity:
    r"""
    Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
    """
    preferredDuringSchedulingIgnoredDuringExecution?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]
    requiredDuringSchedulingIgnoredDuringExecution?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)

    Attributes
    ----------
    podAffinityTerm : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm, default is Undefined, required
        pod affinity term
    weight : int, default is Undefined, required
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
    """
    podAffinityTerm: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm

    weight: int

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm:
    r"""
    Required. A pod affinity term, associated with the corresponding weight.

    Attributes
    ----------
    labelSelector : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
    namespaceSelector : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """
    labelSelector?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    Defines a set of pods (namely those matching the labelSelector
    relative to the given namespace(s)) that this pod should be
    co-located (affinity) or not co-located (anti-affinity) with,
    where co-located is defined as running on a node whose value of
    the label with key <topologyKey> matches that of any node on which
    a pod of the set of pods is running

    Attributes
    ----------
    labelSelector : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
    namespaceSelector : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """
    labelSelector?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinity:
    r"""
    Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
    """
    preferredDuringSchedulingIgnoredDuringExecution?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]
    requiredDuringSchedulingIgnoredDuringExecution?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)

    Attributes
    ----------
    podAffinityTerm : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm, default is Undefined, required
        pod affinity term
    weight : int, default is Undefined, required
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
    """
    podAffinityTerm: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm

    weight: int

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm:
    r"""
    Required. A pod affinity term, associated with the corresponding weight.

    Attributes
    ----------
    labelSelector : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
    namespaceSelector : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """
    labelSelector?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    Defines a set of pods (namely those matching the labelSelector
    relative to the given namespace(s)) that this pod should be
    co-located (affinity) or not co-located (anti-affinity) with,
    where co-located is defined as running on a node whose value of
    the label with key <topologyKey> matches that of any node on which
    a pod of the set of pods is running

    Attributes
    ----------
    labelSelector : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
    namespaceSelector : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """
    labelSelector?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecImagePullSecretsItems0:
    r"""
    LocalObjectReference contains enough information to let you locate the
    referenced object inside the same namespace.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    name?: str = ""

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecSecurityContext:
    r"""
    If specified, the pod's security context

    Attributes
    ----------
    fsGroup : int, default is Undefined, optional
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
    fsGroupChangePolicy : str, default is Undefined, optional
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
    runAsGroup : int, default is Undefined, optional
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
    runAsNonRoot : bool, default is Undefined, optional
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
    runAsUser : int, default is Undefined, optional
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
    seLinuxOptions : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptions, default is Undefined, optional
        se linux options
    seccompProfile : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfile, default is Undefined, optional
        seccomp profile
    supplementalGroups : [int], default is Undefined, optional
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
    sysctls : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsItems0], default is Undefined, optional
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
    """
    fsGroup?: int
    fsGroupChangePolicy?: str
    runAsGroup?: int
    runAsNonRoot?: bool
    runAsUser?: int
    seLinuxOptions?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptions
    seccompProfile?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfile
    supplementalGroups?: [int]
    sysctls?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsItems0]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecSecurityContextSeLinuxOptions:
    r"""
    The SELinux context to be applied to all containers.
    If unspecified, the container runtime will allocate a random SELinux context for each
    container.  May also be set in SecurityContext.  If set in
    both SecurityContext and PodSecurityContext, the value specified in SecurityContext
    takes precedence for that container.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    level : str, default is Undefined, optional
        Level is SELinux level label that applies to the container.
    role : str, default is Undefined, optional
        Role is a SELinux role label that applies to the container.
    $type : str, default is Undefined, optional
        Type is a SELinux type label that applies to the container.
    user : str, default is Undefined, optional
        User is a SELinux user label that applies to the container.
    """
    level?: str
    role?: str
    $type?: str
    user?: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecSecurityContextSeccompProfile:
    r"""
    The seccomp options to use by the containers in this pod.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    localhostProfile : str, default is Undefined, optional
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
    $type : str, default is Undefined, required
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
    """
    localhostProfile?: str
    $type: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecSecurityContextSysctlsItems0:
    r"""
    Sysctl defines a kernel parameter to be set

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of a property to set
    value : str, default is Undefined, required
        Value of a property to set
    """
    name: str

    value: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01GatewayHTTPRoutePodTemplateSpecTolerationsItems0:
    r"""
    The pod this Toleration is attached to tolerates any taint that matches
    the triple <key,value,effect> using the matching operator <operator>.

    Attributes
    ----------
    effect : str, default is Undefined, optional
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    key : str, default is Undefined, optional
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    operator : str, default is Undefined, optional
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
    tolerationSeconds : int, default is Undefined, optional
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
    value : str, default is Undefined, optional
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
    """
    effect?: str
    key?: str
    operator?: str
    tolerationSeconds?: int
    value?: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01Ingress:
    r"""
    The ingress based HTTP01 challenge solver will solve challenges by
    creating or modifying Ingress resources in order to route requests for
    '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are
    provisioned by cert-manager for each Challenge to be completed.

    Attributes
    ----------
    class : str, default is Undefined, optional
        This field configures the annotation `kubernetes.io/ingress.class` when
        creating Ingress resources to solve ACME challenges that use this
        challenge solver. Only one of `class`, `name` or `ingressClassName` may
        be specified.
    ingressClassName : str, default is Undefined, optional
        This field configures the field `ingressClassName` on the created Ingress
        resources used to solve ACME challenges that use this challenge solver.
        This is the recommended way of configuring the ingress class. Only one of
        `class`, `name` or `ingressClassName` may be specified.
    ingressTemplate : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressIngressTemplate, default is Undefined, optional
        ingress template
    name : str, default is Undefined, optional
        The name of the ingress resource that should have ACME challenge solving
        routes inserted into it in order to solve HTTP01 challenges.
        This is typically used in conjunction with ingress controllers like
        ingress-gce, which maintains a 1:1 mapping between external IPs and
        ingress resources. Only one of `class`, `name` or `ingressClassName` may
        be specified.
    podTemplate : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplate, default is Undefined, optional
        pod template
    serviceType : str, default is Undefined, optional
        Optional service type for Kubernetes solver service. Supported values
        are NodePort or ClusterIP. If unset, defaults to NodePort.
    """
    class?: str
    ingressClassName?: str
    ingressTemplate?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressIngressTemplate
    name?: str
    podTemplate?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplate
    serviceType?: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressIngressTemplate:
    r"""
    Optional ingress template used to configure the ACME challenge solver
    ingress used for HTTP01 challenges.

    Attributes
    ----------
    metadata : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressIngressTemplateMetadata, default is Undefined, optional
        metadata
    """
    metadata?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressIngressTemplateMetadata

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressIngressTemplateMetadata:
    r"""
    ObjectMeta overrides for the ingress used to solve HTTP01 challenges.
    Only the 'labels' and 'annotations' fields may be set.
    If labels or annotations overlap with in-built values, the values here
    will override the in-built values.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations that should be added to the created ACME HTTP01 solver ingress.
    labels : {str:str}, default is Undefined, optional
        Labels that should be added to the created ACME HTTP01 solver ingress.
    """
    annotations?: {str:str}
    labels?: {str:str}

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplate:
    r"""
    Optional pod template used to configure the ACME challenge solver pods
    used for HTTP01 challenges.

    Attributes
    ----------
    metadata : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateMetadata, default is Undefined, optional
        metadata
    spec : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpec, default is Undefined, optional
        spec
    """
    metadata?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateMetadata
    spec?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpec

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateMetadata:
    r"""
    ObjectMeta overrides for the pod used to solve HTTP01 challenges.
    Only the 'labels' and 'annotations' fields may be set.
    If labels or annotations overlap with in-built values, the values here
    will override the in-built values.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations that should be added to the created ACME HTTP01 solver pods.
    labels : {str:str}, default is Undefined, optional
        Labels that should be added to the created ACME HTTP01 solver pods.
    """
    annotations?: {str:str}
    labels?: {str:str}

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpec:
    r"""
    PodSpec defines overrides for the HTTP01 challenge solver pod.
    Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields.
    All other fields will be ignored.

    Attributes
    ----------
    affinity : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinity, default is Undefined, optional
        affinity
    imagePullSecrets : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecImagePullSecretsItems0], default is Undefined, optional
        If specified, the pod's imagePullSecrets
    nodeSelector : {str:str}, default is Undefined, optional
        NodeSelector is a selector which must be true for the pod to fit on a node.
        Selector which must match a node's labels for the pod to be scheduled on that node.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    priorityClassName : str, default is Undefined, optional
        If specified, the pod's priorityClassName.
    securityContext : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecSecurityContext, default is Undefined, optional
        security context
    serviceAccountName : str, default is Undefined, optional
        If specified, the pod's service account
    tolerations : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecTolerationsItems0], default is Undefined, optional
        If specified, the pod's tolerations.
    """
    affinity?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinity
    imagePullSecrets?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecImagePullSecretsItems0]
    nodeSelector?: {str:str}
    priorityClassName?: str
    securityContext?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecSecurityContext
    serviceAccountName?: str
    tolerations?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecTolerationsItems0]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinity:
    r"""
    If specified, the pod's scheduling constraints

    Attributes
    ----------
    nodeAffinity : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinity, default is Undefined, optional
        node affinity
    podAffinity : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinity, default is Undefined, optional
        pod affinity
    podAntiAffinity : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinity, default is Undefined, optional
        pod anti affinity
    """
    nodeAffinity?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinity
    podAffinity?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinity
    podAntiAffinity?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinity

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinity:
    r"""
    Describes node affinity scheduling rules for the pod.

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution, default is Undefined, optional
        required during scheduling ignored during execution
    """
    preferredDuringSchedulingIgnoredDuringExecution?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]
    requiredDuringSchedulingIgnoredDuringExecution?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    An empty preferred scheduling term matches all objects with implicit weight 0
    (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).

    Attributes
    ----------
    preference : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference, default is Undefined, required
        preference
    weight : int, default is Undefined, required
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
    """
    preference: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference

    weight: int

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference:
    r"""
    A node selector term, associated with the corresponding weight.

    Attributes
    ----------
    matchExpressions : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0], default is Undefined, optional
        A list of node selector requirements by node's labels.
    matchFields : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0], default is Undefined, optional
        A list of node selector requirements by node's fields.
    """
    matchExpressions?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0]
    matchFields?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution:
    r"""
    If the affinity requirements specified by this field are not met at
    scheduling time, the pod will not be scheduled onto the node.
    If the affinity requirements specified by this field cease to be met
    at some point during pod execution (e.g. due to an update), the system
    may or may not try to eventually evict the pod from its node.

    Attributes
    ----------
    nodeSelectorTerms : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0], default is Undefined, required
        Required. A list of node selector terms. The terms are ORed.
    """
    nodeSelectorTerms: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0:
    r"""
    A null or empty node selector term matches no objects. The requirements of
    them are ANDed.
    The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.

    Attributes
    ----------
    matchExpressions : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0], default is Undefined, optional
        A list of node selector requirements by node's labels.
    matchFields : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0], default is Undefined, optional
        A list of node selector requirements by node's fields.
    """
    matchExpressions?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0]
    matchFields?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinity:
    r"""
    Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
    """
    preferredDuringSchedulingIgnoredDuringExecution?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]
    requiredDuringSchedulingIgnoredDuringExecution?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)

    Attributes
    ----------
    podAffinityTerm : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm, default is Undefined, required
        pod affinity term
    weight : int, default is Undefined, required
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
    """
    podAffinityTerm: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm

    weight: int

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm:
    r"""
    Required. A pod affinity term, associated with the corresponding weight.

    Attributes
    ----------
    labelSelector : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
    namespaceSelector : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """
    labelSelector?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    Defines a set of pods (namely those matching the labelSelector
    relative to the given namespace(s)) that this pod should be
    co-located (affinity) or not co-located (anti-affinity) with,
    where co-located is defined as running on a node whose value of
    the label with key <topologyKey> matches that of any node on which
    a pod of the set of pods is running

    Attributes
    ----------
    labelSelector : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
    namespaceSelector : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """
    labelSelector?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinity:
    r"""
    Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
    """
    preferredDuringSchedulingIgnoredDuringExecution?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]
    requiredDuringSchedulingIgnoredDuringExecution?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)

    Attributes
    ----------
    podAffinityTerm : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm, default is Undefined, required
        pod affinity term
    weight : int, default is Undefined, required
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
    """
    podAffinityTerm: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm

    weight: int

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm:
    r"""
    Required. A pod affinity term, associated with the corresponding weight.

    Attributes
    ----------
    labelSelector : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
    namespaceSelector : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """
    labelSelector?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    Defines a set of pods (namely those matching the labelSelector
    relative to the given namespace(s)) that this pod should be
    co-located (affinity) or not co-located (anti-affinity) with,
    where co-located is defined as running on a node whose value of
    the label with key <topologyKey> matches that of any node on which
    a pod of the set of pods is running

    Attributes
    ----------
    labelSelector : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
        This is a beta field and requires enabling MatchLabelKeysInPodAffinity feature gate (enabled by default).
    namespaceSelector : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """
    labelSelector?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecImagePullSecretsItems0:
    r"""
    LocalObjectReference contains enough information to let you locate the
    referenced object inside the same namespace.

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    name?: str = ""

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecSecurityContext:
    r"""
    If specified, the pod's security context

    Attributes
    ----------
    fsGroup : int, default is Undefined, optional
        A special supplemental group that applies to all containers in a pod.
        Some volume types allow the Kubelet to change the ownership of that volume
        to be owned by the pod:

        1. The owning GID will be the FSGroup
        2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
        3. The permission bits are OR'd with rw-rw----

        If unset, the Kubelet will not modify the ownership and permissions of any volume.
        Note that this field cannot be set when spec.os.name is windows.
    fsGroupChangePolicy : str, default is Undefined, optional
        fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
        before being exposed inside Pod. This field will only apply to
        volume types which support fsGroup based ownership(and permissions).
        It will have no effect on ephemeral volume types such as: secret, configmaps
        and emptydir.
        Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
        Note that this field cannot be set when spec.os.name is windows.
    runAsGroup : int, default is Undefined, optional
        The GID to run the entrypoint of the container process.
        Uses runtime default if unset.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
    runAsNonRoot : bool, default is Undefined, optional
        Indicates that the container must run as a non-root user.
        If true, the Kubelet will validate the image at runtime to ensure that it
        does not run as UID 0 (root) and fail to start the container if it does.
        If unset or false, no such validation will be performed.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence.
    runAsUser : int, default is Undefined, optional
        The UID to run the entrypoint of the container process.
        Defaults to user specified in image metadata if unspecified.
        May also be set in SecurityContext.  If set in both SecurityContext and
        PodSecurityContext, the value specified in SecurityContext takes precedence
        for that container.
        Note that this field cannot be set when spec.os.name is windows.
    seLinuxOptions : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecSecurityContextSeLinuxOptions, default is Undefined, optional
        se linux options
    seccompProfile : CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecSecurityContextSeccompProfile, default is Undefined, optional
        seccomp profile
    supplementalGroups : [int], default is Undefined, optional
        A list of groups applied to the first process run in each container, in addition
        to the container's primary GID, the fsGroup (if specified), and group memberships
        defined in the container image for the uid of the container process. If unspecified,
        no additional groups are added to any container. Note that group memberships
        defined in the container image for the uid of the container process are still effective,
        even if they are not included in this list.
        Note that this field cannot be set when spec.os.name is windows.
    sysctls : [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecSecurityContextSysctlsItems0], default is Undefined, optional
        Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
        sysctls (by the container runtime) might fail to launch.
        Note that this field cannot be set when spec.os.name is windows.
    """
    fsGroup?: int
    fsGroupChangePolicy?: str
    runAsGroup?: int
    runAsNonRoot?: bool
    runAsUser?: int
    seLinuxOptions?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecSecurityContextSeLinuxOptions
    seccompProfile?: CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecSecurityContextSeccompProfile
    supplementalGroups?: [int]
    sysctls?: [CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecSecurityContextSysctlsItems0]

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecSecurityContextSeLinuxOptions:
    r"""
    The SELinux context to be applied to all containers.
    If unspecified, the container runtime will allocate a random SELinux context for each
    container.  May also be set in SecurityContext.  If set in
    both SecurityContext and PodSecurityContext, the value specified in SecurityContext
    takes precedence for that container.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    level : str, default is Undefined, optional
        Level is SELinux level label that applies to the container.
    role : str, default is Undefined, optional
        Role is a SELinux role label that applies to the container.
    $type : str, default is Undefined, optional
        Type is a SELinux type label that applies to the container.
    user : str, default is Undefined, optional
        User is a SELinux user label that applies to the container.
    """
    level?: str
    role?: str
    $type?: str
    user?: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecSecurityContextSeccompProfile:
    r"""
    The seccomp options to use by the containers in this pod.
    Note that this field cannot be set when spec.os.name is windows.

    Attributes
    ----------
    localhostProfile : str, default is Undefined, optional
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
    $type : str, default is Undefined, required
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
    """
    localhostProfile?: str
    $type: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecSecurityContextSysctlsItems0:
    r"""
    Sysctl defines a kernel parameter to be set

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of a property to set
    value : str, default is Undefined, required
        Value of a property to set
    """
    name: str

    value: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Http01IngressPodTemplateSpecTolerationsItems0:
    r"""
    The pod this Toleration is attached to tolerates any taint that matches
    the triple <key,value,effect> using the matching operator <operator>.

    Attributes
    ----------
    effect : str, default is Undefined, optional
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    key : str, default is Undefined, optional
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    operator : str, default is Undefined, optional
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
    tolerationSeconds : int, default is Undefined, optional
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
    value : str, default is Undefined, optional
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
    """
    effect?: str
    key?: str
    operator?: str
    tolerationSeconds?: int
    value?: str

schema CertManagerIoV1IssuerSpecAcmeSolversItems0Selector:
    r"""
    Selector selects a set of DNSNames on the Certificate resource that
    should be solved using this challenge solver.
    If not specified, the solver will be treated as the 'default' solver
    with the lowest priority, i.e. if any other solver has a more specific
    match, it will be used instead.

    Attributes
    ----------
    dnsNames : [str], default is Undefined, optional
        List of DNSNames that this solver will be used to solve.
        If specified and a match is found, a dnsNames selector will take
        precedence over a dnsZones selector.
        If multiple solvers match with the same dnsNames value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
    dnsZones : [str], default is Undefined, optional
        List of DNSZones that this solver will be used to solve.
        The most specific DNS zone match specified here will take precedence
        over other DNS zone matches, so a solver specifying sys.example.com
        will be selected over one specifying example.com for the domain
        www.sys.example.com.
        If multiple solvers match with the same dnsZones value, the solver
        with the most matching labels in matchLabels will be selected.
        If neither has more matches, the solver defined earlier in the list
        will be selected.
    matchLabels : {str:str}, default is Undefined, optional
        A label selector that is used to refine the set of certificate's that
        this challenge solver will apply to.
    """
    dnsNames?: [str]
    dnsZones?: [str]
    matchLabels?: {str:str}

schema CertManagerIoV1IssuerSpecCa:
    r"""
    CA configures this issuer to sign certificates using a signing CA keypair
    stored in a Secret resource.
    This is used to build internal PKIs that are managed by cert-manager.

    Attributes
    ----------
    crlDistributionPoints : [str], default is Undefined, optional
        The CRL distribution points is an X.509 v3 certificate extension which identifies
        the location of the CRL from which the revocation of this certificate can be checked.
        If not set, certificates will be issued without distribution points set.
    issuingCertificateURLs : [str], default is Undefined, optional
        IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates
        it creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details.
        As an example, such a URL might be "http://ca.domain.com/ca.crt".
    ocspServers : [str], default is Undefined, optional
        The OCSP server list is an X.509 v3 extension that defines a list of
        URLs of OCSP responders. The OCSP responders can be queried for the
        revocation status of an issued certificate. If not set, the
        certificate will be issued with no OCSP servers set. For example, an
        OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
    secretName : str, default is Undefined, required
        SecretName is the name of the secret used to sign Certificates issued
        by this Issuer.
    """
    crlDistributionPoints?: [str]
    issuingCertificateURLs?: [str]
    ocspServers?: [str]
    secretName: str

schema CertManagerIoV1IssuerSpecSelfSigned:
    r"""
    SelfSigned configures this issuer to 'self sign' certificates using the
    private key used to create the CertificateRequest object.

    Attributes
    ----------
    crlDistributionPoints : [str], default is Undefined, optional
        The CRL distribution points is an X.509 v3 certificate extension which identifies
        the location of the CRL from which the revocation of this certificate can be checked.
        If not set certificate will be issued without CDP. Values are strings.
    """
    crlDistributionPoints?: [str]

schema CertManagerIoV1IssuerSpecVault:
    r"""
    Vault configures this issuer to sign certificates using a HashiCorp Vault
    PKI backend.

    Attributes
    ----------
    auth : CertManagerIoV1IssuerSpecVaultAuth, default is Undefined, required
        auth
    caBundle : str, default is Undefined, optional
        Base64-encoded bundle of PEM CAs which will be used to validate the certificate
        chain presented by Vault. Only used if using HTTPS to connect to Vault and
        ignored for HTTP connections.
        Mutually exclusive with CABundleSecretRef.
        If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
        the cert-manager controller container is used to validate the TLS connection.
    caBundleSecretRef : CertManagerIoV1IssuerSpecVaultCaBundleSecretRef, default is Undefined, optional
        ca bundle secret ref
    clientCertSecretRef : CertManagerIoV1IssuerSpecVaultClientCertSecretRef, default is Undefined, optional
        client cert secret ref
    clientKeySecretRef : CertManagerIoV1IssuerSpecVaultClientKeySecretRef, default is Undefined, optional
        client key secret ref
    namespace : str, default is Undefined, optional
        Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1"
        More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
    path : str, default is Undefined, required
        Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g:
        "my_pki_mount/sign/my-role-name".
    server : str, default is Undefined, required
        Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
    """
    auth: CertManagerIoV1IssuerSpecVaultAuth

    caBundle?: str
    caBundleSecretRef?: CertManagerIoV1IssuerSpecVaultCaBundleSecretRef
    clientCertSecretRef?: CertManagerIoV1IssuerSpecVaultClientCertSecretRef
    clientKeySecretRef?: CertManagerIoV1IssuerSpecVaultClientKeySecretRef
    namespace?: str
    path: str

    server: str

schema CertManagerIoV1IssuerSpecVaultAuth:
    r"""
    Auth configures how cert-manager authenticates with the Vault server.

    Attributes
    ----------
    appRole : CertManagerIoV1IssuerSpecVaultAuthAppRole, default is Undefined, optional
        app role
    clientCertificate : CertManagerIoV1IssuerSpecVaultAuthClientCertificate, default is Undefined, optional
        client certificate
    kubernetes : CertManagerIoV1IssuerSpecVaultAuthKubernetes, default is Undefined, optional
        kubernetes
    tokenSecretRef : CertManagerIoV1IssuerSpecVaultAuthTokenSecretRef, default is Undefined, optional
        token secret ref
    """
    appRole?: CertManagerIoV1IssuerSpecVaultAuthAppRole
    clientCertificate?: CertManagerIoV1IssuerSpecVaultAuthClientCertificate
    kubernetes?: CertManagerIoV1IssuerSpecVaultAuthKubernetes
    tokenSecretRef?: CertManagerIoV1IssuerSpecVaultAuthTokenSecretRef

schema CertManagerIoV1IssuerSpecVaultAuthAppRole:
    r"""
    AppRole authenticates with Vault using the App Role auth mechanism,
    with the role and secret stored in a Kubernetes Secret resource.

    Attributes
    ----------
    path : str, default is Undefined, required
        Path where the App Role authentication backend is mounted in Vault, e.g:
        "approle"
    roleId : str, default is Undefined, required
        RoleID configured in the App Role authentication backend when setting
        up the authentication backend in Vault.
    secretRef : CertManagerIoV1IssuerSpecVaultAuthAppRoleSecretRef, default is Undefined, required
        secret ref
    """
    path: str

    roleId: str

    secretRef: CertManagerIoV1IssuerSpecVaultAuthAppRoleSecretRef

schema CertManagerIoV1IssuerSpecVaultAuthAppRoleSecretRef:
    r"""
    Reference to a key in a Secret that contains the App Role secret used
    to authenticate with Vault.
    The `key` field must be specified and denotes which entry within the Secret
    resource is used as the app role secret.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    key?: str
    name: str

schema CertManagerIoV1IssuerSpecVaultAuthClientCertificate:
    r"""
    ClientCertificate authenticates with Vault by presenting a client
    certificate during the request's TLS handshake.
    Works only when using HTTPS protocol.

    Attributes
    ----------
    mountPath : str, default is Undefined, optional
        The Vault mountPath here is the mount path to use when authenticating with
        Vault. For example, setting a value to `/v1/auth/foo`, will use the path
        `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
        default value "/v1/auth/cert" will be used.
    name : str, default is Undefined, optional
        Name of the certificate role to authenticate against.
        If not set, matching any certificate role, if available.
    secretName : str, default is Undefined, optional
        Reference to Kubernetes Secret of type "kubernetes.io/tls" (hence containing
        tls.crt and tls.key) used to authenticate to Vault using TLS client
        authentication.
    """
    mountPath?: str
    name?: str
    secretName?: str

schema CertManagerIoV1IssuerSpecVaultAuthKubernetes:
    r"""
    Kubernetes authenticates with Vault by passing the ServiceAccount
    token stored in the named Secret resource to the Vault server.

    Attributes
    ----------
    mountPath : str, default is Undefined, optional
        The Vault mountPath here is the mount path to use when authenticating with
        Vault. For example, setting a value to `/v1/auth/foo`, will use the path
        `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the
        default value "/v1/auth/kubernetes" will be used.
    role : str, default is Undefined, required
        A required field containing the Vault Role to assume. A Role binds a
        Kubernetes ServiceAccount with a set of Vault policies.
    secretRef : CertManagerIoV1IssuerSpecVaultAuthKubernetesSecretRef, default is Undefined, optional
        secret ref
    serviceAccountRef : CertManagerIoV1IssuerSpecVaultAuthKubernetesServiceAccountRef, default is Undefined, optional
        service account ref
    """
    mountPath?: str
    role: str

    secretRef?: CertManagerIoV1IssuerSpecVaultAuthKubernetesSecretRef
    serviceAccountRef?: CertManagerIoV1IssuerSpecVaultAuthKubernetesServiceAccountRef

schema CertManagerIoV1IssuerSpecVaultAuthKubernetesSecretRef:
    r"""
    The required Secret field containing a Kubernetes ServiceAccount JWT used
    for authenticating with Vault. Use of 'ambient credentials' is not
    supported.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    key?: str
    name: str

schema CertManagerIoV1IssuerSpecVaultAuthKubernetesServiceAccountRef:
    r"""
    A reference to a service account that will be used to request a bound
    token (also known as "projected token"). Compared to using "secretRef",
    using this field means that you don't rely on statically bound tokens. To
    use this field, you must configure an RBAC rule to let cert-manager
    request a token.

    Attributes
    ----------
    audiences : [str], default is Undefined, optional
        TokenAudiences is an optional list of extra audiences to include in the token passed to Vault. The default token
        consisting of the issuer's namespace and name is always included.
    name : str, default is Undefined, required
        Name of the ServiceAccount used to request a token.
    """
    audiences?: [str]
    name: str

schema CertManagerIoV1IssuerSpecVaultAuthTokenSecretRef:
    r"""
    TokenSecretRef authenticates with Vault by presenting a token.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    key?: str
    name: str

schema CertManagerIoV1IssuerSpecVaultCaBundleSecretRef:
    r"""
    Reference to a Secret containing a bundle of PEM-encoded CAs to use when
    verifying the certificate chain presented by Vault when using HTTPS.
    Mutually exclusive with CABundle.
    If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in
    the cert-manager controller container is used to validate the TLS connection.
    If no key for the Secret is specified, cert-manager will default to 'ca.crt'.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    key?: str
    name: str

schema CertManagerIoV1IssuerSpecVaultClientCertSecretRef:
    r"""
    Reference to a Secret containing a PEM-encoded Client Certificate to use when the
    Vault server requires mTLS.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    key?: str
    name: str

schema CertManagerIoV1IssuerSpecVaultClientKeySecretRef:
    r"""
    Reference to a Secret containing a PEM-encoded Client Private Key to use when the
    Vault server requires mTLS.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    key?: str
    name: str

schema CertManagerIoV1IssuerSpecVenafi:
    r"""
    Venafi configures this issuer to sign certificates using a Venafi TPP
    or Venafi Cloud policy zone.

    Attributes
    ----------
    cloud : CertManagerIoV1IssuerSpecVenafiCloud, default is Undefined, optional
        cloud
    tpp : CertManagerIoV1IssuerSpecVenafiTpp, default is Undefined, optional
        tpp
    zone : str, default is Undefined, required
        Zone is the Venafi Policy Zone to use for this issuer.
        All requests made to the Venafi platform will be restricted by the named
        zone policy.
        This field is required.
    """
    cloud?: CertManagerIoV1IssuerSpecVenafiCloud
    tpp?: CertManagerIoV1IssuerSpecVenafiTpp
    zone: str

schema CertManagerIoV1IssuerSpecVenafiCloud:
    r"""
    Cloud specifies the Venafi cloud configuration settings.
    Only one of TPP or Cloud may be specified.

    Attributes
    ----------
    apiTokenSecretRef : CertManagerIoV1IssuerSpecVenafiCloudAPITokenSecretRef, default is Undefined, required
        api token secret ref
    url : str, default is Undefined, optional
        URL is the base URL for Venafi Cloud.
        Defaults to "https://api.venafi.cloud/v1".
    """
    apiTokenSecretRef: CertManagerIoV1IssuerSpecVenafiCloudAPITokenSecretRef

    url?: str

schema CertManagerIoV1IssuerSpecVenafiCloudAPITokenSecretRef:
    r"""
    APITokenSecretRef is a secret key selector for the Venafi Cloud API token.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    key?: str
    name: str

schema CertManagerIoV1IssuerSpecVenafiTpp:
    r"""
    TPP specifies Trust Protection Platform configuration settings.
    Only one of TPP or Cloud may be specified.

    Attributes
    ----------
    caBundle : str, default is Undefined, optional
        Base64-encoded bundle of PEM CAs which will be used to validate the certificate
        chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP.
        If undefined, the certificate bundle in the cert-manager controller container
        is used to validate the chain.
    caBundleSecretRef : CertManagerIoV1IssuerSpecVenafiTppCaBundleSecretRef, default is Undefined, optional
        ca bundle secret ref
    credentialsRef : CertManagerIoV1IssuerSpecVenafiTppCredentialsRef, default is Undefined, required
        credentials ref
    url : str, default is Undefined, required
        URL is the base URL for the vedsdk endpoint of the Venafi TPP instance,
        for example: "https://tpp.example.com/vedsdk".
    """
    caBundle?: str
    caBundleSecretRef?: CertManagerIoV1IssuerSpecVenafiTppCaBundleSecretRef
    credentialsRef: CertManagerIoV1IssuerSpecVenafiTppCredentialsRef

    url: str

schema CertManagerIoV1IssuerSpecVenafiTppCaBundleSecretRef:
    r"""
    Reference to a Secret containing a base64-encoded bundle of PEM CAs
    which will be used to validate the certificate chain presented by the TPP server.
    Only used if using HTTPS; ignored for HTTP. Mutually exclusive with CABundle.
    If neither CABundle nor CABundleSecretRef is defined, the certificate bundle in
    the cert-manager controller container is used to validate the TLS connection.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used.
        Some instances of this field may be defaulted, in others it may be
        required.
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    key?: str
    name: str

schema CertManagerIoV1IssuerSpecVenafiTppCredentialsRef:
    r"""
    CredentialsRef is a reference to a Secret containing the Venafi TPP API credentials.
    The secret must contain the key 'access-token' for the Access Token Authentication,
    or two keys, 'username' and 'password' for the API Keys Authentication.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the resource being referred to.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """
    name: str

schema CertManagerIoV1IssuerStatus:
    r"""
    Status of the Issuer. This is set and managed automatically.

    Attributes
    ----------
    acme : CertManagerIoV1IssuerStatusAcme, default is Undefined, optional
        acme
    conditions : [CertManagerIoV1IssuerStatusConditionsItems0], default is Undefined, optional
        List of status conditions to indicate the status of a CertificateRequest.
        Known condition types are `Ready`.
    """
    acme?: CertManagerIoV1IssuerStatusAcme
    conditions?: [CertManagerIoV1IssuerStatusConditionsItems0]

schema CertManagerIoV1IssuerStatusAcme:
    r"""
    ACME specific status options.
    This field should only be set if the Issuer is configured to use an ACME
    server to issue certificates.

    Attributes
    ----------
    lastPrivateKeyHash : str, default is Undefined, optional
        LastPrivateKeyHash is a hash of the private key associated with the latest
        registered ACME account, in order to track changes made to registered account
        associated with the Issuer
    lastRegisteredEmail : str, default is Undefined, optional
        LastRegisteredEmail is the email associated with the latest registered
        ACME account, in order to track changes made to registered account
        associated with the  Issuer
    uri : str, default is Undefined, optional
        URI is the unique account identifier, which can also be used to retrieve
        account details from the CA
    """
    lastPrivateKeyHash?: str
    lastRegisteredEmail?: str
    uri?: str

schema CertManagerIoV1IssuerStatusConditionsItems0:
    r"""
    IssuerCondition contains condition information for an Issuer.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        LastTransitionTime is the timestamp corresponding to the last status
        change of this condition.
    message : str, default is Undefined, optional
        Message is a human readable description of the details of the last
        transition, complementing reason.
    observedGeneration : int, default is Undefined, optional
        If set, this represents the .metadata.generation that the condition was
        set based upon.
        For instance, if .metadata.generation is currently 12, but the
        .status.condition[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the Issuer.
    reason : str, default is Undefined, optional
        Reason is a brief machine readable explanation for the condition's last
        transition.
    status : str, default is Undefined, required
        Status of the condition, one of (`True`, `False`, `Unknown`).
    $type : str, default is Undefined, required
        Type of the condition, known values are (`Ready`).
    """
    lastTransitionTime?: str
    message?: str
    observedGeneration?: int
    reason?: str
    status: "True" | "False" | "Unknown"

    $type: str

