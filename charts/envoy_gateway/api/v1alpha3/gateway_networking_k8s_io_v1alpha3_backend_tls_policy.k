"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""

import regex
import k8s.apimachinery.pkg.apis.meta.v1

_regex_match = regex.match

schema BackendTLSPolicy:
    r"""
    BackendTLSPolicy provides a way to configure how a Gateway
    connects to a Backend via TLS.

    Attributes
    ----------
    apiVersion : str, default is "gateway.networking.k8s.io/v1alpha3", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "BackendTLSPolicy", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : GatewayNetworkingK8sIoV1alpha3BackendTLSPolicySpec, default is Undefined, required
        spec
    status : GatewayNetworkingK8sIoV1alpha3BackendTLSPolicyStatus, default is Undefined, optional
        status
    """
    apiVersion: "gateway.networking.k8s.io/v1alpha3" = "gateway.networking.k8s.io/v1alpha3"

    kind: "BackendTLSPolicy" = "BackendTLSPolicy"

    metadata?: v1.ObjectMeta
    spec: GatewayNetworkingK8sIoV1alpha3BackendTLSPolicySpec

    status?: GatewayNetworkingK8sIoV1alpha3BackendTLSPolicyStatus

schema GatewayNetworkingK8sIoV1alpha3BackendTLSPolicySpec:
    r"""
    Spec defines the desired state of BackendTLSPolicy.

    Attributes
    ----------
    options : {str:str}, default is Undefined, optional
        Options are a list of key/value pairs to enable extended TLS
        configuration for each implementation. For example, configuring the
        minimum TLS version or supported cipher suites.

        A set of common keys MAY be defined by the API in the future. To avoid
        any ambiguity, implementation-specific definitions MUST use
        domain-prefixed names, such as `example.com/my-custom-option`.
        Un-prefixed names are reserved for key names defined by Gateway API.

        Support: Implementation-specific
    targetRefs : [GatewayNetworkingK8sIoV1alpha3BackendTLSPolicySpecTargetRefsItems0], default is Undefined, required
        TargetRefs identifies an API object to apply the policy to.
        Only Services have Extended support. Implementations MAY support
        additional objects, with Implementation Specific support.
        Note that this config applies to the entire referenced resource
        by default, but this default may change in the future to provide
        a more granular application of the policy.

        TargetRefs must be _distinct_. This means either that:

        * They select different targets. If this is the case, then targetRef
          entries are distinct. In terms of fields, this means that the
          multi-part key defined by `group`, `kind`, and `name` must
          be unique across all targetRef entries in the BackendTLSPolicy.
        * They select different sectionNames in the same target.

        Support: Extended for Kubernetes Service

        Support: Implementation-specific for any other resource
    validation : GatewayNetworkingK8sIoV1alpha3BackendTLSPolicySpecValidation, default is Undefined, required
        validation
    """
    options?: {str:str}
    targetRefs: [GatewayNetworkingK8sIoV1alpha3BackendTLSPolicySpecTargetRefsItems0]

    validation: GatewayNetworkingK8sIoV1alpha3BackendTLSPolicySpecValidation

    check:
        all _, options in options {len(options) <= 4096 if options not in [None, Undefined]} if options
        all _, options in options {len(options) >= 0 if options not in [None, Undefined]} if options
        len(targetRefs) >= 1
        len(targetRefs) <= 16

schema GatewayNetworkingK8sIoV1alpha3BackendTLSPolicySpecTargetRefsItems0:
    r"""
    LocalPolicyTargetReferenceWithSectionName identifies an API object to apply a
    direct policy to. This should be used as part of Policy resources that can
    target single resources. For more information on how this policy attachment
    mode works, and a sample Policy resource, refer to the policy attachment
    documentation for Gateway API.

    Note: This should only be used for direct policy attachment when references
    to SectionName are actually needed. In all other cases,
    LocalPolicyTargetReference should be used.

    Attributes
    ----------
    group : str, default is Undefined, required
        Group is the group of the target resource.
    kind : str, default is Undefined, required
        Kind is kind of the target resource.
    name : str, default is Undefined, required
        Name is the name of the target resource.
    sectionName : str, default is Undefined, optional
        SectionName is the name of a section within the target resource. When
        unspecified, this targetRef targets the entire resource. In the following
        resources, SectionName is interpreted as the following:

        * Gateway: Listener name
        * HTTPRoute: HTTPRouteRule name
        * Service: Port name

        If a SectionName is specified, but does not exist on the targeted object,
        the Policy must fail to attach, and the policy implementation should record
        a `ResolvedRefs` or similar Condition in the Policy's status.
    """
    group: str

    kind: str

    name: str

    sectionName?: str

    check:
        len(group) <= 253
        _regex_match(str(group), r"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$")
        len(kind) <= 63
        len(kind) >= 1
        _regex_match(str(kind), r"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$")
        len(name) <= 253
        len(name) >= 1
        len(sectionName) <= 253 if sectionName
        len(sectionName) >= 1 if sectionName
        _regex_match(str(sectionName), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if sectionName

schema GatewayNetworkingK8sIoV1alpha3BackendTLSPolicySpecValidation:
    r"""
    Validation contains backend TLS validation configuration.

    Attributes
    ----------
    caCertificateRefs : [GatewayNetworkingK8sIoV1alpha3BackendTLSPolicySpecValidationCaCertificateRefsItems0], default is Undefined, optional
        CACertificateRefs contains one or more references to Kubernetes objects that
        contain a PEM-encoded TLS CA certificate bundle, which is used to
        validate a TLS handshake between the Gateway and backend Pod.

        If CACertificateRefs is empty or unspecified, then WellKnownCACertificates must be
        specified. Only one of CACertificateRefs or WellKnownCACertificates may be specified,
        not both. If CACertificateRefs is empty or unspecified, the configuration for
        WellKnownCACertificates MUST be honored instead if supported by the implementation.

        References to a resource in a different namespace are invalid for the
        moment, although we will revisit this in the future.

        A single CACertificateRef to a Kubernetes ConfigMap kind has "Core" support.
        Implementations MAY choose to support attaching multiple certificates to
        a backend, but this behavior is implementation-specific.

        Support: Core - An optional single reference to a Kubernetes ConfigMap,
        with the CA certificate in a key named `ca.crt`.

        Support: Implementation-specific (More than one reference, or other kinds
        of resources).
    hostname : str, default is Undefined, required
        Hostname is used for two purposes in the connection between Gateways and
        backends:

        1. Hostname MUST be used as the SNI to connect to the backend (RFC 6066).
        2. Hostname MUST be used for authentication and MUST match the certificate served by the matching backend, unless SubjectAltNames is specified.
           authentication and MUST match the certificate served by the matching
           backend.

        Support: Core
    subjectAltNames : [GatewayNetworkingK8sIoV1alpha3BackendTLSPolicySpecValidationSubjectAltNamesItems0], default is Undefined, optional
        SubjectAltNames contains one or more Subject Alternative Names.
        When specified the certificate served from the backend MUST
        have at least one Subject Alternate Name matching one of the specified SubjectAltNames.

        Support: Extended
    wellKnownCACertificates : str, default is Undefined, optional
        WellKnownCACertificates specifies whether system CA certificates may be used in
        the TLS handshake between the gateway and backend pod.

        If WellKnownCACertificates is unspecified or empty (""), then CACertificateRefs
        must be specified with at least one entry for a valid configuration. Only one of
        CACertificateRefs or WellKnownCACertificates may be specified, not both. If an
        implementation does not support the WellKnownCACertificates field or the value
        supplied is not supported, the Status Conditions on the Policy MUST be
        updated to include an Accepted: False Condition with Reason: Invalid.

        Support: Implementation-specific
    """
    caCertificateRefs?: [GatewayNetworkingK8sIoV1alpha3BackendTLSPolicySpecValidationCaCertificateRefsItems0]
    hostname: str

    subjectAltNames?: [GatewayNetworkingK8sIoV1alpha3BackendTLSPolicySpecValidationSubjectAltNamesItems0]
    wellKnownCACertificates?: "System"

    check:
        len(caCertificateRefs) <= 8 if caCertificateRefs
        len(hostname) <= 253
        len(hostname) >= 1
        _regex_match(str(hostname), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$")
        len(subjectAltNames) <= 5 if subjectAltNames

schema GatewayNetworkingK8sIoV1alpha3BackendTLSPolicySpecValidationCaCertificateRefsItems0:
    r"""
    LocalObjectReference identifies an API object within the namespace of the
    referrer.
    The API object must be valid in the cluster; the Group and Kind must
    be registered in the cluster for this reference to be valid.

    References to objects with invalid Group and Kind are not valid, and must
    be rejected by the implementation, with appropriate Conditions set
    on the containing object.

    Attributes
    ----------
    group : str, default is Undefined, required
        Group is the group of the referent. For example, "gateway.networking.k8s.io".
        When unspecified or empty string, core API group is inferred.
    kind : str, default is Undefined, required
        Kind is kind of the referent. For example "HTTPRoute" or "Service".
    name : str, default is Undefined, required
        Name is the name of the referent.
    """
    group: str

    kind: str

    name: str

    check:
        len(group) <= 253
        _regex_match(str(group), r"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$")
        len(kind) <= 63
        len(kind) >= 1
        _regex_match(str(kind), r"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$")
        len(name) <= 253
        len(name) >= 1

schema GatewayNetworkingK8sIoV1alpha3BackendTLSPolicySpecValidationSubjectAltNamesItems0:
    r"""
    SubjectAltName represents Subject Alternative Name.

    Attributes
    ----------
    hostname : str, default is Undefined, optional
        Hostname contains Subject Alternative Name specified in DNS name format.
        Required when Type is set to Hostname, ignored otherwise.

        Support: Core
    $type : str, default is Undefined, required
        Type determines the format of the Subject Alternative Name. Always required.

        Support: Core
    uri : str, default is Undefined, optional
        URI contains Subject Alternative Name specified in a full URI format.
        It MUST include both a scheme (e.g., "http" or "ftp") and a scheme-specific-part.
        Common values include SPIFFE IDs like "spiffe://mycluster.example.com/ns/myns/sa/svc1sa".
        Required when Type is set to URI, ignored otherwise.

        Support: Core
    """
    hostname?: str
    $type: "Hostname" | "URI"

    uri?: str

    check:
        len(hostname) <= 253 if hostname
        len(hostname) >= 1 if hostname
        _regex_match(str(hostname), r"^(\*\.)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if hostname
        len(uri) <= 253 if uri
        len(uri) >= 1 if uri
        _regex_match(str(uri), r"^(([^:/?#]+):)(//([^/?#]*))([^?#]*)(\?([^#]*))?(#(.*))?") if uri

schema GatewayNetworkingK8sIoV1alpha3BackendTLSPolicyStatus:
    r"""
    Status defines the current state of BackendTLSPolicy.

    Attributes
    ----------
    ancestors : [GatewayNetworkingK8sIoV1alpha3BackendTLSPolicyStatusAncestorsItems0], default is Undefined, required
        Ancestors is a list of ancestor resources (usually Gateways) that are
        associated with the policy, and the status of the policy with respect to
        each ancestor. When this policy attaches to a parent, the controller that
        manages the parent and the ancestors MUST add an entry to this list when
        the controller first sees the policy and SHOULD update the entry as
        appropriate when the relevant ancestor is modified.

        Note that choosing the relevant ancestor is left to the Policy designers;
        an important part of Policy design is designing the right object level at
        which to namespace this status.

        Note also that implementations MUST ONLY populate ancestor status for
        the Ancestor resources they are responsible for. Implementations MUST
        use the ControllerName field to uniquely identify the entries in this list
        that they are responsible for.

        Note that to achieve this, the list of PolicyAncestorStatus structs
        MUST be treated as a map with a composite key, made up of the AncestorRef
        and ControllerName fields combined.

        A maximum of 16 ancestors will be represented in this list. An empty list
        means the Policy is not relevant for any ancestors.

        If this slice is full, implementations MUST NOT add further entries.
        Instead they MUST consider the policy unimplementable and signal that
        on any related resources such as the ancestor that would be referenced
        here. For example, if this list was full on BackendTLSPolicy, no
        additional Gateways would be able to reference the Service targeted by
        the BackendTLSPolicy.
    """
    ancestors: [GatewayNetworkingK8sIoV1alpha3BackendTLSPolicyStatusAncestorsItems0]

    check:
        len(ancestors) <= 16

schema GatewayNetworkingK8sIoV1alpha3BackendTLSPolicyStatusAncestorsItems0:
    r"""
    PolicyAncestorStatus describes the status of a route with respect to an
    associated Ancestor.

    Ancestors refer to objects that are either the Target of a policy or above it
    in terms of object hierarchy. For example, if a policy targets a Service, the
    Policy's Ancestors are, in order, the Service, the HTTPRoute, the Gateway, and
    the GatewayClass. Almost always, in this hierarchy, the Gateway will be the most
    useful object to place Policy status on, so we recommend that implementations
    SHOULD use Gateway as the PolicyAncestorStatus object unless the designers
    have a _very_ good reason otherwise.

    In the context of policy attachment, the Ancestor is used to distinguish which
    resource results in a distinct application of this policy. For example, if a policy
    targets a Service, it may have a distinct result per attached Gateway.

    Policies targeting the same resource may have different effects depending on the
    ancestors of those resources. For example, different Gateways targeting the same
    Service may have different capabilities, especially if they have different underlying
    implementations.

    For example, in BackendTLSPolicy, the Policy attaches to a Service that is
    used as a backend in a HTTPRoute that is itself attached to a Gateway.
    In this case, the relevant object for status is the Gateway, and that is the
    ancestor object referred to in this status.

    Note that a parent is also an ancestor, so for objects where the parent is the
    relevant object for status, this struct SHOULD still be used.

    This struct is intended to be used in a slice that's effectively a map,
    with a composite key made up of the AncestorRef and the ControllerName.

    Attributes
    ----------
    ancestorRef : GatewayNetworkingK8sIoV1alpha3BackendTLSPolicyStatusAncestorsItems0AncestorRef, default is Undefined, required
        ancestor ref
    conditions : [GatewayNetworkingK8sIoV1alpha3BackendTLSPolicyStatusAncestorsItems0ConditionsItems0], default is Undefined, optional
        Conditions describes the status of the Policy with respect to the given Ancestor.
    controllerName : str, default is Undefined, required
        ControllerName is a domain/path string that indicates the name of the
        controller that wrote this status. This corresponds with the
        controllerName field on GatewayClass.

        Example: "example.net/gateway-controller".

        The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
        valid Kubernetes names
        (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).

        Controllers MUST populate this field when writing status. Controllers should ensure that
        entries to status populated with their ControllerName are cleaned up when they are no
        longer necessary.
    """
    ancestorRef: GatewayNetworkingK8sIoV1alpha3BackendTLSPolicyStatusAncestorsItems0AncestorRef

    conditions?: [GatewayNetworkingK8sIoV1alpha3BackendTLSPolicyStatusAncestorsItems0ConditionsItems0]
    controllerName: str

    check:
        len(conditions) >= 1 if conditions
        len(conditions) <= 8 if conditions
        len(controllerName) <= 253
        len(controllerName) >= 1
        _regex_match(str(controllerName), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\/[A-Za-z0-9\/\-._~%!$&'()*+,;=:]+$")

schema GatewayNetworkingK8sIoV1alpha3BackendTLSPolicyStatusAncestorsItems0AncestorRef:
    r"""
    AncestorRef corresponds with a ParentRef in the spec that this
    PolicyAncestorStatus struct describes the status of.

    Attributes
    ----------
    group : str, default is "gateway.networking.k8s.io", optional
        Group is the group of the referent.
        When unspecified, "gateway.networking.k8s.io" is inferred.
        To set the core API group (such as for a "Service" kind referent),
        Group must be explicitly set to "" (empty string).

        Support: Core
    kind : str, default is "Gateway", optional
        Kind is kind of the referent.

        There are two kinds of parent resources with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        Support for other resources is Implementation-Specific.
    name : str, default is Undefined, required
        Name is the name of the referent.

        Support: Core
    namespace : str, default is Undefined, optional
        Namespace is the namespace of the referent. When unspecified, this refers
        to the local namespace of the Route.

        Note that there are specific rules for ParentRefs which cross namespace
        boundaries. Cross-namespace references are only valid if they are explicitly
        allowed by something in the namespace they are referring to. For example:
        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
        generic way to enable any other kind of cross-namespace reference.


        ParentRefs from a Route to a Service in the same namespace are "producer"
        routes, which apply default routing rules to inbound connections from
        any namespace to the Service.

        ParentRefs from a Route to a Service in a different namespace are
        "consumer" routes, and these routing rules are only applied to outbound
        connections originating from the same namespace as the Route, for which
        the intended destination of the connections are a Service targeted as a
        ParentRef of the Route.


        Support: Core
    port : int, default is Undefined, optional
        Port is the network port this Route targets. It can be interpreted
        differently based on the type of parent resource.

        When the parent resource is a Gateway, this targets all listeners
        listening on the specified port that also support this kind of Route(and
        select this Route). It's not recommended to set `Port` unless the
        networking behaviors specified in a Route must apply to a specific port
        as opposed to a listener(s) whose port(s) may be changed. When both Port
        and SectionName are specified, the name and port of the selected listener
        must match both specified values.


        When the parent resource is a Service, this targets a specific port in the
        Service spec. When both Port (experimental) and SectionName are specified,
        the name and port of the selected port must match both specified values.


        Implementations MAY choose to support other parent resources.
        Implementations supporting other types of parent resources MUST clearly
        document how/if Port is interpreted.

        For the purpose of status, an attachment is considered successful as
        long as the parent resource accepts it partially. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
        from the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route,
        the Route MUST be considered detached from the Gateway.

        Support: Extended
    sectionName : str, default is Undefined, optional
        SectionName is the name of a section within the target resource. In the
        following resources, SectionName is interpreted as the following:

        * Gateway: Listener name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.
        * Service: Port name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.

        Implementations MAY choose to support attaching Routes to other resources.
        If that is the case, they MUST clearly document how SectionName is
        interpreted.

        When unspecified (empty string), this will reference the entire resource.
        For the purpose of status, an attachment is considered successful if at
        least one section in the parent resource accepts it. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
        the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route, the
        Route MUST be considered detached from the Gateway.

        Support: Core
    """
    group?: str = "gateway.networking.k8s.io"
    kind?: str = "Gateway"
    name: str

    namespace?: str
    port?: int
    sectionName?: str

    check:
        len(group) <= 253 if group
        _regex_match(str(group), r"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if group
        len(kind) <= 63 if kind
        len(kind) >= 1 if kind
        _regex_match(str(kind), r"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$") if kind
        len(name) <= 253
        len(name) >= 1
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace
        port <= 65535 if port not in [None, Undefined]
        port >= 1 if port not in [None, Undefined]
        len(sectionName) <= 253 if sectionName
        len(sectionName) >= 1 if sectionName
        _regex_match(str(sectionName), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if sectionName

schema GatewayNetworkingK8sIoV1alpha3BackendTLSPolicyStatusAncestorsItems0ConditionsItems0:
    r"""
    Condition contains details for one aspect of the current state of this API Resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        lastTransitionTime is the last time the condition transitioned from one status to another.
        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    message : str, default is Undefined, required
        message is a human readable message indicating details about the transition.
        This may be an empty string.
    observedGeneration : int, default is Undefined, optional
        observedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        reason contains a programmatic identifier indicating the reason for the condition's last transition.
        Producers of specific condition types may define expected values and meanings for this field,
        and whether the values are considered a guaranteed API.
        The value should be a CamelCase string.
        This field may not be empty.
    status : str, default is Undefined, required
        status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        type of condition in CamelCase or in foo.example.com/CamelCase.
    """
    lastTransitionTime: str

    message: str

    observedGeneration?: int
    reason: str

    status: "True" | "False" | "Unknown"

    $type: str

    check:
        len(message) <= 32768
        observedGeneration >= 0 if observedGeneration not in [None, Undefined]
        len(reason) <= 1024
        len(reason) >= 1
        _regex_match(str(reason), r"^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$")
        len($type) <= 316
        _regex_match(str($type), r"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$")

