"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""

import regex
import k8s.apimachinery.pkg.apis.meta.v1

_regex_match = regex.match

schema TCPRoute:
    r"""
    TCPRoute provides a way to route TCP requests. When combined with a Gateway
    listener, it can be used to forward connections on the port specified by the
    listener to a set of backends specified by the TCPRoute.

    Attributes
    ----------
    apiVersion : str, default is "gateway.networking.k8s.io/v1alpha2", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "TCPRoute", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : GatewayNetworkingK8sIoV1alpha2TCPRouteSpec, default is Undefined, required
        spec
    status : GatewayNetworkingK8sIoV1alpha2TCPRouteStatus, default is Undefined, optional
        status
    """
    apiVersion: "gateway.networking.k8s.io/v1alpha2" = "gateway.networking.k8s.io/v1alpha2"

    kind: "TCPRoute" = "TCPRoute"

    metadata?: v1.ObjectMeta
    spec: GatewayNetworkingK8sIoV1alpha2TCPRouteSpec

    status?: GatewayNetworkingK8sIoV1alpha2TCPRouteStatus

schema GatewayNetworkingK8sIoV1alpha2TCPRouteSpec:
    r"""
    Spec defines the desired state of TCPRoute.

    Attributes
    ----------
    parentRefs : [GatewayNetworkingK8sIoV1alpha2TCPRouteSpecParentRefsItems0], default is Undefined, optional
        ParentRefs references the resources (usually Gateways) that a Route wants
        to be attached to. Note that the referenced parent resource needs to
        allow this for the attachment to be complete. For Gateways, that means
        the Gateway needs to allow attachment from Routes of this kind and
        namespace. For Services, that means the Service must either be in the same
        namespace for a "producer" route, or the mesh implementation must support
        and allow "consumer" routes for the referenced Service. ReferenceGrant is
        not applicable for governing ParentRefs to Services - it is not possible to
        create a "producer" route for a Service in a different namespace from the
        Route.

        There are two kinds of parent resources with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        This API may be extended in the future to support additional kinds of parent
        resources.

        ParentRefs must be _distinct_. This means either that:

        * They select different objects.  If this is the case, then parentRef
          entries are distinct. In terms of fields, this means that the
          multi-part key defined by `group`, `kind`, `namespace`, and `name` must
          be unique across all parentRef entries in the Route.
        * They do not select different objects, but for each optional field used,
          each ParentRef that selects the same object must set the same set of
          optional fields to different values. If one ParentRef sets a
          combination of optional fields, all must set the same combination.

        Some examples:

        * If one ParentRef sets `sectionName`, all ParentRefs referencing the
          same object must also set `sectionName`.
        * If one ParentRef sets `port`, all ParentRefs referencing the same
          object must also set `port`.
        * If one ParentRef sets `sectionName` and `port`, all ParentRefs
          referencing the same object must also set `sectionName` and `port`.

        It is possible to separately reference multiple distinct objects that may
        be collapsed by an implementation. For example, some implementations may
        choose to merge compatible Gateway Listeners together. If that is the
        case, the list of routes attached to those resources should also be
        merged.

        Note that for ParentRefs that cross namespace boundaries, there are specific
        rules. Cross-namespace references are only valid if they are explicitly
        allowed by something in the namespace they are referring to. For example,
        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
        generic way to enable other kinds of cross-namespace reference.


        ParentRefs from a Route to a Service in the same namespace are "producer"
        routes, which apply default routing rules to inbound connections from
        any namespace to the Service.

        ParentRefs from a Route to a Service in a different namespace are
        "consumer" routes, and these routing rules are only applied to outbound
        connections originating from the same namespace as the Route, for which
        the intended destination of the connections are a Service targeted as a
        ParentRef of the Route.
    rules : [GatewayNetworkingK8sIoV1alpha2TCPRouteSpecRulesItems0], default is Undefined, required
        Rules are a list of TCP matchers and actions.
    """
    parentRefs?: [GatewayNetworkingK8sIoV1alpha2TCPRouteSpecParentRefsItems0]
    rules: [GatewayNetworkingK8sIoV1alpha2TCPRouteSpecRulesItems0]

    check:
        len(parentRefs) <= 32 if parentRefs
        len(rules) >= 1
        len(rules) <= 16

schema GatewayNetworkingK8sIoV1alpha2TCPRouteSpecParentRefsItems0:
    r"""
    ParentReference identifies an API object (usually a Gateway) that can be considered
    a parent of this resource (usually a route). There are two kinds of parent resources
    with "Core" support:

    * Gateway (Gateway conformance profile)
    * Service (Mesh conformance profile, ClusterIP Services only)

    This API may be extended in the future to support additional kinds of parent
    resources.

    The API object must be valid in the cluster; the Group and Kind must
    be registered in the cluster for this reference to be valid.

    Attributes
    ----------
    group : str, default is "gateway.networking.k8s.io", optional
        Group is the group of the referent.
        When unspecified, "gateway.networking.k8s.io" is inferred.
        To set the core API group (such as for a "Service" kind referent),
        Group must be explicitly set to "" (empty string).

        Support: Core
    kind : str, default is "Gateway", optional
        Kind is kind of the referent.

        There are two kinds of parent resources with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        Support for other resources is Implementation-Specific.
    name : str, default is Undefined, required
        Name is the name of the referent.

        Support: Core
    namespace : str, default is Undefined, optional
        Namespace is the namespace of the referent. When unspecified, this refers
        to the local namespace of the Route.

        Note that there are specific rules for ParentRefs which cross namespace
        boundaries. Cross-namespace references are only valid if they are explicitly
        allowed by something in the namespace they are referring to. For example:
        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
        generic way to enable any other kind of cross-namespace reference.


        ParentRefs from a Route to a Service in the same namespace are "producer"
        routes, which apply default routing rules to inbound connections from
        any namespace to the Service.

        ParentRefs from a Route to a Service in a different namespace are
        "consumer" routes, and these routing rules are only applied to outbound
        connections originating from the same namespace as the Route, for which
        the intended destination of the connections are a Service targeted as a
        ParentRef of the Route.


        Support: Core
    port : int, default is Undefined, optional
        Port is the network port this Route targets. It can be interpreted
        differently based on the type of parent resource.

        When the parent resource is a Gateway, this targets all listeners
        listening on the specified port that also support this kind of Route(and
        select this Route). It's not recommended to set `Port` unless the
        networking behaviors specified in a Route must apply to a specific port
        as opposed to a listener(s) whose port(s) may be changed. When both Port
        and SectionName are specified, the name and port of the selected listener
        must match both specified values.


        When the parent resource is a Service, this targets a specific port in the
        Service spec. When both Port (experimental) and SectionName are specified,
        the name and port of the selected port must match both specified values.


        Implementations MAY choose to support other parent resources.
        Implementations supporting other types of parent resources MUST clearly
        document how/if Port is interpreted.

        For the purpose of status, an attachment is considered successful as
        long as the parent resource accepts it partially. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
        from the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route,
        the Route MUST be considered detached from the Gateway.

        Support: Extended
    sectionName : str, default is Undefined, optional
        SectionName is the name of a section within the target resource. In the
        following resources, SectionName is interpreted as the following:

        * Gateway: Listener name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.
        * Service: Port name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.

        Implementations MAY choose to support attaching Routes to other resources.
        If that is the case, they MUST clearly document how SectionName is
        interpreted.

        When unspecified (empty string), this will reference the entire resource.
        For the purpose of status, an attachment is considered successful if at
        least one section in the parent resource accepts it. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
        the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route, the
        Route MUST be considered detached from the Gateway.

        Support: Core
    """
    group?: str = "gateway.networking.k8s.io"
    kind?: str = "Gateway"
    name: str

    namespace?: str
    port?: int
    sectionName?: str

    check:
        len(group) <= 253 if group
        _regex_match(str(group), r"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if group
        len(kind) <= 63 if kind
        len(kind) >= 1 if kind
        _regex_match(str(kind), r"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$") if kind
        len(name) <= 253
        len(name) >= 1
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace
        port <= 65535 if port not in [None, Undefined]
        port >= 1 if port not in [None, Undefined]
        len(sectionName) <= 253 if sectionName
        len(sectionName) >= 1 if sectionName
        _regex_match(str(sectionName), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if sectionName

schema GatewayNetworkingK8sIoV1alpha2TCPRouteSpecRulesItems0:
    r"""
    TCPRouteRule is the configuration for a given rule.

    Attributes
    ----------
    backendRefs : [GatewayNetworkingK8sIoV1alpha2TCPRouteSpecRulesItems0BackendRefsItems0], default is Undefined, optional
        BackendRefs defines the backend(s) where matching requests should be
        sent. If unspecified or invalid (refers to a nonexistent resource or a
        Service with no endpoints), the underlying implementation MUST actively
        reject connection attempts to this backend. Connection rejections must
        respect weight; if an invalid backend is requested to have 80% of
        connections, then 80% of connections must be rejected instead.

        Support: Core for Kubernetes Service

        Support: Extended for Kubernetes ServiceImport

        Support: Implementation-specific for any other resource

        Support for weight: Extended
    name : str, default is Undefined, optional
        Name is the name of the route rule. This name MUST be unique within a Route if it is set.

        Support: Extended
    """
    backendRefs?: [GatewayNetworkingK8sIoV1alpha2TCPRouteSpecRulesItems0BackendRefsItems0]
    name?: str

    check:
        len(backendRefs) >= 1 if backendRefs
        len(backendRefs) <= 16 if backendRefs
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name

schema GatewayNetworkingK8sIoV1alpha2TCPRouteSpecRulesItems0BackendRefsItems0:
    r"""
    BackendRef defines how a Route should forward a request to a Kubernetes
    resource.

    Note that when a namespace different than the local namespace is specified, a
    ReferenceGrant object is required in the referent namespace to allow that
    namespace's owner to accept the reference. See the ReferenceGrant
    documentation for details.


    When the BackendRef points to a Kubernetes Service, implementations SHOULD
    honor the appProtocol field if it is set for the target Service Port.

    Implementations supporting appProtocol SHOULD recognize the Kubernetes
    Standard Application Protocols defined in KEP-3726.

    If a Service appProtocol isn't specified, an implementation MAY infer the
    backend protocol through its own means. Implementations MAY infer the
    protocol from the Route type referring to the backend Service.

    If a Route is not able to send traffic to the backend using the specified
    protocol then the backend is considered invalid. Implementations MUST set the
    "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.


    Note that when the BackendTLSPolicy object is enabled by the implementation,
    there are some extra rules about validity to consider here. See the fields
    where this struct is used for more information about the exact behavior.

    Attributes
    ----------
    group : str, default is Undefined, optional
        Group is the group of the referent. For example, "gateway.networking.k8s.io".
        When unspecified or empty string, core API group is inferred.
    kind : str, default is "Service", optional
        Kind is the Kubernetes resource kind of the referent. For example
        "Service".

        Defaults to "Service" when not specified.

        ExternalName services can refer to CNAME DNS records that may live
        outside of the cluster and as such are difficult to reason about in
        terms of conformance. They also may not be safe to forward to (see
        CVE-2021-25740 for more information). Implementations SHOULD NOT
        support ExternalName Services.

        Support: Core (Services with a type other than ExternalName)

        Support: Implementation-specific (Services with type ExternalName)
    name : str, default is Undefined, required
        Name is the name of the referent.
    namespace : str, default is Undefined, optional
        Namespace is the namespace of the backend. When unspecified, the local
        namespace is inferred.

        Note that when a namespace different than the local namespace is specified,
        a ReferenceGrant object is required in the referent namespace to allow that
        namespace's owner to accept the reference. See the ReferenceGrant
        documentation for details.

        Support: Core
    port : int, default is Undefined, optional
        Port specifies the destination port number to use for this resource.
        Port is required when the referent is a Kubernetes Service. In this
        case, the port number is the service port number, not the target port.
        For other resources, destination port might be derived from the referent
        resource or this field.
    weight : int, default is 1, optional
        Weight specifies the proportion of requests forwarded to the referenced
        backend. This is computed as weight/(sum of all weights in this
        BackendRefs list). For non-zero values, there may be some epsilon from
        the exact proportion defined here depending on the precision an
        implementation supports. Weight is not a percentage and the sum of
        weights does not need to equal 100.

        If only one backend is specified and it has a weight greater than 0, 100%
        of the traffic is forwarded to that backend. If weight is set to 0, no
        traffic should be forwarded for this entry. If unspecified, weight
        defaults to 1.

        Support for this field varies based on the context where used.
    """
    group?: str = ""
    kind?: str = "Service"
    name: str

    namespace?: str
    port?: int
    weight?: int = 1

    check:
        len(group) <= 253 if group
        _regex_match(str(group), r"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if group
        len(kind) <= 63 if kind
        len(kind) >= 1 if kind
        _regex_match(str(kind), r"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$") if kind
        len(name) <= 253
        len(name) >= 1
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace
        port <= 65535 if port not in [None, Undefined]
        port >= 1 if port not in [None, Undefined]
        weight <= 1000000 if weight not in [None, Undefined]
        weight >= 0 if weight not in [None, Undefined]

schema GatewayNetworkingK8sIoV1alpha2TCPRouteStatus:
    r"""
    Status defines the current state of TCPRoute.

    Attributes
    ----------
    parents : [GatewayNetworkingK8sIoV1alpha2TCPRouteStatusParentsItems0], default is Undefined, required
        Parents is a list of parent resources (usually Gateways) that are
        associated with the route, and the status of the route with respect to
        each parent. When this route attaches to a parent, the controller that
        manages the parent must add an entry to this list when the controller
        first sees the route and should update the entry as appropriate when the
        route or gateway is modified.

        Note that parent references that cannot be resolved by an implementation
        of this API will not be added to this list. Implementations of this API
        can only populate Route status for the Gateways/parent resources they are
        responsible for.

        A maximum of 32 Gateways will be represented in this list. An empty list
        means the route has not been attached to any Gateway.
    """
    parents: [GatewayNetworkingK8sIoV1alpha2TCPRouteStatusParentsItems0]

    check:
        len(parents) <= 32

schema GatewayNetworkingK8sIoV1alpha2TCPRouteStatusParentsItems0:
    r"""
    RouteParentStatus describes the status of a route with respect to an
    associated Parent.

    Attributes
    ----------
    conditions : [GatewayNetworkingK8sIoV1alpha2TCPRouteStatusParentsItems0ConditionsItems0], default is Undefined, optional
        Conditions describes the status of the route with respect to the Gateway.
        Note that the route's availability is also subject to the Gateway's own
        status conditions and listener status.

        If the Route's ParentRef specifies an existing Gateway that supports
        Routes of this kind AND that Gateway's controller has sufficient access,
        then that Gateway's controller MUST set the "Accepted" condition on the
        Route, to indicate whether the route has been accepted or rejected by the
        Gateway, and why.

        A Route MUST be considered "Accepted" if at least one of the Route's
        rules is implemented by the Gateway.

        There are a number of cases where the "Accepted" condition may not be set
        due to lack of controller visibility, that includes when:

        * The Route refers to a nonexistent parent.
        * The Route is of a type that the controller does not support.
        * The Route is in a namespace the controller does not have access to.
    controllerName : str, default is Undefined, required
        ControllerName is a domain/path string that indicates the name of the
        controller that wrote this status. This corresponds with the
        controllerName field on GatewayClass.

        Example: "example.net/gateway-controller".

        The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
        valid Kubernetes names
        (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).

        Controllers MUST populate this field when writing status. Controllers should ensure that
        entries to status populated with their ControllerName are cleaned up when they are no
        longer necessary.
    parentRef : GatewayNetworkingK8sIoV1alpha2TCPRouteStatusParentsItems0ParentRef, default is Undefined, required
        parent ref
    """
    conditions?: [GatewayNetworkingK8sIoV1alpha2TCPRouteStatusParentsItems0ConditionsItems0]
    controllerName: str

    parentRef: GatewayNetworkingK8sIoV1alpha2TCPRouteStatusParentsItems0ParentRef

    check:
        len(conditions) >= 1 if conditions
        len(conditions) <= 8 if conditions
        len(controllerName) <= 253
        len(controllerName) >= 1
        _regex_match(str(controllerName), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\/[A-Za-z0-9\/\-._~%!$&'()*+,;=:]+$")

schema GatewayNetworkingK8sIoV1alpha2TCPRouteStatusParentsItems0ConditionsItems0:
    r"""
    Condition contains details for one aspect of the current state of this API Resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        lastTransitionTime is the last time the condition transitioned from one status to another.
        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    message : str, default is Undefined, required
        message is a human readable message indicating details about the transition.
        This may be an empty string.
    observedGeneration : int, default is Undefined, optional
        observedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        reason contains a programmatic identifier indicating the reason for the condition's last transition.
        Producers of specific condition types may define expected values and meanings for this field,
        and whether the values are considered a guaranteed API.
        The value should be a CamelCase string.
        This field may not be empty.
    status : str, default is Undefined, required
        status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        type of condition in CamelCase or in foo.example.com/CamelCase.
    """
    lastTransitionTime: str

    message: str

    observedGeneration?: int
    reason: str

    status: "True" | "False" | "Unknown"

    $type: str

    check:
        len(message) <= 32768
        observedGeneration >= 0 if observedGeneration not in [None, Undefined]
        len(reason) <= 1024
        len(reason) >= 1
        _regex_match(str(reason), r"^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$")
        len($type) <= 316
        _regex_match(str($type), r"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$")

schema GatewayNetworkingK8sIoV1alpha2TCPRouteStatusParentsItems0ParentRef:
    r"""
    ParentRef corresponds with a ParentRef in the spec that this
    RouteParentStatus struct describes the status of.

    Attributes
    ----------
    group : str, default is "gateway.networking.k8s.io", optional
        Group is the group of the referent.
        When unspecified, "gateway.networking.k8s.io" is inferred.
        To set the core API group (such as for a "Service" kind referent),
        Group must be explicitly set to "" (empty string).

        Support: Core
    kind : str, default is "Gateway", optional
        Kind is kind of the referent.

        There are two kinds of parent resources with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        Support for other resources is Implementation-Specific.
    name : str, default is Undefined, required
        Name is the name of the referent.

        Support: Core
    namespace : str, default is Undefined, optional
        Namespace is the namespace of the referent. When unspecified, this refers
        to the local namespace of the Route.

        Note that there are specific rules for ParentRefs which cross namespace
        boundaries. Cross-namespace references are only valid if they are explicitly
        allowed by something in the namespace they are referring to. For example:
        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
        generic way to enable any other kind of cross-namespace reference.


        ParentRefs from a Route to a Service in the same namespace are "producer"
        routes, which apply default routing rules to inbound connections from
        any namespace to the Service.

        ParentRefs from a Route to a Service in a different namespace are
        "consumer" routes, and these routing rules are only applied to outbound
        connections originating from the same namespace as the Route, for which
        the intended destination of the connections are a Service targeted as a
        ParentRef of the Route.


        Support: Core
    port : int, default is Undefined, optional
        Port is the network port this Route targets. It can be interpreted
        differently based on the type of parent resource.

        When the parent resource is a Gateway, this targets all listeners
        listening on the specified port that also support this kind of Route(and
        select this Route). It's not recommended to set `Port` unless the
        networking behaviors specified in a Route must apply to a specific port
        as opposed to a listener(s) whose port(s) may be changed. When both Port
        and SectionName are specified, the name and port of the selected listener
        must match both specified values.


        When the parent resource is a Service, this targets a specific port in the
        Service spec. When both Port (experimental) and SectionName are specified,
        the name and port of the selected port must match both specified values.


        Implementations MAY choose to support other parent resources.
        Implementations supporting other types of parent resources MUST clearly
        document how/if Port is interpreted.

        For the purpose of status, an attachment is considered successful as
        long as the parent resource accepts it partially. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
        from the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route,
        the Route MUST be considered detached from the Gateway.

        Support: Extended
    sectionName : str, default is Undefined, optional
        SectionName is the name of a section within the target resource. In the
        following resources, SectionName is interpreted as the following:

        * Gateway: Listener name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.
        * Service: Port name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.

        Implementations MAY choose to support attaching Routes to other resources.
        If that is the case, they MUST clearly document how SectionName is
        interpreted.

        When unspecified (empty string), this will reference the entire resource.
        For the purpose of status, an attachment is considered successful if at
        least one section in the parent resource accepts it. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
        the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route, the
        Route MUST be considered detached from the Gateway.

        Support: Core
    """
    group?: str = "gateway.networking.k8s.io"
    kind?: str = "Gateway"
    name: str

    namespace?: str
    port?: int
    sectionName?: str

    check:
        len(group) <= 253 if group
        _regex_match(str(group), r"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if group
        len(kind) <= 63 if kind
        len(kind) >= 1 if kind
        _regex_match(str(kind), r"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$") if kind
        len(name) <= 253
        len(name) >= 1
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace
        port <= 65535 if port not in [None, Undefined]
        port >= 1 if port not in [None, Undefined]
        len(sectionName) <= 253 if sectionName
        len(sectionName) >= 1 if sectionName
        _regex_match(str(sectionName), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if sectionName

