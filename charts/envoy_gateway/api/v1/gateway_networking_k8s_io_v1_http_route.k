"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""

import regex
import k8s.apimachinery.pkg.apis.meta.v1

_regex_match = regex.match

schema HTTPRoute:
    r"""
    HTTPRoute provides a way to route HTTP requests. This includes the capability
    to match requests by hostname, path, header, or query param. Filters can be
    used to specify additional processing steps. Backends specify where matching
    requests should be routed.

    Attributes
    ----------
    apiVersion : str, default is "gateway.networking.k8s.io/v1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "HTTPRoute", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : GatewayNetworkingK8sIoV1HTTPRouteSpec, default is Undefined, required
        spec
    status : GatewayNetworkingK8sIoV1HTTPRouteStatus, default is Undefined, optional
        status
    """
    apiVersion: "gateway.networking.k8s.io/v1" = "gateway.networking.k8s.io/v1"

    kind: "HTTPRoute" = "HTTPRoute"

    metadata?: v1.ObjectMeta
    spec: GatewayNetworkingK8sIoV1HTTPRouteSpec

    status?: GatewayNetworkingK8sIoV1HTTPRouteStatus

schema GatewayNetworkingK8sIoV1HTTPRouteSpec:
    r"""
    Spec defines the desired state of HTTPRoute.

    Attributes
    ----------
    hostnames : [str], default is Undefined, optional
        Hostnames defines a set of hostnames that should match against the HTTP Host
        header to select a HTTPRoute used to process the request. Implementations
        MUST ignore any port value specified in the HTTP Host header while
        performing a match and (absent of any applicable header modification
        configuration) MUST forward this header unmodified to the backend.

        Valid values for Hostnames are determined by RFC 1123 definition of a
        hostname with 2 notable exceptions:

        1. IPs are not allowed.
        2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
           label must appear by itself as the first label.

        If a hostname is specified by both the Listener and HTTPRoute, there
        must be at least one intersecting hostname for the HTTPRoute to be
        attached to the Listener. For example:

        * A Listener with `test.example.com` as the hostname matches HTTPRoutes
          that have either not specified any hostnames, or have specified at
          least one of `test.example.com` or `*.example.com`.
        * A Listener with `*.example.com` as the hostname matches HTTPRoutes
          that have either not specified any hostnames or have specified at least
          one hostname that matches the Listener hostname. For example,
          `*.example.com`, `test.example.com`, and `foo.test.example.com` would
          all match. On the other hand, `example.com` and `test.example.net` would
          not match.

        Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
        as a suffix match. That means that a match for `*.example.com` would match
        both `test.example.com`, and `foo.test.example.com`, but not `example.com`.

        If both the Listener and HTTPRoute have specified hostnames, any
        HTTPRoute hostnames that do not match the Listener hostname MUST be
        ignored. For example, if a Listener specified `*.example.com`, and the
        HTTPRoute specified `test.example.com` and `test.example.net`,
        `test.example.net` must not be considered for a match.

        If both the Listener and HTTPRoute have specified hostnames, and none
        match with the criteria above, then the HTTPRoute is not accepted. The
        implementation must raise an 'Accepted' Condition with a status of
        `False` in the corresponding RouteParentStatus.

        In the event that multiple HTTPRoutes specify intersecting hostnames (e.g.
        overlapping wildcard matching and exact matching hostnames), precedence must
        be given to rules from the HTTPRoute with the largest number of:

        * Characters in a matching non-wildcard hostname.
        * Characters in a matching hostname.

        If ties exist across multiple Routes, the matching precedence rules for
        HTTPRouteMatches takes over.

        Support: Core
    parentRefs : [GatewayNetworkingK8sIoV1HTTPRouteSpecParentRefsItems0], default is Undefined, optional
        ParentRefs references the resources (usually Gateways) that a Route wants
        to be attached to. Note that the referenced parent resource needs to
        allow this for the attachment to be complete. For Gateways, that means
        the Gateway needs to allow attachment from Routes of this kind and
        namespace. For Services, that means the Service must either be in the same
        namespace for a "producer" route, or the mesh implementation must support
        and allow "consumer" routes for the referenced Service. ReferenceGrant is
        not applicable for governing ParentRefs to Services - it is not possible to
        create a "producer" route for a Service in a different namespace from the
        Route.

        There are two kinds of parent resources with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        This API may be extended in the future to support additional kinds of parent
        resources.

        ParentRefs must be _distinct_. This means either that:

        * They select different objects.  If this is the case, then parentRef
          entries are distinct. In terms of fields, this means that the
          multi-part key defined by `group`, `kind`, `namespace`, and `name` must
          be unique across all parentRef entries in the Route.
        * They do not select different objects, but for each optional field used,
          each ParentRef that selects the same object must set the same set of
          optional fields to different values. If one ParentRef sets a
          combination of optional fields, all must set the same combination.

        Some examples:

        * If one ParentRef sets `sectionName`, all ParentRefs referencing the
          same object must also set `sectionName`.
        * If one ParentRef sets `port`, all ParentRefs referencing the same
          object must also set `port`.
        * If one ParentRef sets `sectionName` and `port`, all ParentRefs
          referencing the same object must also set `sectionName` and `port`.

        It is possible to separately reference multiple distinct objects that may
        be collapsed by an implementation. For example, some implementations may
        choose to merge compatible Gateway Listeners together. If that is the
        case, the list of routes attached to those resources should also be
        merged.

        Note that for ParentRefs that cross namespace boundaries, there are specific
        rules. Cross-namespace references are only valid if they are explicitly
        allowed by something in the namespace they are referring to. For example,
        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
        generic way to enable other kinds of cross-namespace reference.


        ParentRefs from a Route to a Service in the same namespace are "producer"
        routes, which apply default routing rules to inbound connections from
        any namespace to the Service.

        ParentRefs from a Route to a Service in a different namespace are
        "consumer" routes, and these routing rules are only applied to outbound
        connections originating from the same namespace as the Route, for which
        the intended destination of the connections are a Service targeted as a
        ParentRef of the Route.
    rules : [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0], default is [{"matches": [{"path": {"type": "PathPrefix", "value": "/"}}]}], optional
        Rules are a list of HTTP matchers, filters and actions.
    """
    hostnames?: [str]
    parentRefs?: [GatewayNetworkingK8sIoV1HTTPRouteSpecParentRefsItems0]
    rules?: [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0] = [{"matches": [{
        "path": {"type": "PathPrefix", "value": "/"}
    }]}]

    check:
        len(hostnames) <= 16 if hostnames
        all hostnames in hostnames {len(hostnames) <= 253 if hostnames not in [None, Undefined]} if hostnames
        all hostnames in hostnames {len(hostnames) >= 1 if hostnames not in [None, Undefined]} if hostnames
        all hostnames in hostnames {_regex_match(str(hostnames), r"^(\*\.)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if hostnames} if hostnames
        len(parentRefs) <= 32 if parentRefs
        len(rules) <= 16 if rules

schema GatewayNetworkingK8sIoV1HTTPRouteSpecParentRefsItems0:
    r"""
    ParentReference identifies an API object (usually a Gateway) that can be considered
    a parent of this resource (usually a route). There are two kinds of parent resources
    with "Core" support:

    * Gateway (Gateway conformance profile)
    * Service (Mesh conformance profile, ClusterIP Services only)

    This API may be extended in the future to support additional kinds of parent
    resources.

    The API object must be valid in the cluster; the Group and Kind must
    be registered in the cluster for this reference to be valid.

    Attributes
    ----------
    group : str, default is "gateway.networking.k8s.io", optional
        Group is the group of the referent.
        When unspecified, "gateway.networking.k8s.io" is inferred.
        To set the core API group (such as for a "Service" kind referent),
        Group must be explicitly set to "" (empty string).

        Support: Core
    kind : str, default is "Gateway", optional
        Kind is kind of the referent.

        There are two kinds of parent resources with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        Support for other resources is Implementation-Specific.
    name : str, default is Undefined, required
        Name is the name of the referent.

        Support: Core
    namespace : str, default is Undefined, optional
        Namespace is the namespace of the referent. When unspecified, this refers
        to the local namespace of the Route.

        Note that there are specific rules for ParentRefs which cross namespace
        boundaries. Cross-namespace references are only valid if they are explicitly
        allowed by something in the namespace they are referring to. For example:
        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
        generic way to enable any other kind of cross-namespace reference.


        ParentRefs from a Route to a Service in the same namespace are "producer"
        routes, which apply default routing rules to inbound connections from
        any namespace to the Service.

        ParentRefs from a Route to a Service in a different namespace are
        "consumer" routes, and these routing rules are only applied to outbound
        connections originating from the same namespace as the Route, for which
        the intended destination of the connections are a Service targeted as a
        ParentRef of the Route.


        Support: Core
    port : int, default is Undefined, optional
        Port is the network port this Route targets. It can be interpreted
        differently based on the type of parent resource.

        When the parent resource is a Gateway, this targets all listeners
        listening on the specified port that also support this kind of Route(and
        select this Route). It's not recommended to set `Port` unless the
        networking behaviors specified in a Route must apply to a specific port
        as opposed to a listener(s) whose port(s) may be changed. When both Port
        and SectionName are specified, the name and port of the selected listener
        must match both specified values.


        When the parent resource is a Service, this targets a specific port in the
        Service spec. When both Port (experimental) and SectionName are specified,
        the name and port of the selected port must match both specified values.


        Implementations MAY choose to support other parent resources.
        Implementations supporting other types of parent resources MUST clearly
        document how/if Port is interpreted.

        For the purpose of status, an attachment is considered successful as
        long as the parent resource accepts it partially. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
        from the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route,
        the Route MUST be considered detached from the Gateway.

        Support: Extended
    sectionName : str, default is Undefined, optional
        SectionName is the name of a section within the target resource. In the
        following resources, SectionName is interpreted as the following:

        * Gateway: Listener name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.
        * Service: Port name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.

        Implementations MAY choose to support attaching Routes to other resources.
        If that is the case, they MUST clearly document how SectionName is
        interpreted.

        When unspecified (empty string), this will reference the entire resource.
        For the purpose of status, an attachment is considered successful if at
        least one section in the parent resource accepts it. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
        the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route, the
        Route MUST be considered detached from the Gateway.

        Support: Core
    """
    group?: str = "gateway.networking.k8s.io"
    kind?: str = "Gateway"
    name: str

    namespace?: str
    port?: int
    sectionName?: str

    check:
        len(group) <= 253 if group
        _regex_match(str(group), r"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if group
        len(kind) <= 63 if kind
        len(kind) >= 1 if kind
        _regex_match(str(kind), r"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$") if kind
        len(name) <= 253
        len(name) >= 1
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace
        port <= 65535 if port not in [None, Undefined]
        port >= 1 if port not in [None, Undefined]
        len(sectionName) <= 253 if sectionName
        len(sectionName) >= 1 if sectionName
        _regex_match(str(sectionName), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if sectionName

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0:
    r"""
    HTTPRouteRule defines semantics for matching an HTTP request based on
    conditions (matches), processing it (filters), and forwarding the request to
    an API object (backendRefs).

    Attributes
    ----------
    backendRefs : [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0], default is Undefined, optional
        BackendRefs defines the backend(s) where matching requests should be
        sent.

        Failure behavior here depends on how many BackendRefs are specified and
        how many are invalid.

        If *all* entries in BackendRefs are invalid, and there are also no filters
        specified in this route rule, *all* traffic which matches this rule MUST
        receive a 500 status code.

        See the HTTPBackendRef definition for the rules about what makes a single
        HTTPBackendRef invalid.

        When a HTTPBackendRef is invalid, 500 status codes MUST be returned for
        requests that would have otherwise been routed to an invalid backend. If
        multiple backends are specified, and some are invalid, the proportion of
        requests that would otherwise have been routed to an invalid backend
        MUST receive a 500 status code.

        For example, if two backends are specified with equal weights, and one is
        invalid, 50 percent of traffic must receive a 500. Implementations may
        choose how that 50 percent is determined.

        When a HTTPBackendRef refers to a Service that has no ready endpoints,
        implementations SHOULD return a 503 for requests to that backend instead.
        If an implementation chooses to do this, all of the above rules for 500 responses
        MUST also apply for responses that return a 503.

        Support: Core for Kubernetes Service

        Support: Extended for Kubernetes ServiceImport

        Support: Implementation-specific for any other resource

        Support for weight: Core
    filters : [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0], default is Undefined, optional
        Filters define the filters that are applied to requests that match
        this rule.

        Wherever possible, implementations SHOULD implement filters in the order
        they are specified.

        Implementations MAY choose to implement this ordering strictly, rejecting
        any combination or order of filters that cannot be supported. If implementations
        choose a strict interpretation of filter ordering, they MUST clearly document
        that behavior.

        To reject an invalid combination or order of filters, implementations SHOULD
        consider the Route Rules with this configuration invalid. If all Route Rules
        in a Route are invalid, the entire Route would be considered invalid. If only
        a portion of Route Rules are invalid, implementations MUST set the
        "PartiallyInvalid" condition for the Route.

        Conformance-levels at this level are defined based on the type of filter:

        - ALL core filters MUST be supported by all implementations.
        - Implementers are encouraged to support extended filters.
        - Implementation-specific custom filters have no API guarantees across
          implementations.

        Specifying the same filter multiple times is not supported unless explicitly
        indicated in the filter.

        All filters are expected to be compatible with each other except for the
        URLRewrite and RequestRedirect filters, which may not be combined. If an
        implementation cannot support other combinations of filters, they must clearly
        document that limitation. In cases where incompatible or unsupported
        filters are specified and cause the `Accepted` condition to be set to status
        `False`, implementations may use the `IncompatibleFilters` reason to specify
        this configuration error.

        Support: Core
    matches : [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0MatchesItems0], default is [{"path": {"value": "/", "type": "PathPrefix"}}], optional
        Matches define conditions used for matching the rule against incoming
        HTTP requests. Each match is independent, i.e. this rule will be matched
        if **any** one of the matches is satisfied.

        For example, take the following matches configuration:

        ```
        matches:
        - path:
            value: "/foo"
          headers:
          - name: "version"
            value: "v2"
        - path:
            value: "/v2/foo"
        ```

        For a request to match against this rule, a request must satisfy
        EITHER of the two conditions:

        - path prefixed with `/foo` AND contains the header `version: v2`
        - path prefix of `/v2/foo`

        See the documentation for HTTPRouteMatch on how to specify multiple
        match conditions that should be ANDed together.

        If no matches are specified, the default is a prefix
        path match on "/", which has the effect of matching every
        HTTP request.

        Proxy or Load Balancer routing configuration generated from HTTPRoutes
        MUST prioritize matches based on the following criteria, continuing on
        ties. Across all rules specified on applicable Routes, precedence must be
        given to the match having:

        * "Exact" path match.
        * "Prefix" path match with largest number of characters.
        * Method match.
        * Largest number of header matches.
        * Largest number of query param matches.

        Note: The precedence of RegularExpression path matches are implementation-specific.

        If ties still exist across multiple Routes, matching precedence MUST be
        determined in order of the following criteria, continuing on ties:

        * The oldest Route based on creation timestamp.
        * The Route appearing first in alphabetical order by
          "{namespace}/{name}".

        If ties still exist within an HTTPRoute, matching precedence MUST be granted
        to the FIRST matching rule (in list order) with a match meeting the above
        criteria.

        When no rules matching a request have been successfully attached to the
        parent a request is coming from, a HTTP 404 status code MUST be returned.
    name : str, default is Undefined, optional
        Name is the name of the route rule. This name MUST be unique within a Route if it is set.

        Support: Extended
    retry : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0Retry, default is Undefined, optional
        retry
    sessionPersistence : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0SessionPersistence, default is Undefined, optional
        session persistence
    timeouts : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0Timeouts, default is Undefined, optional
        timeouts
    """
    backendRefs?: [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0]
    filters?: [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0]
    matches?: [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0MatchesItems0] = [{
        "path": {"type": "PathPrefix", "value": "/"}
    }]
    name?: str
    retry?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0Retry
    sessionPersistence?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0SessionPersistence
    timeouts?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0Timeouts

    check:
        len(backendRefs) <= 16 if backendRefs
        len(filters) <= 16 if filters
        len(matches) <= 64 if matches
        len(name) <= 253 if name
        len(name) >= 1 if name
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if name

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0:
    r"""
    HTTPBackendRef defines how a HTTPRoute forwards a HTTP request.

    Note that when a namespace different than the local namespace is specified, a
    ReferenceGrant object is required in the referent namespace to allow that
    namespace's owner to accept the reference. See the ReferenceGrant
    documentation for details.


    When the BackendRef points to a Kubernetes Service, implementations SHOULD
    honor the appProtocol field if it is set for the target Service Port.

    Implementations supporting appProtocol SHOULD recognize the Kubernetes
    Standard Application Protocols defined in KEP-3726.

    If a Service appProtocol isn't specified, an implementation MAY infer the
    backend protocol through its own means. Implementations MAY infer the
    protocol from the Route type referring to the backend Service.

    If a Route is not able to send traffic to the backend using the specified
    protocol then the backend is considered invalid. Implementations MUST set the
    "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.

    Attributes
    ----------
    filters : [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0], default is Undefined, optional
        Filters defined at this level should be executed if and only if the
        request is being forwarded to the backend defined here.

        Support: Implementation-specific (For broader support of filters, use the
        Filters field in HTTPRouteRule.)
    group : str, default is Undefined, optional
        Group is the group of the referent. For example, "gateway.networking.k8s.io".
        When unspecified or empty string, core API group is inferred.
    kind : str, default is "Service", optional
        Kind is the Kubernetes resource kind of the referent. For example
        "Service".

        Defaults to "Service" when not specified.

        ExternalName services can refer to CNAME DNS records that may live
        outside of the cluster and as such are difficult to reason about in
        terms of conformance. They also may not be safe to forward to (see
        CVE-2021-25740 for more information). Implementations SHOULD NOT
        support ExternalName Services.

        Support: Core (Services with a type other than ExternalName)

        Support: Implementation-specific (Services with type ExternalName)
    name : str, default is Undefined, required
        Name is the name of the referent.
    namespace : str, default is Undefined, optional
        Namespace is the namespace of the backend. When unspecified, the local
        namespace is inferred.

        Note that when a namespace different than the local namespace is specified,
        a ReferenceGrant object is required in the referent namespace to allow that
        namespace's owner to accept the reference. See the ReferenceGrant
        documentation for details.

        Support: Core
    port : int, default is Undefined, optional
        Port specifies the destination port number to use for this resource.
        Port is required when the referent is a Kubernetes Service. In this
        case, the port number is the service port number, not the target port.
        For other resources, destination port might be derived from the referent
        resource or this field.
    weight : int, default is 1, optional
        Weight specifies the proportion of requests forwarded to the referenced
        backend. This is computed as weight/(sum of all weights in this
        BackendRefs list). For non-zero values, there may be some epsilon from
        the exact proportion defined here depending on the precision an
        implementation supports. Weight is not a percentage and the sum of
        weights does not need to equal 100.

        If only one backend is specified and it has a weight greater than 0, 100%
        of the traffic is forwarded to that backend. If weight is set to 0, no
        traffic should be forwarded for this entry. If unspecified, weight
        defaults to 1.

        Support for this field varies based on the context where used.
    """
    filters?: [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0]
    group?: str = ""
    kind?: str = "Service"
    name: str

    namespace?: str
    port?: int
    weight?: int = 1

    check:
        len(filters) <= 16 if filters
        len(group) <= 253 if group
        _regex_match(str(group), r"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if group
        len(kind) <= 63 if kind
        len(kind) >= 1 if kind
        _regex_match(str(kind), r"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$") if kind
        len(name) <= 253
        len(name) >= 1
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace
        port <= 65535 if port not in [None, Undefined]
        port >= 1 if port not in [None, Undefined]
        weight <= 1000000 if weight not in [None, Undefined]
        weight >= 0 if weight not in [None, Undefined]

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0:
    r"""
    HTTPRouteFilter defines processing steps that must be completed during the
    request or response lifecycle. HTTPRouteFilters are meant as an extension
    point to express processing that may be done in Gateway implementations. Some
    examples include request or response modification, implementing
    authentication strategies, rate-limiting, and traffic shaping. API
    guarantee/conformance is defined based on the type of the filter.

    Attributes
    ----------
    cors : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0Cors, default is Undefined, optional
        cors
    extensionRef : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0ExtensionRef, default is Undefined, optional
        extension ref
    requestHeaderModifier : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestHeaderModifier, default is Undefined, optional
        request header modifier
    requestMirror : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestMirror, default is Undefined, optional
        request mirror
    requestRedirect : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestRedirect, default is Undefined, optional
        request redirect
    responseHeaderModifier : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0ResponseHeaderModifier, default is Undefined, optional
        response header modifier
    $type : str, default is Undefined, required
        Type identifies the type of filter to apply. As with other API fields,
        types are classified into three conformance levels:

        - Core: Filter types and their corresponding configuration defined by
          "Support: Core" in this package, e.g. "RequestHeaderModifier". All
          implementations must support core filters.

        - Extended: Filter types and their corresponding configuration defined by
          "Support: Extended" in this package, e.g. "RequestMirror". Implementers
          are encouraged to support extended filters.

        - Implementation-specific: Filters that are defined and supported by
          specific vendors.
          In the future, filters showing convergence in behavior across multiple
          implementations will be considered for inclusion in extended or core
          conformance levels. Filter-specific configuration for such filters
          is specified using the ExtensionRef field. `Type` should be set to
          "ExtensionRef" for custom filters.

        Implementers are encouraged to define custom implementation types to
        extend the core API with implementation-specific behavior.

        If a reference to a custom filter type cannot be resolved, the filter
        MUST NOT be skipped. Instead, requests that would have been processed by
        that filter MUST receive a HTTP error response.

        Note that values may be added to this enum, implementations
        must ensure that unknown values will not cause a crash.

        Unknown values here must result in the implementation setting the
        Accepted Condition for the Route to `status: False`, with a
        Reason of `UnsupportedValue`.
    urlRewrite : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0URLRewrite, default is Undefined, optional
        url rewrite
    """
    cors?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0Cors
    extensionRef?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0ExtensionRef
    requestHeaderModifier?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestHeaderModifier
    requestMirror?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestMirror
    requestRedirect?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestRedirect
    responseHeaderModifier?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0ResponseHeaderModifier
    $type: "RequestHeaderModifier" | "ResponseHeaderModifier" | "RequestMirror" | "RequestRedirect" | "URLRewrite" | "ExtensionRef" | "CORS"

    urlRewrite?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0URLRewrite

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0Cors:
    r"""
    CORS defines a schema for a filter that responds to the
    cross-origin request based on HTTP response header.

    Support: Extended

    Attributes
    ----------
    allowCredentials : bool, default is Undefined, optional
        AllowCredentials indicates whether the actual cross-origin request allows
        to include credentials.

        The only valid value for the `Access-Control-Allow-Credentials` response
        header is true (case-sensitive).

        If the credentials are not allowed in cross-origin requests, the gateway
        will omit the header `Access-Control-Allow-Credentials` entirely rather
        than setting its value to false.

        Support: Extended
    allowHeaders : [str], default is Undefined, optional
        AllowHeaders indicates which HTTP request headers are supported for
        accessing the requested resource.

        Header names are not case sensitive.

        Multiple header names in the value of the `Access-Control-Allow-Headers`
        response header are separated by a comma (",").

        When the `AllowHeaders` field is configured with one or more headers, the
        gateway must return the `Access-Control-Allow-Headers` response header
        which value is present in the `AllowHeaders` field.

        If any header name in the `Access-Control-Request-Headers` request header
        is not included in the list of header names specified by the response
        header `Access-Control-Allow-Headers`, it will present an error on the
        client side.

        If any header name in the `Access-Control-Allow-Headers` response header
        does not recognize by the client, it will also occur an error on the
        client side.

        A wildcard indicates that the requests with all HTTP headers are allowed.
        The `Access-Control-Allow-Headers` response header can only use `*`
        wildcard as value when the `AllowCredentials` field is unspecified.

        When the `AllowCredentials` field is specified and `AllowHeaders` field
        specified with the `*` wildcard, the gateway must specify one or more
        HTTP headers in the value of the `Access-Control-Allow-Headers` response
        header. The value of the header `Access-Control-Allow-Headers` is same as
        the `Access-Control-Request-Headers` header provided by the client. If
        the header `Access-Control-Request-Headers` is not included in the
        request, the gateway will omit the `Access-Control-Allow-Headers`
        response header, instead of specifying the `*` wildcard. A Gateway
        implementation may choose to add implementation-specific default headers.

        Support: Extended
    allowMethods : [str], default is Undefined, optional
        AllowMethods indicates which HTTP methods are supported for accessing the
        requested resource.

        Valid values are any method defined by RFC9110, along with the special
        value `*`, which represents all HTTP methods are allowed.

        Method names are case sensitive, so these values are also case-sensitive.
        (See https://www.rfc-editor.org/rfc/rfc2616#section-5.1.1)

        Multiple method names in the value of the `Access-Control-Allow-Methods`
        response header are separated by a comma (",").

        A CORS-safelisted method is a method that is `GET`, `HEAD`, or `POST`.
        (See https://fetch.spec.whatwg.org/#cors-safelisted-method) The
        CORS-safelisted methods are always allowed, regardless of whether they
        are specified in the `AllowMethods` field.

        When the `AllowMethods` field is configured with one or more methods, the
        gateway must return the `Access-Control-Allow-Methods` response header
        which value is present in the `AllowMethods` field.

        If the HTTP method of the `Access-Control-Request-Method` request header
        is not included in the list of methods specified by the response header
        `Access-Control-Allow-Methods`, it will present an error on the client
        side.

        The `Access-Control-Allow-Methods` response header can only use `*`
        wildcard as value when the `AllowCredentials` field is unspecified.

        When the `AllowCredentials` field is specified and `AllowMethods` field
        specified with the `*` wildcard, the gateway must specify one HTTP method
        in the value of the Access-Control-Allow-Methods response header. The
        value of the header `Access-Control-Allow-Methods` is same as the
        `Access-Control-Request-Method` header provided by the client. If the
        header `Access-Control-Request-Method` is not included in the request,
        the gateway will omit the `Access-Control-Allow-Methods` response header,
        instead of specifying the `*` wildcard. A Gateway implementation may
        choose to add implementation-specific default methods.

        Support: Extended
    allowOrigins : [str], default is Undefined, optional
        AllowOrigins indicates whether the response can be shared with requested
        resource from the given `Origin`.

        The `Origin` consists of a scheme and a host, with an optional port, and
        takes the form `<scheme>://<host>(:<port>)`.

        Valid values for scheme are: `http` and `https`.

        Valid values for port are any integer between 1 and 65535 (the list of
        available TCP/UDP ports). Note that, if not included, port `80` is
        assumed for `http` scheme origins, and port `443` is assumed for `https`
        origins. This may affect origin matching.

        The host part of the origin may contain the wildcard character `*`. These
        wildcard characters behave as follows:

        * `*` is a greedy match to the _left_, including any number of
          DNS labels to the left of its position. This also means that
          `*` will include any number of period `.` characters to the
          left of its position.
        * A wildcard by itself matches all hosts.

        An origin value that includes _only_ the `*` character indicates requests
        from all `Origin`s are allowed.

        When the `AllowOrigins` field is configured with multiple origins, it
        means the server supports clients from multiple origins. If the request
        `Origin` matches the configured allowed origins, the gateway must return
        the given `Origin` and sets value of the header
        `Access-Control-Allow-Origin` same as the `Origin` header provided by the
        client.

        The status code of a successful response to a "preflight" request is
        always an OK status (i.e., 204 or 200).

        If the request `Origin` does not match the configured allowed origins,
        the gateway returns 204/200 response but doesn't set the relevant
        cross-origin response headers. Alternatively, the gateway responds with
        403 status to the "preflight" request is denied, coupled with omitting
        the CORS headers. The cross-origin request fails on the client side.
        Therefore, the client doesn't attempt the actual cross-origin request.

        The `Access-Control-Allow-Origin` response header can only use `*`
        wildcard as value when the `AllowCredentials` field is unspecified.

        When the `AllowCredentials` field is specified and `AllowOrigins` field
        specified with the `*` wildcard, the gateway must return a single origin
        in the value of the `Access-Control-Allow-Origin` response header,
        instead of specifying the `*` wildcard. The value of the header
        `Access-Control-Allow-Origin` is same as the `Origin` header provided by
        the client.

        Support: Extended
    exposeHeaders : [str], default is Undefined, optional
        ExposeHeaders indicates which HTTP response headers can be exposed
        to client-side scripts in response to a cross-origin request.

        A CORS-safelisted response header is an HTTP header in a CORS response
        that it is considered safe to expose to the client scripts.
        The CORS-safelisted response headers include the following headers:
        `Cache-Control`
        `Content-Language`
        `Content-Length`
        `Content-Type`
        `Expires`
        `Last-Modified`
        `Pragma`
        (See https://fetch.spec.whatwg.org/#cors-safelisted-response-header-name)
        The CORS-safelisted response headers are exposed to client by default.

        When an HTTP header name is specified using the `ExposeHeaders` field,
        this additional header will be exposed as part of the response to the
        client.

        Header names are not case sensitive.

        Multiple header names in the value of the `Access-Control-Expose-Headers`
        response header are separated by a comma (",").

        A wildcard indicates that the responses with all HTTP headers are exposed
        to clients. The `Access-Control-Expose-Headers` response header can only
        use `*` wildcard as value when the `AllowCredentials` field is
        unspecified.

        Support: Extended
    maxAge : int, default is 5, optional
        MaxAge indicates the duration (in seconds) for the client to cache the
        results of a "preflight" request.

        The information provided by the `Access-Control-Allow-Methods` and
        `Access-Control-Allow-Headers` response headers can be cached by the
        client until the time specified by `Access-Control-Max-Age` elapses.

        The default value of `Access-Control-Max-Age` response header is 5
        (seconds).
    """
    allowCredentials?: True
    allowHeaders?: [str]
    allowMethods?: [str]
    allowOrigins?: [str]
    exposeHeaders?: [str]
    maxAge?: int = 5

    check:
        len(allowHeaders) <= 64 if allowHeaders
        all allowHeaders in allowHeaders {len(allowHeaders) <= 256 if allowHeaders not in [None, Undefined]} if allowHeaders
        all allowHeaders in allowHeaders {len(allowHeaders) >= 1 if allowHeaders not in [None, Undefined]} if allowHeaders
        all allowHeaders in allowHeaders {_regex_match(str(allowHeaders), r"^[A-Za-z0-9!#$%&'*+\-.^_\x60|~]+$") if allowHeaders} if allowHeaders
        len(allowMethods) <= 9 if allowMethods
        len(allowOrigins) <= 64 if allowOrigins
        all allowOrigins in allowOrigins {len(allowOrigins) <= 253 if allowOrigins not in [None, Undefined]} if allowOrigins
        all allowOrigins in allowOrigins {len(allowOrigins) >= 1 if allowOrigins not in [None, Undefined]} if allowOrigins
        all allowOrigins in allowOrigins {_regex_match(str(allowOrigins), r"^(([^:/?#]+):)(//([^/?#]*))([^?#]*)(\?([^#]*))?(#(.*))?") if allowOrigins} if allowOrigins
        len(exposeHeaders) <= 64 if exposeHeaders
        all exposeHeaders in exposeHeaders {len(exposeHeaders) <= 256 if exposeHeaders not in [None, Undefined]} if exposeHeaders
        all exposeHeaders in exposeHeaders {len(exposeHeaders) >= 1 if exposeHeaders not in [None, Undefined]} if exposeHeaders
        all exposeHeaders in exposeHeaders {_regex_match(str(exposeHeaders), r"^[A-Za-z0-9!#$%&'*+\-.^_\x60|~]+$") if exposeHeaders} if exposeHeaders
        maxAge >= 1 if maxAge not in [None, Undefined]

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0ExtensionRef:
    r"""
    ExtensionRef is an optional, implementation-specific extension to the
    "filter" behavior.  For example, resource "myroutefilter" in group
    "networking.example.net"). ExtensionRef MUST NOT be used for core and
    extended filters.

    This filter can be used multiple times within the same rule.

    Support: Implementation-specific

    Attributes
    ----------
    group : str, default is Undefined, required
        Group is the group of the referent. For example, "gateway.networking.k8s.io".
        When unspecified or empty string, core API group is inferred.
    kind : str, default is Undefined, required
        Kind is kind of the referent. For example "HTTPRoute" or "Service".
    name : str, default is Undefined, required
        Name is the name of the referent.
    """
    group: str

    kind: str

    name: str

    check:
        len(group) <= 253
        _regex_match(str(group), r"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$")
        len(kind) <= 63
        len(kind) >= 1
        _regex_match(str(kind), r"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$")
        len(name) <= 253
        len(name) >= 1

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestHeaderModifier:
    r"""
    RequestHeaderModifier defines a schema for a filter that modifies request
    headers.

    Support: Core

    Attributes
    ----------
    add : [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestHeaderModifierAddItems0], default is Undefined, optional
        Add adds the given header(s) (name, value) to the request
        before the action. It appends to any existing values associated
        with the header name.

        Input:
          GET /foo HTTP/1.1
          my-header: foo

        Config:
          add:
          - name: "my-header"
            value: "bar,baz"

        Output:
          GET /foo HTTP/1.1
          my-header: foo,bar,baz
    remove : [str], default is Undefined, optional
        Remove the given header(s) from the HTTP request before the action. The
        value of Remove is a list of HTTP header names. Note that the header
        names are case-insensitive (see
        https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).

        Input:
          GET /foo HTTP/1.1
          my-header1: foo
          my-header2: bar
          my-header3: baz

        Config:
          remove: ["my-header1", "my-header3"]

        Output:
          GET /foo HTTP/1.1
          my-header2: bar
    set : [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestHeaderModifierSetItems0], default is Undefined, optional
        Set overwrites the request with the given header (name, value)
        before the action.

        Input:
          GET /foo HTTP/1.1
          my-header: foo

        Config:
          set:
          - name: "my-header"
            value: "bar"

        Output:
          GET /foo HTTP/1.1
          my-header: bar
    """
    add?: [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestHeaderModifierAddItems0]
    remove?: [str]
    set?: [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestHeaderModifierSetItems0]

    check:
        len(add) <= 16 if add
        len(remove) <= 16 if remove
        len(set) <= 16 if set

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestHeaderModifierAddItems0:
    r"""
    HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the HTTP Header to be matched. Name matching MUST be
        case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

        If multiple entries specify equivalent header names, the first entry with
        an equivalent name MUST be considered for a match. Subsequent entries
        with an equivalent header name MUST be ignored. Due to the
        case-insensitivity of header names, "foo" and "Foo" are considered
        equivalent.
    value : str, default is Undefined, required
        Value is the value of HTTP Header to be matched.
    """
    name: str

    value: str

    check:
        len(name) <= 256
        len(name) >= 1
        _regex_match(str(name), r"^[A-Za-z0-9!#$%&'*+\-.^_\x60|~]+$")
        len(value) <= 4096
        len(value) >= 1

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestHeaderModifierSetItems0:
    r"""
    HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the HTTP Header to be matched. Name matching MUST be
        case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

        If multiple entries specify equivalent header names, the first entry with
        an equivalent name MUST be considered for a match. Subsequent entries
        with an equivalent header name MUST be ignored. Due to the
        case-insensitivity of header names, "foo" and "Foo" are considered
        equivalent.
    value : str, default is Undefined, required
        Value is the value of HTTP Header to be matched.
    """
    name: str

    value: str

    check:
        len(name) <= 256
        len(name) >= 1
        _regex_match(str(name), r"^[A-Za-z0-9!#$%&'*+\-.^_\x60|~]+$")
        len(value) <= 4096
        len(value) >= 1

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestMirror:
    r"""
    RequestMirror defines a schema for a filter that mirrors requests.
    Requests are sent to the specified destination, but responses from
    that destination are ignored.

    This filter can be used multiple times within the same rule. Note that
    not all implementations will be able to support mirroring to multiple
    backends.

    Support: Extended

    Attributes
    ----------
    backendRef : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestMirrorBackendRef, default is Undefined, required
        backend ref
    fraction : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestMirrorFraction, default is Undefined, optional
        fraction
    percent : int, default is Undefined, optional
        Percent represents the percentage of requests that should be
        mirrored to BackendRef. Its minimum value is 0 (indicating 0% of
        requests) and its maximum value is 100 (indicating 100% of requests).

        Only one of Fraction or Percent may be specified. If neither field
        is specified, 100% of requests will be mirrored.
    """
    backendRef: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestMirrorBackendRef

    fraction?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestMirrorFraction
    percent?: int

    check:
        percent <= 100 if percent not in [None, Undefined]
        percent >= 0 if percent not in [None, Undefined]

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestMirrorBackendRef:
    r"""
    BackendRef references a resource where mirrored requests are sent.

    Mirrored requests must be sent only to a single destination endpoint
    within this BackendRef, irrespective of how many endpoints are present
    within this BackendRef.

    If the referent cannot be found, this BackendRef is invalid and must be
    dropped from the Gateway. The controller must ensure the "ResolvedRefs"
    condition on the Route status is set to `status: False` and not configure
    this backend in the underlying implementation.

    If there is a cross-namespace reference to an *existing* object
    that is not allowed by a ReferenceGrant, the controller must ensure the
    "ResolvedRefs"  condition on the Route is set to `status: False`,
    with the "RefNotPermitted" reason and not configure this backend in the
    underlying implementation.

    In either error case, the Message of the `ResolvedRefs` Condition
    should be used to provide more detail about the problem.

    Support: Extended for Kubernetes Service

    Support: Implementation-specific for any other resource

    Attributes
    ----------
    group : str, default is Undefined, optional
        Group is the group of the referent. For example, "gateway.networking.k8s.io".
        When unspecified or empty string, core API group is inferred.
    kind : str, default is "Service", optional
        Kind is the Kubernetes resource kind of the referent. For example
        "Service".

        Defaults to "Service" when not specified.

        ExternalName services can refer to CNAME DNS records that may live
        outside of the cluster and as such are difficult to reason about in
        terms of conformance. They also may not be safe to forward to (see
        CVE-2021-25740 for more information). Implementations SHOULD NOT
        support ExternalName Services.

        Support: Core (Services with a type other than ExternalName)

        Support: Implementation-specific (Services with type ExternalName)
    name : str, default is Undefined, required
        Name is the name of the referent.
    namespace : str, default is Undefined, optional
        Namespace is the namespace of the backend. When unspecified, the local
        namespace is inferred.

        Note that when a namespace different than the local namespace is specified,
        a ReferenceGrant object is required in the referent namespace to allow that
        namespace's owner to accept the reference. See the ReferenceGrant
        documentation for details.

        Support: Core
    port : int, default is Undefined, optional
        Port specifies the destination port number to use for this resource.
        Port is required when the referent is a Kubernetes Service. In this
        case, the port number is the service port number, not the target port.
        For other resources, destination port might be derived from the referent
        resource or this field.
    """
    group?: str = ""
    kind?: str = "Service"
    name: str

    namespace?: str
    port?: int

    check:
        len(group) <= 253 if group
        _regex_match(str(group), r"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if group
        len(kind) <= 63 if kind
        len(kind) >= 1 if kind
        _regex_match(str(kind), r"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$") if kind
        len(name) <= 253
        len(name) >= 1
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace
        port <= 65535 if port not in [None, Undefined]
        port >= 1 if port not in [None, Undefined]

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestMirrorFraction:
    r"""
    Fraction represents the fraction of requests that should be
    mirrored to BackendRef.

    Only one of Fraction or Percent may be specified. If neither field
    is specified, 100% of requests will be mirrored.

    Attributes
    ----------
    denominator : int, default is 100, optional
        denominator
    numerator : int, default is Undefined, required
        numerator
    """
    denominator?: int = 100
    numerator: int

    check:
        denominator >= 1 if denominator not in [None, Undefined]
        numerator >= 0

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestRedirect:
    r"""
    RequestRedirect defines a schema for a filter that responds to the
    request with an HTTP redirection.

    Support: Core

    Attributes
    ----------
    hostname : str, default is Undefined, optional
        Hostname is the hostname to be used in the value of the `Location`
        header in the response.
        When empty, the hostname in the `Host` header of the request is used.

        Support: Core
    path : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestRedirectPath, default is Undefined, optional
        path
    port : int, default is Undefined, optional
        Port is the port to be used in the value of the `Location`
        header in the response.

        If no port is specified, the redirect port MUST be derived using the
        following rules:

        * If redirect scheme is not-empty, the redirect port MUST be the well-known
          port associated with the redirect scheme. Specifically "http" to port 80
          and "https" to port 443. If the redirect scheme does not have a
          well-known port, the listener port of the Gateway SHOULD be used.
        * If redirect scheme is empty, the redirect port MUST be the Gateway
          Listener port.

        Implementations SHOULD NOT add the port number in the 'Location'
        header in the following cases:

        * A Location header that will use HTTP (whether that is determined via
          the Listener protocol or the Scheme field) _and_ use port 80.
        * A Location header that will use HTTPS (whether that is determined via
          the Listener protocol or the Scheme field) _and_ use port 443.

        Support: Extended
    scheme : str, default is Undefined, optional
        Scheme is the scheme to be used in the value of the `Location` header in
        the response. When empty, the scheme of the request is used.

        Scheme redirects can affect the port of the redirect, for more information,
        refer to the documentation for the port field of this filter.

        Note that values may be added to this enum, implementations
        must ensure that unknown values will not cause a crash.

        Unknown values here must result in the implementation setting the
        Accepted Condition for the Route to `status: False`, with a
        Reason of `UnsupportedValue`.

        Support: Extended
    statusCode : int, default is 302, optional
        StatusCode is the HTTP status code to be used in response.

        Note that values may be added to this enum, implementations
        must ensure that unknown values will not cause a crash.

        Unknown values here must result in the implementation setting the
        Accepted Condition for the Route to `status: False`, with a
        Reason of `UnsupportedValue`.

        Support: Core
    """
    hostname?: str
    path?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestRedirectPath
    port?: int
    scheme?: "http" | "https"
    statusCode?: 301 | 302 = 302

    check:
        len(hostname) <= 253 if hostname
        len(hostname) >= 1 if hostname
        _regex_match(str(hostname), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if hostname
        port <= 65535 if port not in [None, Undefined]
        port >= 1 if port not in [None, Undefined]

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0RequestRedirectPath:
    r"""
    Path defines parameters used to modify the path of the incoming request.
    The modified path is then used to construct the `Location` header. When
    empty, the request path is used as-is.

    Support: Extended

    Attributes
    ----------
    replaceFullPath : str, default is Undefined, optional
        ReplaceFullPath specifies the value with which to replace the full path
        of a request during a rewrite or redirect.
    replacePrefixMatch : str, default is Undefined, optional
        ReplacePrefixMatch specifies the value with which to replace the prefix
        match of a request during a rewrite or redirect. For example, a request
        to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
        of "/xyz" would be modified to "/xyz/bar".

        Note that this matches the behavior of the PathPrefix match type. This
        matches full path elements. A path element refers to the list of labels
        in the path split by the `/` separator. When specified, a trailing `/` is
        ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
        match the prefix `/abc`, but the path `/abcd` would not.

        ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
        Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
        the implementation setting the Accepted Condition for the Route to `status: False`.

        Request Path | Prefix Match | Replace Prefix | Modified Path
    $type : str, default is Undefined, required
        Type defines the type of path modifier. Additional types may be
        added in a future release of the API.

        Note that values may be added to this enum, implementations
        must ensure that unknown values will not cause a crash.

        Unknown values here must result in the implementation setting the
        Accepted Condition for the Route to `status: False`, with a
        Reason of `UnsupportedValue`.
    """
    replaceFullPath?: str
    replacePrefixMatch?: str
    $type: "ReplaceFullPath" | "ReplacePrefixMatch"

    check:
        len(replaceFullPath) <= 1024 if replaceFullPath
        len(replacePrefixMatch) <= 1024 if replacePrefixMatch

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0ResponseHeaderModifier:
    r"""
    ResponseHeaderModifier defines a schema for a filter that modifies response
    headers.

    Support: Extended

    Attributes
    ----------
    add : [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0ResponseHeaderModifierAddItems0], default is Undefined, optional
        Add adds the given header(s) (name, value) to the request
        before the action. It appends to any existing values associated
        with the header name.

        Input:
          GET /foo HTTP/1.1
          my-header: foo

        Config:
          add:
          - name: "my-header"
            value: "bar,baz"

        Output:
          GET /foo HTTP/1.1
          my-header: foo,bar,baz
    remove : [str], default is Undefined, optional
        Remove the given header(s) from the HTTP request before the action. The
        value of Remove is a list of HTTP header names. Note that the header
        names are case-insensitive (see
        https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).

        Input:
          GET /foo HTTP/1.1
          my-header1: foo
          my-header2: bar
          my-header3: baz

        Config:
          remove: ["my-header1", "my-header3"]

        Output:
          GET /foo HTTP/1.1
          my-header2: bar
    set : [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0ResponseHeaderModifierSetItems0], default is Undefined, optional
        Set overwrites the request with the given header (name, value)
        before the action.

        Input:
          GET /foo HTTP/1.1
          my-header: foo

        Config:
          set:
          - name: "my-header"
            value: "bar"

        Output:
          GET /foo HTTP/1.1
          my-header: bar
    """
    add?: [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0ResponseHeaderModifierAddItems0]
    remove?: [str]
    set?: [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0ResponseHeaderModifierSetItems0]

    check:
        len(add) <= 16 if add
        len(remove) <= 16 if remove
        len(set) <= 16 if set

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0ResponseHeaderModifierAddItems0:
    r"""
    HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the HTTP Header to be matched. Name matching MUST be
        case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

        If multiple entries specify equivalent header names, the first entry with
        an equivalent name MUST be considered for a match. Subsequent entries
        with an equivalent header name MUST be ignored. Due to the
        case-insensitivity of header names, "foo" and "Foo" are considered
        equivalent.
    value : str, default is Undefined, required
        Value is the value of HTTP Header to be matched.
    """
    name: str

    value: str

    check:
        len(name) <= 256
        len(name) >= 1
        _regex_match(str(name), r"^[A-Za-z0-9!#$%&'*+\-.^_\x60|~]+$")
        len(value) <= 4096
        len(value) >= 1

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0ResponseHeaderModifierSetItems0:
    r"""
    HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the HTTP Header to be matched. Name matching MUST be
        case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

        If multiple entries specify equivalent header names, the first entry with
        an equivalent name MUST be considered for a match. Subsequent entries
        with an equivalent header name MUST be ignored. Due to the
        case-insensitivity of header names, "foo" and "Foo" are considered
        equivalent.
    value : str, default is Undefined, required
        Value is the value of HTTP Header to be matched.
    """
    name: str

    value: str

    check:
        len(name) <= 256
        len(name) >= 1
        _regex_match(str(name), r"^[A-Za-z0-9!#$%&'*+\-.^_\x60|~]+$")
        len(value) <= 4096
        len(value) >= 1

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0URLRewrite:
    r"""
    URLRewrite defines a schema for a filter that modifies a request during forwarding.

    Support: Extended

    Attributes
    ----------
    hostname : str, default is Undefined, optional
        Hostname is the value to be used to replace the Host header value during
        forwarding.

        Support: Extended
    path : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0URLRewritePath, default is Undefined, optional
        path
    """
    hostname?: str
    path?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0URLRewritePath

    check:
        len(hostname) <= 253 if hostname
        len(hostname) >= 1 if hostname
        _regex_match(str(hostname), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if hostname

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0BackendRefsItems0FiltersItems0URLRewritePath:
    r"""
    Path defines a path rewrite.

    Support: Extended

    Attributes
    ----------
    replaceFullPath : str, default is Undefined, optional
        ReplaceFullPath specifies the value with which to replace the full path
        of a request during a rewrite or redirect.
    replacePrefixMatch : str, default is Undefined, optional
        ReplacePrefixMatch specifies the value with which to replace the prefix
        match of a request during a rewrite or redirect. For example, a request
        to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
        of "/xyz" would be modified to "/xyz/bar".

        Note that this matches the behavior of the PathPrefix match type. This
        matches full path elements. A path element refers to the list of labels
        in the path split by the `/` separator. When specified, a trailing `/` is
        ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
        match the prefix `/abc`, but the path `/abcd` would not.

        ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
        Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
        the implementation setting the Accepted Condition for the Route to `status: False`.

        Request Path | Prefix Match | Replace Prefix | Modified Path
    $type : str, default is Undefined, required
        Type defines the type of path modifier. Additional types may be
        added in a future release of the API.

        Note that values may be added to this enum, implementations
        must ensure that unknown values will not cause a crash.

        Unknown values here must result in the implementation setting the
        Accepted Condition for the Route to `status: False`, with a
        Reason of `UnsupportedValue`.
    """
    replaceFullPath?: str
    replacePrefixMatch?: str
    $type: "ReplaceFullPath" | "ReplacePrefixMatch"

    check:
        len(replaceFullPath) <= 1024 if replaceFullPath
        len(replacePrefixMatch) <= 1024 if replacePrefixMatch

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0:
    r"""
    HTTPRouteFilter defines processing steps that must be completed during the
    request or response lifecycle. HTTPRouteFilters are meant as an extension
    point to express processing that may be done in Gateway implementations. Some
    examples include request or response modification, implementing
    authentication strategies, rate-limiting, and traffic shaping. API
    guarantee/conformance is defined based on the type of the filter.

    Attributes
    ----------
    cors : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0Cors, default is Undefined, optional
        cors
    extensionRef : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0ExtensionRef, default is Undefined, optional
        extension ref
    requestHeaderModifier : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestHeaderModifier, default is Undefined, optional
        request header modifier
    requestMirror : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestMirror, default is Undefined, optional
        request mirror
    requestRedirect : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestRedirect, default is Undefined, optional
        request redirect
    responseHeaderModifier : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0ResponseHeaderModifier, default is Undefined, optional
        response header modifier
    $type : str, default is Undefined, required
        Type identifies the type of filter to apply. As with other API fields,
        types are classified into three conformance levels:

        - Core: Filter types and their corresponding configuration defined by
          "Support: Core" in this package, e.g. "RequestHeaderModifier". All
          implementations must support core filters.

        - Extended: Filter types and their corresponding configuration defined by
          "Support: Extended" in this package, e.g. "RequestMirror". Implementers
          are encouraged to support extended filters.

        - Implementation-specific: Filters that are defined and supported by
          specific vendors.
          In the future, filters showing convergence in behavior across multiple
          implementations will be considered for inclusion in extended or core
          conformance levels. Filter-specific configuration for such filters
          is specified using the ExtensionRef field. `Type` should be set to
          "ExtensionRef" for custom filters.

        Implementers are encouraged to define custom implementation types to
        extend the core API with implementation-specific behavior.

        If a reference to a custom filter type cannot be resolved, the filter
        MUST NOT be skipped. Instead, requests that would have been processed by
        that filter MUST receive a HTTP error response.

        Note that values may be added to this enum, implementations
        must ensure that unknown values will not cause a crash.

        Unknown values here must result in the implementation setting the
        Accepted Condition for the Route to `status: False`, with a
        Reason of `UnsupportedValue`.
    urlRewrite : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0URLRewrite, default is Undefined, optional
        url rewrite
    """
    cors?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0Cors
    extensionRef?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0ExtensionRef
    requestHeaderModifier?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestHeaderModifier
    requestMirror?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestMirror
    requestRedirect?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestRedirect
    responseHeaderModifier?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0ResponseHeaderModifier
    $type: "RequestHeaderModifier" | "ResponseHeaderModifier" | "RequestMirror" | "RequestRedirect" | "URLRewrite" | "ExtensionRef" | "CORS"

    urlRewrite?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0URLRewrite

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0Cors:
    r"""
    CORS defines a schema for a filter that responds to the
    cross-origin request based on HTTP response header.

    Support: Extended

    Attributes
    ----------
    allowCredentials : bool, default is Undefined, optional
        AllowCredentials indicates whether the actual cross-origin request allows
        to include credentials.

        The only valid value for the `Access-Control-Allow-Credentials` response
        header is true (case-sensitive).

        If the credentials are not allowed in cross-origin requests, the gateway
        will omit the header `Access-Control-Allow-Credentials` entirely rather
        than setting its value to false.

        Support: Extended
    allowHeaders : [str], default is Undefined, optional
        AllowHeaders indicates which HTTP request headers are supported for
        accessing the requested resource.

        Header names are not case sensitive.

        Multiple header names in the value of the `Access-Control-Allow-Headers`
        response header are separated by a comma (",").

        When the `AllowHeaders` field is configured with one or more headers, the
        gateway must return the `Access-Control-Allow-Headers` response header
        which value is present in the `AllowHeaders` field.

        If any header name in the `Access-Control-Request-Headers` request header
        is not included in the list of header names specified by the response
        header `Access-Control-Allow-Headers`, it will present an error on the
        client side.

        If any header name in the `Access-Control-Allow-Headers` response header
        does not recognize by the client, it will also occur an error on the
        client side.

        A wildcard indicates that the requests with all HTTP headers are allowed.
        The `Access-Control-Allow-Headers` response header can only use `*`
        wildcard as value when the `AllowCredentials` field is unspecified.

        When the `AllowCredentials` field is specified and `AllowHeaders` field
        specified with the `*` wildcard, the gateway must specify one or more
        HTTP headers in the value of the `Access-Control-Allow-Headers` response
        header. The value of the header `Access-Control-Allow-Headers` is same as
        the `Access-Control-Request-Headers` header provided by the client. If
        the header `Access-Control-Request-Headers` is not included in the
        request, the gateway will omit the `Access-Control-Allow-Headers`
        response header, instead of specifying the `*` wildcard. A Gateway
        implementation may choose to add implementation-specific default headers.

        Support: Extended
    allowMethods : [str], default is Undefined, optional
        AllowMethods indicates which HTTP methods are supported for accessing the
        requested resource.

        Valid values are any method defined by RFC9110, along with the special
        value `*`, which represents all HTTP methods are allowed.

        Method names are case sensitive, so these values are also case-sensitive.
        (See https://www.rfc-editor.org/rfc/rfc2616#section-5.1.1)

        Multiple method names in the value of the `Access-Control-Allow-Methods`
        response header are separated by a comma (",").

        A CORS-safelisted method is a method that is `GET`, `HEAD`, or `POST`.
        (See https://fetch.spec.whatwg.org/#cors-safelisted-method) The
        CORS-safelisted methods are always allowed, regardless of whether they
        are specified in the `AllowMethods` field.

        When the `AllowMethods` field is configured with one or more methods, the
        gateway must return the `Access-Control-Allow-Methods` response header
        which value is present in the `AllowMethods` field.

        If the HTTP method of the `Access-Control-Request-Method` request header
        is not included in the list of methods specified by the response header
        `Access-Control-Allow-Methods`, it will present an error on the client
        side.

        The `Access-Control-Allow-Methods` response header can only use `*`
        wildcard as value when the `AllowCredentials` field is unspecified.

        When the `AllowCredentials` field is specified and `AllowMethods` field
        specified with the `*` wildcard, the gateway must specify one HTTP method
        in the value of the Access-Control-Allow-Methods response header. The
        value of the header `Access-Control-Allow-Methods` is same as the
        `Access-Control-Request-Method` header provided by the client. If the
        header `Access-Control-Request-Method` is not included in the request,
        the gateway will omit the `Access-Control-Allow-Methods` response header,
        instead of specifying the `*` wildcard. A Gateway implementation may
        choose to add implementation-specific default methods.

        Support: Extended
    allowOrigins : [str], default is Undefined, optional
        AllowOrigins indicates whether the response can be shared with requested
        resource from the given `Origin`.

        The `Origin` consists of a scheme and a host, with an optional port, and
        takes the form `<scheme>://<host>(:<port>)`.

        Valid values for scheme are: `http` and `https`.

        Valid values for port are any integer between 1 and 65535 (the list of
        available TCP/UDP ports). Note that, if not included, port `80` is
        assumed for `http` scheme origins, and port `443` is assumed for `https`
        origins. This may affect origin matching.

        The host part of the origin may contain the wildcard character `*`. These
        wildcard characters behave as follows:

        * `*` is a greedy match to the _left_, including any number of
          DNS labels to the left of its position. This also means that
          `*` will include any number of period `.` characters to the
          left of its position.
        * A wildcard by itself matches all hosts.

        An origin value that includes _only_ the `*` character indicates requests
        from all `Origin`s are allowed.

        When the `AllowOrigins` field is configured with multiple origins, it
        means the server supports clients from multiple origins. If the request
        `Origin` matches the configured allowed origins, the gateway must return
        the given `Origin` and sets value of the header
        `Access-Control-Allow-Origin` same as the `Origin` header provided by the
        client.

        The status code of a successful response to a "preflight" request is
        always an OK status (i.e., 204 or 200).

        If the request `Origin` does not match the configured allowed origins,
        the gateway returns 204/200 response but doesn't set the relevant
        cross-origin response headers. Alternatively, the gateway responds with
        403 status to the "preflight" request is denied, coupled with omitting
        the CORS headers. The cross-origin request fails on the client side.
        Therefore, the client doesn't attempt the actual cross-origin request.

        The `Access-Control-Allow-Origin` response header can only use `*`
        wildcard as value when the `AllowCredentials` field is unspecified.

        When the `AllowCredentials` field is specified and `AllowOrigins` field
        specified with the `*` wildcard, the gateway must return a single origin
        in the value of the `Access-Control-Allow-Origin` response header,
        instead of specifying the `*` wildcard. The value of the header
        `Access-Control-Allow-Origin` is same as the `Origin` header provided by
        the client.

        Support: Extended
    exposeHeaders : [str], default is Undefined, optional
        ExposeHeaders indicates which HTTP response headers can be exposed
        to client-side scripts in response to a cross-origin request.

        A CORS-safelisted response header is an HTTP header in a CORS response
        that it is considered safe to expose to the client scripts.
        The CORS-safelisted response headers include the following headers:
        `Cache-Control`
        `Content-Language`
        `Content-Length`
        `Content-Type`
        `Expires`
        `Last-Modified`
        `Pragma`
        (See https://fetch.spec.whatwg.org/#cors-safelisted-response-header-name)
        The CORS-safelisted response headers are exposed to client by default.

        When an HTTP header name is specified using the `ExposeHeaders` field,
        this additional header will be exposed as part of the response to the
        client.

        Header names are not case sensitive.

        Multiple header names in the value of the `Access-Control-Expose-Headers`
        response header are separated by a comma (",").

        A wildcard indicates that the responses with all HTTP headers are exposed
        to clients. The `Access-Control-Expose-Headers` response header can only
        use `*` wildcard as value when the `AllowCredentials` field is
        unspecified.

        Support: Extended
    maxAge : int, default is 5, optional
        MaxAge indicates the duration (in seconds) for the client to cache the
        results of a "preflight" request.

        The information provided by the `Access-Control-Allow-Methods` and
        `Access-Control-Allow-Headers` response headers can be cached by the
        client until the time specified by `Access-Control-Max-Age` elapses.

        The default value of `Access-Control-Max-Age` response header is 5
        (seconds).
    """
    allowCredentials?: True
    allowHeaders?: [str]
    allowMethods?: [str]
    allowOrigins?: [str]
    exposeHeaders?: [str]
    maxAge?: int = 5

    check:
        len(allowHeaders) <= 64 if allowHeaders
        all allowHeaders in allowHeaders {len(allowHeaders) <= 256 if allowHeaders not in [None, Undefined]} if allowHeaders
        all allowHeaders in allowHeaders {len(allowHeaders) >= 1 if allowHeaders not in [None, Undefined]} if allowHeaders
        all allowHeaders in allowHeaders {_regex_match(str(allowHeaders), r"^[A-Za-z0-9!#$%&'*+\-.^_\x60|~]+$") if allowHeaders} if allowHeaders
        len(allowMethods) <= 9 if allowMethods
        len(allowOrigins) <= 64 if allowOrigins
        all allowOrigins in allowOrigins {len(allowOrigins) <= 253 if allowOrigins not in [None, Undefined]} if allowOrigins
        all allowOrigins in allowOrigins {len(allowOrigins) >= 1 if allowOrigins not in [None, Undefined]} if allowOrigins
        all allowOrigins in allowOrigins {_regex_match(str(allowOrigins), r"^(([^:/?#]+):)(//([^/?#]*))([^?#]*)(\?([^#]*))?(#(.*))?") if allowOrigins} if allowOrigins
        len(exposeHeaders) <= 64 if exposeHeaders
        all exposeHeaders in exposeHeaders {len(exposeHeaders) <= 256 if exposeHeaders not in [None, Undefined]} if exposeHeaders
        all exposeHeaders in exposeHeaders {len(exposeHeaders) >= 1 if exposeHeaders not in [None, Undefined]} if exposeHeaders
        all exposeHeaders in exposeHeaders {_regex_match(str(exposeHeaders), r"^[A-Za-z0-9!#$%&'*+\-.^_\x60|~]+$") if exposeHeaders} if exposeHeaders
        maxAge >= 1 if maxAge not in [None, Undefined]

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0ExtensionRef:
    r"""
    ExtensionRef is an optional, implementation-specific extension to the
    "filter" behavior.  For example, resource "myroutefilter" in group
    "networking.example.net"). ExtensionRef MUST NOT be used for core and
    extended filters.

    This filter can be used multiple times within the same rule.

    Support: Implementation-specific

    Attributes
    ----------
    group : str, default is Undefined, required
        Group is the group of the referent. For example, "gateway.networking.k8s.io".
        When unspecified or empty string, core API group is inferred.
    kind : str, default is Undefined, required
        Kind is kind of the referent. For example "HTTPRoute" or "Service".
    name : str, default is Undefined, required
        Name is the name of the referent.
    """
    group: str

    kind: str

    name: str

    check:
        len(group) <= 253
        _regex_match(str(group), r"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$")
        len(kind) <= 63
        len(kind) >= 1
        _regex_match(str(kind), r"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$")
        len(name) <= 253
        len(name) >= 1

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestHeaderModifier:
    r"""
    RequestHeaderModifier defines a schema for a filter that modifies request
    headers.

    Support: Core

    Attributes
    ----------
    add : [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestHeaderModifierAddItems0], default is Undefined, optional
        Add adds the given header(s) (name, value) to the request
        before the action. It appends to any existing values associated
        with the header name.

        Input:
          GET /foo HTTP/1.1
          my-header: foo

        Config:
          add:
          - name: "my-header"
            value: "bar,baz"

        Output:
          GET /foo HTTP/1.1
          my-header: foo,bar,baz
    remove : [str], default is Undefined, optional
        Remove the given header(s) from the HTTP request before the action. The
        value of Remove is a list of HTTP header names. Note that the header
        names are case-insensitive (see
        https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).

        Input:
          GET /foo HTTP/1.1
          my-header1: foo
          my-header2: bar
          my-header3: baz

        Config:
          remove: ["my-header1", "my-header3"]

        Output:
          GET /foo HTTP/1.1
          my-header2: bar
    set : [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestHeaderModifierSetItems0], default is Undefined, optional
        Set overwrites the request with the given header (name, value)
        before the action.

        Input:
          GET /foo HTTP/1.1
          my-header: foo

        Config:
          set:
          - name: "my-header"
            value: "bar"

        Output:
          GET /foo HTTP/1.1
          my-header: bar
    """
    add?: [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestHeaderModifierAddItems0]
    remove?: [str]
    set?: [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestHeaderModifierSetItems0]

    check:
        len(add) <= 16 if add
        len(remove) <= 16 if remove
        len(set) <= 16 if set

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestHeaderModifierAddItems0:
    r"""
    HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the HTTP Header to be matched. Name matching MUST be
        case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

        If multiple entries specify equivalent header names, the first entry with
        an equivalent name MUST be considered for a match. Subsequent entries
        with an equivalent header name MUST be ignored. Due to the
        case-insensitivity of header names, "foo" and "Foo" are considered
        equivalent.
    value : str, default is Undefined, required
        Value is the value of HTTP Header to be matched.
    """
    name: str

    value: str

    check:
        len(name) <= 256
        len(name) >= 1
        _regex_match(str(name), r"^[A-Za-z0-9!#$%&'*+\-.^_\x60|~]+$")
        len(value) <= 4096
        len(value) >= 1

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestHeaderModifierSetItems0:
    r"""
    HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the HTTP Header to be matched. Name matching MUST be
        case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

        If multiple entries specify equivalent header names, the first entry with
        an equivalent name MUST be considered for a match. Subsequent entries
        with an equivalent header name MUST be ignored. Due to the
        case-insensitivity of header names, "foo" and "Foo" are considered
        equivalent.
    value : str, default is Undefined, required
        Value is the value of HTTP Header to be matched.
    """
    name: str

    value: str

    check:
        len(name) <= 256
        len(name) >= 1
        _regex_match(str(name), r"^[A-Za-z0-9!#$%&'*+\-.^_\x60|~]+$")
        len(value) <= 4096
        len(value) >= 1

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestMirror:
    r"""
    RequestMirror defines a schema for a filter that mirrors requests.
    Requests are sent to the specified destination, but responses from
    that destination are ignored.

    This filter can be used multiple times within the same rule. Note that
    not all implementations will be able to support mirroring to multiple
    backends.

    Support: Extended

    Attributes
    ----------
    backendRef : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestMirrorBackendRef, default is Undefined, required
        backend ref
    fraction : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestMirrorFraction, default is Undefined, optional
        fraction
    percent : int, default is Undefined, optional
        Percent represents the percentage of requests that should be
        mirrored to BackendRef. Its minimum value is 0 (indicating 0% of
        requests) and its maximum value is 100 (indicating 100% of requests).

        Only one of Fraction or Percent may be specified. If neither field
        is specified, 100% of requests will be mirrored.
    """
    backendRef: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestMirrorBackendRef

    fraction?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestMirrorFraction
    percent?: int

    check:
        percent <= 100 if percent not in [None, Undefined]
        percent >= 0 if percent not in [None, Undefined]

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestMirrorBackendRef:
    r"""
    BackendRef references a resource where mirrored requests are sent.

    Mirrored requests must be sent only to a single destination endpoint
    within this BackendRef, irrespective of how many endpoints are present
    within this BackendRef.

    If the referent cannot be found, this BackendRef is invalid and must be
    dropped from the Gateway. The controller must ensure the "ResolvedRefs"
    condition on the Route status is set to `status: False` and not configure
    this backend in the underlying implementation.

    If there is a cross-namespace reference to an *existing* object
    that is not allowed by a ReferenceGrant, the controller must ensure the
    "ResolvedRefs"  condition on the Route is set to `status: False`,
    with the "RefNotPermitted" reason and not configure this backend in the
    underlying implementation.

    In either error case, the Message of the `ResolvedRefs` Condition
    should be used to provide more detail about the problem.

    Support: Extended for Kubernetes Service

    Support: Implementation-specific for any other resource

    Attributes
    ----------
    group : str, default is Undefined, optional
        Group is the group of the referent. For example, "gateway.networking.k8s.io".
        When unspecified or empty string, core API group is inferred.
    kind : str, default is "Service", optional
        Kind is the Kubernetes resource kind of the referent. For example
        "Service".

        Defaults to "Service" when not specified.

        ExternalName services can refer to CNAME DNS records that may live
        outside of the cluster and as such are difficult to reason about in
        terms of conformance. They also may not be safe to forward to (see
        CVE-2021-25740 for more information). Implementations SHOULD NOT
        support ExternalName Services.

        Support: Core (Services with a type other than ExternalName)

        Support: Implementation-specific (Services with type ExternalName)
    name : str, default is Undefined, required
        Name is the name of the referent.
    namespace : str, default is Undefined, optional
        Namespace is the namespace of the backend. When unspecified, the local
        namespace is inferred.

        Note that when a namespace different than the local namespace is specified,
        a ReferenceGrant object is required in the referent namespace to allow that
        namespace's owner to accept the reference. See the ReferenceGrant
        documentation for details.

        Support: Core
    port : int, default is Undefined, optional
        Port specifies the destination port number to use for this resource.
        Port is required when the referent is a Kubernetes Service. In this
        case, the port number is the service port number, not the target port.
        For other resources, destination port might be derived from the referent
        resource or this field.
    """
    group?: str = ""
    kind?: str = "Service"
    name: str

    namespace?: str
    port?: int

    check:
        len(group) <= 253 if group
        _regex_match(str(group), r"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if group
        len(kind) <= 63 if kind
        len(kind) >= 1 if kind
        _regex_match(str(kind), r"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$") if kind
        len(name) <= 253
        len(name) >= 1
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace
        port <= 65535 if port not in [None, Undefined]
        port >= 1 if port not in [None, Undefined]

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestMirrorFraction:
    r"""
    Fraction represents the fraction of requests that should be
    mirrored to BackendRef.

    Only one of Fraction or Percent may be specified. If neither field
    is specified, 100% of requests will be mirrored.

    Attributes
    ----------
    denominator : int, default is 100, optional
        denominator
    numerator : int, default is Undefined, required
        numerator
    """
    denominator?: int = 100
    numerator: int

    check:
        denominator >= 1 if denominator not in [None, Undefined]
        numerator >= 0

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestRedirect:
    r"""
    RequestRedirect defines a schema for a filter that responds to the
    request with an HTTP redirection.

    Support: Core

    Attributes
    ----------
    hostname : str, default is Undefined, optional
        Hostname is the hostname to be used in the value of the `Location`
        header in the response.
        When empty, the hostname in the `Host` header of the request is used.

        Support: Core
    path : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestRedirectPath, default is Undefined, optional
        path
    port : int, default is Undefined, optional
        Port is the port to be used in the value of the `Location`
        header in the response.

        If no port is specified, the redirect port MUST be derived using the
        following rules:

        * If redirect scheme is not-empty, the redirect port MUST be the well-known
          port associated with the redirect scheme. Specifically "http" to port 80
          and "https" to port 443. If the redirect scheme does not have a
          well-known port, the listener port of the Gateway SHOULD be used.
        * If redirect scheme is empty, the redirect port MUST be the Gateway
          Listener port.

        Implementations SHOULD NOT add the port number in the 'Location'
        header in the following cases:

        * A Location header that will use HTTP (whether that is determined via
          the Listener protocol or the Scheme field) _and_ use port 80.
        * A Location header that will use HTTPS (whether that is determined via
          the Listener protocol or the Scheme field) _and_ use port 443.

        Support: Extended
    scheme : str, default is Undefined, optional
        Scheme is the scheme to be used in the value of the `Location` header in
        the response. When empty, the scheme of the request is used.

        Scheme redirects can affect the port of the redirect, for more information,
        refer to the documentation for the port field of this filter.

        Note that values may be added to this enum, implementations
        must ensure that unknown values will not cause a crash.

        Unknown values here must result in the implementation setting the
        Accepted Condition for the Route to `status: False`, with a
        Reason of `UnsupportedValue`.

        Support: Extended
    statusCode : int, default is 302, optional
        StatusCode is the HTTP status code to be used in response.

        Note that values may be added to this enum, implementations
        must ensure that unknown values will not cause a crash.

        Unknown values here must result in the implementation setting the
        Accepted Condition for the Route to `status: False`, with a
        Reason of `UnsupportedValue`.

        Support: Core
    """
    hostname?: str
    path?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestRedirectPath
    port?: int
    scheme?: "http" | "https"
    statusCode?: 301 | 302 = 302

    check:
        len(hostname) <= 253 if hostname
        len(hostname) >= 1 if hostname
        _regex_match(str(hostname), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if hostname
        port <= 65535 if port not in [None, Undefined]
        port >= 1 if port not in [None, Undefined]

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0RequestRedirectPath:
    r"""
    Path defines parameters used to modify the path of the incoming request.
    The modified path is then used to construct the `Location` header. When
    empty, the request path is used as-is.

    Support: Extended

    Attributes
    ----------
    replaceFullPath : str, default is Undefined, optional
        ReplaceFullPath specifies the value with which to replace the full path
        of a request during a rewrite or redirect.
    replacePrefixMatch : str, default is Undefined, optional
        ReplacePrefixMatch specifies the value with which to replace the prefix
        match of a request during a rewrite or redirect. For example, a request
        to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
        of "/xyz" would be modified to "/xyz/bar".

        Note that this matches the behavior of the PathPrefix match type. This
        matches full path elements. A path element refers to the list of labels
        in the path split by the `/` separator. When specified, a trailing `/` is
        ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
        match the prefix `/abc`, but the path `/abcd` would not.

        ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
        Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
        the implementation setting the Accepted Condition for the Route to `status: False`.

        Request Path | Prefix Match | Replace Prefix | Modified Path
    $type : str, default is Undefined, required
        Type defines the type of path modifier. Additional types may be
        added in a future release of the API.

        Note that values may be added to this enum, implementations
        must ensure that unknown values will not cause a crash.

        Unknown values here must result in the implementation setting the
        Accepted Condition for the Route to `status: False`, with a
        Reason of `UnsupportedValue`.
    """
    replaceFullPath?: str
    replacePrefixMatch?: str
    $type: "ReplaceFullPath" | "ReplacePrefixMatch"

    check:
        len(replaceFullPath) <= 1024 if replaceFullPath
        len(replacePrefixMatch) <= 1024 if replacePrefixMatch

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0ResponseHeaderModifier:
    r"""
    ResponseHeaderModifier defines a schema for a filter that modifies response
    headers.

    Support: Extended

    Attributes
    ----------
    add : [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0ResponseHeaderModifierAddItems0], default is Undefined, optional
        Add adds the given header(s) (name, value) to the request
        before the action. It appends to any existing values associated
        with the header name.

        Input:
          GET /foo HTTP/1.1
          my-header: foo

        Config:
          add:
          - name: "my-header"
            value: "bar,baz"

        Output:
          GET /foo HTTP/1.1
          my-header: foo,bar,baz
    remove : [str], default is Undefined, optional
        Remove the given header(s) from the HTTP request before the action. The
        value of Remove is a list of HTTP header names. Note that the header
        names are case-insensitive (see
        https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).

        Input:
          GET /foo HTTP/1.1
          my-header1: foo
          my-header2: bar
          my-header3: baz

        Config:
          remove: ["my-header1", "my-header3"]

        Output:
          GET /foo HTTP/1.1
          my-header2: bar
    set : [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0ResponseHeaderModifierSetItems0], default is Undefined, optional
        Set overwrites the request with the given header (name, value)
        before the action.

        Input:
          GET /foo HTTP/1.1
          my-header: foo

        Config:
          set:
          - name: "my-header"
            value: "bar"

        Output:
          GET /foo HTTP/1.1
          my-header: bar
    """
    add?: [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0ResponseHeaderModifierAddItems0]
    remove?: [str]
    set?: [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0ResponseHeaderModifierSetItems0]

    check:
        len(add) <= 16 if add
        len(remove) <= 16 if remove
        len(set) <= 16 if set

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0ResponseHeaderModifierAddItems0:
    r"""
    HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the HTTP Header to be matched. Name matching MUST be
        case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

        If multiple entries specify equivalent header names, the first entry with
        an equivalent name MUST be considered for a match. Subsequent entries
        with an equivalent header name MUST be ignored. Due to the
        case-insensitivity of header names, "foo" and "Foo" are considered
        equivalent.
    value : str, default is Undefined, required
        Value is the value of HTTP Header to be matched.
    """
    name: str

    value: str

    check:
        len(name) <= 256
        len(name) >= 1
        _regex_match(str(name), r"^[A-Za-z0-9!#$%&'*+\-.^_\x60|~]+$")
        len(value) <= 4096
        len(value) >= 1

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0ResponseHeaderModifierSetItems0:
    r"""
    HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the HTTP Header to be matched. Name matching MUST be
        case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

        If multiple entries specify equivalent header names, the first entry with
        an equivalent name MUST be considered for a match. Subsequent entries
        with an equivalent header name MUST be ignored. Due to the
        case-insensitivity of header names, "foo" and "Foo" are considered
        equivalent.
    value : str, default is Undefined, required
        Value is the value of HTTP Header to be matched.
    """
    name: str

    value: str

    check:
        len(name) <= 256
        len(name) >= 1
        _regex_match(str(name), r"^[A-Za-z0-9!#$%&'*+\-.^_\x60|~]+$")
        len(value) <= 4096
        len(value) >= 1

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0URLRewrite:
    r"""
    URLRewrite defines a schema for a filter that modifies a request during forwarding.

    Support: Extended

    Attributes
    ----------
    hostname : str, default is Undefined, optional
        Hostname is the value to be used to replace the Host header value during
        forwarding.

        Support: Extended
    path : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0URLRewritePath, default is Undefined, optional
        path
    """
    hostname?: str
    path?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0URLRewritePath

    check:
        len(hostname) <= 253 if hostname
        len(hostname) >= 1 if hostname
        _regex_match(str(hostname), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if hostname

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0FiltersItems0URLRewritePath:
    r"""
    Path defines a path rewrite.

    Support: Extended

    Attributes
    ----------
    replaceFullPath : str, default is Undefined, optional
        ReplaceFullPath specifies the value with which to replace the full path
        of a request during a rewrite or redirect.
    replacePrefixMatch : str, default is Undefined, optional
        ReplacePrefixMatch specifies the value with which to replace the prefix
        match of a request during a rewrite or redirect. For example, a request
        to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
        of "/xyz" would be modified to "/xyz/bar".

        Note that this matches the behavior of the PathPrefix match type. This
        matches full path elements. A path element refers to the list of labels
        in the path split by the `/` separator. When specified, a trailing `/` is
        ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
        match the prefix `/abc`, but the path `/abcd` would not.

        ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
        Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
        the implementation setting the Accepted Condition for the Route to `status: False`.

        Request Path | Prefix Match | Replace Prefix | Modified Path
    $type : str, default is Undefined, required
        Type defines the type of path modifier. Additional types may be
        added in a future release of the API.

        Note that values may be added to this enum, implementations
        must ensure that unknown values will not cause a crash.

        Unknown values here must result in the implementation setting the
        Accepted Condition for the Route to `status: False`, with a
        Reason of `UnsupportedValue`.
    """
    replaceFullPath?: str
    replacePrefixMatch?: str
    $type: "ReplaceFullPath" | "ReplacePrefixMatch"

    check:
        len(replaceFullPath) <= 1024 if replaceFullPath
        len(replacePrefixMatch) <= 1024 if replacePrefixMatch

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0MatchesItems0:
    r"""
    HTTPRouteMatch defines the predicate used to match requests to a given
    action. Multiple match types are ANDed together, i.e. the match will
    evaluate to true only if all conditions are satisfied.

    For example, the match below will match a HTTP request only if its path
    starts with `/foo` AND it contains the `version: v1` header:

    ```
    match:

    	path:
    	  value: "/foo"
    	headers:
    	- name: "version"
    	  value "v1"

    ```

    Attributes
    ----------
    headers : [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0MatchesItems0HeadersItems0], default is Undefined, optional
        Headers specifies HTTP request header matchers. Multiple match values are
        ANDed together, meaning, a request must match all the specified headers
        to select the route.
    method : str, default is Undefined, optional
        Method specifies HTTP method matcher.
        When specified, this route will be matched only if the request has the
        specified method.

        Support: Extended
    path : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0MatchesItems0Path, default is Undefined, optional
        path
    queryParams : [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0MatchesItems0QueryParamsItems0], default is Undefined, optional
        QueryParams specifies HTTP query parameter matchers. Multiple match
        values are ANDed together, meaning, a request must match all the
        specified query parameters to select the route.

        Support: Extended
    """
    headers?: [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0MatchesItems0HeadersItems0]
    method?: "GET" | "HEAD" | "POST" | "PUT" | "DELETE" | "CONNECT" | "OPTIONS" | "TRACE" | "PATCH"
    path?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0MatchesItems0Path
    queryParams?: [GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0MatchesItems0QueryParamsItems0]

    check:
        len(headers) <= 16 if headers
        len(queryParams) <= 16 if queryParams

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0MatchesItems0HeadersItems0:
    r"""
    HTTPHeaderMatch describes how to select a HTTP route by matching HTTP request
    headers.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the HTTP Header to be matched. Name matching MUST be
        case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).

        If multiple entries specify equivalent header names, only the first
        entry with an equivalent name MUST be considered for a match. Subsequent
        entries with an equivalent header name MUST be ignored. Due to the
        case-insensitivity of header names, "foo" and "Foo" are considered
        equivalent.

        When a header is repeated in an HTTP request, it is
        implementation-specific behavior as to how this is represented.
        Generally, proxies should follow the guidance from the RFC:
        https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding
        processing a repeated header, with special handling for "Set-Cookie".
    $type : str, default is "Exact", optional
        Type specifies how to match against the value of the header.

        Support: Core (Exact)

        Support: Implementation-specific (RegularExpression)

        Since RegularExpression HeaderMatchType has implementation-specific
        conformance, implementations can support POSIX, PCRE or any other dialects
        of regular expressions. Please read the implementation's documentation to
        determine the supported dialect.
    value : str, default is Undefined, required
        Value is the value of HTTP Header to be matched.
    """
    name: str

    $type?: "Exact" | "RegularExpression" = "Exact"
    value: str

    check:
        len(name) <= 256
        len(name) >= 1
        _regex_match(str(name), r"^[A-Za-z0-9!#$%&'*+\-.^_\x60|~]+$")
        len(value) <= 4096
        len(value) >= 1

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0MatchesItems0Path:
    r"""
    Path specifies a HTTP request path matcher. If this field is not
    specified, a default prefix match on the "/" path is provided.

    Attributes
    ----------
    $type : str, default is "PathPrefix", optional
        Type specifies how to match against the path Value.

        Support: Core (Exact, PathPrefix)

        Support: Implementation-specific (RegularExpression)
    value : str, default is "/", optional
        Value of the HTTP path to match against.
    """
    $type?: "Exact" | "PathPrefix" | "RegularExpression" = "PathPrefix"
    value?: str = "/"

    check:
        len(value) <= 1024 if value

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0MatchesItems0QueryParamsItems0:
    r"""
    HTTPQueryParamMatch describes how to select a HTTP route by matching HTTP
    query parameters.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the HTTP query param to be matched. This must be an
        exact string match. (See
        https://tools.ietf.org/html/rfc7230#section-2.7.3).

        If multiple entries specify equivalent query param names, only the first
        entry with an equivalent name MUST be considered for a match. Subsequent
        entries with an equivalent query param name MUST be ignored.

        If a query param is repeated in an HTTP request, the behavior is
        purposely left undefined, since different data planes have different
        capabilities. However, it is *recommended* that implementations should
        match against the first value of the param if the data plane supports it,
        as this behavior is expected in other load balancing contexts outside of
        the Gateway API.

        Users SHOULD NOT route traffic based on repeated query params to guard
        themselves against potential differences in the implementations.
    $type : str, default is "Exact", optional
        Type specifies how to match against the value of the query parameter.

        Support: Extended (Exact)

        Support: Implementation-specific (RegularExpression)

        Since RegularExpression QueryParamMatchType has Implementation-specific
        conformance, implementations can support POSIX, PCRE or any other
        dialects of regular expressions. Please read the implementation's
        documentation to determine the supported dialect.
    value : str, default is Undefined, required
        Value is the value of HTTP query param to be matched.
    """
    name: str

    $type?: "Exact" | "RegularExpression" = "Exact"
    value: str

    check:
        len(name) <= 256
        len(name) >= 1
        _regex_match(str(name), r"^[A-Za-z0-9!#$%&'*+\-.^_\x60|~]+$")
        len(value) <= 1024
        len(value) >= 1

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0Retry:
    r"""
    Retry defines the configuration for when to retry an HTTP request.

    Support: Extended

    Attributes
    ----------
    attempts : int, default is Undefined, optional
        Attempts specifies the maximum number of times an individual request
        from the gateway to a backend should be retried.

        If the maximum number of retries has been attempted without a successful
        response from the backend, the Gateway MUST return an error.

        When this field is unspecified, the number of times to attempt to retry
        a backend request is implementation-specific.

        Support: Extended
    backoff : str, default is Undefined, optional
        Backoff specifies the minimum duration a Gateway should wait between
        retry attempts and is represented in Gateway API Duration formatting.

        For example, setting the `rules[].retry.backoff` field to the value
        `100ms` will cause a backend request to first be retried approximately
        100 milliseconds after timing out or receiving a response code configured
        to be retryable.

        An implementation MAY use an exponential or alternative backoff strategy
        for subsequent retry attempts, MAY cap the maximum backoff duration to
        some amount greater than the specified minimum, and MAY add arbitrary
        jitter to stagger requests, as long as unsuccessful backend requests are
        not retried before the configured minimum duration.

        If a Request timeout (`rules[].timeouts.request`) is configured on the
        route, the entire duration of the initial request and any retry attempts
        MUST not exceed the Request timeout duration. If any retry attempts are
        still in progress when the Request timeout duration has been reached,
        these SHOULD be canceled if possible and the Gateway MUST immediately
        return a timeout error.

        If a BackendRequest timeout (`rules[].timeouts.backendRequest`) is
        configured on the route, any retry attempts which reach the configured
        BackendRequest timeout duration without a response SHOULD be canceled if
        possible and the Gateway should wait for at least the specified backoff
        duration before attempting to retry the backend request again.

        If a BackendRequest timeout is _not_ configured on the route, retry
        attempts MAY time out after an implementation default duration, or MAY
        remain pending until a configured Request timeout or implementation
        default duration for total request time is reached.

        When this field is unspecified, the time to wait between retry attempts
        is implementation-specific.

        Support: Extended
    codes : [int], default is Undefined, optional
        Codes defines the HTTP response status codes for which a backend request
        should be retried.

        Support: Extended
    """
    attempts?: int
    backoff?: str
    codes?: [int]

    check:
        _regex_match(str(backoff), r"^([0-9]{1,5}(h|m|s|ms)){1,4}$") if backoff
        all codes in codes {codes <= 599 if codes not in [None, Undefined]} if codes
        all codes in codes {codes >= 400 if codes not in [None, Undefined]} if codes

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0SessionPersistence:
    r"""
    SessionPersistence defines and configures session persistence
    for the route rule.

    Support: Extended

    Attributes
    ----------
    absoluteTimeout : str, default is Undefined, optional
        AbsoluteTimeout defines the absolute timeout of the persistent
        session. Once the AbsoluteTimeout duration has elapsed, the
        session becomes invalid.

        Support: Extended
    cookieConfig : GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0SessionPersistenceCookieConfig, default is Undefined, optional
        cookie config
    idleTimeout : str, default is Undefined, optional
        IdleTimeout defines the idle timeout of the persistent session.
        Once the session has been idle for more than the specified
        IdleTimeout duration, the session becomes invalid.

        Support: Extended
    sessionName : str, default is Undefined, optional
        SessionName defines the name of the persistent session token
        which may be reflected in the cookie or the header. Users
        should avoid reusing session names to prevent unintended
        consequences, such as rejection or unpredictable behavior.

        Support: Implementation-specific
    $type : str, default is "Cookie", optional
        Type defines the type of session persistence such as through
        the use a header or cookie. Defaults to cookie based session
        persistence.

        Support: Core for "Cookie" type

        Support: Extended for "Header" type
    """
    absoluteTimeout?: str
    cookieConfig?: GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0SessionPersistenceCookieConfig
    idleTimeout?: str
    sessionName?: str
    $type?: "Cookie" | "Header" = "Cookie"

    check:
        _regex_match(str(absoluteTimeout), r"^([0-9]{1,5}(h|m|s|ms)){1,4}$") if absoluteTimeout
        _regex_match(str(idleTimeout), r"^([0-9]{1,5}(h|m|s|ms)){1,4}$") if idleTimeout
        len(sessionName) <= 128 if sessionName

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0SessionPersistenceCookieConfig:
    r"""
    CookieConfig provides configuration settings that are specific
    to cookie-based session persistence.

    Support: Core

    Attributes
    ----------
    lifetimeType : str, default is "Session", optional
        LifetimeType specifies whether the cookie has a permanent or
        session-based lifetime. A permanent cookie persists until its
        specified expiry time, defined by the Expires or Max-Age cookie
        attributes, while a session cookie is deleted when the current
        session ends.

        When set to "Permanent", AbsoluteTimeout indicates the
        cookie's lifetime via the Expires or Max-Age cookie attributes
        and is required.

        When set to "Session", AbsoluteTimeout indicates the
        absolute lifetime of the cookie tracked by the gateway and
        is optional.

        Defaults to "Session".

        Support: Core for "Session" type

        Support: Extended for "Permanent" type
    """
    lifetimeType?: "Permanent" | "Session" = "Session"

schema GatewayNetworkingK8sIoV1HTTPRouteSpecRulesItems0Timeouts:
    r"""
    Timeouts defines the timeouts that can be configured for an HTTP request.

    Support: Extended

    Attributes
    ----------
    backendRequest : str, default is Undefined, optional
        BackendRequest specifies a timeout for an individual request from the gateway
        to a backend. This covers the time from when the request first starts being
        sent from the gateway to when the full response has been received from the backend.

        Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
        completely. Implementations that cannot completely disable the timeout MUST
        instead interpret the zero duration as the longest possible value to which
        the timeout can be set.

        An entire client HTTP transaction with a gateway, covered by the Request timeout,
        may result in more than one call from the gateway to the destination backend,
        for example, if automatic retries are supported.

        The value of BackendRequest must be a Gateway API Duration string as defined by
        GEP-2257.  When this field is unspecified, its behavior is implementation-specific;
        when specified, the value of BackendRequest must be no more than the value of the
        Request timeout (since the Request timeout encompasses the BackendRequest timeout).

        Support: Extended
    request : str, default is Undefined, optional
        Request specifies the maximum duration for a gateway to respond to an HTTP request.
        If the gateway has not been able to respond before this deadline is met, the gateway
        MUST return a timeout error.

        For example, setting the `rules.timeouts.request` field to the value `10s` in an
        `HTTPRoute` will cause a timeout if a client request is taking longer than 10 seconds
        to complete.

        Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
        completely. Implementations that cannot completely disable the timeout MUST
        instead interpret the zero duration as the longest possible value to which
        the timeout can be set.

        This timeout is intended to cover as close to the whole request-response transaction
        as possible although an implementation MAY choose to start the timeout after the entire
        request stream has been received instead of immediately after the transaction is
        initiated by the client.

        The value of Request is a Gateway API Duration string as defined by GEP-2257. When this
        field is unspecified, request timeout behavior is implementation-specific.

        Support: Extended
    """
    backendRequest?: str
    request?: str

    check:
        _regex_match(str(backendRequest), r"^([0-9]{1,5}(h|m|s|ms)){1,4}$") if backendRequest
        _regex_match(str(request), r"^([0-9]{1,5}(h|m|s|ms)){1,4}$") if request

schema GatewayNetworkingK8sIoV1HTTPRouteStatus:
    r"""
    Status defines the current state of HTTPRoute.

    Attributes
    ----------
    parents : [GatewayNetworkingK8sIoV1HTTPRouteStatusParentsItems0], default is Undefined, required
        Parents is a list of parent resources (usually Gateways) that are
        associated with the route, and the status of the route with respect to
        each parent. When this route attaches to a parent, the controller that
        manages the parent must add an entry to this list when the controller
        first sees the route and should update the entry as appropriate when the
        route or gateway is modified.

        Note that parent references that cannot be resolved by an implementation
        of this API will not be added to this list. Implementations of this API
        can only populate Route status for the Gateways/parent resources they are
        responsible for.

        A maximum of 32 Gateways will be represented in this list. An empty list
        means the route has not been attached to any Gateway.
    """
    parents: [GatewayNetworkingK8sIoV1HTTPRouteStatusParentsItems0]

    check:
        len(parents) <= 32

schema GatewayNetworkingK8sIoV1HTTPRouteStatusParentsItems0:
    r"""
    RouteParentStatus describes the status of a route with respect to an
    associated Parent.

    Attributes
    ----------
    conditions : [GatewayNetworkingK8sIoV1HTTPRouteStatusParentsItems0ConditionsItems0], default is Undefined, optional
        Conditions describes the status of the route with respect to the Gateway.
        Note that the route's availability is also subject to the Gateway's own
        status conditions and listener status.

        If the Route's ParentRef specifies an existing Gateway that supports
        Routes of this kind AND that Gateway's controller has sufficient access,
        then that Gateway's controller MUST set the "Accepted" condition on the
        Route, to indicate whether the route has been accepted or rejected by the
        Gateway, and why.

        A Route MUST be considered "Accepted" if at least one of the Route's
        rules is implemented by the Gateway.

        There are a number of cases where the "Accepted" condition may not be set
        due to lack of controller visibility, that includes when:

        * The Route refers to a nonexistent parent.
        * The Route is of a type that the controller does not support.
        * The Route is in a namespace the controller does not have access to.
    controllerName : str, default is Undefined, required
        ControllerName is a domain/path string that indicates the name of the
        controller that wrote this status. This corresponds with the
        controllerName field on GatewayClass.

        Example: "example.net/gateway-controller".

        The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
        valid Kubernetes names
        (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).

        Controllers MUST populate this field when writing status. Controllers should ensure that
        entries to status populated with their ControllerName are cleaned up when they are no
        longer necessary.
    parentRef : GatewayNetworkingK8sIoV1HTTPRouteStatusParentsItems0ParentRef, default is Undefined, required
        parent ref
    """
    conditions?: [GatewayNetworkingK8sIoV1HTTPRouteStatusParentsItems0ConditionsItems0]
    controllerName: str

    parentRef: GatewayNetworkingK8sIoV1HTTPRouteStatusParentsItems0ParentRef

    check:
        len(conditions) >= 1 if conditions
        len(conditions) <= 8 if conditions
        len(controllerName) <= 253
        len(controllerName) >= 1
        _regex_match(str(controllerName), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\/[A-Za-z0-9\/\-._~%!$&'()*+,;=:]+$")

schema GatewayNetworkingK8sIoV1HTTPRouteStatusParentsItems0ConditionsItems0:
    r"""
    Condition contains details for one aspect of the current state of this API Resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        lastTransitionTime is the last time the condition transitioned from one status to another.
        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    message : str, default is Undefined, required
        message is a human readable message indicating details about the transition.
        This may be an empty string.
    observedGeneration : int, default is Undefined, optional
        observedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        reason contains a programmatic identifier indicating the reason for the condition's last transition.
        Producers of specific condition types may define expected values and meanings for this field,
        and whether the values are considered a guaranteed API.
        The value should be a CamelCase string.
        This field may not be empty.
    status : str, default is Undefined, required
        status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        type of condition in CamelCase or in foo.example.com/CamelCase.
    """
    lastTransitionTime: str

    message: str

    observedGeneration?: int
    reason: str

    status: "True" | "False" | "Unknown"

    $type: str

    check:
        len(message) <= 32768
        observedGeneration >= 0 if observedGeneration not in [None, Undefined]
        len(reason) <= 1024
        len(reason) >= 1
        _regex_match(str(reason), r"^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$")
        len($type) <= 316
        _regex_match(str($type), r"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$")

schema GatewayNetworkingK8sIoV1HTTPRouteStatusParentsItems0ParentRef:
    r"""
    ParentRef corresponds with a ParentRef in the spec that this
    RouteParentStatus struct describes the status of.

    Attributes
    ----------
    group : str, default is "gateway.networking.k8s.io", optional
        Group is the group of the referent.
        When unspecified, "gateway.networking.k8s.io" is inferred.
        To set the core API group (such as for a "Service" kind referent),
        Group must be explicitly set to "" (empty string).

        Support: Core
    kind : str, default is "Gateway", optional
        Kind is kind of the referent.

        There are two kinds of parent resources with "Core" support:

        * Gateway (Gateway conformance profile)
        * Service (Mesh conformance profile, ClusterIP Services only)

        Support for other resources is Implementation-Specific.
    name : str, default is Undefined, required
        Name is the name of the referent.

        Support: Core
    namespace : str, default is Undefined, optional
        Namespace is the namespace of the referent. When unspecified, this refers
        to the local namespace of the Route.

        Note that there are specific rules for ParentRefs which cross namespace
        boundaries. Cross-namespace references are only valid if they are explicitly
        allowed by something in the namespace they are referring to. For example:
        Gateway has the AllowedRoutes field, and ReferenceGrant provides a
        generic way to enable any other kind of cross-namespace reference.


        ParentRefs from a Route to a Service in the same namespace are "producer"
        routes, which apply default routing rules to inbound connections from
        any namespace to the Service.

        ParentRefs from a Route to a Service in a different namespace are
        "consumer" routes, and these routing rules are only applied to outbound
        connections originating from the same namespace as the Route, for which
        the intended destination of the connections are a Service targeted as a
        ParentRef of the Route.


        Support: Core
    port : int, default is Undefined, optional
        Port is the network port this Route targets. It can be interpreted
        differently based on the type of parent resource.

        When the parent resource is a Gateway, this targets all listeners
        listening on the specified port that also support this kind of Route(and
        select this Route). It's not recommended to set `Port` unless the
        networking behaviors specified in a Route must apply to a specific port
        as opposed to a listener(s) whose port(s) may be changed. When both Port
        and SectionName are specified, the name and port of the selected listener
        must match both specified values.


        When the parent resource is a Service, this targets a specific port in the
        Service spec. When both Port (experimental) and SectionName are specified,
        the name and port of the selected port must match both specified values.


        Implementations MAY choose to support other parent resources.
        Implementations supporting other types of parent resources MUST clearly
        document how/if Port is interpreted.

        For the purpose of status, an attachment is considered successful as
        long as the parent resource accepts it partially. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
        from the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route,
        the Route MUST be considered detached from the Gateway.

        Support: Extended
    sectionName : str, default is Undefined, optional
        SectionName is the name of a section within the target resource. In the
        following resources, SectionName is interpreted as the following:

        * Gateway: Listener name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.
        * Service: Port name. When both Port (experimental) and SectionName
        are specified, the name and port of the selected listener must match
        both specified values.

        Implementations MAY choose to support attaching Routes to other resources.
        If that is the case, they MUST clearly document how SectionName is
        interpreted.

        When unspecified (empty string), this will reference the entire resource.
        For the purpose of status, an attachment is considered successful if at
        least one section in the parent resource accepts it. For example, Gateway
        listeners can restrict which Routes can attach to them by Route kind,
        namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
        the referencing Route, the Route MUST be considered successfully
        attached. If no Gateway listeners accept attachment from this Route, the
        Route MUST be considered detached from the Gateway.

        Support: Core
    """
    group?: str = "gateway.networking.k8s.io"
    kind?: str = "Gateway"
    name: str

    namespace?: str
    port?: int
    sectionName?: str

    check:
        len(group) <= 253 if group
        _regex_match(str(group), r"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if group
        len(kind) <= 63 if kind
        len(kind) >= 1 if kind
        _regex_match(str(kind), r"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$") if kind
        len(name) <= 253
        len(name) >= 1
        len(namespace) <= 63 if namespace
        len(namespace) >= 1 if namespace
        _regex_match(str(namespace), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$") if namespace
        port <= 65535 if port not in [None, Undefined]
        port >= 1 if port not in [None, Undefined]
        len(sectionName) <= 253 if sectionName
        len(sectionName) >= 1 if sectionName
        _regex_match(str(sectionName), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if sectionName

