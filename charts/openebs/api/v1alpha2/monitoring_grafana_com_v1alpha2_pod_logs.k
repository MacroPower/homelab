"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""

import regex
import k8s.apimachinery.pkg.apis.meta.v1

_regex_match = regex.match

schema PodLogs:
    r"""
    PodLogs defines how to collect logs for a Pod.

    Attributes
    ----------
    apiVersion : str, default is "monitoring.grafana.com/v1alpha2", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "PodLogs", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : MonitoringGrafanaComV1alpha2PodLogsSpec, default is Undefined, optional
        spec
    """
    apiVersion: "monitoring.grafana.com/v1alpha2" = "monitoring.grafana.com/v1alpha2"

    kind: "PodLogs" = "PodLogs"

    metadata?: v1.ObjectMeta
    spec?: MonitoringGrafanaComV1alpha2PodLogsSpec

schema MonitoringGrafanaComV1alpha2PodLogsSpec:
    r"""
    PodLogsSpec defines how to collect logs for a Pod.

    Attributes
    ----------
    namespaceSelector : MonitoringGrafanaComV1alpha2PodLogsSpecNamespaceSelector, default is Undefined, optional
        namespace selector
    relabelings : [MonitoringGrafanaComV1alpha2PodLogsSpecRelabelingsItems0], default is Undefined, optional
        RelabelConfigs to apply to logs before delivering.
    selector : MonitoringGrafanaComV1alpha2PodLogsSpecSelector, default is Undefined, required
        selector
    """
    namespaceSelector?: MonitoringGrafanaComV1alpha2PodLogsSpecNamespaceSelector
    relabelings?: [MonitoringGrafanaComV1alpha2PodLogsSpecRelabelingsItems0]
    selector: MonitoringGrafanaComV1alpha2PodLogsSpecSelector

schema MonitoringGrafanaComV1alpha2PodLogsSpecNamespaceSelector:
    r"""
    Selector to select which namespaces the Pod objects are discovered from.

    Attributes
    ----------
    matchExpressions : [MonitoringGrafanaComV1alpha2PodLogsSpecNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringGrafanaComV1alpha2PodLogsSpecNamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringGrafanaComV1alpha2PodLogsSpecNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema MonitoringGrafanaComV1alpha2PodLogsSpecRelabelingsItems0:
    r"""
    RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs

    Attributes
    ----------
    action : str, default is "replace", optional
        Action to perform based on regex matching. Default is 'replace'. uppercase and lowercase actions require Prometheus >= 2.36.
    modulus : int, default is Undefined, optional
        Modulus to take of the hash of the source label values.
    regex : str, default is Undefined, optional
        Regular expression against which the extracted value is matched. Default is '(.*)'
    replacement : str, default is Undefined, optional
        Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
    separator : str, default is Undefined, optional
        Separator placed between concatenated source label values. default is ';'.
    sourceLabels : [str], default is Undefined, optional
        The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
    targetLabel : str, default is Undefined, optional
        Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
    """
    action?: "replace" | "Replace" | "keep" | "Keep" | "drop" | "Drop" | "hashmod" | "HashMod" | "labelmap" | "LabelMap" | "labeldrop" | "LabelDrop" | "labelkeep" | "LabelKeep" | "lowercase" | "Lowercase" | "uppercase" | "Uppercase" = "replace"
    modulus?: int
    regex?: str
    replacement?: str
    separator?: str
    sourceLabels?: [str]
    targetLabel?: str

    check:
        all sourceLabels in sourceLabels {_regex_match(str(sourceLabels), r"^[a-zA-Z_][a-zA-Z0-9_]*$") if sourceLabels} if sourceLabels

schema MonitoringGrafanaComV1alpha2PodLogsSpecSelector:
    r"""
    Selector to select Pod objects. Required.

    Attributes
    ----------
    matchExpressions : [MonitoringGrafanaComV1alpha2PodLogsSpecSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [MonitoringGrafanaComV1alpha2PodLogsSpecSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema MonitoringGrafanaComV1alpha2PodLogsSpecSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """
    key: str

    operator: str

    values?: [str]

