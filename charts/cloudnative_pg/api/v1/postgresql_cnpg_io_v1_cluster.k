"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""

import regex
import k8s.apimachinery.pkg.apis.meta.v1

_regex_match = regex.match

schema Cluster:
    r"""
    Cluster defines the API schema for a highly available PostgreSQL database cluster
    managed by CloudNativePG.

    Attributes
    ----------
    apiVersion : str, default is "postgresql.cnpg.io/v1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "Cluster", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, required
        metadata
    spec : PostgresqlCnpgIoV1ClusterSpec, default is Undefined, required
        spec
    status : PostgresqlCnpgIoV1ClusterStatus, default is Undefined, optional
        status
    """
    apiVersion: "postgresql.cnpg.io/v1" = "postgresql.cnpg.io/v1"

    kind: "Cluster" = "Cluster"

    metadata: v1.ObjectMeta

    spec: PostgresqlCnpgIoV1ClusterSpec

    status?: PostgresqlCnpgIoV1ClusterStatus

schema PostgresqlCnpgIoV1ClusterSpec:
    r"""
    Specification of the desired behavior of the cluster.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

    Attributes
    ----------
    affinity : PostgresqlCnpgIoV1ClusterSpecAffinity, default is Undefined, optional
        affinity
    backup : PostgresqlCnpgIoV1ClusterSpecBackup, default is Undefined, optional
        backup
    bootstrap : PostgresqlCnpgIoV1ClusterSpecBootstrap, default is Undefined, optional
        bootstrap
    certificates : PostgresqlCnpgIoV1ClusterSpecCertificates, default is Undefined, optional
        certificates
    description : str, default is Undefined, optional
        Description of this PostgreSQL cluster
    enablePDB : bool, default is True, optional
        Manage the `PodDisruptionBudget` resources within the cluster. When
        configured as `true` (default setting), the pod disruption budgets
        will safeguard the primary node from being terminated. Conversely,
        setting it to `false` will result in the absence of any
        `PodDisruptionBudget` resource, permitting the shutdown of all nodes
        hosting the PostgreSQL cluster. This latter configuration is
        advisable for any PostgreSQL cluster employed for
        development/staging purposes.
    enableSuperuserAccess : bool, default is Undefined, optional
        When this option is enabled, the operator will use the `SuperuserSecret`
        to update the `postgres` user password (if the secret is
        not present, the operator will automatically create one). When this
        option is disabled, the operator will ignore the `SuperuserSecret` content, delete
        it when automatically created, and then blank the password of the `postgres`
        user by setting it to `NULL`. Disabled by default.
    env : [PostgresqlCnpgIoV1ClusterSpecEnvItems0], default is Undefined, optional
        Env follows the Env format to pass environment variables
        to the pods created in the cluster
    envFrom : [PostgresqlCnpgIoV1ClusterSpecEnvFromItems0], default is Undefined, optional
        EnvFrom follows the EnvFrom format to pass environment variables
        sources to the pods to be used by Env
    ephemeralVolumeSource : PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSource, default is Undefined, optional
        ephemeral volume source
    ephemeralVolumesSizeLimit : PostgresqlCnpgIoV1ClusterSpecEphemeralVolumesSizeLimit, default is Undefined, optional
        ephemeral volumes size limit
    externalClusters : [PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0], default is Undefined, optional
        The list of external clusters which are used in the configuration
    failoverDelay : int, default is Undefined, optional
        The amount of time (in seconds) to wait before triggering a failover
        after the primary PostgreSQL instance in the cluster was detected
        to be unhealthy
    imageCatalogRef : PostgresqlCnpgIoV1ClusterSpecImageCatalogRef, default is Undefined, optional
        image catalog ref
    imageName : str, default is Undefined, optional
        Name of the container image, supporting both tags (`<image>:<tag>`)
        and digests for deterministic and repeatable deployments
        (`<image>:<tag>@sha256:<digestValue>`)
    imagePullPolicy : str, default is Undefined, optional
        Image pull policy.
        One of `Always`, `Never` or `IfNotPresent`.
        If not defined, it defaults to `IfNotPresent`.
        Cannot be updated.
        More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
    imagePullSecrets : [PostgresqlCnpgIoV1ClusterSpecImagePullSecretsItems0], default is Undefined, optional
        The list of pull secrets to be used to pull the images
    inheritedMetadata : PostgresqlCnpgIoV1ClusterSpecInheritedMetadata, default is Undefined, optional
        inherited metadata
    instances : int, default is 1, required
        Number of instances required in the cluster
    livenessProbeTimeout : int, default is Undefined, optional
        LivenessProbeTimeout is the time (in seconds) that is allowed for a PostgreSQL instance
        to successfully respond to the liveness probe (default 30).
        The Liveness probe failure threshold is derived from this value using the formula:
        ceiling(livenessProbe / 10).
    logLevel : str, default is "info", optional
        The instances' log level, one of the following values: error, warning, info (default), debug, trace
    managed : PostgresqlCnpgIoV1ClusterSpecManaged, default is Undefined, optional
        managed
    maxSyncReplicas : int, default is Undefined, optional
        The target value for the synchronous replication quorum, that can be
        decreased if the number of ready standbys is lower than this.
        Undefined or 0 disable synchronous replication.
    minSyncReplicas : int, default is Undefined, optional
        Minimum number of instances required in synchronous replication with the
        primary. Undefined or 0 allow writes to complete when no standby is
        available.
    monitoring : PostgresqlCnpgIoV1ClusterSpecMonitoring, default is Undefined, optional
        monitoring
    nodeMaintenanceWindow : PostgresqlCnpgIoV1ClusterSpecNodeMaintenanceWindow, default is Undefined, optional
        node maintenance window
    plugins : [PostgresqlCnpgIoV1ClusterSpecPluginsItems0], default is Undefined, optional
        The plugins configuration, containing
        any plugin to be loaded with the corresponding configuration
    postgresGID : int, default is 26, optional
        The GID of the `postgres` user inside the image, defaults to `26`
    postgresUID : int, default is 26, optional
        The UID of the `postgres` user inside the image, defaults to `26`
    postgresql : PostgresqlCnpgIoV1ClusterSpecPostgresql, default is Undefined, optional
        postgresql
    primaryUpdateMethod : str, default is "restart", optional
        Method to follow to upgrade the primary server during a rolling
        update procedure, after all replicas have been successfully updated:
        it can be with a switchover (`switchover`) or in-place (`restart` - default)
    primaryUpdateStrategy : str, default is "unsupervised", optional
        Deployment strategy to follow to upgrade the primary server during a rolling
        update procedure, after all replicas have been successfully updated:
        it can be automated (`unsupervised` - default) or manual (`supervised`)
    priorityClassName : str, default is Undefined, optional
        Name of the priority class which will be used in every generated Pod, if the PriorityClass
        specified does not exist, the pod will not be able to schedule.  Please refer to
        https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/#priorityclass
        for more information
    probes : PostgresqlCnpgIoV1ClusterSpecProbes, default is Undefined, optional
        probes
    projectedVolumeTemplate : PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplate, default is Undefined, optional
        projected volume template
    replica : PostgresqlCnpgIoV1ClusterSpecReplica, default is Undefined, optional
        replica
    replicationSlots : PostgresqlCnpgIoV1ClusterSpecReplicationSlots, default is Undefined, optional
        replication slots
    resources : PostgresqlCnpgIoV1ClusterSpecResources, default is Undefined, optional
        resources
    schedulerName : str, default is Undefined, optional
        If specified, the pod will be dispatched by specified Kubernetes
        scheduler. If not specified, the pod will be dispatched by the default
        scheduler. More info:
        https://kubernetes.io/docs/concepts/scheduling-eviction/kube-scheduler/
    seccompProfile : PostgresqlCnpgIoV1ClusterSpecSeccompProfile, default is Undefined, optional
        seccomp profile
    serviceAccountTemplate : PostgresqlCnpgIoV1ClusterSpecServiceAccountTemplate, default is Undefined, optional
        service account template
    smartShutdownTimeout : int, default is 180, optional
        The time in seconds that controls the window of time reserved for the smart shutdown of Postgres to complete.
        Make sure you reserve enough time for the operator to request a fast shutdown of Postgres
        (that is: `stopDelay` - `smartShutdownTimeout`). Default is 180 seconds.
    startDelay : int, default is 3600, optional
        The time in seconds that is allowed for a PostgreSQL instance to
        successfully start up (default 3600).
        The startup probe failure threshold is derived from this value using the formula:
        ceiling(startDelay / 10).
    stopDelay : int, default is 1800, optional
        The time in seconds that is allowed for a PostgreSQL instance to
        gracefully shutdown (default 1800)
    storage : PostgresqlCnpgIoV1ClusterSpecStorage, default is Undefined, optional
        storage
    superuserSecret : PostgresqlCnpgIoV1ClusterSpecSuperuserSecret, default is Undefined, optional
        superuser secret
    switchoverDelay : int, default is 3600, optional
        The time in seconds that is allowed for a primary PostgreSQL instance
        to gracefully shutdown during a switchover.
        Default value is 3600 seconds (1 hour).
    tablespaces : [PostgresqlCnpgIoV1ClusterSpecTablespacesItems0], default is Undefined, optional
        The tablespaces configuration
    topologySpreadConstraints : [PostgresqlCnpgIoV1ClusterSpecTopologySpreadConstraintsItems0], default is Undefined, optional
        TopologySpreadConstraints specifies how to spread matching pods among the given topology.
        More info:
        https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/
    walStorage : PostgresqlCnpgIoV1ClusterSpecWalStorage, default is Undefined, optional
        wal storage
    """
    affinity?: PostgresqlCnpgIoV1ClusterSpecAffinity
    backup?: PostgresqlCnpgIoV1ClusterSpecBackup
    bootstrap?: PostgresqlCnpgIoV1ClusterSpecBootstrap
    certificates?: PostgresqlCnpgIoV1ClusterSpecCertificates
    description?: str
    enablePDB?: bool = True
    enableSuperuserAccess?: bool = False
    env?: [PostgresqlCnpgIoV1ClusterSpecEnvItems0]
    envFrom?: [PostgresqlCnpgIoV1ClusterSpecEnvFromItems0]
    ephemeralVolumeSource?: PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSource
    ephemeralVolumesSizeLimit?: PostgresqlCnpgIoV1ClusterSpecEphemeralVolumesSizeLimit
    externalClusters?: [PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0]
    failoverDelay?: int = 0
    imageCatalogRef?: PostgresqlCnpgIoV1ClusterSpecImageCatalogRef
    imageName?: str
    imagePullPolicy?: str
    imagePullSecrets?: [PostgresqlCnpgIoV1ClusterSpecImagePullSecretsItems0]
    inheritedMetadata?: PostgresqlCnpgIoV1ClusterSpecInheritedMetadata
    instances: int = 1

    livenessProbeTimeout?: int
    logLevel?: "error" | "warning" | "info" | "debug" | "trace" = "info"
    managed?: PostgresqlCnpgIoV1ClusterSpecManaged
    maxSyncReplicas?: int = 0
    minSyncReplicas?: int = 0
    monitoring?: PostgresqlCnpgIoV1ClusterSpecMonitoring
    nodeMaintenanceWindow?: PostgresqlCnpgIoV1ClusterSpecNodeMaintenanceWindow
    plugins?: [PostgresqlCnpgIoV1ClusterSpecPluginsItems0]
    postgresGID?: int = 26
    postgresUID?: int = 26
    postgresql?: PostgresqlCnpgIoV1ClusterSpecPostgresql
    primaryUpdateMethod?: "switchover" | "restart" = "restart"
    primaryUpdateStrategy?: "unsupervised" | "supervised" = "unsupervised"
    priorityClassName?: str
    probes?: PostgresqlCnpgIoV1ClusterSpecProbes
    projectedVolumeTemplate?: PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplate
    replica?: PostgresqlCnpgIoV1ClusterSpecReplica
    replicationSlots?: PostgresqlCnpgIoV1ClusterSpecReplicationSlots
    resources?: PostgresqlCnpgIoV1ClusterSpecResources
    schedulerName?: str
    seccompProfile?: PostgresqlCnpgIoV1ClusterSpecSeccompProfile
    serviceAccountTemplate?: PostgresqlCnpgIoV1ClusterSpecServiceAccountTemplate
    smartShutdownTimeout?: int = 180
    startDelay?: int = 3600
    stopDelay?: int = 1800
    storage?: PostgresqlCnpgIoV1ClusterSpecStorage
    superuserSecret?: PostgresqlCnpgIoV1ClusterSpecSuperuserSecret
    switchoverDelay?: int = 3600
    tablespaces?: [PostgresqlCnpgIoV1ClusterSpecTablespacesItems0]
    topologySpreadConstraints?: [PostgresqlCnpgIoV1ClusterSpecTopologySpreadConstraintsItems0]
    walStorage?: PostgresqlCnpgIoV1ClusterSpecWalStorage

    check:
        instances >= 1
        maxSyncReplicas >= 0 if maxSyncReplicas not in [None, Undefined]
        minSyncReplicas >= 0 if minSyncReplicas not in [None, Undefined]

schema PostgresqlCnpgIoV1ClusterSpecAffinity:
    r"""
    Affinity/Anti-affinity rules for Pods

    Attributes
    ----------
    additionalPodAffinity : PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinity, default is Undefined, optional
        additional pod affinity
    additionalPodAntiAffinity : PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinity, default is Undefined, optional
        additional pod anti affinity
    enablePodAntiAffinity : bool, default is Undefined, optional
        Activates anti-affinity for the pods. The operator will define pods
        anti-affinity unless this field is explicitly set to false
    nodeAffinity : PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinity, default is Undefined, optional
        node affinity
    nodeSelector : {str:str}, default is Undefined, optional
        NodeSelector is map of key-value pairs used to define the nodes on which
        the pods can run.
        More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    podAntiAffinityType : str, default is Undefined, optional
        PodAntiAffinityType allows the user to decide whether pod anti-affinity between cluster instance has to be
        considered a strong requirement during scheduling or not. Allowed values are: "preferred" (default if empty) or
        "required". Setting it to "required", could lead to instances remaining pending until new kubernetes nodes are
        added if all the existing nodes don't match the required pod anti-affinity rule.
        More info:
        https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    tolerations : [PostgresqlCnpgIoV1ClusterSpecAffinityTolerationsItems0], default is Undefined, optional
        Tolerations is a list of Tolerations that should be set for all the pods, in order to allow them to run
        on tainted nodes.
        More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
    topologyKey : str, default is Undefined, optional
        TopologyKey to use for anti-affinity configuration. See k8s documentation
        for more info on that
    """
    additionalPodAffinity?: PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinity
    additionalPodAntiAffinity?: PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinity
    enablePodAntiAffinity?: bool
    nodeAffinity?: PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinity
    nodeSelector?: {str:str}
    podAntiAffinityType?: str
    tolerations?: [PostgresqlCnpgIoV1ClusterSpecAffinityTolerationsItems0]
    topologyKey?: str

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinity:
    r"""
    AdditionalPodAffinity allows to specify pod affinity terms to be passed to all the cluster's pods.

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        If the affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
    """
    preferredDuringSchedulingIgnoredDuringExecution?: [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]
    requiredDuringSchedulingIgnoredDuringExecution?: [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0]

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)

    Attributes
    ----------
    podAffinityTerm : PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm, default is Undefined, required
        pod affinity term
    weight : int, default is Undefined, required
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
    """
    podAffinityTerm: PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm

    weight: int

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm:
    r"""
    Required. A pod affinity term, associated with the corresponding weight.

    Attributes
    ----------
    labelSelector : PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
    namespaceSelector : PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """
    labelSelector?: PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    Defines a set of pods (namely those matching the labelSelector
    relative to the given namespace(s)) that this pod should be
    co-located (affinity) or not co-located (anti-affinity) with,
    where co-located is defined as running on a node whose value of
    the label with key <topologyKey> matches that of any node on which
    a pod of the set of pods is running

    Attributes
    ----------
    labelSelector : PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
    namespaceSelector : PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """
    labelSelector?: PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinity:
    r"""
    AdditionalPodAntiAffinity allows to specify pod anti-affinity terms to be added to the ones generated
    by the operator if EnablePodAntiAffinity is set to true (default) or to be used exclusively if set to false.

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy
        the anti-affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling anti-affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and subtracting
        "weight" from the sum if the node has pods which matches the corresponding podAffinityTerm; the
        node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        If the anti-affinity requirements specified by this field are not met at
        scheduling time, the pod will not be scheduled onto the node.
        If the anti-affinity requirements specified by this field cease to be met
        at some point during pod execution (e.g. due to a pod label update), the
        system may or may not try to eventually evict the pod from its node.
        When there are multiple elements, the lists of nodes corresponding to each
        podAffinityTerm are intersected, i.e. all terms must be satisfied.
    """
    preferredDuringSchedulingIgnoredDuringExecution?: [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]
    requiredDuringSchedulingIgnoredDuringExecution?: [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0]

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)

    Attributes
    ----------
    podAffinityTerm : PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm, default is Undefined, required
        pod affinity term
    weight : int, default is Undefined, required
        weight associated with matching the corresponding podAffinityTerm,
        in the range 1-100.
    """
    podAffinityTerm: PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm

    weight: int

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm:
    r"""
    Required. A pod affinity term, associated with the corresponding weight.

    Attributes
    ----------
    labelSelector : PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
    namespaceSelector : PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """
    labelSelector?: PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    Defines a set of pods (namely those matching the labelSelector
    relative to the given namespace(s)) that this pod should be
    co-located (affinity) or not co-located (anti-affinity) with,
    where co-located is defined as running on a node whose value of
    the label with key <topologyKey> matches that of any node on which
    a pod of the set of pods is running

    Attributes
    ----------
    labelSelector : PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both matchLabelKeys and labelSelector.
        Also, matchLabelKeys cannot be set when labelSelector isn't set.
    mismatchLabelKeys : [str], default is Undefined, optional
        MismatchLabelKeys is a set of pod label keys to select which pods will
        be taken into consideration. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`
        to select the group of existing pods which pods will be taken into consideration
        for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming
        pod labels will be ignored. The default value is empty.
        The same key is forbidden to exist in both mismatchLabelKeys and labelSelector.
        Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
    namespaceSelector : PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector, default is Undefined, optional
        namespace selector
    namespaces : [str], default is Undefined, optional
        namespaces specifies a static list of namespace names that the term applies to.
        The term is applied to the union of the namespaces listed in this field
        and the ones selected by namespaceSelector.
        null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, default is Undefined, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
        the labelSelector in the specified namespaces, where co-located is defined as running on a node
        whose value of the label with key topologyKey matches that of any node on which any of the
        selected pods is running.
        Empty topologyKey is not allowed.
    """
    labelSelector?: PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector:
    r"""
    A label query over a set of resources, in this case pods.
    If it's null, this PodAffinityTerm matches with no Pods.

    Attributes
    ----------
    matchExpressions : [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector:
    r"""
    A label query over the set of namespaces that the term applies to.
    The term is applied to the union of the namespaces selected by this field
    and the ones listed in the namespaces field.
    null selector and null or empty namespaces list means "this pod's namespace".
    An empty selector ({}) matches all namespaces.

    Attributes
    ----------
    matchExpressions : [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema PostgresqlCnpgIoV1ClusterSpecAffinityAdditionalPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinity:
    r"""
    NodeAffinity describes node affinity scheduling rules for the pod.
    More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], default is Undefined, optional
        The scheduler will prefer to schedule pods to nodes that satisfy
        the affinity expressions specified by this field, but it may choose
        a node that violates one or more of the expressions. The node that is
        most preferred is the one with the greatest sum of weights, i.e.
        for each node that meets all of the scheduling requirements (resource
        request, requiredDuringScheduling affinity expressions, etc.),
        compute a sum by iterating through the elements of this field and adding
        "weight" to the sum if the node matches the corresponding matchExpressions; the
        node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution, default is Undefined, optional
        required during scheduling ignored during execution
    """
    preferredDuringSchedulingIgnoredDuringExecution?: [PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]
    requiredDuringSchedulingIgnoredDuringExecution?: PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution

schema PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    An empty preferred scheduling term matches all objects with implicit weight 0
    (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).

    Attributes
    ----------
    preference : PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference, default is Undefined, required
        preference
    weight : int, default is Undefined, required
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
    """
    preference: PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference

    weight: int

schema PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference:
    r"""
    A node selector term, associated with the corresponding weight.

    Attributes
    ----------
    matchExpressions : [PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0], default is Undefined, optional
        A list of node selector requirements by node's labels.
    matchFields : [PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0], default is Undefined, optional
        A list of node selector requirements by node's fields.
    """
    matchExpressions?: [PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0]
    matchFields?: [PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0]

schema PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution:
    r"""
    If the affinity requirements specified by this field are not met at
    scheduling time, the pod will not be scheduled onto the node.
    If the affinity requirements specified by this field cease to be met
    at some point during pod execution (e.g. due to an update), the system
    may or may not try to eventually evict the pod from its node.

    Attributes
    ----------
    nodeSelectorTerms : [PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0], default is Undefined, required
        Required. A list of node selector terms. The terms are ORed.
    """
    nodeSelectorTerms: [PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0]

schema PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0:
    r"""
    A null or empty node selector term matches no objects. The requirements of
    them are ANDed.
    The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.

    Attributes
    ----------
    matchExpressions : [PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0], default is Undefined, optional
        A list of node selector requirements by node's labels.
    matchFields : [PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0], default is Undefined, optional
        A list of node selector requirements by node's fields.
    """
    matchExpressions?: [PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0]
    matchFields?: [PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0]

schema PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema PostgresqlCnpgIoV1ClusterSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator
    that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        The label key that the selector applies to.
    operator : str, default is Undefined, required
        Represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], default is Undefined, optional
        An array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. If the operator is Gt or Lt, the values
        array must have a single element, which will be interpreted as an integer.
        This array is replaced during a strategic merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema PostgresqlCnpgIoV1ClusterSpecAffinityTolerationsItems0:
    r"""
    The pod this Toleration is attached to tolerates any taint that matches
    the triple <key,value,effect> using the matching operator <operator>.

    Attributes
    ----------
    effect : str, default is Undefined, optional
        Effect indicates the taint effect to match. Empty means match all taint effects.
        When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    key : str, default is Undefined, optional
        Key is the taint key that the toleration applies to. Empty means match all taint keys.
        If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    operator : str, default is Undefined, optional
        Operator represents a key's relationship to the value.
        Valid operators are Exists and Equal. Defaults to Equal.
        Exists is equivalent to wildcard for value, so that a pod can
        tolerate all taints of a particular category.
    tolerationSeconds : int, default is Undefined, optional
        TolerationSeconds represents the period of time the toleration (which must be
        of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
        it is not set, which means tolerate the taint forever (do not evict). Zero and
        negative values will be treated as 0 (evict immediately) by the system.
    value : str, default is Undefined, optional
        Value is the taint value the toleration matches to.
        If the operator is Exists, the value should be empty, otherwise just a regular string.
    """
    effect?: str
    key?: str
    operator?: str
    tolerationSeconds?: int
    value?: str

schema PostgresqlCnpgIoV1ClusterSpecBackup:
    r"""
    The configuration to be used for backups

    Attributes
    ----------
    barmanObjectStore : PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStore, default is Undefined, optional
        barman object store
    retentionPolicy : str, default is Undefined, optional
        RetentionPolicy is the retention policy to be used for backups
        and WALs (i.e. '60d'). The retention policy is expressed in the form
        of `XXu` where `XX` is a positive integer and `u` is in `[dwm]` -
        days, weeks, months.
        It's currently only applicable when using the BarmanObjectStore method.
    target : str, default is "prefer-standby", optional
        The policy to decide which instance should perform backups. Available
        options are empty string, which will default to `prefer-standby` policy,
        `primary` to have backups run always on primary instances, `prefer-standby`
        to have backups run preferably on the most updated standby, if available.
    volumeSnapshot : PostgresqlCnpgIoV1ClusterSpecBackupVolumeSnapshot, default is Undefined, optional
        volume snapshot
    """
    barmanObjectStore?: PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStore
    retentionPolicy?: str
    target?: "primary" | "prefer-standby" = "prefer-standby"
    volumeSnapshot?: PostgresqlCnpgIoV1ClusterSpecBackupVolumeSnapshot

    check:
        _regex_match(str(retentionPolicy), r"^[1-9][0-9]*[dwm]$") if retentionPolicy

schema PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStore:
    r"""
    The configuration for the barman-cloud tool suite

    Attributes
    ----------
    azureCredentials : PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreAzureCredentials, default is Undefined, optional
        azure credentials
    data : PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreData, default is Undefined, optional
        data
    destinationPath : str, default is Undefined, required
        The path where to store the backup (i.e. s3://bucket/path/to/folder)
        this path, with different destination folders, will be used for WALs
        and for data
    endpointCA : PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreEndpointCA, default is Undefined, optional
        endpoint c a
    endpointURL : str, default is Undefined, optional
        Endpoint to be used to upload data to the cloud,
        overriding the automatic endpoint discovery
    googleCredentials : PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreGoogleCredentials, default is Undefined, optional
        google credentials
    historyTags : {str:str}, default is Undefined, optional
        HistoryTags is a list of key value pairs that will be passed to the
        Barman --history-tags option.
    s3Credentials : PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreS3Credentials, default is Undefined, optional
        s3 credentials
    serverName : str, default is Undefined, optional
        The server name on S3, the cluster name is used if this
        parameter is omitted
    tags : {str:str}, default is Undefined, optional
        Tags is a list of key value pairs that will be passed to the
        Barman --tags option.
    wal : PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreWal, default is Undefined, optional
        wal
    """
    azureCredentials?: PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreAzureCredentials
    data?: PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreData
    destinationPath: str

    endpointCA?: PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreEndpointCA
    endpointURL?: str
    googleCredentials?: PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreGoogleCredentials
    historyTags?: {str:str}
    s3Credentials?: PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreS3Credentials
    serverName?: str
    tags?: {str:str}
    wal?: PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreWal

    check:
        len(destinationPath) >= 1

schema PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreAzureCredentials:
    r"""
    The credentials to use to upload data to Azure Blob Storage

    Attributes
    ----------
    connectionString : PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreAzureCredentialsConnectionString, default is Undefined, optional
        connection string
    inheritFromAzureAD : bool, default is Undefined, optional
        Use the Azure AD based authentication without providing explicitly the keys.
    storageAccount : PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageAccount, default is Undefined, optional
        storage account
    storageKey : PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageKey, default is Undefined, optional
        storage key
    storageSasToken : PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageSasToken, default is Undefined, optional
        storage sas token
    """
    connectionString?: PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreAzureCredentialsConnectionString
    inheritFromAzureAD?: bool
    storageAccount?: PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageAccount
    storageKey?: PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageKey
    storageSasToken?: PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageSasToken

schema PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreAzureCredentialsConnectionString:
    r"""
    The connection string to be used

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageAccount:
    r"""
    The storage account where to upload data

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageKey:
    r"""
    The storage account key to be used in conjunction
    with the storage account name

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreAzureCredentialsStorageSasToken:
    r"""
    A shared-access-signature to be used in conjunction with
    the storage account name

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreData:
    r"""
    The configuration to be used to backup the data files
    When not defined, base backups files will be stored uncompressed and may
    be unencrypted in the object store, according to the bucket default
    policy.

    Attributes
    ----------
    additionalCommandArgs : [str], default is Undefined, optional
        AdditionalCommandArgs represents additional arguments that can be appended
        to the 'barman-cloud-backup' command-line invocation. These arguments
        provide flexibility to customize the backup process further according to
        specific requirements or configurations.

        Example:
        In a scenario where specialized backup options are required, such as setting
        a specific timeout or defining custom behavior, users can use this field
        to specify additional command arguments.

        Note:
        It's essential to ensure that the provided arguments are valid and supported
        by the 'barman-cloud-backup' command, to avoid potential errors or unintended
        behavior during execution.
    compression : str, default is Undefined, optional
        Compress a backup file (a tar file per tablespace) while streaming it
        to the object store. Available options are empty string (no
        compression, default), `gzip`, `bzip2`, and `snappy`.
    encryption : str, default is Undefined, optional
        Whenever to force the encryption of files (if the bucket is
        not already configured for that).
        Allowed options are empty string (use the bucket policy, default),
        `AES256` and `aws:kms`
    immediateCheckpoint : bool, default is Undefined, optional
        Control whether the I/O workload for the backup initial checkpoint will
        be limited, according to the `checkpoint_completion_target` setting on
        the PostgreSQL server. If set to true, an immediate checkpoint will be
        used, meaning PostgreSQL will complete the checkpoint as soon as
        possible. `false` by default.
    jobs : int, default is Undefined, optional
        The number of parallel jobs to be used to upload the backup, defaults
        to 2
    """
    additionalCommandArgs?: [str]
    compression?: "bzip2" | "gzip" | "snappy"
    encryption?: "AES256" | "aws:kms"
    immediateCheckpoint?: bool
    jobs?: int

    check:
        jobs >= 1 if jobs not in [None, Undefined]

schema PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreEndpointCA:
    r"""
    EndpointCA store the CA bundle of the barman endpoint.
    Useful when using self-signed certificates to avoid
    errors with certificate issuer and barman-cloud-wal-archive

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreGoogleCredentials:
    r"""
    The credentials to use to upload data to Google Cloud Storage

    Attributes
    ----------
    applicationCredentials : PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreGoogleCredentialsApplicationCredentials, default is Undefined, optional
        application credentials
    gkeEnvironment : bool, default is Undefined, optional
        If set to true, will presume that it's running inside a GKE environment,
        default to false.
    """
    applicationCredentials?: PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreGoogleCredentialsApplicationCredentials
    gkeEnvironment?: bool

schema PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreGoogleCredentialsApplicationCredentials:
    r"""
    The secret containing the Google Cloud Storage JSON file with the credentials

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreS3Credentials:
    r"""
    The credentials to use to upload data to S3

    Attributes
    ----------
    accessKeyId : PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreS3CredentialsAccessKeyID, default is Undefined, optional
        access key Id
    inheritFromIAMRole : bool, default is Undefined, optional
        Use the role based authentication without providing explicitly the keys.
    region : PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreS3CredentialsRegion, default is Undefined, optional
        region
    secretAccessKey : PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreS3CredentialsSecretAccessKey, default is Undefined, optional
        secret access key
    sessionToken : PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreS3CredentialsSessionToken, default is Undefined, optional
        session token
    """
    accessKeyId?: PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreS3CredentialsAccessKeyID
    inheritFromIAMRole?: bool
    region?: PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreS3CredentialsRegion
    secretAccessKey?: PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreS3CredentialsSecretAccessKey
    sessionToken?: PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreS3CredentialsSessionToken

schema PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreS3CredentialsAccessKeyID:
    r"""
    The reference to the access key id

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreS3CredentialsRegion:
    r"""
    The reference to the secret containing the region name

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreS3CredentialsSecretAccessKey:
    r"""
    The reference to the secret access key

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreS3CredentialsSessionToken:
    r"""
    The references to the session key

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecBackupBarmanObjectStoreWal:
    r"""
    The configuration for the backup of the WAL stream.
    When not defined, WAL files will be stored uncompressed and may be
    unencrypted in the object store, according to the bucket default policy.

    Attributes
    ----------
    archiveAdditionalCommandArgs : [str], default is Undefined, optional
        Additional arguments that can be appended to the 'barman-cloud-wal-archive'
        command-line invocation. These arguments provide flexibility to customize
        the WAL archive process further, according to specific requirements or configurations.

        Example:
        In a scenario where specialized backup options are required, such as setting
        a specific timeout or defining custom behavior, users can use this field
        to specify additional command arguments.

        Note:
        It's essential to ensure that the provided arguments are valid and supported
        by the 'barman-cloud-wal-archive' command, to avoid potential errors or unintended
        behavior during execution.
    compression : str, default is Undefined, optional
        Compress a WAL file before sending it to the object store. Available
        options are empty string (no compression, default), `gzip`, `bzip2`,
        `lz4`, `snappy`, `xz`, and `zstd`.
    encryption : str, default is Undefined, optional
        Whenever to force the encryption of files (if the bucket is
        not already configured for that).
        Allowed options are empty string (use the bucket policy, default),
        `AES256` and `aws:kms`
    maxParallel : int, default is Undefined, optional
        Number of WAL files to be either archived in parallel (when the
        PostgreSQL instance is archiving to a backup object store) or
        restored in parallel (when a PostgreSQL standby is fetching WAL
        files from a recovery object store). If not specified, WAL files
        will be processed one at a time. It accepts a positive integer as a
        value - with 1 being the minimum accepted value.
    restoreAdditionalCommandArgs : [str], default is Undefined, optional
        Additional arguments that can be appended to the 'barman-cloud-wal-restore'
        command-line invocation. These arguments provide flexibility to customize
        the WAL restore process further, according to specific requirements or configurations.

        Example:
        In a scenario where specialized backup options are required, such as setting
        a specific timeout or defining custom behavior, users can use this field
        to specify additional command arguments.

        Note:
        It's essential to ensure that the provided arguments are valid and supported
        by the 'barman-cloud-wal-restore' command, to avoid potential errors or unintended
        behavior during execution.
    """
    archiveAdditionalCommandArgs?: [str]
    compression?: "bzip2" | "gzip" | "lz4" | "snappy" | "xz" | "zstd"
    encryption?: "AES256" | "aws:kms"
    maxParallel?: int
    restoreAdditionalCommandArgs?: [str]

    check:
        maxParallel >= 1 if maxParallel not in [None, Undefined]

schema PostgresqlCnpgIoV1ClusterSpecBackupVolumeSnapshot:
    r"""
    VolumeSnapshot provides the configuration for the execution of volume snapshot backups.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations key-value pairs that will be added to .metadata.annotations snapshot resources.
    className : str, default is Undefined, optional
        ClassName specifies the Snapshot Class to be used for PG_DATA PersistentVolumeClaim.
        It is the default class for the other types if no specific class is present
    labels : {str:str}, default is Undefined, optional
        Labels are key-value pairs that will be added to .metadata.labels snapshot resources.
    online : bool, default is True, optional
        Whether the default type of backup with volume snapshots is
        online/hot (`true`, default) or offline/cold (`false`)
    onlineConfiguration : PostgresqlCnpgIoV1ClusterSpecBackupVolumeSnapshotOnlineConfiguration, default is Undefined, optional
        online configuration
    snapshotOwnerReference : str, default is "none", optional
        SnapshotOwnerReference indicates the type of owner reference the snapshot should have
    tablespaceClassName : {str:str}, default is Undefined, optional
        TablespaceClassName specifies the Snapshot Class to be used for the tablespaces.
        defaults to the PGDATA Snapshot Class, if set
    walClassName : str, default is Undefined, optional
        WalClassName specifies the Snapshot Class to be used for the PG_WAL PersistentVolumeClaim.
    """
    annotations?: {str:str}
    className?: str
    labels?: {str:str}
    online?: bool = True
    onlineConfiguration?: PostgresqlCnpgIoV1ClusterSpecBackupVolumeSnapshotOnlineConfiguration
    snapshotOwnerReference?: "none" | "cluster" | "backup" = "none"
    tablespaceClassName?: {str:str}
    walClassName?: str

schema PostgresqlCnpgIoV1ClusterSpecBackupVolumeSnapshotOnlineConfiguration:
    r"""
    Configuration parameters to control the online/hot backup with volume snapshots

    Attributes
    ----------
    immediateCheckpoint : bool, default is Undefined, optional
        Control whether the I/O workload for the backup initial checkpoint will
        be limited, according to the `checkpoint_completion_target` setting on
        the PostgreSQL server. If set to true, an immediate checkpoint will be
        used, meaning PostgreSQL will complete the checkpoint as soon as
        possible. `false` by default.
    waitForArchive : bool, default is True, optional
        If false, the function will return immediately after the backup is completed,
        without waiting for WAL to be archived.
        This behavior is only useful with backup software that independently monitors WAL archiving.
        Otherwise, WAL required to make the backup consistent might be missing and make the backup useless.
        By default, or when this parameter is true, pg_backup_stop will wait for WAL to be archived when archiving is
        enabled.
        On a standby, this means that it will wait only when archive_mode = always.
        If write activity on the primary is low, it may be useful to run pg_switch_wal on the primary in order to trigger
        an immediate segment switch.
    """
    immediateCheckpoint?: bool
    waitForArchive?: bool = True

schema PostgresqlCnpgIoV1ClusterSpecBootstrap:
    r"""
    Instructions to bootstrap this cluster

    Attributes
    ----------
    initdb : PostgresqlCnpgIoV1ClusterSpecBootstrapInitdb, default is Undefined, optional
        initdb
    pg_basebackup : PostgresqlCnpgIoV1ClusterSpecBootstrapPgBasebackup, default is Undefined, optional
        pg basebackup
    recovery : PostgresqlCnpgIoV1ClusterSpecBootstrapRecovery, default is Undefined, optional
        recovery
    """
    initdb?: PostgresqlCnpgIoV1ClusterSpecBootstrapInitdb
    pg_basebackup?: PostgresqlCnpgIoV1ClusterSpecBootstrapPgBasebackup
    recovery?: PostgresqlCnpgIoV1ClusterSpecBootstrapRecovery

schema PostgresqlCnpgIoV1ClusterSpecBootstrapInitdb:
    r"""
    Bootstrap the cluster via initdb

    Attributes
    ----------
    builtinLocale : str, default is Undefined, optional
        Specifies the locale name when the builtin provider is used.
        This option requires `localeProvider` to be set to `builtin`.
        Available from PostgreSQL 17.
    dataChecksums : bool, default is Undefined, optional
        Whether the `-k` option should be passed to initdb,
        enabling checksums on data pages (default: `false`)
    database : str, default is Undefined, optional
        Name of the database used by the application. Default: `app`.
    encoding : str, default is Undefined, optional
        The value to be passed as option `--encoding` for initdb (default:`UTF8`)
    icuLocale : str, default is Undefined, optional
        Specifies the ICU locale when the ICU provider is used.
        This option requires `localeProvider` to be set to `icu`.
        Available from PostgreSQL 15.
    icuRules : str, default is Undefined, optional
        Specifies additional collation rules to customize the behavior of the default collation.
        This option requires `localeProvider` to be set to `icu`.
        Available from PostgreSQL 16.
    $import : PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbImport, default is Undefined, optional
        import
    locale : str, default is Undefined, optional
        Sets the default collation order and character classification in the new database.
    localeCType : str, default is Undefined, optional
        The value to be passed as option `--lc-ctype` for initdb (default:`C`)
    localeCollate : str, default is Undefined, optional
        The value to be passed as option `--lc-collate` for initdb (default:`C`)
    localeProvider : str, default is Undefined, optional
        This option sets the locale provider for databases created in the new cluster.
        Available from PostgreSQL 16.
    options : [str], default is Undefined, optional
        The list of options that must be passed to initdb when creating the cluster.
        Deprecated: This could lead to inconsistent configurations,
        please use the explicit provided parameters instead.
        If defined, explicit values will be ignored.
    owner : str, default is Undefined, optional
        Name of the owner of the database in the instance to be used
        by applications. Defaults to the value of the `database` key.
    postInitApplicationSQL : [str], default is Undefined, optional
        List of SQL queries to be executed as a superuser in the application
        database right after the cluster has been created - to be used with extreme care
        (by default empty)
    postInitApplicationSQLRefs : PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitApplicationSQLRefs, default is Undefined, optional
        post init application SQL refs
    postInitSQL : [str], default is Undefined, optional
        List of SQL queries to be executed as a superuser in the `postgres`
        database right after the cluster has been created - to be used with extreme care
        (by default empty)
    postInitSQLRefs : PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitSQLRefs, default is Undefined, optional
        post init SQL refs
    postInitTemplateSQL : [str], default is Undefined, optional
        List of SQL queries to be executed as a superuser in the `template1`
        database right after the cluster has been created - to be used with extreme care
        (by default empty)
    postInitTemplateSQLRefs : PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitTemplateSQLRefs, default is Undefined, optional
        post init template SQL refs
    secret : PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbSecret, default is Undefined, optional
        secret
    walSegmentSize : int, default is Undefined, optional
        The value in megabytes (1 to 1024) to be passed to the `--wal-segsize`
        option for initdb (default: empty, resulting in PostgreSQL default: 16MB)
    """
    builtinLocale?: str
    dataChecksums?: bool
    database?: str
    encoding?: str
    icuLocale?: str
    icuRules?: str
    $import?: PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbImport
    locale?: str
    localeCType?: str
    localeCollate?: str
    localeProvider?: str
    options?: [str]
    owner?: str
    postInitApplicationSQL?: [str]
    postInitApplicationSQLRefs?: PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitApplicationSQLRefs
    postInitSQL?: [str]
    postInitSQLRefs?: PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitSQLRefs
    postInitTemplateSQL?: [str]
    postInitTemplateSQLRefs?: PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitTemplateSQLRefs
    secret?: PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbSecret
    walSegmentSize?: int

    check:
        walSegmentSize <= 1024 if walSegmentSize not in [None, Undefined]
        walSegmentSize >= 1 if walSegmentSize not in [None, Undefined]

schema PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbImport:
    r"""
    Bootstraps the new cluster by importing data from an existing PostgreSQL
    instance using logical backup (`pg_dump` and `pg_restore`)

    Attributes
    ----------
    databases : [str], default is Undefined, required
        The databases to import
    pgDumpExtraOptions : [str], default is Undefined, optional
        List of custom options to pass to the `pg_dump` command. IMPORTANT:
        Use these options with caution and at your own risk, as the operator
        does not validate their content. Be aware that certain options may
        conflict with the operator's intended functionality or design.
    pgRestoreExtraOptions : [str], default is Undefined, optional
        List of custom options to pass to the `pg_restore` command. IMPORTANT:
        Use these options with caution and at your own risk, as the operator
        does not validate their content. Be aware that certain options may
        conflict with the operator's intended functionality or design.
    postImportApplicationSQL : [str], default is Undefined, optional
        List of SQL queries to be executed as a superuser in the application
        database right after is imported - to be used with extreme care
        (by default empty). Only available in microservice type.
    roles : [str], default is Undefined, optional
        The roles to import
    schemaOnly : bool, default is Undefined, optional
        When set to true, only the `pre-data` and `post-data` sections of
        `pg_restore` are invoked, avoiding data import. Default: `false`.
    source : PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbImportSource, default is Undefined, required
        source
    $type : str, default is Undefined, required
        The import type. Can be `microservice` or `monolith`.
    """
    databases: [str]

    pgDumpExtraOptions?: [str]
    pgRestoreExtraOptions?: [str]
    postImportApplicationSQL?: [str]
    roles?: [str]
    schemaOnly?: bool
    source: PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbImportSource

    $type: "microservice" | "monolith"

schema PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbImportSource:
    r"""
    The source of the import

    Attributes
    ----------
    externalCluster : str, default is Undefined, required
        The name of the externalCluster used for import
    """
    externalCluster: str

schema PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitApplicationSQLRefs:
    r"""
    List of references to ConfigMaps or Secrets containing SQL files
    to be executed as a superuser in the application database right after
    the cluster has been created. The references are processed in a specific order:
    first, all Secrets are processed, followed by all ConfigMaps.
    Within each group, the processing order follows the sequence specified
    in their respective arrays.
    (by default empty)

    Attributes
    ----------
    configMapRefs : [PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitApplicationSQLRefsConfigMapRefsItems0], default is Undefined, optional
        ConfigMapRefs holds a list of references to ConfigMaps
    secretRefs : [PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitApplicationSQLRefsSecretRefsItems0], default is Undefined, optional
        SecretRefs holds a list of references to Secrets
    """
    configMapRefs?: [PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitApplicationSQLRefsConfigMapRefsItems0]
    secretRefs?: [PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitApplicationSQLRefsSecretRefsItems0]

schema PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitApplicationSQLRefsConfigMapRefsItems0:
    r"""
    ConfigMapKeySelector contains enough information to let you locate
    the key of a ConfigMap

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitApplicationSQLRefsSecretRefsItems0:
    r"""
    SecretKeySelector contains enough information to let you locate
    the key of a Secret

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitSQLRefs:
    r"""
    List of references to ConfigMaps or Secrets containing SQL files
    to be executed as a superuser in the `postgres` database right after
    the cluster has been created. The references are processed in a specific order:
    first, all Secrets are processed, followed by all ConfigMaps.
    Within each group, the processing order follows the sequence specified
    in their respective arrays.
    (by default empty)

    Attributes
    ----------
    configMapRefs : [PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitSQLRefsConfigMapRefsItems0], default is Undefined, optional
        ConfigMapRefs holds a list of references to ConfigMaps
    secretRefs : [PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitSQLRefsSecretRefsItems0], default is Undefined, optional
        SecretRefs holds a list of references to Secrets
    """
    configMapRefs?: [PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitSQLRefsConfigMapRefsItems0]
    secretRefs?: [PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitSQLRefsSecretRefsItems0]

schema PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitSQLRefsConfigMapRefsItems0:
    r"""
    ConfigMapKeySelector contains enough information to let you locate
    the key of a ConfigMap

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitSQLRefsSecretRefsItems0:
    r"""
    SecretKeySelector contains enough information to let you locate
    the key of a Secret

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitTemplateSQLRefs:
    r"""
    List of references to ConfigMaps or Secrets containing SQL files
    to be executed as a superuser in the `template1` database right after
    the cluster has been created. The references are processed in a specific order:
    first, all Secrets are processed, followed by all ConfigMaps.
    Within each group, the processing order follows the sequence specified
    in their respective arrays.
    (by default empty)

    Attributes
    ----------
    configMapRefs : [PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitTemplateSQLRefsConfigMapRefsItems0], default is Undefined, optional
        ConfigMapRefs holds a list of references to ConfigMaps
    secretRefs : [PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitTemplateSQLRefsSecretRefsItems0], default is Undefined, optional
        SecretRefs holds a list of references to Secrets
    """
    configMapRefs?: [PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitTemplateSQLRefsConfigMapRefsItems0]
    secretRefs?: [PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitTemplateSQLRefsSecretRefsItems0]

schema PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitTemplateSQLRefsConfigMapRefsItems0:
    r"""
    ConfigMapKeySelector contains enough information to let you locate
    the key of a ConfigMap

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbPostInitTemplateSQLRefsSecretRefsItems0:
    r"""
    SecretKeySelector contains enough information to let you locate
    the key of a Secret

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecBootstrapInitdbSecret:
    r"""
    Name of the secret containing the initial credentials for the
    owner of the user database. If empty a new secret will be
    created from scratch

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referent.
    """
    name: str

schema PostgresqlCnpgIoV1ClusterSpecBootstrapPgBasebackup:
    r"""
    Bootstrap the cluster taking a physical backup of another compatible
    PostgreSQL instance

    Attributes
    ----------
    database : str, default is Undefined, optional
        Name of the database used by the application. Default: `app`.
    owner : str, default is Undefined, optional
        Name of the owner of the database in the instance to be used
        by applications. Defaults to the value of the `database` key.
    secret : PostgresqlCnpgIoV1ClusterSpecBootstrapPgBasebackupSecret, default is Undefined, optional
        secret
    source : str, default is Undefined, required
        The name of the server of which we need to take a physical backup
    """
    database?: str
    owner?: str
    secret?: PostgresqlCnpgIoV1ClusterSpecBootstrapPgBasebackupSecret
    source: str

    check:
        len(source) >= 1

schema PostgresqlCnpgIoV1ClusterSpecBootstrapPgBasebackupSecret:
    r"""
    Name of the secret containing the initial credentials for the
    owner of the user database. If empty a new secret will be
    created from scratch

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referent.
    """
    name: str

schema PostgresqlCnpgIoV1ClusterSpecBootstrapRecovery:
    r"""
    Bootstrap the cluster from a backup

    Attributes
    ----------
    backup : PostgresqlCnpgIoV1ClusterSpecBootstrapRecoveryBackup, default is Undefined, optional
        backup
    database : str, default is Undefined, optional
        Name of the database used by the application. Default: `app`.
    owner : str, default is Undefined, optional
        Name of the owner of the database in the instance to be used
        by applications. Defaults to the value of the `database` key.
    recoveryTarget : PostgresqlCnpgIoV1ClusterSpecBootstrapRecoveryRecoveryTarget, default is Undefined, optional
        recovery target
    secret : PostgresqlCnpgIoV1ClusterSpecBootstrapRecoverySecret, default is Undefined, optional
        secret
    source : str, default is Undefined, optional
        The external cluster whose backup we will restore. This is also
        used as the name of the folder under which the backup is stored,
        so it must be set to the name of the source cluster
        Mutually exclusive with `backup`.
    volumeSnapshots : PostgresqlCnpgIoV1ClusterSpecBootstrapRecoveryVolumeSnapshots, default is Undefined, optional
        volume snapshots
    """
    backup?: PostgresqlCnpgIoV1ClusterSpecBootstrapRecoveryBackup
    database?: str
    owner?: str
    recoveryTarget?: PostgresqlCnpgIoV1ClusterSpecBootstrapRecoveryRecoveryTarget
    secret?: PostgresqlCnpgIoV1ClusterSpecBootstrapRecoverySecret
    source?: str
    volumeSnapshots?: PostgresqlCnpgIoV1ClusterSpecBootstrapRecoveryVolumeSnapshots

schema PostgresqlCnpgIoV1ClusterSpecBootstrapRecoveryBackup:
    r"""
    The backup object containing the physical base backup from which to
    initiate the recovery procedure.
    Mutually exclusive with `source` and `volumeSnapshots`.

    Attributes
    ----------
    endpointCA : PostgresqlCnpgIoV1ClusterSpecBootstrapRecoveryBackupEndpointCA, default is Undefined, optional
        endpoint c a
    name : str, default is Undefined, required
        Name of the referent.
    """
    endpointCA?: PostgresqlCnpgIoV1ClusterSpecBootstrapRecoveryBackupEndpointCA
    name: str

schema PostgresqlCnpgIoV1ClusterSpecBootstrapRecoveryBackupEndpointCA:
    r"""
    EndpointCA store the CA bundle of the barman endpoint.
    Useful when using self-signed certificates to avoid
    errors with certificate issuer and barman-cloud-wal-archive.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecBootstrapRecoveryRecoveryTarget:
    r"""
    By default, the recovery process applies all the available
    WAL files in the archive (full recovery). However, you can also
    end the recovery as soon as a consistent state is reached or
    recover to a point-in-time (PITR) by specifying a `RecoveryTarget` object,
    as expected by PostgreSQL (i.e., timestamp, transaction Id, LSN, ...).
    More info: https://www.postgresql.org/docs/current/runtime-config-wal.html#RUNTIME-CONFIG-WAL-RECOVERY-TARGET

    Attributes
    ----------
    backupID : str, default is Undefined, optional
        The ID of the backup from which to start the recovery process.
        If empty (default) the operator will automatically detect the backup
        based on targetTime or targetLSN if specified. Otherwise use the
        latest available backup in chronological order.
    exclusive : bool, default is Undefined, optional
        Set the target to be exclusive. If omitted, defaults to false, so that
        in Postgres, `recovery_target_inclusive` will be true
    targetImmediate : bool, default is Undefined, optional
        End recovery as soon as a consistent state is reached
    targetLSN : str, default is Undefined, optional
        The target LSN (Log Sequence Number)
    targetName : str, default is Undefined, optional
        The target name (to be previously created
        with `pg_create_restore_point`)
    targetTLI : str, default is Undefined, optional
        The target timeline ("latest" or a positive integer)
    targetTime : str, default is Undefined, optional
        The target time as a timestamp in the RFC3339 standard
    targetXID : str, default is Undefined, optional
        The target transaction ID
    """
    backupID?: str
    exclusive?: bool
    targetImmediate?: bool
    targetLSN?: str
    targetName?: str
    targetTLI?: str
    targetTime?: str
    targetXID?: str

schema PostgresqlCnpgIoV1ClusterSpecBootstrapRecoverySecret:
    r"""
    Name of the secret containing the initial credentials for the
    owner of the user database. If empty a new secret will be
    created from scratch

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referent.
    """
    name: str

schema PostgresqlCnpgIoV1ClusterSpecBootstrapRecoveryVolumeSnapshots:
    r"""
    The static PVC data source(s) from which to initiate the
    recovery procedure. Currently supporting `VolumeSnapshot`
    and `PersistentVolumeClaim` resources that map an existing
    PVC group, compatible with CloudNativePG, and taken with
    a cold backup copy on a fenced Postgres instance (limitation
    which will be removed in the future when online backup
    will be implemented).
    Mutually exclusive with `backup`.

    Attributes
    ----------
    storage : PostgresqlCnpgIoV1ClusterSpecBootstrapRecoveryVolumeSnapshotsStorage, default is Undefined, required
        storage
    tablespaceStorage : {str:PostgresqlCnpgIoV1ClusterSpecBootstrapRecoveryVolumeSnapshotsTablespaceStorageAnon}, default is Undefined, optional
        Configuration of the storage for PostgreSQL tablespaces
    walStorage : PostgresqlCnpgIoV1ClusterSpecBootstrapRecoveryVolumeSnapshotsWalStorage, default is Undefined, optional
        wal storage
    """
    storage: PostgresqlCnpgIoV1ClusterSpecBootstrapRecoveryVolumeSnapshotsStorage

    tablespaceStorage?: {str:PostgresqlCnpgIoV1ClusterSpecBootstrapRecoveryVolumeSnapshotsTablespaceStorageAnon}
    walStorage?: PostgresqlCnpgIoV1ClusterSpecBootstrapRecoveryVolumeSnapshotsWalStorage

schema PostgresqlCnpgIoV1ClusterSpecBootstrapRecoveryVolumeSnapshotsStorage:
    r"""
    Configuration of the storage of the instances

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    """
    apiGroup?: str
    kind: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecBootstrapRecoveryVolumeSnapshotsTablespaceStorageAnon:
    r"""
    TypedLocalObjectReference contains enough information to let you locate the
    typed referenced object inside the same namespace.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    """
    apiGroup?: str
    kind: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecBootstrapRecoveryVolumeSnapshotsWalStorage:
    r"""
    Configuration of the storage for PostgreSQL WAL (Write-Ahead Log)

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    """
    apiGroup?: str
    kind: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecCertificates:
    r"""
    The configuration for the CA and related certificates

    Attributes
    ----------
    clientCASecret : str, default is Undefined, optional
        The secret containing the Client CA certificate. If not defined, a new secret will be created
        with a self-signed CA and will be used to generate all the client certificates.<br />
        <br />
        Contains:<br />
        <br />
        - `ca.crt`: CA that should be used to validate the client certificates,
        used as `ssl_ca_file` of all the instances.<br />
        - `ca.key`: key used to generate client certificates, if ReplicationTLSSecret is provided,
        this can be omitted.<br />
    replicationTLSSecret : str, default is Undefined, optional
        The secret of type kubernetes.io/tls containing the client certificate to authenticate as
        the `streaming_replica` user.
        If not defined, ClientCASecret must provide also `ca.key`, and a new secret will be
        created using the provided CA.
    serverAltDNSNames : [str], default is Undefined, optional
        The list of the server alternative DNS names to be added to the generated server TLS certificates, when required.
    serverCASecret : str, default is Undefined, optional
        The secret containing the Server CA certificate. If not defined, a new secret will be created
        with a self-signed CA and will be used to generate the TLS certificate ServerTLSSecret.<br />
        <br />
        Contains:<br />
        <br />
        - `ca.crt`: CA that should be used to validate the server certificate,
        used as `sslrootcert` in client connection strings.<br />
        - `ca.key`: key used to generate Server SSL certs, if ServerTLSSecret is provided,
        this can be omitted.<br />
    serverTLSSecret : str, default is Undefined, optional
        The secret of type kubernetes.io/tls containing the server TLS certificate and key that will be set as
        `ssl_cert_file` and `ssl_key_file` so that clients can connect to postgres securely.
        If not defined, ServerCASecret must provide also `ca.key` and a new secret will be
        created using the provided CA.
    """
    clientCASecret?: str
    replicationTLSSecret?: str
    serverAltDNSNames?: [str]
    serverCASecret?: str
    serverTLSSecret?: str

schema PostgresqlCnpgIoV1ClusterSpecEnvFromItems0:
    r"""
    EnvFromSource represents the source of a set of ConfigMaps or Secrets

    Attributes
    ----------
    configMapRef : PostgresqlCnpgIoV1ClusterSpecEnvFromItems0ConfigMapRef, default is Undefined, optional
        config map ref
    prefix : str, default is Undefined, optional
        Optional text to prepend to the name of each environment variable.
        May consist of any printable ASCII characters except '='.
    secretRef : PostgresqlCnpgIoV1ClusterSpecEnvFromItems0SecretRef, default is Undefined, optional
        secret ref
    """
    configMapRef?: PostgresqlCnpgIoV1ClusterSpecEnvFromItems0ConfigMapRef
    prefix?: str
    secretRef?: PostgresqlCnpgIoV1ClusterSpecEnvFromItems0SecretRef

schema PostgresqlCnpgIoV1ClusterSpecEnvFromItems0ConfigMapRef:
    r"""
    The ConfigMap to select from

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap must be defined
    """
    name?: str = ""
    optional?: bool

schema PostgresqlCnpgIoV1ClusterSpecEnvFromItems0SecretRef:
    r"""
    The Secret to select from

    Attributes
    ----------
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret must be defined
    """
    name?: str = ""
    optional?: bool

schema PostgresqlCnpgIoV1ClusterSpecEnvItems0:
    r"""
    EnvVar represents an environment variable present in a Container.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the environment variable.
        May consist of any printable ASCII characters except '='.
    value : str, default is Undefined, optional
        Variable references $(VAR_NAME) are expanded
        using the previously defined environment variables in the container and
        any service environment variables. If a variable cannot be resolved,
        the reference in the input string will be unchanged. Double $$ are reduced
        to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
        "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
        Escaped references will never be expanded, regardless of whether the variable
        exists or not.
        Defaults to "".
    valueFrom : PostgresqlCnpgIoV1ClusterSpecEnvItems0ValueFrom, default is Undefined, optional
        value from
    """
    name: str

    value?: str
    valueFrom?: PostgresqlCnpgIoV1ClusterSpecEnvItems0ValueFrom

schema PostgresqlCnpgIoV1ClusterSpecEnvItems0ValueFrom:
    r"""
    Source for the environment variable's value. Cannot be used if value is not empty.

    Attributes
    ----------
    configMapKeyRef : PostgresqlCnpgIoV1ClusterSpecEnvItems0ValueFromConfigMapKeyRef, default is Undefined, optional
        config map key ref
    fieldRef : PostgresqlCnpgIoV1ClusterSpecEnvItems0ValueFromFieldRef, default is Undefined, optional
        field ref
    fileKeyRef : PostgresqlCnpgIoV1ClusterSpecEnvItems0ValueFromFileKeyRef, default is Undefined, optional
        file key ref
    resourceFieldRef : PostgresqlCnpgIoV1ClusterSpecEnvItems0ValueFromResourceFieldRef, default is Undefined, optional
        resource field ref
    secretKeyRef : PostgresqlCnpgIoV1ClusterSpecEnvItems0ValueFromSecretKeyRef, default is Undefined, optional
        secret key ref
    """
    configMapKeyRef?: PostgresqlCnpgIoV1ClusterSpecEnvItems0ValueFromConfigMapKeyRef
    fieldRef?: PostgresqlCnpgIoV1ClusterSpecEnvItems0ValueFromFieldRef
    fileKeyRef?: PostgresqlCnpgIoV1ClusterSpecEnvItems0ValueFromFileKeyRef
    resourceFieldRef?: PostgresqlCnpgIoV1ClusterSpecEnvItems0ValueFromResourceFieldRef
    secretKeyRef?: PostgresqlCnpgIoV1ClusterSpecEnvItems0ValueFromSecretKeyRef

schema PostgresqlCnpgIoV1ClusterSpecEnvItems0ValueFromConfigMapKeyRef:
    r"""
    Selects a key of a ConfigMap.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the ConfigMap or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema PostgresqlCnpgIoV1ClusterSpecEnvItems0ValueFromFieldRef:
    r"""
    Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
    spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, default is Undefined, required
        Path of the field to select in the specified API version.
    """
    apiVersion?: str
    fieldPath: str

schema PostgresqlCnpgIoV1ClusterSpecEnvItems0ValueFromFileKeyRef:
    r"""
    FileKeyRef selects a key of the env file.
    Requires the EnvFiles feature gate to be enabled.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key within the env file. An invalid key will prevent the pod from starting.
        The keys defined within a source may consist of any printable ASCII characters except '='.
        During Alpha stage of the EnvFiles feature gate, the key size is limited to 128 characters.
    optional : bool, default is Undefined, optional
        Specify whether the file or its key must be defined. If the file or key
        does not exist, then the env var is not published.
        If optional is set to true and the specified key does not exist,
        the environment variable will not be set in the Pod's containers.

        If optional is set to false and the specified key does not exist,
        an error will be returned during Pod creation.
    path : str, default is Undefined, required
        The path within the volume from which to select the file.
        Must be relative and may not contain the '..' path or start with '..'.
    volumeName : str, default is Undefined, required
        The name of the volume mount containing the env file.
    """
    key: str

    optional?: bool = False
    path: str

    volumeName: str

schema PostgresqlCnpgIoV1ClusterSpecEnvItems0ValueFromResourceFieldRef:
    r"""
    Selects a resource of the container: only resources limits and requests
    (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Container name: required for volumes, optional for env vars
    divisor : int | str, default is Undefined, optional
        Specifies the output format of the exposed resources, defaults to "1"
    resource : str, default is Undefined, required
        Required: resource to select
    """
    containerName?: str
    divisor?: int | str
    resource: str

    check:
        _regex_match(str(divisor), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if divisor

schema PostgresqlCnpgIoV1ClusterSpecEnvItems0ValueFromSecretKeyRef:
    r"""
    Selects a key of a secret in the pod's namespace

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSource:
    r"""
    EphemeralVolumeSource allows the user to configure the source of ephemeral volumes.

    Attributes
    ----------
    volumeClaimTemplate : PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSourceVolumeClaimTemplate, default is Undefined, optional
        volume claim template
    """
    volumeClaimTemplate?: PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSourceVolumeClaimTemplate

schema PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSourceVolumeClaimTemplate:
    r"""
    Will be used to create a stand-alone PVC to provision the volume.
    The pod in which this EphemeralVolumeSource is embedded will be the
    owner of the PVC, i.e. the PVC will be deleted together with the
    pod.  The name of the PVC will be `<pod name>-<volume name>` where
    `<volume name>` is the name from the `PodSpec.Volumes` array
    entry. Pod validation will reject the pod if the concatenated name
    is not valid for a PVC (for example, too long).

    An existing PVC with that name that is not owned by the pod
    will *not* be used for the pod to avoid using an unrelated
    volume by mistake. Starting the pod is then blocked until
    the unrelated PVC is removed. If such a pre-created PVC is
    meant to be used by the pod, the PVC has to updated with an
    owner reference to the pod once the pod exists. Normally
    this should not be necessary, but it may be useful when
    manually reconstructing a broken cluster.

    This field is read-only and no changes will be made by Kubernetes
    to the PVC after it has been created.

    Required, must not be nil.

    Attributes
    ----------
    metadata : any, default is Undefined, optional
        May contain labels and annotations that will be copied into the PVC
        when creating it. No other fields are allowed and will be rejected during
        validation.
    spec : PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpec, default is Undefined, required
        spec
    """
    metadata?: any
    spec: PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpec

schema PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpec:
    r"""
    The specification for the PersistentVolumeClaim. The entire content is
    copied unchanged into the PVC that gets created from this
    template. The same fields as in a PersistentVolumeClaim
    are also valid here.

    Attributes
    ----------
    accessModes : [str], default is Undefined, optional
        accessModes contains the desired access modes the volume should have.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    dataSource : PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecDataSource, default is Undefined, optional
        data source
    dataSourceRef : PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecDataSourceRef, default is Undefined, optional
        data source ref
    resources : PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecResources, default is Undefined, optional
        resources
    selector : PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecSelector, default is Undefined, optional
        selector
    storageClassName : str, default is Undefined, optional
        storageClassName is the name of the StorageClass required by the claim.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    volumeAttributesClassName : str, default is Undefined, optional
        volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
        If specified, the CSI driver will create or update the volume with the attributes defined
        in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
        it can be changed after the claim is created. An empty string or nil value indicates that no
        VolumeAttributesClass will be applied to the claim. If the claim enters an Infeasible error state,
        this field can be reset to its previous value (including nil) to cancel the modification.
        If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
        set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
        exists.
        More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
    volumeMode : str, default is Undefined, optional
        volumeMode defines what type of volume is required by the claim.
        Value of Filesystem is implied when not included in claim spec.
    volumeName : str, default is Undefined, optional
        volumeName is the binding reference to the PersistentVolume backing this claim.
    """
    accessModes?: [str]
    dataSource?: PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecDataSource
    dataSourceRef?: PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecDataSourceRef
    resources?: PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecResources
    selector?: PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecSelector
    storageClassName?: str
    volumeAttributesClassName?: str
    volumeMode?: str
    volumeName?: str

schema PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecDataSource:
    r"""
    dataSource field can be used to specify either:
    * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
    * An existing PVC (PersistentVolumeClaim)
    If the provisioner or an external controller can support the specified data source,
    it will create a new volume based on the contents of the specified data source.
    When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
    and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
    If the namespace is specified, then dataSourceRef will not be copied to dataSource.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    """
    apiGroup?: str
    kind: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecDataSourceRef:
    r"""
    dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
    volume is desired. This may be any object from a non-empty API group (non
    core object) or a PersistentVolumeClaim object.
    When this field is specified, volume binding will only succeed if the type of
    the specified object matches some installed volume populator or dynamic
    provisioner.
    This field will replace the functionality of the dataSource field and as such
    if both fields are non-empty, they must have the same value. For backwards
    compatibility, when namespace isn't specified in dataSourceRef,
    both fields (dataSource and dataSourceRef) will be set to the same
    value automatically if one of them is empty and the other is non-empty.
    When namespace is specified in dataSourceRef,
    dataSource isn't set to the same value and must be empty.
    There are three important differences between dataSource and dataSourceRef:
    * While dataSource only allows two specific types of objects, dataSourceRef
      allows any non-core object, as well as PersistentVolumeClaim objects.
    * While dataSource ignores disallowed values (dropping them), dataSourceRef
      preserves all values, and generates an error if a disallowed value is
      specified.
    * While dataSource only allows local objects, dataSourceRef allows objects
      in any namespaces.
    (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
    (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    namespace : str, default is Undefined, optional
        Namespace is the namespace of resource being referenced
        Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
        (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
    """
    apiGroup?: str
    kind: str

    name: str

    namespace?: str

schema PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecResources:
    r"""
    resources represents the minimum resources the volume should have.
    If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
    that are lower than previous value but must still be higher than capacity recorded in the
    status field of the claim.
    More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources

    Attributes
    ----------
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """
    limits?: {str:int | str}
    requests?: {str:int | str}

    check:
        all _, limits in limits {_regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits} if limits
        all _, requests in requests {_regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests} if requests

schema PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecSelector:
    r"""
    selector is a label query over volumes to consider for binding.

    Attributes
    ----------
    matchExpressions : [PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema PostgresqlCnpgIoV1ClusterSpecEphemeralVolumeSourceVolumeClaimTemplateSpecSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema PostgresqlCnpgIoV1ClusterSpecEphemeralVolumesSizeLimit:
    r"""
    EphemeralVolumesSizeLimit allows the user to set the limits for the ephemeral
    volumes

    Attributes
    ----------
    shm : int | str, default is Undefined, optional
        Shm is the size limit of the shared memory volume
    temporaryData : int | str, default is Undefined, optional
        TemporaryData is the size limit of the temporary data volume
    """
    shm?: int | str
    temporaryData?: int | str

    check:
        _regex_match(str(shm), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if shm
        _regex_match(str(temporaryData), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if temporaryData

schema PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0:
    r"""
    ExternalCluster represents the connection parameters to an
    external cluster which is used in the other sections of the configuration

    Attributes
    ----------
    barmanObjectStore : PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStore, default is Undefined, optional
        barman object store
    connectionParameters : {str:str}, default is Undefined, optional
        The list of connection parameters, such as dbname, host, username, etc
    name : str, default is Undefined, required
        The server name, required
    password : PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0Password, default is Undefined, optional
        password
    plugin : PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0Plugin, default is Undefined, optional
        plugin
    sslCert : PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0SslCert, default is Undefined, optional
        ssl cert
    sslKey : PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0SslKey, default is Undefined, optional
        ssl key
    sslRootCert : PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0SslRootCert, default is Undefined, optional
        ssl root cert
    """
    barmanObjectStore?: PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStore
    connectionParameters?: {str:str}
    name: str

    password?: PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0Password
    plugin?: PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0Plugin
    sslCert?: PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0SslCert
    sslKey?: PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0SslKey
    sslRootCert?: PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0SslRootCert

schema PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStore:
    r"""
    The configuration for the barman-cloud tool suite

    Attributes
    ----------
    azureCredentials : PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreAzureCredentials, default is Undefined, optional
        azure credentials
    data : PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreData, default is Undefined, optional
        data
    destinationPath : str, default is Undefined, required
        The path where to store the backup (i.e. s3://bucket/path/to/folder)
        this path, with different destination folders, will be used for WALs
        and for data
    endpointCA : PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreEndpointCA, default is Undefined, optional
        endpoint c a
    endpointURL : str, default is Undefined, optional
        Endpoint to be used to upload data to the cloud,
        overriding the automatic endpoint discovery
    googleCredentials : PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreGoogleCredentials, default is Undefined, optional
        google credentials
    historyTags : {str:str}, default is Undefined, optional
        HistoryTags is a list of key value pairs that will be passed to the
        Barman --history-tags option.
    s3Credentials : PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreS3Credentials, default is Undefined, optional
        s3 credentials
    serverName : str, default is Undefined, optional
        The server name on S3, the cluster name is used if this
        parameter is omitted
    tags : {str:str}, default is Undefined, optional
        Tags is a list of key value pairs that will be passed to the
        Barman --tags option.
    wal : PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreWal, default is Undefined, optional
        wal
    """
    azureCredentials?: PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreAzureCredentials
    data?: PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreData
    destinationPath: str

    endpointCA?: PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreEndpointCA
    endpointURL?: str
    googleCredentials?: PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreGoogleCredentials
    historyTags?: {str:str}
    s3Credentials?: PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreS3Credentials
    serverName?: str
    tags?: {str:str}
    wal?: PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreWal

    check:
        len(destinationPath) >= 1

schema PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreAzureCredentials:
    r"""
    The credentials to use to upload data to Azure Blob Storage

    Attributes
    ----------
    connectionString : PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreAzureCredentialsConnectionString, default is Undefined, optional
        connection string
    inheritFromAzureAD : bool, default is Undefined, optional
        Use the Azure AD based authentication without providing explicitly the keys.
    storageAccount : PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreAzureCredentialsStorageAccount, default is Undefined, optional
        storage account
    storageKey : PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreAzureCredentialsStorageKey, default is Undefined, optional
        storage key
    storageSasToken : PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreAzureCredentialsStorageSasToken, default is Undefined, optional
        storage sas token
    """
    connectionString?: PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreAzureCredentialsConnectionString
    inheritFromAzureAD?: bool
    storageAccount?: PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreAzureCredentialsStorageAccount
    storageKey?: PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreAzureCredentialsStorageKey
    storageSasToken?: PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreAzureCredentialsStorageSasToken

schema PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreAzureCredentialsConnectionString:
    r"""
    The connection string to be used

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreAzureCredentialsStorageAccount:
    r"""
    The storage account where to upload data

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreAzureCredentialsStorageKey:
    r"""
    The storage account key to be used in conjunction
    with the storage account name

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreAzureCredentialsStorageSasToken:
    r"""
    A shared-access-signature to be used in conjunction with
    the storage account name

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreData:
    r"""
    The configuration to be used to backup the data files
    When not defined, base backups files will be stored uncompressed and may
    be unencrypted in the object store, according to the bucket default
    policy.

    Attributes
    ----------
    additionalCommandArgs : [str], default is Undefined, optional
        AdditionalCommandArgs represents additional arguments that can be appended
        to the 'barman-cloud-backup' command-line invocation. These arguments
        provide flexibility to customize the backup process further according to
        specific requirements or configurations.

        Example:
        In a scenario where specialized backup options are required, such as setting
        a specific timeout or defining custom behavior, users can use this field
        to specify additional command arguments.

        Note:
        It's essential to ensure that the provided arguments are valid and supported
        by the 'barman-cloud-backup' command, to avoid potential errors or unintended
        behavior during execution.
    compression : str, default is Undefined, optional
        Compress a backup file (a tar file per tablespace) while streaming it
        to the object store. Available options are empty string (no
        compression, default), `gzip`, `bzip2`, and `snappy`.
    encryption : str, default is Undefined, optional
        Whenever to force the encryption of files (if the bucket is
        not already configured for that).
        Allowed options are empty string (use the bucket policy, default),
        `AES256` and `aws:kms`
    immediateCheckpoint : bool, default is Undefined, optional
        Control whether the I/O workload for the backup initial checkpoint will
        be limited, according to the `checkpoint_completion_target` setting on
        the PostgreSQL server. If set to true, an immediate checkpoint will be
        used, meaning PostgreSQL will complete the checkpoint as soon as
        possible. `false` by default.
    jobs : int, default is Undefined, optional
        The number of parallel jobs to be used to upload the backup, defaults
        to 2
    """
    additionalCommandArgs?: [str]
    compression?: "bzip2" | "gzip" | "snappy"
    encryption?: "AES256" | "aws:kms"
    immediateCheckpoint?: bool
    jobs?: int

    check:
        jobs >= 1 if jobs not in [None, Undefined]

schema PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreEndpointCA:
    r"""
    EndpointCA store the CA bundle of the barman endpoint.
    Useful when using self-signed certificates to avoid
    errors with certificate issuer and barman-cloud-wal-archive

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreGoogleCredentials:
    r"""
    The credentials to use to upload data to Google Cloud Storage

    Attributes
    ----------
    applicationCredentials : PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreGoogleCredentialsApplicationCredentials, default is Undefined, optional
        application credentials
    gkeEnvironment : bool, default is Undefined, optional
        If set to true, will presume that it's running inside a GKE environment,
        default to false.
    """
    applicationCredentials?: PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreGoogleCredentialsApplicationCredentials
    gkeEnvironment?: bool

schema PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreGoogleCredentialsApplicationCredentials:
    r"""
    The secret containing the Google Cloud Storage JSON file with the credentials

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreS3Credentials:
    r"""
    The credentials to use to upload data to S3

    Attributes
    ----------
    accessKeyId : PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreS3CredentialsAccessKeyID, default is Undefined, optional
        access key Id
    inheritFromIAMRole : bool, default is Undefined, optional
        Use the role based authentication without providing explicitly the keys.
    region : PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreS3CredentialsRegion, default is Undefined, optional
        region
    secretAccessKey : PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreS3CredentialsSecretAccessKey, default is Undefined, optional
        secret access key
    sessionToken : PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreS3CredentialsSessionToken, default is Undefined, optional
        session token
    """
    accessKeyId?: PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreS3CredentialsAccessKeyID
    inheritFromIAMRole?: bool
    region?: PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreS3CredentialsRegion
    secretAccessKey?: PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreS3CredentialsSecretAccessKey
    sessionToken?: PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreS3CredentialsSessionToken

schema PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreS3CredentialsAccessKeyID:
    r"""
    The reference to the access key id

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreS3CredentialsRegion:
    r"""
    The reference to the secret containing the region name

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreS3CredentialsSecretAccessKey:
    r"""
    The reference to the secret access key

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreS3CredentialsSessionToken:
    r"""
    The references to the session key

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0BarmanObjectStoreWal:
    r"""
    The configuration for the backup of the WAL stream.
    When not defined, WAL files will be stored uncompressed and may be
    unencrypted in the object store, according to the bucket default policy.

    Attributes
    ----------
    archiveAdditionalCommandArgs : [str], default is Undefined, optional
        Additional arguments that can be appended to the 'barman-cloud-wal-archive'
        command-line invocation. These arguments provide flexibility to customize
        the WAL archive process further, according to specific requirements or configurations.

        Example:
        In a scenario where specialized backup options are required, such as setting
        a specific timeout or defining custom behavior, users can use this field
        to specify additional command arguments.

        Note:
        It's essential to ensure that the provided arguments are valid and supported
        by the 'barman-cloud-wal-archive' command, to avoid potential errors or unintended
        behavior during execution.
    compression : str, default is Undefined, optional
        Compress a WAL file before sending it to the object store. Available
        options are empty string (no compression, default), `gzip`, `bzip2`,
        `lz4`, `snappy`, `xz`, and `zstd`.
    encryption : str, default is Undefined, optional
        Whenever to force the encryption of files (if the bucket is
        not already configured for that).
        Allowed options are empty string (use the bucket policy, default),
        `AES256` and `aws:kms`
    maxParallel : int, default is Undefined, optional
        Number of WAL files to be either archived in parallel (when the
        PostgreSQL instance is archiving to a backup object store) or
        restored in parallel (when a PostgreSQL standby is fetching WAL
        files from a recovery object store). If not specified, WAL files
        will be processed one at a time. It accepts a positive integer as a
        value - with 1 being the minimum accepted value.
    restoreAdditionalCommandArgs : [str], default is Undefined, optional
        Additional arguments that can be appended to the 'barman-cloud-wal-restore'
        command-line invocation. These arguments provide flexibility to customize
        the WAL restore process further, according to specific requirements or configurations.

        Example:
        In a scenario where specialized backup options are required, such as setting
        a specific timeout or defining custom behavior, users can use this field
        to specify additional command arguments.

        Note:
        It's essential to ensure that the provided arguments are valid and supported
        by the 'barman-cloud-wal-restore' command, to avoid potential errors or unintended
        behavior during execution.
    """
    archiveAdditionalCommandArgs?: [str]
    compression?: "bzip2" | "gzip" | "lz4" | "snappy" | "xz" | "zstd"
    encryption?: "AES256" | "aws:kms"
    maxParallel?: int
    restoreAdditionalCommandArgs?: [str]

    check:
        maxParallel >= 1 if maxParallel not in [None, Undefined]

schema PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0Password:
    r"""
    The reference to the password to be used to connect to the server.
    If a password is provided, CloudNativePG creates a PostgreSQL
    passfile at `/controller/external/NAME/pass` (where "NAME" is the
    cluster's name). This passfile is automatically referenced in the
    connection string when establishing a connection to the remote
    PostgreSQL server from the current PostgreSQL `Cluster`. This ensures
    secure and efficient password management for external clusters.

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0Plugin:
    r"""
    The configuration of the plugin that is taking care
    of WAL archiving and backups for this external cluster

    Attributes
    ----------
    enabled : bool, default is True, optional
        Enabled is true if this plugin will be used
    isWALArchiver : bool, default is Undefined, optional
        Marks the plugin as the WAL archiver. At most one plugin can be
        designated as a WAL archiver. This cannot be enabled if the
        `.spec.backup.barmanObjectStore` configuration is present.
    name : str, default is Undefined, required
        Name is the plugin name
    parameters : {str:str}, default is Undefined, optional
        Parameters is the configuration of the plugin
    """
    enabled?: bool = True
    isWALArchiver?: bool = False
    name: str

    parameters?: {str:str}

schema PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0SslCert:
    r"""
    The reference to an SSL certificate to be used to connect to this
    instance

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0SslKey:
    r"""
    The reference to an SSL private key to be used to connect to this
    instance

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema PostgresqlCnpgIoV1ClusterSpecExternalClustersItems0SslRootCert:
    r"""
    The reference to an SSL CA public key to be used to connect to this
    instance

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema PostgresqlCnpgIoV1ClusterSpecImageCatalogRef:
    r"""
    Defines the major PostgreSQL version we want to use within an ImageCatalog

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    major : int, default is Undefined, required
        The major version of PostgreSQL we want to use from the ImageCatalog
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    """
    apiGroup?: str
    kind: str

    major: int

    name: str

schema PostgresqlCnpgIoV1ClusterSpecImagePullSecretsItems0:
    r"""
    LocalObjectReference contains enough information to let you locate a
    local object with a known type inside the same namespace

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referent.
    """
    name: str

schema PostgresqlCnpgIoV1ClusterSpecInheritedMetadata:
    r"""
    Metadata that will be inherited by all objects related to the Cluster

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        annotations
    labels : {str:str}, default is Undefined, optional
        labels
    """
    annotations?: {str:str}
    labels?: {str:str}

schema PostgresqlCnpgIoV1ClusterSpecManaged:
    r"""
    The configuration that is used by the portions of PostgreSQL that are managed by the instance manager

    Attributes
    ----------
    roles : [PostgresqlCnpgIoV1ClusterSpecManagedRolesItems0], default is Undefined, optional
        Database roles managed by the `Cluster`
    services : PostgresqlCnpgIoV1ClusterSpecManagedServices, default is Undefined, optional
        services
    """
    roles?: [PostgresqlCnpgIoV1ClusterSpecManagedRolesItems0]
    services?: PostgresqlCnpgIoV1ClusterSpecManagedServices

schema PostgresqlCnpgIoV1ClusterSpecManagedRolesItems0:
    r"""
    RoleConfiguration is the representation, in Kubernetes, of a PostgreSQL role
    with the additional field Ensure specifying whether to ensure the presence or
    absence of the role in the database

    The defaults of the CREATE ROLE command are applied
    Reference: https://www.postgresql.org/docs/current/sql-createrole.html

    Attributes
    ----------
    bypassrls : bool, default is Undefined, optional
        Whether a role bypasses every row-level security (RLS) policy.
        Default is `false`.
    comment : str, default is Undefined, optional
        Description of the role
    connectionLimit : int, default is -1, optional
        If the role can log in, this specifies how many concurrent
        connections the role can make. `-1` (the default) means no limit.
    createdb : bool, default is Undefined, optional
        When set to `true`, the role being defined will be allowed to create
        new databases. Specifying `false` (default) will deny a role the
        ability to create databases.
    createrole : bool, default is Undefined, optional
        Whether the role will be permitted to create, alter, drop, comment
        on, change the security label for, and grant or revoke membership in
        other roles. Default is `false`.
    disablePassword : bool, default is Undefined, optional
        DisablePassword indicates that a role's password should be set to NULL in Postgres
    ensure : str, default is "present", optional
        Ensure the role is `present` or `absent` - defaults to "present"
    inRoles : [str], default is Undefined, optional
        List of one or more existing roles to which this role will be
        immediately added as a new member. Default empty.
    inherit : bool, default is True, optional
        Whether a role "inherits" the privileges of roles it is a member of.
        Defaults is `true`.
    login : bool, default is Undefined, optional
        Whether the role is allowed to log in. A role having the `login`
        attribute can be thought of as a user. Roles without this attribute
        are useful for managing database privileges, but are not users in
        the usual sense of the word. Default is `false`.
    name : str, default is Undefined, required
        Name of the role
    passwordSecret : PostgresqlCnpgIoV1ClusterSpecManagedRolesItems0PasswordSecret, default is Undefined, optional
        password secret
    replication : bool, default is Undefined, optional
        Whether a role is a replication role. A role must have this
        attribute (or be a superuser) in order to be able to connect to the
        server in replication mode (physical or logical replication) and in
        order to be able to create or drop replication slots. A role having
        the `replication` attribute is a very highly privileged role, and
        should only be used on roles actually used for replication. Default
        is `false`.
    superuser : bool, default is Undefined, optional
        Whether the role is a `superuser` who can override all access
        restrictions within the database - superuser status is dangerous and
        should be used only when really needed. You must yourself be a
        superuser to create a new superuser. Defaults is `false`.
    validUntil : str, default is Undefined, optional
        Date and time after which the role's password is no longer valid.
        When omitted, the password will never expire (default).
    """
    bypassrls?: bool
    comment?: str
    connectionLimit?: int = -1
    createdb?: bool
    createrole?: bool
    disablePassword?: bool
    ensure?: "present" | "absent" = "present"
    inRoles?: [str]
    inherit?: bool = True
    login?: bool
    name: str

    passwordSecret?: PostgresqlCnpgIoV1ClusterSpecManagedRolesItems0PasswordSecret
    replication?: bool
    superuser?: bool
    validUntil?: str

schema PostgresqlCnpgIoV1ClusterSpecManagedRolesItems0PasswordSecret:
    r"""
    Secret containing the password of the role (if present)
    If null, the password will be ignored unless DisablePassword is set

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referent.
    """
    name: str

schema PostgresqlCnpgIoV1ClusterSpecManagedServices:
    r"""
    Services roles managed by the `Cluster`

    Attributes
    ----------
    additional : [PostgresqlCnpgIoV1ClusterSpecManagedServicesAdditionalItems0], default is Undefined, optional
        Additional is a list of additional managed services specified by the user.
    disabledDefaultServices : [str], default is Undefined, optional
        DisabledDefaultServices is a list of service types that are disabled by default.
        Valid values are "r", and "ro", representing read, and read-only services.
    """
    additional?: [PostgresqlCnpgIoV1ClusterSpecManagedServicesAdditionalItems0]
    disabledDefaultServices?: [str]

schema PostgresqlCnpgIoV1ClusterSpecManagedServicesAdditionalItems0:
    r"""
    ManagedService represents a specific service managed by the cluster.
    It includes the type of service and its associated template specification.

    Attributes
    ----------
    selectorType : str, default is Undefined, required
        SelectorType specifies the type of selectors that the service will have.
        Valid values are "rw", "r", and "ro", representing read-write, read, and read-only services.
    serviceTemplate : PostgresqlCnpgIoV1ClusterSpecManagedServicesAdditionalItems0ServiceTemplate, default is Undefined, required
        service template
    updateStrategy : str, default is "patch", optional
        UpdateStrategy describes how the service differences should be reconciled
    """
    selectorType: "rw" | "r" | "ro"

    serviceTemplate: PostgresqlCnpgIoV1ClusterSpecManagedServicesAdditionalItems0ServiceTemplate

    updateStrategy?: "patch" | "replace" = "patch"

schema PostgresqlCnpgIoV1ClusterSpecManagedServicesAdditionalItems0ServiceTemplate:
    r"""
    ServiceTemplate is the template specification for the service.

    Attributes
    ----------
    metadata : PostgresqlCnpgIoV1ClusterSpecManagedServicesAdditionalItems0ServiceTemplateMetadata, default is Undefined, optional
        metadata
    spec : PostgresqlCnpgIoV1ClusterSpecManagedServicesAdditionalItems0ServiceTemplateSpec, default is Undefined, optional
        spec
    """
    metadata?: PostgresqlCnpgIoV1ClusterSpecManagedServicesAdditionalItems0ServiceTemplateMetadata
    spec?: PostgresqlCnpgIoV1ClusterSpecManagedServicesAdditionalItems0ServiceTemplateSpec

schema PostgresqlCnpgIoV1ClusterSpecManagedServicesAdditionalItems0ServiceTemplateMetadata:
    r"""
    Standard object's metadata.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is an unstructured key value map stored with a resource that may be
        set by external tools to store and retrieve arbitrary metadata. They are not
        queryable and should be preserved when modifying objects.
        More info: http://kubernetes.io/docs/user-guide/annotations
    labels : {str:str}, default is Undefined, optional
        Map of string keys and values that can be used to organize and categorize
        (scope and select) objects. May match selectors of replication controllers
        and services.
        More info: http://kubernetes.io/docs/user-guide/labels
    name : str, default is Undefined, optional
        The name of the resource. Only supported for certain types
    """
    annotations?: {str:str}
    labels?: {str:str}
    name?: str

schema PostgresqlCnpgIoV1ClusterSpecManagedServicesAdditionalItems0ServiceTemplateSpec:
    r"""
    Specification of the desired behavior of the service.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

    Attributes
    ----------
    allocateLoadBalancerNodePorts : bool, default is Undefined, optional
        allocateLoadBalancerNodePorts defines if NodePorts will be automatically
        allocated for services with type LoadBalancer.  Default is "true". It
        may be set to "false" if the cluster load-balancer does not rely on
        NodePorts.  If the caller requests specific NodePorts (by specifying a
        value), those requests will be respected, regardless of this field.
        This field may only be set for services with type LoadBalancer and will
        be cleared if the type is changed to any other type.
    clusterIP : str, default is Undefined, optional
        clusterIP is the IP address of the service and is usually assigned
        randomly. If an address is specified manually, is in-range (as per
        system configuration), and is not in use, it will be allocated to the
        service; otherwise creation of the service will fail. This field may not
        be changed through updates unless the type field is also being changed
        to ExternalName (which requires this field to be blank) or the type
        field is being changed from ExternalName (in which case this field may
        optionally be specified, as describe above).  Valid values are "None",
        empty string (""), or a valid IP address. Setting this to "None" makes a
        "headless service" (no virtual IP), which is useful when direct endpoint
        connections are preferred and proxying is not required.  Only applies to
        types ClusterIP, NodePort, and LoadBalancer. If this field is specified
        when creating a Service of type ExternalName, creation will fail. This
        field will be wiped when updating a Service to type ExternalName.
        More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    clusterIPs : [str], default is Undefined, optional
        ClusterIPs is a list of IP addresses assigned to this service, and are
        usually assigned randomly.  If an address is specified manually, is
        in-range (as per system configuration), and is not in use, it will be
        allocated to the service; otherwise creation of the service will fail.
        This field may not be changed through updates unless the type field is
        also being changed to ExternalName (which requires this field to be
        empty) or the type field is being changed from ExternalName (in which
        case this field may optionally be specified, as describe above).  Valid
        values are "None", empty string (""), or a valid IP address.  Setting
        this to "None" makes a "headless service" (no virtual IP), which is
        useful when direct endpoint connections are preferred and proxying is
        not required.  Only applies to types ClusterIP, NodePort, and
        LoadBalancer. If this field is specified when creating a Service of type
        ExternalName, creation will fail. This field will be wiped when updating
        a Service to type ExternalName.  If this field is not specified, it will
        be initialized from the clusterIP field.  If this field is specified,
        clients must ensure that clusterIPs[0] and clusterIP have the same
        value.

        This field may hold a maximum of two entries (dual-stack IPs, in either order).
        These IPs must correspond to the values of the ipFamilies field. Both
        clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
        More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    externalIPs : [str], default is Undefined, optional
        externalIPs is a list of IP addresses for which nodes in the cluster
        will also accept traffic for this service.  These IPs are not managed by
        Kubernetes.  The user is responsible for ensuring that traffic arrives
        at a node with this IP.  A common example is external load-balancers
        that are not part of the Kubernetes system.
    externalName : str, default is Undefined, optional
        externalName is the external reference that discovery mechanisms will
        return as an alias for this service (e.g. a DNS CNAME record). No
        proxying will be involved.  Must be a lowercase RFC-1123 hostname
        (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
    externalTrafficPolicy : str, default is Undefined, optional
        externalTrafficPolicy describes how nodes distribute service traffic they
        receive on one of the Service's "externally-facing" addresses (NodePorts,
        ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
        the service in a way that assumes that external load balancers will take care
        of balancing the service traffic between nodes, and so each node will deliver
        traffic only to the node-local endpoints of the service, without masquerading
        the client source IP. (Traffic mistakenly sent to a node with no endpoints will
        be dropped.) The default value, "Cluster", uses the standard behavior of
        routing to all endpoints evenly (possibly modified by topology and other
        features). Note that traffic sent to an External IP or LoadBalancer IP from
        within the cluster will always get "Cluster" semantics, but clients sending to
        a NodePort from within the cluster may need to take traffic policy into account
        when picking a node.
    healthCheckNodePort : int, default is Undefined, optional
        healthCheckNodePort specifies the healthcheck nodePort for the service.
        This only applies when type is set to LoadBalancer and
        externalTrafficPolicy is set to Local. If a value is specified, is
        in-range, and is not in use, it will be used.  If not specified, a value
        will be automatically allocated.  External systems (e.g. load-balancers)
        can use this port to determine if a given node holds endpoints for this
        service or not.  If this field is specified when creating a Service
        which does not need it, creation will fail. This field will be wiped
        when updating a Service to no longer need it (e.g. changing type).
        This field cannot be updated once set.
    internalTrafficPolicy : str, default is Undefined, optional
        InternalTrafficPolicy describes how nodes distribute service traffic they
        receive on the ClusterIP. If set to "Local", the proxy will assume that pods
        only want to talk to endpoints of the service on the same node as the pod,
        dropping the traffic if there are no local endpoints. The default value,
        "Cluster", uses the standard behavior of routing to all endpoints evenly
        (possibly modified by topology and other features).
    ipFamilies : [str], default is Undefined, optional
        IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
        service. This field is usually assigned automatically based on cluster
        configuration and the ipFamilyPolicy field. If this field is specified
        manually, the requested family is available in the cluster,
        and ipFamilyPolicy allows it, it will be used; otherwise creation of
        the service will fail. This field is conditionally mutable: it allows
        for adding or removing a secondary IP family, but it does not allow
        changing the primary IP family of the Service. Valid values are "IPv4"
        and "IPv6".  This field only applies to Services of types ClusterIP,
        NodePort, and LoadBalancer, and does apply to "headless" services.
        This field will be wiped when updating a Service to type ExternalName.

        This field may hold a maximum of two entries (dual-stack families, in
        either order).  These families must correspond to the values of the
        clusterIPs field, if specified. Both clusterIPs and ipFamilies are
        governed by the ipFamilyPolicy field.
    ipFamilyPolicy : str, default is Undefined, optional
        IPFamilyPolicy represents the dual-stack-ness requested or required by
        this Service. If there is no value provided, then this field will be set
        to SingleStack. Services can be "SingleStack" (a single IP family),
        "PreferDualStack" (two IP families on dual-stack configured clusters or
        a single IP family on single-stack clusters), or "RequireDualStack"
        (two IP families on dual-stack configured clusters, otherwise fail). The
        ipFamilies and clusterIPs fields depend on the value of this field. This
        field will be wiped when updating a service to type ExternalName.
    loadBalancerClass : str, default is Undefined, optional
        loadBalancerClass is the class of the load balancer implementation this Service belongs to.
        If specified, the value of this field must be a label-style identifier, with an optional prefix,
        e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
        This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
        balancer implementation is used, today this is typically done through the cloud provider integration,
        but should apply for any default implementation. If set, it is assumed that a load balancer
        implementation is watching for Services with a matching class. Any default load balancer
        implementation (e.g. cloud providers) should ignore Services that set this field.
        This field can only be set when creating or updating a Service to type 'LoadBalancer'.
        Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
    loadBalancerIP : str, default is Undefined, optional
        Only applies to Service Type: LoadBalancer.
        This feature depends on whether the underlying cloud-provider supports specifying
        the loadBalancerIP when a load balancer is created.
        This field will be ignored if the cloud-provider does not support the feature.
        Deprecated: This field was under-specified and its meaning varies across implementations.
        Using it is non-portable and it may not support dual-stack.
        Users are encouraged to use implementation-specific annotations when available.
    loadBalancerSourceRanges : [str], default is Undefined, optional
        If specified and supported by the platform, this will restrict traffic through the cloud-provider
        load-balancer will be restricted to the specified client IPs. This field will be ignored if the
        cloud-provider does not support the feature."
        More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
    ports : [PostgresqlCnpgIoV1ClusterSpecManagedServicesAdditionalItems0ServiceTemplateSpecPortsItems0], default is Undefined, optional
        The list of ports that are exposed by this service.
        More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    publishNotReadyAddresses : bool, default is Undefined, optional
        publishNotReadyAddresses indicates that any agent which deals with endpoints for this
        Service should disregard any indications of ready/not-ready.
        The primary use case for setting this field is for a StatefulSet's Headless Service to
        propagate SRV DNS records for its Pods for the purpose of peer discovery.
        The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
        Services interpret this to mean that all endpoints are considered "ready" even if the
        Pods themselves are not. Agents which consume only Kubernetes generated endpoints
        through the Endpoints or EndpointSlice resources can safely assume this behavior.
    selector : {str:str}, default is Undefined, optional
        Route service traffic to pods with label keys and values matching this
        selector. If empty or not present, the service is assumed to have an
        external process managing its endpoints, which Kubernetes will not
        modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
        Ignored if type is ExternalName.
        More info: https://kubernetes.io/docs/concepts/services-networking/service/
    sessionAffinity : str, default is Undefined, optional
        Supports "ClientIP" and "None". Used to maintain session affinity.
        Enable client IP based session affinity.
        Must be ClientIP or None.
        Defaults to None.
        More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    sessionAffinityConfig : PostgresqlCnpgIoV1ClusterSpecManagedServicesAdditionalItems0ServiceTemplateSpecSessionAffinityConfig, default is Undefined, optional
        session affinity config
    trafficDistribution : str, default is Undefined, optional
        TrafficDistribution offers a way to express preferences for how traffic
        is distributed to Service endpoints. Implementations can use this field
        as a hint, but are not required to guarantee strict adherence. If the
        field is not set, the implementation will apply its default routing
        strategy. If set to "PreferClose", implementations should prioritize
        endpoints that are in the same zone.
    $type : str, default is Undefined, optional
        type determines how the Service is exposed. Defaults to ClusterIP. Valid
        options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
        "ClusterIP" allocates a cluster-internal IP address for load-balancing
        to endpoints. Endpoints are determined by the selector or if that is not
        specified, by manual construction of an Endpoints object or
        EndpointSlice objects. If clusterIP is "None", no virtual IP is
        allocated and the endpoints are published as a set of endpoints rather
        than a virtual IP.
        "NodePort" builds on ClusterIP and allocates a port on every node which
        routes to the same endpoints as the clusterIP.
        "LoadBalancer" builds on NodePort and creates an external load-balancer
        (if supported in the current cloud) which routes to the same endpoints
        as the clusterIP.
        "ExternalName" aliases this service to the specified externalName.
        Several other fields do not apply to ExternalName services.
        More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    """
    allocateLoadBalancerNodePorts?: bool
    clusterIP?: str
    clusterIPs?: [str]
    externalIPs?: [str]
    externalName?: str
    externalTrafficPolicy?: str
    healthCheckNodePort?: int
    internalTrafficPolicy?: str
    ipFamilies?: [str]
    ipFamilyPolicy?: str
    loadBalancerClass?: str
    loadBalancerIP?: str
    loadBalancerSourceRanges?: [str]
    ports?: [PostgresqlCnpgIoV1ClusterSpecManagedServicesAdditionalItems0ServiceTemplateSpecPortsItems0]
    publishNotReadyAddresses?: bool
    selector?: {str:str}
    sessionAffinity?: str
    sessionAffinityConfig?: PostgresqlCnpgIoV1ClusterSpecManagedServicesAdditionalItems0ServiceTemplateSpecSessionAffinityConfig
    trafficDistribution?: str
    $type?: str

schema PostgresqlCnpgIoV1ClusterSpecManagedServicesAdditionalItems0ServiceTemplateSpecPortsItems0:
    r"""
    ServicePort contains information on service's port.

    Attributes
    ----------
    appProtocol : str, default is Undefined, optional
        The application protocol for this port.
        This is used as a hint for implementations to offer richer behavior for protocols that they understand.
        This field follows standard Kubernetes label syntax.
        Valid values are either:

        * Un-prefixed protocol names - reserved for IANA standard service names (as per
        RFC-6335 and https://www.iana.org/assignments/service-names).

        * Kubernetes-defined prefixed names:
          * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
          * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
          * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455

        * Other protocols should use implementation-defined prefixed names such as
        mycompany.com/my-custom-protocol.
    name : str, default is Undefined, optional
        The name of this port within the service. This must be a DNS_LABEL.
        All ports within a ServiceSpec must have unique names. When considering
        the endpoints for a Service, this must match the 'name' field in the
        EndpointPort.
        Optional if only one ServicePort is defined on this service.
    nodePort : int, default is Undefined, optional
        The port on each node on which this service is exposed when type is
        NodePort or LoadBalancer.  Usually assigned by the system. If a value is
        specified, in-range, and not in use it will be used, otherwise the
        operation will fail.  If not specified, a port will be allocated if this
        Service requires one.  If this field is specified when creating a
        Service which does not need it, creation will fail. This field will be
        wiped when updating a Service to no longer need it (e.g. changing type
        from NodePort to ClusterIP).
        More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    port : int, default is Undefined, required
        The port that will be exposed by this service.
    $protocol : str, default is "TCP", optional
        The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
        Default is TCP.
    targetPort : int | str, default is Undefined, optional
        Number or name of the port to access on the pods targeted by the service.
        Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        If this is a string, it will be looked up as a named port in the
        target Pod's container ports. If this is not specified, the value
        of the 'port' field is used (an identity map).
        This field is ignored for services with clusterIP=None, and should be
        omitted or set equal to the 'port' field.
        More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
    """
    appProtocol?: str
    name?: str
    nodePort?: int
    port: int

    $protocol?: str = "TCP"
    targetPort?: int | str

schema PostgresqlCnpgIoV1ClusterSpecManagedServicesAdditionalItems0ServiceTemplateSpecSessionAffinityConfig:
    r"""
    sessionAffinityConfig contains the configurations of session affinity.

    Attributes
    ----------
    clientIP : PostgresqlCnpgIoV1ClusterSpecManagedServicesAdditionalItems0ServiceTemplateSpecSessionAffinityConfigClientIP, default is Undefined, optional
        client IP
    """
    clientIP?: PostgresqlCnpgIoV1ClusterSpecManagedServicesAdditionalItems0ServiceTemplateSpecSessionAffinityConfigClientIP

schema PostgresqlCnpgIoV1ClusterSpecManagedServicesAdditionalItems0ServiceTemplateSpecSessionAffinityConfigClientIP:
    r"""
    clientIP contains the configurations of Client IP based session affinity.

    Attributes
    ----------
    timeoutSeconds : int, default is Undefined, optional
        timeoutSeconds specifies the seconds of ClientIP type session sticky time.
        The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
        Default value is 10800(for 3 hours).
    """
    timeoutSeconds?: int

schema PostgresqlCnpgIoV1ClusterSpecMonitoring:
    r"""
    The configuration of the monitoring infrastructure of this cluster

    Attributes
    ----------
    customQueriesConfigMap : [PostgresqlCnpgIoV1ClusterSpecMonitoringCustomQueriesConfigMapItems0], default is Undefined, optional
        The list of config maps containing the custom queries
    customQueriesSecret : [PostgresqlCnpgIoV1ClusterSpecMonitoringCustomQueriesSecretItems0], default is Undefined, optional
        The list of secrets containing the custom queries
    disableDefaultQueries : bool, default is Undefined, optional
        Whether the default queries should be injected.
        Set it to `true` if you don't want to inject default queries into the cluster.
        Default: false.
    enablePodMonitor : bool, default is Undefined, optional
        Enable or disable the `PodMonitor`

        Deprecated: This feature will be removed in an upcoming release. If
        you need this functionality, you can create a PodMonitor manually.
    podMonitorMetricRelabelings : [PostgresqlCnpgIoV1ClusterSpecMonitoringPodMonitorMetricRelabelingsItems0], default is Undefined, optional
        The list of metric relabelings for the `PodMonitor`. Applied to samples before ingestion.

        Deprecated: This feature will be removed in an upcoming release. If
        you need this functionality, you can create a PodMonitor manually.
    podMonitorRelabelings : [PostgresqlCnpgIoV1ClusterSpecMonitoringPodMonitorRelabelingsItems0], default is Undefined, optional
        The list of relabelings for the `PodMonitor`. Applied to samples before scraping.

        Deprecated: This feature will be removed in an upcoming release. If
        you need this functionality, you can create a PodMonitor manually.
    tls : PostgresqlCnpgIoV1ClusterSpecMonitoringTLS, default is Undefined, optional
        tls
    """
    customQueriesConfigMap?: [PostgresqlCnpgIoV1ClusterSpecMonitoringCustomQueriesConfigMapItems0]
    customQueriesSecret?: [PostgresqlCnpgIoV1ClusterSpecMonitoringCustomQueriesSecretItems0]
    disableDefaultQueries?: bool = False
    enablePodMonitor?: bool = False
    podMonitorMetricRelabelings?: [PostgresqlCnpgIoV1ClusterSpecMonitoringPodMonitorMetricRelabelingsItems0]
    podMonitorRelabelings?: [PostgresqlCnpgIoV1ClusterSpecMonitoringPodMonitorRelabelingsItems0]
    tls?: PostgresqlCnpgIoV1ClusterSpecMonitoringTLS

schema PostgresqlCnpgIoV1ClusterSpecMonitoringCustomQueriesConfigMapItems0:
    r"""
    ConfigMapKeySelector contains enough information to let you locate
    the key of a ConfigMap

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecMonitoringCustomQueriesSecretItems0:
    r"""
    SecretKeySelector contains enough information to let you locate
    the key of a Secret

    Attributes
    ----------
    key : str, default is Undefined, required
        The key to select
    name : str, default is Undefined, required
        Name of the referent.
    """
    key: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecMonitoringPodMonitorMetricRelabelingsItems0:
    r"""
    RelabelConfig allows dynamic rewriting of the label set for targets, alerts,
    scraped samples and remote write samples.

    More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config

    Attributes
    ----------
    action : str, default is "replace", optional
        action to perform based on the regex matching.

        `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.
        `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.

        Default: "Replace"
    modulus : int, default is Undefined, optional
        modulus to take of the hash of the source label values.

        Only applicable when the action is `HashMod`.
    regex : str, default is Undefined, optional
        regex defines the regular expression against which the extracted value is matched.
    replacement : str, default is Undefined, optional
        replacement value against which a Replace action is performed if the
        regular expression matches.

        Regex capture groups are available.
    separator : str, default is Undefined, optional
        separator defines the string between concatenated SourceLabels.
    sourceLabels : [str], default is Undefined, optional
        sourceLabels defines the source labels select values from existing labels. Their content is
        concatenated using the configured Separator and matched against the
        configured regular expression.
    targetLabel : str, default is Undefined, optional
        targetLabel defines the label to which the resulting string is written in a replacement.

        It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,
        `KeepEqual` and `DropEqual` actions.

        Regex capture groups are available.
    """
    action?: "replace" | "Replace" | "keep" | "Keep" | "drop" | "Drop" | "hashmod" | "HashMod" | "labelmap" | "LabelMap" | "labeldrop" | "LabelDrop" | "labelkeep" | "LabelKeep" | "lowercase" | "Lowercase" | "uppercase" | "Uppercase" | "keepequal" | "KeepEqual" | "dropequal" | "DropEqual" = "replace"
    modulus?: int
    regex?: str
    replacement?: str
    separator?: str
    sourceLabels?: [str]
    targetLabel?: str

schema PostgresqlCnpgIoV1ClusterSpecMonitoringPodMonitorRelabelingsItems0:
    r"""
    RelabelConfig allows dynamic rewriting of the label set for targets, alerts,
    scraped samples and remote write samples.

    More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config

    Attributes
    ----------
    action : str, default is "replace", optional
        action to perform based on the regex matching.

        `Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.
        `DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.

        Default: "Replace"
    modulus : int, default is Undefined, optional
        modulus to take of the hash of the source label values.

        Only applicable when the action is `HashMod`.
    regex : str, default is Undefined, optional
        regex defines the regular expression against which the extracted value is matched.
    replacement : str, default is Undefined, optional
        replacement value against which a Replace action is performed if the
        regular expression matches.

        Regex capture groups are available.
    separator : str, default is Undefined, optional
        separator defines the string between concatenated SourceLabels.
    sourceLabels : [str], default is Undefined, optional
        sourceLabels defines the source labels select values from existing labels. Their content is
        concatenated using the configured Separator and matched against the
        configured regular expression.
    targetLabel : str, default is Undefined, optional
        targetLabel defines the label to which the resulting string is written in a replacement.

        It is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,
        `KeepEqual` and `DropEqual` actions.

        Regex capture groups are available.
    """
    action?: "replace" | "Replace" | "keep" | "Keep" | "drop" | "Drop" | "hashmod" | "HashMod" | "labelmap" | "LabelMap" | "labeldrop" | "LabelDrop" | "labelkeep" | "LabelKeep" | "lowercase" | "Lowercase" | "uppercase" | "Uppercase" | "keepequal" | "KeepEqual" | "dropequal" | "DropEqual" = "replace"
    modulus?: int
    regex?: str
    replacement?: str
    separator?: str
    sourceLabels?: [str]
    targetLabel?: str

schema PostgresqlCnpgIoV1ClusterSpecMonitoringTLS:
    r"""
    Configure TLS communication for the metrics endpoint.
    Changing tls.enabled option will force a rollout of all instances.

    Attributes
    ----------
    enabled : bool, default is Undefined, optional
        Enable TLS for the monitoring endpoint.
        Changing this option will force a rollout of all instances.
    """
    enabled?: bool = False

schema PostgresqlCnpgIoV1ClusterSpecNodeMaintenanceWindow:
    r"""
    Define a maintenance window for the Kubernetes nodes

    Attributes
    ----------
    inProgress : bool, default is Undefined, optional
        Is there a node maintenance activity in progress?
    reusePVC : bool, default is True, optional
        Reuse the existing PVC (wait for the node to come
        up again) or not (recreate it elsewhere - when `instances` >1)
    """
    inProgress?: bool = False
    reusePVC?: bool = True

schema PostgresqlCnpgIoV1ClusterSpecPluginsItems0:
    r"""
    PluginConfiguration specifies a plugin that need to be loaded for this
    cluster to be reconciled

    Attributes
    ----------
    enabled : bool, default is True, optional
        Enabled is true if this plugin will be used
    isWALArchiver : bool, default is Undefined, optional
        Marks the plugin as the WAL archiver. At most one plugin can be
        designated as a WAL archiver. This cannot be enabled if the
        `.spec.backup.barmanObjectStore` configuration is present.
    name : str, default is Undefined, required
        Name is the plugin name
    parameters : {str:str}, default is Undefined, optional
        Parameters is the configuration of the plugin
    """
    enabled?: bool = True
    isWALArchiver?: bool = False
    name: str

    parameters?: {str:str}

schema PostgresqlCnpgIoV1ClusterSpecPostgresql:
    r"""
    Configuration of the PostgreSQL server

    Attributes
    ----------
    enableAlterSystem : bool, default is Undefined, optional
        If this parameter is true, the user will be able to invoke `ALTER SYSTEM`
        on this CloudNativePG Cluster.
        This should only be used for debugging and troubleshooting.
        Defaults to false.
    extensions : [PostgresqlCnpgIoV1ClusterSpecPostgresqlExtensionsItems0], default is Undefined, optional
        The configuration of the extensions to be added
    ldap : PostgresqlCnpgIoV1ClusterSpecPostgresqlLdap, default is Undefined, optional
        ldap
    parameters : {str:str}, default is Undefined, optional
        PostgreSQL configuration options (postgresql.conf)
    pg_hba : [str], default is Undefined, optional
        PostgreSQL Host Based Authentication rules (lines to be appended
        to the pg_hba.conf file)
    pg_ident : [str], default is Undefined, optional
        PostgreSQL User Name Maps rules (lines to be appended
        to the pg_ident.conf file)
    promotionTimeout : int, default is Undefined, optional
        Specifies the maximum number of seconds to wait when promoting an instance to primary.
        Default value is 40000000, greater than one year in seconds,
        big enough to simulate an infinite timeout
    shared_preload_libraries : [str], default is Undefined, optional
        Lists of shared preload libraries to add to the default ones
    syncReplicaElectionConstraint : PostgresqlCnpgIoV1ClusterSpecPostgresqlSyncReplicaElectionConstraint, default is Undefined, optional
        sync replica election constraint
    synchronous : PostgresqlCnpgIoV1ClusterSpecPostgresqlSynchronous, default is Undefined, optional
        synchronous
    """
    enableAlterSystem?: bool
    extensions?: [PostgresqlCnpgIoV1ClusterSpecPostgresqlExtensionsItems0]
    ldap?: PostgresqlCnpgIoV1ClusterSpecPostgresqlLdap
    parameters?: {str:str}
    pg_hba?: [str]
    pg_ident?: [str]
    promotionTimeout?: int
    shared_preload_libraries?: [str]
    syncReplicaElectionConstraint?: PostgresqlCnpgIoV1ClusterSpecPostgresqlSyncReplicaElectionConstraint
    synchronous?: PostgresqlCnpgIoV1ClusterSpecPostgresqlSynchronous

schema PostgresqlCnpgIoV1ClusterSpecPostgresqlExtensionsItems0:
    r"""
    ExtensionConfiguration is the configuration used to add
    PostgreSQL extensions to the Cluster.

    Attributes
    ----------
    dynamic_library_path : [str], default is Undefined, optional
        The list of directories inside the image which should be added to dynamic_library_path.
        If not defined, defaults to "/lib".
    extension_control_path : [str], default is Undefined, optional
        The list of directories inside the image which should be added to extension_control_path.
        If not defined, defaults to "/share".
    image : PostgresqlCnpgIoV1ClusterSpecPostgresqlExtensionsItems0Image, default is Undefined, required
        image
    ld_library_path : [str], default is Undefined, optional
        The list of directories inside the image which should be added to ld_library_path.
    name : str, default is Undefined, required
        The name of the extension, required
    """
    dynamic_library_path?: [str]
    extension_control_path?: [str]
    image: PostgresqlCnpgIoV1ClusterSpecPostgresqlExtensionsItems0Image

    ld_library_path?: [str]
    name: str

    check:
        len(name) >= 1
        _regex_match(str(name), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$")

schema PostgresqlCnpgIoV1ClusterSpecPostgresqlExtensionsItems0Image:
    r"""
    The image containing the extension, required

    Attributes
    ----------
    pullPolicy : str, default is Undefined, optional
        Policy for pulling OCI objects. Possible values are:
        Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
        Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
        IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
        Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
    reference : str, default is Undefined, optional
        Required: Image or artifact reference to be used.
        Behaves in the same way as pod.spec.containers[*].image.
        Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.
        More info: https://kubernetes.io/docs/concepts/containers/images
        This field is optional to allow higher level config management to default or override
        container images in workload controllers like Deployments and StatefulSets.
    """
    pullPolicy?: str
    reference?: str

schema PostgresqlCnpgIoV1ClusterSpecPostgresqlLdap:
    r"""
    Options to specify LDAP configuration

    Attributes
    ----------
    bindAsAuth : PostgresqlCnpgIoV1ClusterSpecPostgresqlLdapBindAsAuth, default is Undefined, optional
        bind as auth
    bindSearchAuth : PostgresqlCnpgIoV1ClusterSpecPostgresqlLdapBindSearchAuth, default is Undefined, optional
        bind search auth
    port : int, default is Undefined, optional
        LDAP server port
    scheme : str, default is Undefined, optional
        LDAP schema to be used, possible options are `ldap` and `ldaps`
    server : str, default is Undefined, optional
        LDAP hostname or IP address
    tls : bool, default is Undefined, optional
        Set to 'true' to enable LDAP over TLS. 'false' is default
    """
    bindAsAuth?: PostgresqlCnpgIoV1ClusterSpecPostgresqlLdapBindAsAuth
    bindSearchAuth?: PostgresqlCnpgIoV1ClusterSpecPostgresqlLdapBindSearchAuth
    port?: int
    scheme?: "ldap" | "ldaps"
    server?: str
    tls?: bool

schema PostgresqlCnpgIoV1ClusterSpecPostgresqlLdapBindAsAuth:
    r"""
    Bind as authentication configuration

    Attributes
    ----------
    prefix : str, default is Undefined, optional
        Prefix for the bind authentication option
    suffix : str, default is Undefined, optional
        Suffix for the bind authentication option
    """
    prefix?: str
    suffix?: str

schema PostgresqlCnpgIoV1ClusterSpecPostgresqlLdapBindSearchAuth:
    r"""
    Bind+Search authentication configuration

    Attributes
    ----------
    baseDN : str, default is Undefined, optional
        Root DN to begin the user search
    bindDN : str, default is Undefined, optional
        DN of the user to bind to the directory
    bindPassword : PostgresqlCnpgIoV1ClusterSpecPostgresqlLdapBindSearchAuthBindPassword, default is Undefined, optional
        bind password
    searchAttribute : str, default is Undefined, optional
        Attribute to match against the username
    searchFilter : str, default is Undefined, optional
        Search filter to use when doing the search+bind authentication
    """
    baseDN?: str
    bindDN?: str
    bindPassword?: PostgresqlCnpgIoV1ClusterSpecPostgresqlLdapBindSearchAuthBindPassword
    searchAttribute?: str
    searchFilter?: str

schema PostgresqlCnpgIoV1ClusterSpecPostgresqlLdapBindSearchAuthBindPassword:
    r"""
    Secret with the password for the user to bind to the directory

    Attributes
    ----------
    key : str, default is Undefined, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        Specify whether the Secret or its key must be defined
    """
    key: str

    name?: str = ""
    optional?: bool

schema PostgresqlCnpgIoV1ClusterSpecPostgresqlSyncReplicaElectionConstraint:
    r"""
    Requirements to be met by sync replicas. This will affect how the "synchronous_standby_names" parameter will be
    set up.

    Attributes
    ----------
    enabled : bool, default is Undefined, required
        This flag enables the constraints for sync replicas
    nodeLabelsAntiAffinity : [str], default is Undefined, optional
        A list of node labels values to extract and compare to evaluate if the pods reside in the same topology or not
    """
    enabled: bool

    nodeLabelsAntiAffinity?: [str]

schema PostgresqlCnpgIoV1ClusterSpecPostgresqlSynchronous:
    r"""
    Configuration of the PostgreSQL synchronous replication feature

    Attributes
    ----------
    dataDurability : str, default is Undefined, optional
        If set to "required", data durability is strictly enforced. Write operations
        with synchronous commit settings (`on`, `remote_write`, or `remote_apply`) will
        block if there are insufficient healthy replicas, ensuring data persistence.
        If set to "preferred", data durability is maintained when healthy replicas
        are available, but the required number of instances will adjust dynamically
        if replicas become unavailable. This setting relaxes strict durability enforcement
        to allow for operational continuity. This setting is only applicable if both
        `standbyNamesPre` and `standbyNamesPost` are unset (empty).
    maxStandbyNamesFromCluster : int, default is Undefined, optional
        Specifies the maximum number of local cluster pods that can be
        automatically included in the `synchronous_standby_names` option in
        PostgreSQL.
    method : str, default is Undefined, required
        Method to select synchronous replication standbys from the listed
        servers, accepting 'any' (quorum-based synchronous replication) or
        'first' (priority-based synchronous replication) as values.
    number : int, default is Undefined, required
        Specifies the number of synchronous standby servers that
        transactions must wait for responses from.
    standbyNamesPost : [str], default is Undefined, optional
        A user-defined list of application names to be added to
        `synchronous_standby_names` after local cluster pods (the order is
        only useful for priority-based synchronous replication).
    standbyNamesPre : [str], default is Undefined, optional
        A user-defined list of application names to be added to
        `synchronous_standby_names` before local cluster pods (the order is
        only useful for priority-based synchronous replication).
    """
    dataDurability?: "required" | "preferred"
    maxStandbyNamesFromCluster?: int
    method: "any" | "first"

    number: int

    standbyNamesPost?: [str]
    standbyNamesPre?: [str]

schema PostgresqlCnpgIoV1ClusterSpecProbes:
    r"""
    The configuration of the probes to be injected
    in the PostgreSQL Pods.

    Attributes
    ----------
    liveness : PostgresqlCnpgIoV1ClusterSpecProbesLiveness, default is Undefined, optional
        liveness
    readiness : PostgresqlCnpgIoV1ClusterSpecProbesReadiness, default is Undefined, optional
        readiness
    startup : PostgresqlCnpgIoV1ClusterSpecProbesStartup, default is Undefined, optional
        startup
    """
    liveness?: PostgresqlCnpgIoV1ClusterSpecProbesLiveness
    readiness?: PostgresqlCnpgIoV1ClusterSpecProbesReadiness
    startup?: PostgresqlCnpgIoV1ClusterSpecProbesStartup

schema PostgresqlCnpgIoV1ClusterSpecProbesLiveness:
    r"""
    The liveness probe configuration

    Attributes
    ----------
    failureThreshold : int, default is Undefined, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded.
        Defaults to 3. Minimum value is 1.
    initialDelaySeconds : int, default is Undefined, optional
        Number of seconds after the container has started before liveness probes are initiated.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    isolationCheck : PostgresqlCnpgIoV1ClusterSpecProbesLivenessIsolationCheck, default is Undefined, optional
        isolation check
    periodSeconds : int, default is Undefined, optional
        How often (in seconds) to perform the probe.
        Default to 10 seconds. Minimum value is 1.
    successThreshold : int, default is Undefined, optional
        Minimum consecutive successes for the probe to be considered successful after having failed.
        Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    terminationGracePeriodSeconds : int, default is Undefined, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
        The grace period is the duration in seconds after the processes running in the pod are sent
        a termination signal and the time when the processes are forcibly halted with a kill signal.
        Set this value longer than the expected cleanup time for your process.
        If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
        value overrides the value provided by the pod spec.
        Value must be non-negative integer. The value zero indicates stop immediately via
        the kill signal (no opportunity to shut down).
        This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
        Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, default is Undefined, optional
        Number of seconds after which the probe times out.
        Defaults to 1 second. Minimum value is 1.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """
    failureThreshold?: int
    initialDelaySeconds?: int
    isolationCheck?: PostgresqlCnpgIoV1ClusterSpecProbesLivenessIsolationCheck
    periodSeconds?: int
    successThreshold?: int
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int

schema PostgresqlCnpgIoV1ClusterSpecProbesLivenessIsolationCheck:
    r"""
    Configure the feature that extends the liveness probe for a primary
    instance. In addition to the basic checks, this verifies whether the
    primary is isolated from the Kubernetes API server and from its
    replicas, ensuring that it can be safely shut down if network
    partition or API unavailability is detected. Enabled by default.

    Attributes
    ----------
    connectionTimeout : int, default is 1000, optional
        Timeout in milliseconds for connections during the primary isolation check
    enabled : bool, default is True, optional
        Whether primary isolation checking is enabled for the liveness probe
    requestTimeout : int, default is 1000, optional
        Timeout in milliseconds for requests during the primary isolation check
    """
    connectionTimeout?: int = 1000
    enabled?: bool = True
    requestTimeout?: int = 1000

schema PostgresqlCnpgIoV1ClusterSpecProbesReadiness:
    r"""
    The readiness probe configuration

    Attributes
    ----------
    failureThreshold : int, default is Undefined, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded.
        Defaults to 3. Minimum value is 1.
    initialDelaySeconds : int, default is Undefined, optional
        Number of seconds after the container has started before liveness probes are initiated.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    maximumLag : int | str, default is Undefined, optional
        Lag limit. Used only for `streaming` strategy
    periodSeconds : int, default is Undefined, optional
        How often (in seconds) to perform the probe.
        Default to 10 seconds. Minimum value is 1.
    successThreshold : int, default is Undefined, optional
        Minimum consecutive successes for the probe to be considered successful after having failed.
        Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    terminationGracePeriodSeconds : int, default is Undefined, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
        The grace period is the duration in seconds after the processes running in the pod are sent
        a termination signal and the time when the processes are forcibly halted with a kill signal.
        Set this value longer than the expected cleanup time for your process.
        If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
        value overrides the value provided by the pod spec.
        Value must be non-negative integer. The value zero indicates stop immediately via
        the kill signal (no opportunity to shut down).
        This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
        Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, default is Undefined, optional
        Number of seconds after which the probe times out.
        Defaults to 1 second. Minimum value is 1.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    $type : str, default is Undefined, optional
        The probe strategy
    """
    failureThreshold?: int
    initialDelaySeconds?: int
    maximumLag?: int | str
    periodSeconds?: int
    successThreshold?: int
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int
    $type?: "pg_isready" | "streaming" | "query"

    check:
        _regex_match(str(maximumLag), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if maximumLag

schema PostgresqlCnpgIoV1ClusterSpecProbesStartup:
    r"""
    The startup probe configuration

    Attributes
    ----------
    failureThreshold : int, default is Undefined, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded.
        Defaults to 3. Minimum value is 1.
    initialDelaySeconds : int, default is Undefined, optional
        Number of seconds after the container has started before liveness probes are initiated.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    maximumLag : int | str, default is Undefined, optional
        Lag limit. Used only for `streaming` strategy
    periodSeconds : int, default is Undefined, optional
        How often (in seconds) to perform the probe.
        Default to 10 seconds. Minimum value is 1.
    successThreshold : int, default is Undefined, optional
        Minimum consecutive successes for the probe to be considered successful after having failed.
        Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    terminationGracePeriodSeconds : int, default is Undefined, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
        The grace period is the duration in seconds after the processes running in the pod are sent
        a termination signal and the time when the processes are forcibly halted with a kill signal.
        Set this value longer than the expected cleanup time for your process.
        If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
        value overrides the value provided by the pod spec.
        Value must be non-negative integer. The value zero indicates stop immediately via
        the kill signal (no opportunity to shut down).
        This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
        Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, default is Undefined, optional
        Number of seconds after which the probe times out.
        Defaults to 1 second. Minimum value is 1.
        More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    $type : str, default is Undefined, optional
        The probe strategy
    """
    failureThreshold?: int
    initialDelaySeconds?: int
    maximumLag?: int | str
    periodSeconds?: int
    successThreshold?: int
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int
    $type?: "pg_isready" | "streaming" | "query"

    check:
        _regex_match(str(maximumLag), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if maximumLag

schema PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplate:
    r"""
    Template to be used to define projected volumes, projected volumes will be mounted
    under `/projected` base folder

    Attributes
    ----------
    defaultMode : int, default is Undefined, optional
        defaultMode are the mode bits used to set permissions on created files by default.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        Directories within the path are not affected by this setting.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    sources : [PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0], default is Undefined, optional
        sources is the list of volume projections. Each entry in this list
        handles one source.
    """
    defaultMode?: int
    sources?: [PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0]

schema PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0:
    r"""
    Projection that may be projected along with other supported volume types.
    Exactly one of these fields must be set.

    Attributes
    ----------
    clusterTrustBundle : PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0ClusterTrustBundle, default is Undefined, optional
        cluster trust bundle
    configMap : PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0ConfigMap, default is Undefined, optional
        config map
    downwardAPI : PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0DownwardAPI, default is Undefined, optional
        downward API
    podCertificate : PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0PodCertificate, default is Undefined, optional
        pod certificate
    secret : PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0Secret, default is Undefined, optional
        secret
    serviceAccountToken : PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0ServiceAccountToken, default is Undefined, optional
        service account token
    """
    clusterTrustBundle?: PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0ClusterTrustBundle
    configMap?: PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0ConfigMap
    downwardAPI?: PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0DownwardAPI
    podCertificate?: PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0PodCertificate
    secret?: PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0Secret
    serviceAccountToken?: PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0ServiceAccountToken

schema PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0ClusterTrustBundle:
    r"""
    ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
    of ClusterTrustBundle objects in an auto-updating file.

    Alpha, gated by the ClusterTrustBundleProjection feature gate.

    ClusterTrustBundle objects can either be selected by name, or by the
    combination of signer name and a label selector.

    Kubelet performs aggressive normalization of the PEM contents written
    into the pod filesystem.  Esoteric PEM features such as inter-block
    comments and block headers are stripped.  Certificates are deduplicated.
    The ordering of certificates within the file is arbitrary, and Kubelet
    may change the order over time.

    Attributes
    ----------
    labelSelector : PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0ClusterTrustBundleLabelSelector, default is Undefined, optional
        label selector
    name : str, default is Undefined, optional
        Select a single ClusterTrustBundle by object name.  Mutually-exclusive
        with signerName and labelSelector.
    optional : bool, default is Undefined, optional
        If true, don't block pod startup if the referenced ClusterTrustBundle(s)
        aren't available.  If using name, then the named ClusterTrustBundle is
        allowed not to exist.  If using signerName, then the combination of
        signerName and labelSelector is allowed to match zero
        ClusterTrustBundles.
    path : str, default is Undefined, required
        Relative path from the volume root to write the bundle.
    signerName : str, default is Undefined, optional
        Select all ClusterTrustBundles that match this signer name.
        Mutually-exclusive with name.  The contents of all selected
        ClusterTrustBundles will be unified and deduplicated.
    """
    labelSelector?: PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0ClusterTrustBundleLabelSelector
    name?: str
    optional?: bool
    path: str

    signerName?: str

schema PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0ClusterTrustBundleLabelSelector:
    r"""
    Select all ClusterTrustBundles that match this label selector.  Only has
    effect if signerName is set.  Mutually-exclusive with name.  If unset,
    interpreted as "match nothing".  If set but empty, interpreted as "match
    everything".

    Attributes
    ----------
    matchExpressions : [PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0ClusterTrustBundleLabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0ClusterTrustBundleLabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0ClusterTrustBundleLabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0ConfigMap:
    r"""
    configMap information about the configMap data to project

    Attributes
    ----------
    items : [PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0ConfigMapItemsItems0], default is Undefined, optional
        items if unspecified, each key-value pair in the Data field of the referenced
        ConfigMap will be projected into the volume as a file whose name is the
        key and content is the value. If specified, the listed keys will be
        projected into the specified paths, and unlisted keys will not be
        present. If a key is specified which is not present in the ConfigMap,
        the volume setup will error unless it is marked optional. Paths must be
        relative and may not contain the '..' path or start with '..'.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        optional specify whether the ConfigMap or its keys must be defined
    """
    items?: [PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0ConfigMapItemsItems0]
    name?: str = ""
    optional?: bool

schema PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0ConfigMapItemsItems0:
    r"""
    Maps a string key to a path within a volume.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the key to project.
    mode : int, default is Undefined, optional
        mode is Optional: mode bits used to set permissions on this file.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        If not specified, the volume defaultMode will be used.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    path : str, default is Undefined, required
        path is the relative path of the file to map the key to.
        May not be an absolute path.
        May not contain the path element '..'.
        May not start with the string '..'.
    """
    key: str

    mode?: int
    path: str

schema PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0DownwardAPI:
    r"""
    downwardAPI information about the downwardAPI data to project

    Attributes
    ----------
    items : [PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0DownwardAPIItemsItems0], default is Undefined, optional
        Items is a list of DownwardAPIVolume file
    """
    items?: [PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0DownwardAPIItemsItems0]

schema PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0DownwardAPIItemsItems0:
    r"""
    DownwardAPIVolumeFile represents information to create the file containing the pod field

    Attributes
    ----------
    fieldRef : PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0DownwardAPIItemsItems0FieldRef, default is Undefined, optional
        field ref
    mode : int, default is Undefined, optional
        Optional: mode bits used to set permissions on this file, must be an octal value
        between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        If not specified, the volume defaultMode will be used.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    path : str, default is Undefined, required
        Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
    resourceFieldRef : PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0DownwardAPIItemsItems0ResourceFieldRef, default is Undefined, optional
        resource field ref
    """
    fieldRef?: PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0DownwardAPIItemsItems0FieldRef
    mode?: int
    path: str

    resourceFieldRef?: PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0DownwardAPIItemsItems0ResourceFieldRef

schema PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0DownwardAPIItemsItems0FieldRef:
    r"""
    Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.

    Attributes
    ----------
    apiVersion : str, default is Undefined, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, default is Undefined, required
        Path of the field to select in the specified API version.
    """
    apiVersion?: str
    fieldPath: str

schema PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0DownwardAPIItemsItems0ResourceFieldRef:
    r"""
    Selects a resource of the container: only resources limits and requests
    (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.

    Attributes
    ----------
    containerName : str, default is Undefined, optional
        Container name: required for volumes, optional for env vars
    divisor : int | str, default is Undefined, optional
        Specifies the output format of the exposed resources, defaults to "1"
    resource : str, default is Undefined, required
        Required: resource to select
    """
    containerName?: str
    divisor?: int | str
    resource: str

    check:
        _regex_match(str(divisor), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if divisor

schema PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0PodCertificate:
    r"""
    Projects an auto-rotating credential bundle (private key and certificate
    chain) that the pod can use either as a TLS client or server.

    Kubelet generates a private key and uses it to send a
    PodCertificateRequest to the named signer.  Once the signer approves the
    request and issues a certificate chain, Kubelet writes the key and
    certificate chain to the pod filesystem.  The pod does not start until
    certificates have been issued for each podCertificate projected volume
    source in its spec.

    Kubelet will begin trying to rotate the certificate at the time indicated
    by the signer using the PodCertificateRequest.Status.BeginRefreshAt
    timestamp.

    Kubelet can write a single file, indicated by the credentialBundlePath
    field, or separate files, indicated by the keyPath and
    certificateChainPath fields.

    The credential bundle is a single file in PEM format.  The first PEM
    entry is the private key (in PKCS#8 format), and the remaining PEM
    entries are the certificate chain issued by the signer (typically,
    signers will return their certificate chain in leaf-to-root order).

    Prefer using the credential bundle format, since your application code
    can read it atomically.  If you use keyPath and certificateChainPath,
    your application must make two separate file reads. If these coincide
    with a certificate rotation, it is possible that the private key and leaf
    certificate you read may not correspond to each other.  Your application
    will need to check for this condition, and re-read until they are
    consistent.

    The named signer controls chooses the format of the certificate it
    issues; consult the signer implementation's documentation to learn how to
    use the certificates it issues.

    Attributes
    ----------
    certificateChainPath : str, default is Undefined, optional
        Write the certificate chain at this path in the projected volume.

        Most applications should use credentialBundlePath.  When using keyPath
        and certificateChainPath, your application needs to check that the key
        and leaf certificate are consistent, because it is possible to read the
        files mid-rotation.
    credentialBundlePath : str, default is Undefined, optional
        Write the credential bundle at this path in the projected volume.

        The credential bundle is a single file that contains multiple PEM blocks.
        The first PEM block is a PRIVATE KEY block, containing a PKCS#8 private
        key.

        The remaining blocks are CERTIFICATE blocks, containing the issued
        certificate chain from the signer (leaf and any intermediates).

        Using credentialBundlePath lets your Pod's application code make a single
        atomic read that retrieves a consistent key and certificate chain.  If you
        project them to separate files, your application code will need to
        additionally check that the leaf certificate was issued to the key.
    keyPath : str, default is Undefined, optional
        Write the key at this path in the projected volume.

        Most applications should use credentialBundlePath.  When using keyPath
        and certificateChainPath, your application needs to check that the key
        and leaf certificate are consistent, because it is possible to read the
        files mid-rotation.
    keyType : str, default is Undefined, required
        The type of keypair Kubelet will generate for the pod.

        Valid values are "RSA3072", "RSA4096", "ECDSAP256", "ECDSAP384",
        "ECDSAP521", and "ED25519".
    maxExpirationSeconds : int, default is Undefined, optional
        maxExpirationSeconds is the maximum lifetime permitted for the
        certificate.

        Kubelet copies this value verbatim into the PodCertificateRequests it
        generates for this projection.

        If omitted, kube-apiserver will set it to 86400(24 hours). kube-apiserver
        will reject values shorter than 3600 (1 hour).  The maximum allowable
        value is 7862400 (91 days).

        The signer implementation is then free to issue a certificate with any
        lifetime *shorter* than MaxExpirationSeconds, but no shorter than 3600
        seconds (1 hour).  This constraint is enforced by kube-apiserver.
        `kubernetes.io` signers will never issue certificates with a lifetime
        longer than 24 hours.
    signerName : str, default is Undefined, required
        Kubelet's generated CSRs will be addressed to this signer.
    """
    certificateChainPath?: str
    credentialBundlePath?: str
    keyPath?: str
    keyType: str

    maxExpirationSeconds?: int
    signerName: str

schema PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0Secret:
    r"""
    secret information about the secret data to project

    Attributes
    ----------
    items : [PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0SecretItemsItems0], default is Undefined, optional
        items if unspecified, each key-value pair in the Data field of the referenced
        Secret will be projected into the volume as a file whose name is the
        key and content is the value. If specified, the listed keys will be
        projected into the specified paths, and unlisted keys will not be
        present. If a key is specified which is not present in the Secret,
        the volume setup will error unless it is marked optional. Paths must be
        relative and may not contain the '..' path or start with '..'.
    name : str, default is Undefined, optional
        Name of the referent.
        This field is effectively required, but due to backwards compatibility is
        allowed to be empty. Instances of this type with an empty value here are
        almost certainly wrong.
        More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, default is Undefined, optional
        optional field specify whether the Secret or its key must be defined
    """
    items?: [PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0SecretItemsItems0]
    name?: str = ""
    optional?: bool

schema PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0SecretItemsItems0:
    r"""
    Maps a string key to a path within a volume.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the key to project.
    mode : int, default is Undefined, optional
        mode is Optional: mode bits used to set permissions on this file.
        Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
        YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
        If not specified, the volume defaultMode will be used.
        This might be in conflict with other options that affect the file
        mode, like fsGroup, and the result can be other mode bits set.
    path : str, default is Undefined, required
        path is the relative path of the file to map the key to.
        May not be an absolute path.
        May not contain the path element '..'.
        May not start with the string '..'.
    """
    key: str

    mode?: int
    path: str

schema PostgresqlCnpgIoV1ClusterSpecProjectedVolumeTemplateSourcesItems0ServiceAccountToken:
    r"""
    serviceAccountToken is information about the serviceAccountToken data to project

    Attributes
    ----------
    audience : str, default is Undefined, optional
        audience is the intended audience of the token. A recipient of a token
        must identify itself with an identifier specified in the audience of the
        token, and otherwise should reject the token. The audience defaults to the
        identifier of the apiserver.
    expirationSeconds : int, default is Undefined, optional
        expirationSeconds is the requested duration of validity of the service
        account token. As the token approaches expiration, the kubelet volume
        plugin will proactively rotate the service account token. The kubelet will
        start trying to rotate the token if the token is older than 80 percent of
        its time to live or if the token is older than 24 hours.Defaults to 1 hour
        and must be at least 10 minutes.
    path : str, default is Undefined, required
        path is the path relative to the mount point of the file to project the
        token into.
    """
    audience?: str
    expirationSeconds?: int
    path: str

schema PostgresqlCnpgIoV1ClusterSpecReplica:
    r"""
    Replica cluster configuration

    Attributes
    ----------
    enabled : bool, default is Undefined, optional
        If replica mode is enabled, this cluster will be a replica of an
        existing cluster. Replica cluster can be created from a recovery
        object store or via streaming through pg_basebackup.
        Refer to the Replica clusters page of the documentation for more information.
    minApplyDelay : str, default is Undefined, optional
        When replica mode is enabled, this parameter allows you to replay
        transactions only when the system time is at least the configured
        time past the commit time. This provides an opportunity to correct
        data loss errors. Note that when this parameter is set, a promotion
        token cannot be used.
    primary : str, default is Undefined, optional
        Primary defines which Cluster is defined to be the primary in the distributed PostgreSQL cluster, based on the
        topology specified in externalClusters
    promotionToken : str, default is Undefined, optional
        A demotion token generated by an external cluster used to
        check if the promotion requirements are met.
    self : str, default is Undefined, optional
        Self defines the name of this cluster. It is used to determine if this is a primary
        or a replica cluster, comparing it with `primary`
    source : str, default is Undefined, required
        The name of the external cluster which is the replication origin
    """
    enabled?: bool
    minApplyDelay?: str
    primary?: str
    promotionToken?: str
    self?: str
    source: str

    check:
        len(source) >= 1

schema PostgresqlCnpgIoV1ClusterSpecReplicationSlots:
    r"""
    Replication slots management configuration

    Attributes
    ----------
    highAvailability : PostgresqlCnpgIoV1ClusterSpecReplicationSlotsHighAvailability, default is Undefined, optional
        high availability
    synchronizeReplicas : PostgresqlCnpgIoV1ClusterSpecReplicationSlotsSynchronizeReplicas, default is Undefined, optional
        synchronize replicas
    updateInterval : int, default is 30, optional
        Standby will update the status of the local replication slots
        every `updateInterval` seconds (default 30).
    """
    highAvailability?: PostgresqlCnpgIoV1ClusterSpecReplicationSlotsHighAvailability
    synchronizeReplicas?: PostgresqlCnpgIoV1ClusterSpecReplicationSlotsSynchronizeReplicas
    updateInterval?: int = 30

    check:
        updateInterval >= 1 if updateInterval not in [None, Undefined]

schema PostgresqlCnpgIoV1ClusterSpecReplicationSlotsHighAvailability:
    r"""
    Replication slots for high availability configuration

    Attributes
    ----------
    enabled : bool, default is True, optional
        If enabled (default), the operator will automatically manage replication slots
        on the primary instance and use them in streaming replication
        connections with all the standby instances that are part of the HA
        cluster. If disabled, the operator will not take advantage
        of replication slots in streaming connections with the replicas.
        This feature also controls replication slots in replica cluster,
        from the designated primary to its cascading replicas.
    slotPrefix : str, default is "_cnpg_", optional
        Prefix for replication slots managed by the operator for HA.
        It may only contain lower case letters, numbers, and the underscore character.
        This can only be set at creation time. By default set to `_cnpg_`.
    synchronizeLogicalDecoding : bool, default is Undefined, optional
        When enabled, the operator automatically manages synchronization of logical
        decoding (replication) slots across high-availability clusters.

        Requires one of the following conditions:
        - PostgreSQL version 17 or later
        - PostgreSQL version < 17 with pg_failover_slots extension enabled
    """
    enabled?: bool = True
    slotPrefix?: str = "_cnpg_"
    synchronizeLogicalDecoding?: bool

    check:
        _regex_match(str(slotPrefix), r"^[0-9a-z_]*$") if slotPrefix

schema PostgresqlCnpgIoV1ClusterSpecReplicationSlotsSynchronizeReplicas:
    r"""
    Configures the synchronization of the user defined physical replication slots

    Attributes
    ----------
    enabled : bool, default is True, required
        When set to true, every replication slot that is on the primary is synchronized on each standby
    excludePatterns : [str], default is Undefined, optional
        List of regular expression patterns to match the names of replication slots to be excluded (by default empty)
    """
    enabled: bool = True

    excludePatterns?: [str]

schema PostgresqlCnpgIoV1ClusterSpecResources:
    r"""
    Resources requirements of every generated Pod. Please refer to
    https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    for more information.

    Attributes
    ----------
    claims : [PostgresqlCnpgIoV1ClusterSpecResourcesClaimsItems0], default is Undefined, optional
        Claims lists the names of resources, defined in spec.resourceClaims,
        that are used by this container.

        This field depends on the
        DynamicResourceAllocation feature gate.

        This field is immutable. It can only be set for containers.
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """
    claims?: [PostgresqlCnpgIoV1ClusterSpecResourcesClaimsItems0]
    limits?: {str:int | str}
    requests?: {str:int | str}

    check:
        all _, limits in limits {_regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits} if limits
        all _, requests in requests {_regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests} if requests

schema PostgresqlCnpgIoV1ClusterSpecResourcesClaimsItems0:
    r"""
    ResourceClaim references one entry in PodSpec.ResourceClaims.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name must match the name of one entry in pod.spec.resourceClaims of
        the Pod where this field is used. It makes that resource available
        inside a container.
    request : str, default is Undefined, optional
        Request is the name chosen for a request in the referenced claim.
        If empty, everything from the claim is made available, otherwise
        only the result of this request.
    """
    name: str

    request?: str

schema PostgresqlCnpgIoV1ClusterSpecSeccompProfile:
    r"""
    The SeccompProfile applied to every Pod and Container.
    Defaults to: `RuntimeDefault`

    Attributes
    ----------
    localhostProfile : str, default is Undefined, optional
        localhostProfile indicates a profile defined in a file on the node should be used.
        The profile must be preconfigured on the node to work.
        Must be a descending path, relative to the kubelet's configured seccomp profile location.
        Must be set if type is "Localhost". Must NOT be set for any other type.
    $type : str, default is Undefined, required
        type indicates which kind of seccomp profile will be applied.
        Valid options are:

        Localhost - a profile defined in a file on the node should be used.
        RuntimeDefault - the container runtime default profile should be used.
        Unconfined - no profile should be applied.
    """
    localhostProfile?: str
    $type: str

schema PostgresqlCnpgIoV1ClusterSpecServiceAccountTemplate:
    r"""
    Configure the generation of the service account

    Attributes
    ----------
    metadata : PostgresqlCnpgIoV1ClusterSpecServiceAccountTemplateMetadata, default is Undefined, required
        metadata
    """
    metadata: PostgresqlCnpgIoV1ClusterSpecServiceAccountTemplateMetadata

schema PostgresqlCnpgIoV1ClusterSpecServiceAccountTemplateMetadata:
    r"""
    Metadata are the metadata to be used for the generated
    service account

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations is an unstructured key value map stored with a resource that may be
        set by external tools to store and retrieve arbitrary metadata. They are not
        queryable and should be preserved when modifying objects.
        More info: http://kubernetes.io/docs/user-guide/annotations
    labels : {str:str}, default is Undefined, optional
        Map of string keys and values that can be used to organize and categorize
        (scope and select) objects. May match selectors of replication controllers
        and services.
        More info: http://kubernetes.io/docs/user-guide/labels
    name : str, default is Undefined, optional
        The name of the resource. Only supported for certain types
    """
    annotations?: {str:str}
    labels?: {str:str}
    name?: str

schema PostgresqlCnpgIoV1ClusterSpecStorage:
    r"""
    Configuration of the storage of the instances

    Attributes
    ----------
    pvcTemplate : PostgresqlCnpgIoV1ClusterSpecStoragePvcTemplate, default is Undefined, optional
        pvc template
    resizeInUseVolumes : bool, default is True, optional
        Resize existent PVCs, defaults to true
    size : str, default is Undefined, optional
        Size of the storage. Required if not already specified in the PVC template.
        Changes to this field are automatically reapplied to the created PVCs.
        Size cannot be decreased.
    storageClass : str, default is Undefined, optional
        StorageClass to use for PVCs. Applied after
        evaluating the PVC template, if available.
        If not specified, the generated PVCs will use the
        default storage class
    """
    pvcTemplate?: PostgresqlCnpgIoV1ClusterSpecStoragePvcTemplate
    resizeInUseVolumes?: bool = True
    size?: str
    storageClass?: str

schema PostgresqlCnpgIoV1ClusterSpecStoragePvcTemplate:
    r"""
    Template to be used to generate the Persistent Volume Claim

    Attributes
    ----------
    accessModes : [str], default is Undefined, optional
        accessModes contains the desired access modes the volume should have.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    dataSource : PostgresqlCnpgIoV1ClusterSpecStoragePvcTemplateDataSource, default is Undefined, optional
        data source
    dataSourceRef : PostgresqlCnpgIoV1ClusterSpecStoragePvcTemplateDataSourceRef, default is Undefined, optional
        data source ref
    resources : PostgresqlCnpgIoV1ClusterSpecStoragePvcTemplateResources, default is Undefined, optional
        resources
    selector : PostgresqlCnpgIoV1ClusterSpecStoragePvcTemplateSelector, default is Undefined, optional
        selector
    storageClassName : str, default is Undefined, optional
        storageClassName is the name of the StorageClass required by the claim.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    volumeAttributesClassName : str, default is Undefined, optional
        volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
        If specified, the CSI driver will create or update the volume with the attributes defined
        in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
        it can be changed after the claim is created. An empty string or nil value indicates that no
        VolumeAttributesClass will be applied to the claim. If the claim enters an Infeasible error state,
        this field can be reset to its previous value (including nil) to cancel the modification.
        If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
        set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
        exists.
        More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
    volumeMode : str, default is Undefined, optional
        volumeMode defines what type of volume is required by the claim.
        Value of Filesystem is implied when not included in claim spec.
    volumeName : str, default is Undefined, optional
        volumeName is the binding reference to the PersistentVolume backing this claim.
    """
    accessModes?: [str]
    dataSource?: PostgresqlCnpgIoV1ClusterSpecStoragePvcTemplateDataSource
    dataSourceRef?: PostgresqlCnpgIoV1ClusterSpecStoragePvcTemplateDataSourceRef
    resources?: PostgresqlCnpgIoV1ClusterSpecStoragePvcTemplateResources
    selector?: PostgresqlCnpgIoV1ClusterSpecStoragePvcTemplateSelector
    storageClassName?: str
    volumeAttributesClassName?: str
    volumeMode?: str
    volumeName?: str

schema PostgresqlCnpgIoV1ClusterSpecStoragePvcTemplateDataSource:
    r"""
    dataSource field can be used to specify either:
    * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
    * An existing PVC (PersistentVolumeClaim)
    If the provisioner or an external controller can support the specified data source,
    it will create a new volume based on the contents of the specified data source.
    When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
    and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
    If the namespace is specified, then dataSourceRef will not be copied to dataSource.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    """
    apiGroup?: str
    kind: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecStoragePvcTemplateDataSourceRef:
    r"""
    dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
    volume is desired. This may be any object from a non-empty API group (non
    core object) or a PersistentVolumeClaim object.
    When this field is specified, volume binding will only succeed if the type of
    the specified object matches some installed volume populator or dynamic
    provisioner.
    This field will replace the functionality of the dataSource field and as such
    if both fields are non-empty, they must have the same value. For backwards
    compatibility, when namespace isn't specified in dataSourceRef,
    both fields (dataSource and dataSourceRef) will be set to the same
    value automatically if one of them is empty and the other is non-empty.
    When namespace is specified in dataSourceRef,
    dataSource isn't set to the same value and must be empty.
    There are three important differences between dataSource and dataSourceRef:
    * While dataSource only allows two specific types of objects, dataSourceRef
      allows any non-core object, as well as PersistentVolumeClaim objects.
    * While dataSource ignores disallowed values (dropping them), dataSourceRef
      preserves all values, and generates an error if a disallowed value is
      specified.
    * While dataSource only allows local objects, dataSourceRef allows objects
      in any namespaces.
    (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
    (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    namespace : str, default is Undefined, optional
        Namespace is the namespace of resource being referenced
        Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
        (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
    """
    apiGroup?: str
    kind: str

    name: str

    namespace?: str

schema PostgresqlCnpgIoV1ClusterSpecStoragePvcTemplateResources:
    r"""
    resources represents the minimum resources the volume should have.
    If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
    that are lower than previous value but must still be higher than capacity recorded in the
    status field of the claim.
    More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources

    Attributes
    ----------
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """
    limits?: {str:int | str}
    requests?: {str:int | str}

    check:
        all _, limits in limits {_regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits} if limits
        all _, requests in requests {_regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests} if requests

schema PostgresqlCnpgIoV1ClusterSpecStoragePvcTemplateSelector:
    r"""
    selector is a label query over volumes to consider for binding.

    Attributes
    ----------
    matchExpressions : [PostgresqlCnpgIoV1ClusterSpecStoragePvcTemplateSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [PostgresqlCnpgIoV1ClusterSpecStoragePvcTemplateSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema PostgresqlCnpgIoV1ClusterSpecStoragePvcTemplateSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema PostgresqlCnpgIoV1ClusterSpecSuperuserSecret:
    r"""
    The secret containing the superuser password. If not defined a new
    secret will be created with a randomly generated password

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referent.
    """
    name: str

schema PostgresqlCnpgIoV1ClusterSpecTablespacesItems0:
    r"""
    TablespaceConfiguration is the configuration of a tablespace, and includes
    the storage specification for the tablespace

    Attributes
    ----------
    name : str, default is Undefined, required
        The name of the tablespace
    owner : PostgresqlCnpgIoV1ClusterSpecTablespacesItems0Owner, default is Undefined, optional
        owner
    storage : PostgresqlCnpgIoV1ClusterSpecTablespacesItems0Storage, default is Undefined, required
        storage
    temporary : bool, default is Undefined, optional
        When set to true, the tablespace will be added as a `temp_tablespaces`
        entry in PostgreSQL, and will be available to automatically house temp
        database objects, or other temporary files. Please refer to PostgreSQL
        documentation for more information on the `temp_tablespaces` GUC.
    """
    name: str

    owner?: PostgresqlCnpgIoV1ClusterSpecTablespacesItems0Owner
    storage: PostgresqlCnpgIoV1ClusterSpecTablespacesItems0Storage

    temporary?: bool = False

schema PostgresqlCnpgIoV1ClusterSpecTablespacesItems0Owner:
    r"""
    Owner is the PostgreSQL user owning the tablespace

    Attributes
    ----------
    name : str, default is Undefined, optional
        name
    """
    name?: str

schema PostgresqlCnpgIoV1ClusterSpecTablespacesItems0Storage:
    r"""
    The storage configuration for the tablespace

    Attributes
    ----------
    pvcTemplate : PostgresqlCnpgIoV1ClusterSpecTablespacesItems0StoragePvcTemplate, default is Undefined, optional
        pvc template
    resizeInUseVolumes : bool, default is True, optional
        Resize existent PVCs, defaults to true
    size : str, default is Undefined, optional
        Size of the storage. Required if not already specified in the PVC template.
        Changes to this field are automatically reapplied to the created PVCs.
        Size cannot be decreased.
    storageClass : str, default is Undefined, optional
        StorageClass to use for PVCs. Applied after
        evaluating the PVC template, if available.
        If not specified, the generated PVCs will use the
        default storage class
    """
    pvcTemplate?: PostgresqlCnpgIoV1ClusterSpecTablespacesItems0StoragePvcTemplate
    resizeInUseVolumes?: bool = True
    size?: str
    storageClass?: str

schema PostgresqlCnpgIoV1ClusterSpecTablespacesItems0StoragePvcTemplate:
    r"""
    Template to be used to generate the Persistent Volume Claim

    Attributes
    ----------
    accessModes : [str], default is Undefined, optional
        accessModes contains the desired access modes the volume should have.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    dataSource : PostgresqlCnpgIoV1ClusterSpecTablespacesItems0StoragePvcTemplateDataSource, default is Undefined, optional
        data source
    dataSourceRef : PostgresqlCnpgIoV1ClusterSpecTablespacesItems0StoragePvcTemplateDataSourceRef, default is Undefined, optional
        data source ref
    resources : PostgresqlCnpgIoV1ClusterSpecTablespacesItems0StoragePvcTemplateResources, default is Undefined, optional
        resources
    selector : PostgresqlCnpgIoV1ClusterSpecTablespacesItems0StoragePvcTemplateSelector, default is Undefined, optional
        selector
    storageClassName : str, default is Undefined, optional
        storageClassName is the name of the StorageClass required by the claim.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    volumeAttributesClassName : str, default is Undefined, optional
        volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
        If specified, the CSI driver will create or update the volume with the attributes defined
        in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
        it can be changed after the claim is created. An empty string or nil value indicates that no
        VolumeAttributesClass will be applied to the claim. If the claim enters an Infeasible error state,
        this field can be reset to its previous value (including nil) to cancel the modification.
        If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
        set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
        exists.
        More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
    volumeMode : str, default is Undefined, optional
        volumeMode defines what type of volume is required by the claim.
        Value of Filesystem is implied when not included in claim spec.
    volumeName : str, default is Undefined, optional
        volumeName is the binding reference to the PersistentVolume backing this claim.
    """
    accessModes?: [str]
    dataSource?: PostgresqlCnpgIoV1ClusterSpecTablespacesItems0StoragePvcTemplateDataSource
    dataSourceRef?: PostgresqlCnpgIoV1ClusterSpecTablespacesItems0StoragePvcTemplateDataSourceRef
    resources?: PostgresqlCnpgIoV1ClusterSpecTablespacesItems0StoragePvcTemplateResources
    selector?: PostgresqlCnpgIoV1ClusterSpecTablespacesItems0StoragePvcTemplateSelector
    storageClassName?: str
    volumeAttributesClassName?: str
    volumeMode?: str
    volumeName?: str

schema PostgresqlCnpgIoV1ClusterSpecTablespacesItems0StoragePvcTemplateDataSource:
    r"""
    dataSource field can be used to specify either:
    * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
    * An existing PVC (PersistentVolumeClaim)
    If the provisioner or an external controller can support the specified data source,
    it will create a new volume based on the contents of the specified data source.
    When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
    and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
    If the namespace is specified, then dataSourceRef will not be copied to dataSource.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    """
    apiGroup?: str
    kind: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecTablespacesItems0StoragePvcTemplateDataSourceRef:
    r"""
    dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
    volume is desired. This may be any object from a non-empty API group (non
    core object) or a PersistentVolumeClaim object.
    When this field is specified, volume binding will only succeed if the type of
    the specified object matches some installed volume populator or dynamic
    provisioner.
    This field will replace the functionality of the dataSource field and as such
    if both fields are non-empty, they must have the same value. For backwards
    compatibility, when namespace isn't specified in dataSourceRef,
    both fields (dataSource and dataSourceRef) will be set to the same
    value automatically if one of them is empty and the other is non-empty.
    When namespace is specified in dataSourceRef,
    dataSource isn't set to the same value and must be empty.
    There are three important differences between dataSource and dataSourceRef:
    * While dataSource only allows two specific types of objects, dataSourceRef
      allows any non-core object, as well as PersistentVolumeClaim objects.
    * While dataSource ignores disallowed values (dropping them), dataSourceRef
      preserves all values, and generates an error if a disallowed value is
      specified.
    * While dataSource only allows local objects, dataSourceRef allows objects
      in any namespaces.
    (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
    (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    namespace : str, default is Undefined, optional
        Namespace is the namespace of resource being referenced
        Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
        (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
    """
    apiGroup?: str
    kind: str

    name: str

    namespace?: str

schema PostgresqlCnpgIoV1ClusterSpecTablespacesItems0StoragePvcTemplateResources:
    r"""
    resources represents the minimum resources the volume should have.
    If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
    that are lower than previous value but must still be higher than capacity recorded in the
    status field of the claim.
    More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources

    Attributes
    ----------
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """
    limits?: {str:int | str}
    requests?: {str:int | str}

    check:
        all _, limits in limits {_regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits} if limits
        all _, requests in requests {_regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests} if requests

schema PostgresqlCnpgIoV1ClusterSpecTablespacesItems0StoragePvcTemplateSelector:
    r"""
    selector is a label query over volumes to consider for binding.

    Attributes
    ----------
    matchExpressions : [PostgresqlCnpgIoV1ClusterSpecTablespacesItems0StoragePvcTemplateSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [PostgresqlCnpgIoV1ClusterSpecTablespacesItems0StoragePvcTemplateSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema PostgresqlCnpgIoV1ClusterSpecTablespacesItems0StoragePvcTemplateSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema PostgresqlCnpgIoV1ClusterSpecTopologySpreadConstraintsItems0:
    r"""
    TopologySpreadConstraint specifies how to spread matching pods among the given topology.

    Attributes
    ----------
    labelSelector : PostgresqlCnpgIoV1ClusterSpecTopologySpreadConstraintsItems0LabelSelector, default is Undefined, optional
        label selector
    matchLabelKeys : [str], default is Undefined, optional
        MatchLabelKeys is a set of pod label keys to select the pods over which
        spreading will be calculated. The keys are used to lookup values from the
        incoming pod labels, those key-value labels are ANDed with labelSelector
        to select the group of existing pods over which spreading will be calculated
        for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
        MatchLabelKeys cannot be set when LabelSelector isn't set.
        Keys that don't exist in the incoming pod labels will
        be ignored. A null or empty list means only match against labelSelector.

        This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
    maxSkew : int, default is Undefined, required
        MaxSkew describes the degree to which pods may be unevenly distributed.
        When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
        between the number of matching pods in the target topology and the global minimum.
        The global minimum is the minimum number of matching pods in an eligible domain
        or zero if the number of eligible domains is less than MinDomains.
        For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
        labelSelector spread as 2/2/1:
        In this case, the global minimum is 1.
        | zone1 | zone2 | zone3 |
        |  P P  |  P P  |   P   |
        - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
        scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
        violate MaxSkew(1).
        - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
        When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
        to topologies that satisfy it.
        It's a required field. Default value is 1 and 0 is not allowed.
    minDomains : int, default is Undefined, optional
        MinDomains indicates a minimum number of eligible domains.
        When the number of eligible domains with matching topology keys is less than minDomains,
        Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
        And when the number of eligible domains with matching topology keys equals or greater than minDomains,
        this value has no effect on scheduling.
        As a result, when the number of eligible domains is less than minDomains,
        scheduler won't schedule more than maxSkew Pods to those domains.
        If value is nil, the constraint behaves as if MinDomains is equal to 1.
        Valid values are integers greater than 0.
        When value is not nil, WhenUnsatisfiable must be DoNotSchedule.

        For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
        labelSelector spread as 2/2/2:
        | zone1 | zone2 | zone3 |
        |  P P  |  P P  |  P P  |
        The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
        In this situation, new pod with the same labelSelector cannot be scheduled,
        because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
        it will violate MaxSkew.
    nodeAffinityPolicy : str, default is Undefined, optional
        NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
        when calculating pod topology spread skew. Options are:
        - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
        - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.

        If this value is nil, the behavior is equivalent to the Honor policy.
    nodeTaintsPolicy : str, default is Undefined, optional
        NodeTaintsPolicy indicates how we will treat node taints when calculating
        pod topology spread skew. Options are:
        - Honor: nodes without taints, along with tainted nodes for which the incoming pod
        has a toleration, are included.
        - Ignore: node taints are ignored. All nodes are included.

        If this value is nil, the behavior is equivalent to the Ignore policy.
    topologyKey : str, default is Undefined, required
        TopologyKey is the key of node labels. Nodes that have a label with this key
        and identical values are considered to be in the same topology.
        We consider each <key, value> as a "bucket", and try to put balanced number
        of pods into each bucket.
        We define a domain as a particular instance of a topology.
        Also, we define an eligible domain as a domain whose nodes meet the requirements of
        nodeAffinityPolicy and nodeTaintsPolicy.
        e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
        And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
        It's a required field.
    whenUnsatisfiable : str, default is Undefined, required
        WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
        the spread constraint.
        - DoNotSchedule (default) tells the scheduler not to schedule it.
        - ScheduleAnyway tells the scheduler to schedule the pod in any location,
          but giving higher precedence to topologies that would help reduce the
          skew.
        A constraint is considered "Unsatisfiable" for an incoming pod
        if and only if every possible node assignment for that pod would violate
        "MaxSkew" on some topology.
        For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
        labelSelector spread as 3/1/1:
        | zone1 | zone2 | zone3 |
        | P P P |   P   |   P   |
        If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
        to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
        MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
        won't make it *more* imbalanced.
        It's a required field.
    """
    labelSelector?: PostgresqlCnpgIoV1ClusterSpecTopologySpreadConstraintsItems0LabelSelector
    matchLabelKeys?: [str]
    maxSkew: int

    minDomains?: int
    nodeAffinityPolicy?: str
    nodeTaintsPolicy?: str
    topologyKey: str

    whenUnsatisfiable: str

schema PostgresqlCnpgIoV1ClusterSpecTopologySpreadConstraintsItems0LabelSelector:
    r"""
    LabelSelector is used to find matching pods.
    Pods that match this label selector are counted to determine the number of pods
    in their corresponding topology domain.

    Attributes
    ----------
    matchExpressions : [PostgresqlCnpgIoV1ClusterSpecTopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [PostgresqlCnpgIoV1ClusterSpecTopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema PostgresqlCnpgIoV1ClusterSpecTopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema PostgresqlCnpgIoV1ClusterSpecWalStorage:
    r"""
    Configuration of the storage for PostgreSQL WAL (Write-Ahead Log)

    Attributes
    ----------
    pvcTemplate : PostgresqlCnpgIoV1ClusterSpecWalStoragePvcTemplate, default is Undefined, optional
        pvc template
    resizeInUseVolumes : bool, default is True, optional
        Resize existent PVCs, defaults to true
    size : str, default is Undefined, optional
        Size of the storage. Required if not already specified in the PVC template.
        Changes to this field are automatically reapplied to the created PVCs.
        Size cannot be decreased.
    storageClass : str, default is Undefined, optional
        StorageClass to use for PVCs. Applied after
        evaluating the PVC template, if available.
        If not specified, the generated PVCs will use the
        default storage class
    """
    pvcTemplate?: PostgresqlCnpgIoV1ClusterSpecWalStoragePvcTemplate
    resizeInUseVolumes?: bool = True
    size?: str
    storageClass?: str

schema PostgresqlCnpgIoV1ClusterSpecWalStoragePvcTemplate:
    r"""
    Template to be used to generate the Persistent Volume Claim

    Attributes
    ----------
    accessModes : [str], default is Undefined, optional
        accessModes contains the desired access modes the volume should have.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    dataSource : PostgresqlCnpgIoV1ClusterSpecWalStoragePvcTemplateDataSource, default is Undefined, optional
        data source
    dataSourceRef : PostgresqlCnpgIoV1ClusterSpecWalStoragePvcTemplateDataSourceRef, default is Undefined, optional
        data source ref
    resources : PostgresqlCnpgIoV1ClusterSpecWalStoragePvcTemplateResources, default is Undefined, optional
        resources
    selector : PostgresqlCnpgIoV1ClusterSpecWalStoragePvcTemplateSelector, default is Undefined, optional
        selector
    storageClassName : str, default is Undefined, optional
        storageClassName is the name of the StorageClass required by the claim.
        More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    volumeAttributesClassName : str, default is Undefined, optional
        volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
        If specified, the CSI driver will create or update the volume with the attributes defined
        in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
        it can be changed after the claim is created. An empty string or nil value indicates that no
        VolumeAttributesClass will be applied to the claim. If the claim enters an Infeasible error state,
        this field can be reset to its previous value (including nil) to cancel the modification.
        If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
        set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
        exists.
        More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
    volumeMode : str, default is Undefined, optional
        volumeMode defines what type of volume is required by the claim.
        Value of Filesystem is implied when not included in claim spec.
    volumeName : str, default is Undefined, optional
        volumeName is the binding reference to the PersistentVolume backing this claim.
    """
    accessModes?: [str]
    dataSource?: PostgresqlCnpgIoV1ClusterSpecWalStoragePvcTemplateDataSource
    dataSourceRef?: PostgresqlCnpgIoV1ClusterSpecWalStoragePvcTemplateDataSourceRef
    resources?: PostgresqlCnpgIoV1ClusterSpecWalStoragePvcTemplateResources
    selector?: PostgresqlCnpgIoV1ClusterSpecWalStoragePvcTemplateSelector
    storageClassName?: str
    volumeAttributesClassName?: str
    volumeMode?: str
    volumeName?: str

schema PostgresqlCnpgIoV1ClusterSpecWalStoragePvcTemplateDataSource:
    r"""
    dataSource field can be used to specify either:
    * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
    * An existing PVC (PersistentVolumeClaim)
    If the provisioner or an external controller can support the specified data source,
    it will create a new volume based on the contents of the specified data source.
    When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
    and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
    If the namespace is specified, then dataSourceRef will not be copied to dataSource.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    """
    apiGroup?: str
    kind: str

    name: str

schema PostgresqlCnpgIoV1ClusterSpecWalStoragePvcTemplateDataSourceRef:
    r"""
    dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
    volume is desired. This may be any object from a non-empty API group (non
    core object) or a PersistentVolumeClaim object.
    When this field is specified, volume binding will only succeed if the type of
    the specified object matches some installed volume populator or dynamic
    provisioner.
    This field will replace the functionality of the dataSource field and as such
    if both fields are non-empty, they must have the same value. For backwards
    compatibility, when namespace isn't specified in dataSourceRef,
    both fields (dataSource and dataSourceRef) will be set to the same
    value automatically if one of them is empty and the other is non-empty.
    When namespace is specified in dataSourceRef,
    dataSource isn't set to the same value and must be empty.
    There are three important differences between dataSource and dataSourceRef:
    * While dataSource only allows two specific types of objects, dataSourceRef
      allows any non-core object, as well as PersistentVolumeClaim objects.
    * While dataSource ignores disallowed values (dropping them), dataSourceRef
      preserves all values, and generates an error if a disallowed value is
      specified.
    * While dataSource only allows local objects, dataSourceRef allows objects
      in any namespaces.
    (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
    (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.

    Attributes
    ----------
    apiGroup : str, default is Undefined, optional
        APIGroup is the group for the resource being referenced.
        If APIGroup is not specified, the specified Kind must be in the core API group.
        For any other third-party types, APIGroup is required.
    kind : str, default is Undefined, required
        Kind is the type of resource being referenced
    name : str, default is Undefined, required
        Name is the name of resource being referenced
    namespace : str, default is Undefined, optional
        Namespace is the namespace of resource being referenced
        Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
        (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
    """
    apiGroup?: str
    kind: str

    name: str

    namespace?: str

schema PostgresqlCnpgIoV1ClusterSpecWalStoragePvcTemplateResources:
    r"""
    resources represents the minimum resources the volume should have.
    If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
    that are lower than previous value but must still be higher than capacity recorded in the
    status field of the claim.
    More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources

    Attributes
    ----------
    limits : {str:int | str}, default is Undefined, optional
        Limits describes the maximum amount of compute resources allowed.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : {str:int | str}, default is Undefined, optional
        Requests describes the minimum amount of compute resources required.
        If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
        otherwise to an implementation-defined value. Requests cannot exceed Limits.
        More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """
    limits?: {str:int | str}
    requests?: {str:int | str}

    check:
        all _, limits in limits {_regex_match(str(limits), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if limits} if limits
        all _, requests in requests {_regex_match(str(requests), r"^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$") if requests} if requests

schema PostgresqlCnpgIoV1ClusterSpecWalStoragePvcTemplateSelector:
    r"""
    selector is a label query over volumes to consider for binding.

    Attributes
    ----------
    matchExpressions : [PostgresqlCnpgIoV1ClusterSpecWalStoragePvcTemplateSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
        map is equivalent to an element of matchExpressions, whose key field is "key", the
        operator is "In", and the values array contains only "value". The requirements are ANDed.
    """
    matchExpressions?: [PostgresqlCnpgIoV1ClusterSpecWalStoragePvcTemplateSelectorMatchExpressionsItems0]
    matchLabels?: {str:str}

schema PostgresqlCnpgIoV1ClusterSpecWalStoragePvcTemplateSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values.
        Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn,
        the values array must be non-empty. If the operator is Exists or DoesNotExist,
        the values array must be empty. This array is replaced during a strategic
        merge patch.
    """
    key: str

    operator: str

    values?: [str]

schema PostgresqlCnpgIoV1ClusterStatus:
    r"""
    Most recently observed status of the cluster. This data may not be up
    to date. Populated by the system. Read-only.
    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status

    Attributes
    ----------
    availableArchitectures : [PostgresqlCnpgIoV1ClusterStatusAvailableArchitecturesItems0], default is Undefined, optional
        AvailableArchitectures reports the available architectures of a cluster
    certificates : PostgresqlCnpgIoV1ClusterStatusCertificates, default is Undefined, optional
        certificates
    cloudNativePGCommitHash : str, default is Undefined, optional
        The commit hash number of which this operator running
    cloudNativePGOperatorHash : str, default is Undefined, optional
        The hash of the binary of the operator
    conditions : [PostgresqlCnpgIoV1ClusterStatusConditionsItems0], default is Undefined, optional
        Conditions for cluster object
    configMapResourceVersion : PostgresqlCnpgIoV1ClusterStatusConfigMapResourceVersion, default is Undefined, optional
        config map resource version
    currentPrimary : str, default is Undefined, optional
        Current primary instance
    currentPrimaryFailingSinceTimestamp : str, default is Undefined, optional
        The timestamp when the primary was detected to be unhealthy
        This field is reported when `.spec.failoverDelay` is populated or during online upgrades
    currentPrimaryTimestamp : str, default is Undefined, optional
        The timestamp when the last actual promotion to primary has occurred
    danglingPVC : [str], default is Undefined, optional
        List of all the PVCs created by this cluster and still available
        which are not attached to a Pod
    demotionToken : str, default is Undefined, optional
        DemotionToken is a JSON token containing the information
        from pg_controldata such as Database system identifier, Latest checkpoint's
        TimeLineID, Latest checkpoint's REDO location, Latest checkpoint's REDO
        WAL file, and Time of latest checkpoint
    firstRecoverabilityPoint : str, default is Undefined, optional
        The first recoverability point, stored as a date in RFC3339 format.
        This field is calculated from the content of FirstRecoverabilityPointByMethod.

        Deprecated: the field is not set for backup plugins.
    firstRecoverabilityPointByMethod : {str:str}, default is Undefined, optional
        The first recoverability point, stored as a date in RFC3339 format, per backup method type.

        Deprecated: the field is not set for backup plugins.
    healthyPVC : [str], default is Undefined, optional
        List of all the PVCs not dangling nor initializing
    image : str, default is Undefined, optional
        Image contains the image name used by the pods
    initializingPVC : [str], default is Undefined, optional
        List of all the PVCs that are being initialized by this cluster
    instanceNames : [str], default is Undefined, optional
        List of instance names in the cluster
    instances : int, default is Undefined, optional
        The total number of PVC Groups detected in the cluster. It may differ from the number of existing instance pods.
    instancesReportedState : {str:PostgresqlCnpgIoV1ClusterStatusInstancesReportedStateAnon}, default is Undefined, optional
        The reported state of the instances during the last reconciliation loop
    instancesStatus : {str:[str]}, default is Undefined, optional
        InstancesStatus indicates in which status the instances are
    jobCount : int, default is Undefined, optional
        How many Jobs have been created by this cluster
    lastFailedBackup : str, default is Undefined, optional
        Last failed backup, stored as a date in RFC3339 format.

        Deprecated: the field is not set for backup plugins.
    lastPromotionToken : str, default is Undefined, optional
        LastPromotionToken is the last verified promotion token that
        was used to promote a replica cluster
    lastSuccessfulBackup : str, default is Undefined, optional
        Last successful backup, stored as a date in RFC3339 format.
        This field is calculated from the content of LastSuccessfulBackupByMethod.

        Deprecated: the field is not set for backup plugins.
    lastSuccessfulBackupByMethod : {str:str}, default is Undefined, optional
        Last successful backup, stored as a date in RFC3339 format, per backup method type.

        Deprecated: the field is not set for backup plugins.
    latestGeneratedNode : int, default is Undefined, optional
        ID of the latest generated node (used to avoid node name clashing)
    managedRolesStatus : PostgresqlCnpgIoV1ClusterStatusManagedRolesStatus, default is Undefined, optional
        managed roles status
    onlineUpdateEnabled : bool, default is Undefined, optional
        OnlineUpdateEnabled shows if the online upgrade is enabled inside the cluster
    pgDataImageInfo : PostgresqlCnpgIoV1ClusterStatusPgDataImageInfo, default is Undefined, optional
        pg data image info
    phase : str, default is Undefined, optional
        Current phase of the cluster
    phaseReason : str, default is Undefined, optional
        Reason for the current phase
    pluginStatus : [PostgresqlCnpgIoV1ClusterStatusPluginStatusItems0], default is Undefined, optional
        PluginStatus is the status of the loaded plugins
    poolerIntegrations : PostgresqlCnpgIoV1ClusterStatusPoolerIntegrations, default is Undefined, optional
        pooler integrations
    pvcCount : int, default is Undefined, optional
        How many PVCs have been created by this cluster
    readService : str, default is Undefined, optional
        Current list of read pods
    readyInstances : int, default is Undefined, optional
        The total number of ready instances in the cluster. It is equal to the number of ready instance pods.
    resizingPVC : [str], default is Undefined, optional
        List of all the PVCs that have ResizingPVC condition.
    secretsResourceVersion : PostgresqlCnpgIoV1ClusterStatusSecretsResourceVersion, default is Undefined, optional
        secrets resource version
    switchReplicaClusterStatus : PostgresqlCnpgIoV1ClusterStatusSwitchReplicaClusterStatus, default is Undefined, optional
        switch replica cluster status
    systemID : str, default is Undefined, optional
        SystemID is the latest detected PostgreSQL SystemID
    tablespacesStatus : [PostgresqlCnpgIoV1ClusterStatusTablespacesStatusItems0], default is Undefined, optional
        TablespacesStatus reports the state of the declarative tablespaces in the cluster
    targetPrimary : str, default is Undefined, optional
        Target primary instance, this is different from the previous one
        during a switchover or a failover
    targetPrimaryTimestamp : str, default is Undefined, optional
        The timestamp when the last request for a new primary has occurred
    timelineID : int, default is Undefined, optional
        The timeline of the Postgres cluster
    topology : PostgresqlCnpgIoV1ClusterStatusTopology, default is Undefined, optional
        topology
    unusablePVC : [str], default is Undefined, optional
        List of all the PVCs that are unusable because another PVC is missing
    writeService : str, default is Undefined, optional
        Current write pod
    """
    availableArchitectures?: [PostgresqlCnpgIoV1ClusterStatusAvailableArchitecturesItems0]
    certificates?: PostgresqlCnpgIoV1ClusterStatusCertificates
    cloudNativePGCommitHash?: str
    cloudNativePGOperatorHash?: str
    conditions?: [PostgresqlCnpgIoV1ClusterStatusConditionsItems0]
    configMapResourceVersion?: PostgresqlCnpgIoV1ClusterStatusConfigMapResourceVersion
    currentPrimary?: str
    currentPrimaryFailingSinceTimestamp?: str
    currentPrimaryTimestamp?: str
    danglingPVC?: [str]
    demotionToken?: str
    firstRecoverabilityPoint?: str
    firstRecoverabilityPointByMethod?: {str:str}
    healthyPVC?: [str]
    image?: str
    initializingPVC?: [str]
    instanceNames?: [str]
    instances?: int
    instancesReportedState?: {str:PostgresqlCnpgIoV1ClusterStatusInstancesReportedStateAnon}
    instancesStatus?: {str:[str]}
    jobCount?: int
    lastFailedBackup?: str
    lastPromotionToken?: str
    lastSuccessfulBackup?: str
    lastSuccessfulBackupByMethod?: {str:str}
    latestGeneratedNode?: int
    managedRolesStatus?: PostgresqlCnpgIoV1ClusterStatusManagedRolesStatus
    onlineUpdateEnabled?: bool
    pgDataImageInfo?: PostgresqlCnpgIoV1ClusterStatusPgDataImageInfo
    phase?: str
    phaseReason?: str
    pluginStatus?: [PostgresqlCnpgIoV1ClusterStatusPluginStatusItems0]
    poolerIntegrations?: PostgresqlCnpgIoV1ClusterStatusPoolerIntegrations
    pvcCount?: int
    readService?: str
    readyInstances?: int
    resizingPVC?: [str]
    secretsResourceVersion?: PostgresqlCnpgIoV1ClusterStatusSecretsResourceVersion
    switchReplicaClusterStatus?: PostgresqlCnpgIoV1ClusterStatusSwitchReplicaClusterStatus
    systemID?: str
    tablespacesStatus?: [PostgresqlCnpgIoV1ClusterStatusTablespacesStatusItems0]
    targetPrimary?: str
    targetPrimaryTimestamp?: str
    timelineID?: int
    topology?: PostgresqlCnpgIoV1ClusterStatusTopology
    unusablePVC?: [str]
    writeService?: str

schema PostgresqlCnpgIoV1ClusterStatusAvailableArchitecturesItems0:
    r"""
    AvailableArchitecture represents the state of a cluster's architecture

    Attributes
    ----------
    goArch : str, default is Undefined, required
        GoArch is the name of the executable architecture
    hash : str, default is Undefined, required
        Hash is the hash of the executable
    """
    goArch: str

    hash: str

schema PostgresqlCnpgIoV1ClusterStatusCertificates:
    r"""
    The configuration for the CA and related certificates, initialized with defaults.

    Attributes
    ----------
    clientCASecret : str, default is Undefined, optional
        The secret containing the Client CA certificate. If not defined, a new secret will be created
        with a self-signed CA and will be used to generate all the client certificates.<br />
        <br />
        Contains:<br />
        <br />
        - `ca.crt`: CA that should be used to validate the client certificates,
        used as `ssl_ca_file` of all the instances.<br />
        - `ca.key`: key used to generate client certificates, if ReplicationTLSSecret is provided,
        this can be omitted.<br />
    expirations : {str:str}, default is Undefined, optional
        Expiration dates for all certificates.
    replicationTLSSecret : str, default is Undefined, optional
        The secret of type kubernetes.io/tls containing the client certificate to authenticate as
        the `streaming_replica` user.
        If not defined, ClientCASecret must provide also `ca.key`, and a new secret will be
        created using the provided CA.
    serverAltDNSNames : [str], default is Undefined, optional
        The list of the server alternative DNS names to be added to the generated server TLS certificates, when required.
    serverCASecret : str, default is Undefined, optional
        The secret containing the Server CA certificate. If not defined, a new secret will be created
        with a self-signed CA and will be used to generate the TLS certificate ServerTLSSecret.<br />
        <br />
        Contains:<br />
        <br />
        - `ca.crt`: CA that should be used to validate the server certificate,
        used as `sslrootcert` in client connection strings.<br />
        - `ca.key`: key used to generate Server SSL certs, if ServerTLSSecret is provided,
        this can be omitted.<br />
    serverTLSSecret : str, default is Undefined, optional
        The secret of type kubernetes.io/tls containing the server TLS certificate and key that will be set as
        `ssl_cert_file` and `ssl_key_file` so that clients can connect to postgres securely.
        If not defined, ServerCASecret must provide also `ca.key` and a new secret will be
        created using the provided CA.
    """
    clientCASecret?: str
    expirations?: {str:str}
    replicationTLSSecret?: str
    serverAltDNSNames?: [str]
    serverCASecret?: str
    serverTLSSecret?: str

schema PostgresqlCnpgIoV1ClusterStatusConditionsItems0:
    r"""
    Condition contains details for one aspect of the current state of this API Resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        lastTransitionTime is the last time the condition transitioned from one status to another.
        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
    message : str, default is Undefined, required
        message is a human readable message indicating details about the transition.
        This may be an empty string.
    observedGeneration : int, default is Undefined, optional
        observedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        reason contains a programmatic identifier indicating the reason for the condition's last transition.
        Producers of specific condition types may define expected values and meanings for this field,
        and whether the values are considered a guaranteed API.
        The value should be a CamelCase string.
        This field may not be empty.
    status : str, default is Undefined, required
        status of the condition, one of True, False, Unknown.
    $type : str, default is Undefined, required
        type of condition in CamelCase or in foo.example.com/CamelCase.
    """
    lastTransitionTime: str

    message: str

    observedGeneration?: int
    reason: str

    status: "True" | "False" | "Unknown"

    $type: str

    check:
        len(message) <= 32768
        observedGeneration >= 0 if observedGeneration not in [None, Undefined]
        len(reason) <= 1024
        len(reason) >= 1
        _regex_match(str(reason), r"^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$")
        len($type) <= 316
        _regex_match(str($type), r"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$")

schema PostgresqlCnpgIoV1ClusterStatusConfigMapResourceVersion:
    r"""
    The list of resource versions of the configmaps,
    managed by the operator. Every change here is done in the
    interest of the instance manager, which will refresh the
    configmap data

    Attributes
    ----------
    metrics : {str:str}, default is Undefined, optional
        A map with the versions of all the config maps used to pass metrics.
        Map keys are the config map names, map values are the versions
    """
    metrics?: {str:str}

schema PostgresqlCnpgIoV1ClusterStatusInstancesReportedStateAnon:
    r"""
    InstanceReportedState describes the last reported state of an instance during a reconciliation loop

    Attributes
    ----------
    ip : str, default is Undefined, optional
        IP address of the instance
    isPrimary : bool, default is Undefined, required
        indicates if an instance is the primary one
    timeLineID : int, default is Undefined, optional
        indicates on which TimelineId the instance is
    """
    ip?: str
    isPrimary: bool

    timeLineID?: int

schema PostgresqlCnpgIoV1ClusterStatusManagedRolesStatus:
    r"""
    ManagedRolesStatus reports the state of the managed roles in the cluster

    Attributes
    ----------
    byStatus : {str:[str]}, default is Undefined, optional
        ByStatus gives the list of roles in each state
    cannotReconcile : {str:[str]}, default is Undefined, optional
        CannotReconcile lists roles that cannot be reconciled in PostgreSQL,
        with an explanation of the cause
    passwordStatus : {str:PostgresqlCnpgIoV1ClusterStatusManagedRolesStatusPasswordStatusAnon}, default is Undefined, optional
        PasswordStatus gives the last transaction id and password secret version for each managed role
    """
    byStatus?: {str:[str]}
    cannotReconcile?: {str:[str]}
    passwordStatus?: {str:PostgresqlCnpgIoV1ClusterStatusManagedRolesStatusPasswordStatusAnon}

schema PostgresqlCnpgIoV1ClusterStatusManagedRolesStatusPasswordStatusAnon:
    r"""
    PasswordState represents the state of the password of a managed RoleConfiguration

    Attributes
    ----------
    resourceVersion : str, default is Undefined, optional
        the resource version of the password secret
    transactionID : int, default is Undefined, optional
        the last transaction ID to affect the role definition in PostgreSQL
    """
    resourceVersion?: str
    transactionID?: int

schema PostgresqlCnpgIoV1ClusterStatusPgDataImageInfo:
    r"""
    PGDataImageInfo contains the details of the latest image that has run on the current data directory.

    Attributes
    ----------
    image : str, default is Undefined, required
        Image is the image name
    majorVersion : int, default is Undefined, required
        MajorVersion is the major version of the image
    """
    image: str

    majorVersion: int

schema PostgresqlCnpgIoV1ClusterStatusPluginStatusItems0:
    r"""
    PluginStatus is the status of a loaded plugin

    Attributes
    ----------
    backupCapabilities : [str], default is Undefined, optional
        BackupCapabilities are the list of capabilities of the
        plugin regarding the Backup management
    capabilities : [str], default is Undefined, optional
        Capabilities are the list of capabilities of the
        plugin
    name : str, default is Undefined, required
        Name is the name of the plugin
    operatorCapabilities : [str], default is Undefined, optional
        OperatorCapabilities are the list of capabilities of the
        plugin regarding the reconciler
    restoreJobHookCapabilities : [str], default is Undefined, optional
        RestoreJobHookCapabilities are the list of capabilities of the
        plugin regarding the RestoreJobHook management
    status : str, default is Undefined, optional
        Status contain the status reported by the plugin through the SetStatusInCluster interface
    version : str, default is Undefined, required
        Version is the version of the plugin loaded by the
        latest reconciliation loop
    walCapabilities : [str], default is Undefined, optional
        WALCapabilities are the list of capabilities of the
        plugin regarding the WAL management
    """
    backupCapabilities?: [str]
    capabilities?: [str]
    name: str

    operatorCapabilities?: [str]
    restoreJobHookCapabilities?: [str]
    status?: str
    version: str

    walCapabilities?: [str]

schema PostgresqlCnpgIoV1ClusterStatusPoolerIntegrations:
    r"""
    The integration needed by poolers referencing the cluster

    Attributes
    ----------
    pgBouncerIntegration : PostgresqlCnpgIoV1ClusterStatusPoolerIntegrationsPgBouncerIntegration, default is Undefined, optional
        pg bouncer integration
    """
    pgBouncerIntegration?: PostgresqlCnpgIoV1ClusterStatusPoolerIntegrationsPgBouncerIntegration

schema PostgresqlCnpgIoV1ClusterStatusPoolerIntegrationsPgBouncerIntegration:
    r"""
    PgBouncerIntegrationStatus encapsulates the needed integration for the pgbouncer poolers referencing the cluster

    Attributes
    ----------
    secrets : [str], default is Undefined, optional
        secrets
    """
    secrets?: [str]

schema PostgresqlCnpgIoV1ClusterStatusSecretsResourceVersion:
    r"""
    The list of resource versions of the secrets
    managed by the operator. Every change here is done in the
    interest of the instance manager, which will refresh the
    secret data

    Attributes
    ----------
    applicationSecretVersion : str, default is Undefined, optional
        The resource version of the "app" user secret
    barmanEndpointCA : str, default is Undefined, optional
        The resource version of the Barman Endpoint CA if provided
    caSecretVersion : str, default is Undefined, optional
        Unused. Retained for compatibility with old versions.
    clientCaSecretVersion : str, default is Undefined, optional
        The resource version of the PostgreSQL client-side CA secret version
    externalClusterSecretVersion : {str:str}, default is Undefined, optional
        The resource versions of the external cluster secrets
    managedRoleSecretVersion : {str:str}, default is Undefined, optional
        The resource versions of the managed roles secrets
    metrics : {str:str}, default is Undefined, optional
        A map with the versions of all the secrets used to pass metrics.
        Map keys are the secret names, map values are the versions
    replicationSecretVersion : str, default is Undefined, optional
        The resource version of the "streaming_replica" user secret
    serverCaSecretVersion : str, default is Undefined, optional
        The resource version of the PostgreSQL server-side CA secret version
    serverSecretVersion : str, default is Undefined, optional
        The resource version of the PostgreSQL server-side secret version
    superuserSecretVersion : str, default is Undefined, optional
        The resource version of the "postgres" user secret
    """
    applicationSecretVersion?: str
    barmanEndpointCA?: str
    caSecretVersion?: str
    clientCaSecretVersion?: str
    externalClusterSecretVersion?: {str:str}
    managedRoleSecretVersion?: {str:str}
    metrics?: {str:str}
    replicationSecretVersion?: str
    serverCaSecretVersion?: str
    serverSecretVersion?: str
    superuserSecretVersion?: str

schema PostgresqlCnpgIoV1ClusterStatusSwitchReplicaClusterStatus:
    r"""
    SwitchReplicaClusterStatus is the status of the switch to replica cluster

    Attributes
    ----------
    inProgress : bool, default is Undefined, optional
        InProgress indicates if there is an ongoing procedure of switching a cluster to a replica cluster.
    """
    inProgress?: bool

schema PostgresqlCnpgIoV1ClusterStatusTablespacesStatusItems0:
    r"""
    TablespaceState represents the state of a tablespace in a cluster

    Attributes
    ----------
    error : str, default is Undefined, optional
        Error is the reconciliation error, if any
    name : str, default is Undefined, required
        Name is the name of the tablespace
    owner : str, default is Undefined, optional
        Owner is the PostgreSQL user owning the tablespace
    state : str, default is Undefined, required
        State is the latest reconciliation state
    """
    error?: str
    name: str

    owner?: str
    state: str

schema PostgresqlCnpgIoV1ClusterStatusTopology:
    r"""
    Instances topology.

    Attributes
    ----------
    instances : {str:{str:str}}, default is Undefined, optional
        Instances contains the pod topology of the instances
    nodesUsed : int, default is Undefined, optional
        NodesUsed represents the count of distinct nodes accommodating the instances.
        A value of '1' suggests that all instances are hosted on a single node,
        implying the absence of High Availability (HA). Ideally, this value should
        be the same as the number of instances in the Postgres HA cluster, implying
        shared nothing architecture on the compute side.
    successfullyExtracted : bool, default is Undefined, optional
        SuccessfullyExtracted indicates if the topology data was extract. It is useful to enact fallback behaviors
        in synchronous replica election in case of failures
    """
    instances?: {str:{str:str}}
    nodesUsed?: int
    successfullyExtracted?: bool

