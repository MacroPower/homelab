{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "additionalProperties": true,
  "properties": {
    "additionalAnnotations": {
      "additionalProperties": true,
      "description": "# Additional annotations to include with deployment or statefulset",
      "required": [],
      "title": "additionalAnnotations",
      "type": "object"
    },
    "additionalLabels": {
      "additionalProperties": true,
      "description": "# Additional labels to include with deployment or statefulset",
      "required": [],
      "title": "additionalLabels",
      "type": "object"
    },
    "adminApi": {
      "additionalProperties": true,
      "description": "Configuration for the `admin-api` target",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for admin-api Pods\nThe value will be passed through tpl.",
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "annotations": {
          "additionalProperties": true,
          "description": "Additional annotations for the `admin-api` Deployment",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "containerSecurityContext": {
          "additionalProperties": true,
          "properties": {
            "allowPrivilegeEscalation": {
              "default": false,
              "required": [],
              "title": "allowPrivilegeEscalation",
              "type": "boolean"
            },
            "capabilities": {
              "additionalProperties": true,
              "properties": {
                "drop": {
                  "items": {
                    "required": [],
                    "type": "string"
                  },
                  "required": [],
                  "title": "drop",
                  "type": "array"
                }
              },
              "required": [],
              "title": "capabilities",
              "type": "object"
            },
            "readOnlyRootFilesystem": {
              "default": true,
              "required": [],
              "title": "readOnlyRootFilesystem",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "containerSecurityContext",
          "type": "object"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "DNSConfig for `admin-api` pods",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "env": {
          "description": "Configure optional environment variables",
          "items": {
            "required": []
          },
          "required": [],
          "title": "env",
          "type": "array"
        },
        "extraArgs": {
          "additionalProperties": true,
          "description": " - ip: 1.2.3.4\n   hostnames:\n     - domain.tld\nAdditional CLI arguments for the `admin-api` target",
          "required": [],
          "title": "extraArgs",
          "type": "object"
        },
        "extraContainers": {
          "description": "Configure optional extraContainers",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraEnv": {
          "description": "Environment variables to add to the admin-api pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "Environment variables from secrets or configmaps to add to the admin-api pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "Additional volume mounts for Pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Additional volumes for Pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostAliases": {
          "description": "hostAliases to add",
          "items": {
            "required": []
          },
          "required": [],
          "title": "hostAliases",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": "Use the host's user namespace in admin-api pods",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "initContainers": {
          "description": "Configure optional initContainers",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "labels": {
          "additionalProperties": true,
          "description": "Additional labels for the `admin-api` Deployment",
          "required": [],
          "title": "labels",
          "type": "object"
        },
        "livenessProbe": {
          "additionalProperties": true,
          "description": "Liveness probe",
          "required": [],
          "title": "livenessProbe",
          "type": "object"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for admin-api Pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "podSecurityContext": {
          "additionalProperties": true,
          "description": "Run container as user `enterprise-logs(uid=10001)`\n`fsGroup` must not be specified, because these security options are applied\non container level not on Pod level.",
          "properties": {
            "runAsGroup": {
              "default": 10001,
              "required": [],
              "title": "runAsGroup",
              "type": "integer"
            },
            "runAsNonRoot": {
              "default": true,
              "required": [],
              "title": "runAsNonRoot",
              "type": "boolean"
            },
            "runAsUser": {
              "default": 10001,
              "required": [],
              "title": "runAsUser",
              "type": "integer"
            }
          },
          "required": [],
          "title": "podSecurityContext",
          "type": "object"
        },
        "readinessProbe": {
          "additionalProperties": true,
          "description": "Readiness probe",
          "properties": {
            "httpGet": {
              "additionalProperties": true,
              "properties": {
                "path": {
                  "default": "/ready",
                  "required": [],
                  "title": "path",
                  "type": "string"
                },
                "port": {
                  "default": "http-metrics",
                  "required": [],
                  "title": "port",
                  "type": "string"
                }
              },
              "required": [],
              "title": "httpGet",
              "type": "object"
            },
            "initialDelaySeconds": {
              "default": 45,
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "readinessProbe",
          "type": "object"
        },
        "replicas": {
          "default": 1,
          "description": "Define the amount of instances",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Request and limit Kubernetes resources\nValues are defined in small.yaml and large.yaml",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "service": {
          "additionalProperties": true,
          "description": "Additional labels and annotations for the `admin-api` Service",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "labels": {
              "additionalProperties": true,
              "required": [],
              "title": "labels",
              "type": "object"
            }
          },
          "required": [],
          "title": "service",
          "type": "object"
        },
        "startupProbe": {
          "additionalProperties": true,
          "description": "Startup probe",
          "required": [],
          "title": "startupProbe",
          "type": "object"
        },
        "strategy": {
          "additionalProperties": true,
          "description": "Update strategy",
          "properties": {
            "type": {
              "default": "RollingUpdate",
              "required": [],
              "title": "type",
              "type": "string"
            }
          },
          "required": [],
          "title": "strategy",
          "type": "object"
        },
        "terminationGracePeriodSeconds": {
          "default": 60,
          "description": "Grace period to allow the admin-api to shutdown before it is killed",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "Tolerations for admin-api Pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "Topology Spread Constraints for admin-api pods\nThe value will be passed through tpl.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        }
      },
      "required": [],
      "title": "adminApi",
      "type": "object"
    },
    "affinity": {
      "additionalProperties": true,
      "description": "Pod affinity configuration",
      "required": [],
      "title": "affinity",
      "type": "object"
    },
    "annotations": {
      "additionalProperties": true,
      "description": "Annotations for the Deployment",
      "required": [],
      "title": "annotations",
      "type": "object"
    },
    "backend": {
      "additionalProperties": true,
      "description": " Configuration for the backend pod(s)",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for backend pods.\nThe value will be passed through tpl.",
          "properties": {
            "podAntiAffinity": {
              "additionalProperties": true,
              "properties": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "additionalProperties": true,
                    "properties": {
                      "labelSelector": {
                        "additionalProperties": true,
                        "properties": {
                          "matchLabels": {
                            "additionalProperties": true,
                            "properties": {
                              "app.kubernetes.io/component": {
                                "default": "backend",
                                "required": [],
                                "title": "app.kubernetes.io/component",
                                "type": "string"
                              },
                              "app.kubernetes.io/instance": {
                                "default": "{{ .Release.Name }}",
                                "required": [],
                                "title": "app.kubernetes.io/instance",
                                "type": "string"
                              },
                              "app.kubernetes.io/name": {
                                "default": "{{ include \"loki.name\" . }}",
                                "required": [],
                                "title": "app.kubernetes.io/name",
                                "type": "string"
                              }
                            },
                            "required": [],
                            "title": "matchLabels",
                            "type": "object"
                          }
                        },
                        "required": [],
                        "title": "labelSelector",
                        "type": "object"
                      },
                      "topologyKey": {
                        "default": "kubernetes.io/hostname",
                        "required": [],
                        "title": "topologyKey",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "required": [],
                  "title": "requiredDuringSchedulingIgnoredDuringExecution",
                  "type": "array"
                }
              },
              "required": [],
              "title": "podAntiAffinity",
              "type": "object"
            }
          },
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "annotations": {
          "additionalProperties": true,
          "description": "Annotations for backend StatefulSet",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "autoscaling": {
          "additionalProperties": true,
          "properties": {
            "behavior": {
              "additionalProperties": true,
              "description": "Behavior policies while scaling.",
              "required": [],
              "title": "behavior",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Enable autoscaling for the backend.",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "maxReplicas": {
              "default": 6,
              "description": "Maximum autoscaling replicas for the backend.",
              "required": [],
              "title": "maxReplicas",
              "type": "integer"
            },
            "minReplicas": {
              "default": 3,
              "description": "Minimum autoscaling replicas for the backend.",
              "required": [],
              "title": "minReplicas",
              "type": "integer"
            },
            "targetCPUUtilizationPercentage": {
              "default": 60,
              "description": "Target CPU utilization percentage for the backend.",
              "required": [],
              "title": "targetCPUUtilizationPercentage",
              "type": "integer"
            },
            "targetMemoryUtilizationPercentage": {
              "default": "",
              "description": "Target memory utilization percentage for the backend.",
              "required": [],
              "title": "targetMemoryUtilizationPercentage",
              "type": "null"
            }
          },
          "required": [],
          "title": "autoscaling",
          "type": "object"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "DNS config for backend pods",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "extraArgs": {
          "description": "Additional CLI args for the backend",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Containers to add to the backend pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraEnv": {
          "description": "Environment variables to add to the backend pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "Environment variables from secrets or configmaps to add to the backend pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "Volume mounts to add to the backend pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Volumes to add to the backend pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": "Use the host's user namespace in the backend pods.",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "registry": {
              "default": "null",
              "description": "The Docker registry for the backend image. Overrides `loki.image.registry`",
              "required": [],
              "title": "registry",
              "type": "null"
            },
            "repository": {
              "default": "null",
              "description": "Docker image repository for the backend image. Overrides `loki.image.repository`",
              "required": [],
              "title": "repository",
              "type": "null"
            },
            "tag": {
              "default": "null",
              "description": "Docker image tag for the backend image. Overrides `loki.image.tag`",
              "required": [],
              "title": "tag",
              "type": "null"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "initContainers": {
          "description": "Init containers to add to the backend pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for backend pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "persistence": {
          "additionalProperties": true,
          "properties": {
            "accessModes": {
              "description": "Set access modes on the PersistentVolumeClaim",
              "items": {
                "required": [],
                "type": "string"
              },
              "required": [],
              "title": "accessModes",
              "type": "array"
            },
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations for volume claim",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "dataVolumeParameters": {
              "additionalProperties": true,
              "description": "Parameters used for the `data` volume when volumeClaimEnabled if false",
              "properties": {
                "emptyDir": {
                  "additionalProperties": true,
                  "required": [],
                  "title": "emptyDir",
                  "type": "object"
                }
              },
              "required": [],
              "title": "dataVolumeParameters",
              "type": "object"
            },
            "enableStatefulSetAutoDeletePVC": {
              "default": true,
              "description": "Enable StatefulSetAutoDeletePVC feature",
              "required": [],
              "title": "enableStatefulSetAutoDeletePVC",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels for volume claim",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "selector": {
              "default": "null",
              "description": "Selector for persistent disk",
              "required": [],
              "title": "selector",
              "type": "null"
            },
            "size": {
              "default": "10Gi",
              "description": "Size of persistent disk",
              "required": [],
              "title": "size",
              "type": "string"
            },
            "storageClass": {
              "default": "null",
              "description": "Storage class to be used.\nIf defined, storageClassName: \u003cstorageClass\u003e.\nIf set to \"-\", storageClassName: \"\", which disables dynamic provisioning.\nIf empty or set to null, no storageClassName spec is\nset, choosing the default provisioner (gp2 on AWS, standard on GKE, AWS, and OpenStack).",
              "required": [],
              "title": "storageClass",
              "type": "null"
            },
            "volumeClaimsEnabled": {
              "default": true,
              "description": "Enable volume claims in pod spec",
              "required": [],
              "title": "volumeClaimsEnabled",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "persistence",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for backend pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Additional labels for each `backend` pod",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "podManagementPolicy": {
          "default": "Parallel",
          "description": "The default is to deploy all pods in parallel.",
          "required": [],
          "title": "podManagementPolicy",
          "type": "string"
        },
        "priorityClassName": {
          "default": "null",
          "description": "The name of the PriorityClass for backend pods",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        },
        "replicas": {
          "default": 3,
          "description": "Number of replicas for the backend",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource requests and limits for the backend",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "selectorLabels": {
          "additionalProperties": true,
          "description": "Additional selector labels for each `backend` pod",
          "required": [],
          "title": "selectorLabels",
          "type": "object"
        },
        "service": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations for backend Service",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Additional labels for backend Service",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "type": {
              "default": "ClusterIP",
              "description": "Service type for backend Service",
              "required": [],
              "title": "type",
              "type": "string"
            }
          },
          "required": [],
          "title": "service",
          "type": "object"
        },
        "targetModule": {
          "default": "backend",
          "description": "Comma-separated list of Loki modules to load for the backend",
          "required": [],
          "title": "targetModule",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "default": 300,
          "description": "Grace period to allow the backend to shutdown before it is killed. Especially for the ingester,\nthis must be increased. It must be long enough so backends can be gracefully shutdown flushing/transferring\nall data and to successfully leave the member ring on shutdown.",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "Tolerations for backend pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "Topology Spread Constraints for backend pods\nThe value will be passed through tpl.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        }
      },
      "required": [],
      "title": "backend",
      "type": "object"
    },
    "bloomBuilder": {
      "additionalProperties": true,
      "description": "Configuration for the bloom-builder",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for bloom-builder pods.\nThe value will be passed through tpl.",
          "properties": {
            "podAntiAffinity": {
              "additionalProperties": true,
              "properties": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "additionalProperties": true,
                    "properties": {
                      "labelSelector": {
                        "additionalProperties": true,
                        "properties": {
                          "matchLabels": {
                            "additionalProperties": true,
                            "properties": {
                              "app.kubernetes.io/component": {
                                "default": "bloom-builder",
                                "required": [],
                                "title": "app.kubernetes.io/component",
                                "type": "string"
                              },
                              "app.kubernetes.io/instance": {
                                "default": "{{ .Release.Name }}",
                                "required": [],
                                "title": "app.kubernetes.io/instance",
                                "type": "string"
                              },
                              "app.kubernetes.io/name": {
                                "default": "{{ include \"loki.name\" . }}",
                                "required": [],
                                "title": "app.kubernetes.io/name",
                                "type": "string"
                              }
                            },
                            "required": [],
                            "title": "matchLabels",
                            "type": "object"
                          }
                        },
                        "required": [],
                        "title": "labelSelector",
                        "type": "object"
                      },
                      "topologyKey": {
                        "default": "kubernetes.io/hostname",
                        "required": [],
                        "title": "topologyKey",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "required": [],
                  "title": "requiredDuringSchedulingIgnoredDuringExecution",
                  "type": "array"
                }
              },
              "required": [],
              "title": "podAntiAffinity",
              "type": "object"
            }
          },
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "appProtocol": {
          "additionalProperties": true,
          "description": "Adds the appProtocol field to the queryFrontend service. This allows bloomBuilder to work with istio protocol selection.",
          "properties": {
            "grpc": {
              "default": "",
              "description": "Set the optional grpc service protocol. Ex: \"grpc\", \"http2\" or \"https\"",
              "required": [],
              "title": "grpc",
              "type": "string"
            }
          },
          "required": [],
          "title": "appProtocol",
          "type": "object"
        },
        "autoscaling": {
          "additionalProperties": true,
          "properties": {
            "behavior": {
              "additionalProperties": true,
              "description": "- type: Pods\n  pods:\n    metric:\n      name: loki_query_rate\n    target:\n      type: AverageValue\n      averageValue: 100",
              "properties": {
                "enabled": {
                  "default": false,
                  "description": "Enable autoscaling behaviours",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "scaleDown": {
                  "additionalProperties": true,
                  "description": "define scale down policies, must conform to HPAScalingRules",
                  "required": [],
                  "title": "scaleDown",
                  "type": "object"
                },
                "scaleUp": {
                  "additionalProperties": true,
                  "description": "define scale up policies, must conform to HPAScalingRules",
                  "required": [],
                  "title": "scaleUp",
                  "type": "object"
                }
              },
              "required": [],
              "title": "behavior",
              "type": "object"
            },
            "customMetrics": {
              "description": "Allows one to define custom metrics using the HPA/v2 schema (for example, Pods, Object or External metrics)",
              "items": {
                "required": []
              },
              "required": [],
              "title": "customMetrics",
              "type": "array"
            },
            "enabled": {
              "default": false,
              "description": "Enable autoscaling for the bloom-builder",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "maxReplicas": {
              "default": 3,
              "description": "Maximum autoscaling replicas for the bloom-builder",
              "required": [],
              "title": "maxReplicas",
              "type": "integer"
            },
            "minReplicas": {
              "default": 1,
              "description": "Minimum autoscaling replicas for the bloom-builder",
              "required": [],
              "title": "minReplicas",
              "type": "integer"
            },
            "targetCPUUtilizationPercentage": {
              "default": 60,
              "description": "Target CPU utilisation percentage for the bloom-builder",
              "required": [],
              "title": "targetCPUUtilizationPercentage",
              "type": "integer"
            },
            "targetMemoryUtilizationPercentage": {
              "default": "null",
              "description": "Target memory utilisation percentage for the bloom-builder",
              "required": [],
              "title": "targetMemoryUtilizationPercentage",
              "type": "null"
            }
          },
          "required": [],
          "title": "autoscaling",
          "type": "object"
        },
        "command": {
          "default": "null",
          "description": "Command to execute instead of defined in Docker image",
          "required": [],
          "title": "command",
          "type": "null"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "DNSConfig for bloom-builder pods",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "extraArgs": {
          "description": "Additional CLI args for the bloom-builder",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Containers to add to the bloom-builder pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraEnv": {
          "description": "Environment variables to add to the bloom-builder pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "Environment variables from secrets or configmaps to add to the bloom-builder pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "Volume mounts to add to the bloom-builder pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Volumes to add to the bloom-builder pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostAliases": {
          "description": "hostAliases to add",
          "items": {
            "required": []
          },
          "required": [],
          "title": "hostAliases",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": " - ip: 1.2.3.4\n   hostnames:\n     - domain.tld\nUse the host's user namespace in the boom-builder",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "registry": {
              "default": "null",
              "description": "The Docker registry for the bloom-builder image. Overrides `loki.image.registry`",
              "required": [],
              "title": "registry",
              "type": "null"
            },
            "repository": {
              "default": "null",
              "description": "Docker image repository for the bloom-builder image. Overrides `loki.image.repository`",
              "required": [],
              "title": "repository",
              "type": "null"
            },
            "tag": {
              "default": "null",
              "description": "Docker image tag for the bloom-builder image. Overrides `loki.image.tag`",
              "required": [],
              "title": "tag",
              "type": "null"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "initContainers": {
          "description": "Init containers to add to the bloom-builder pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "maxUnavailable": {
          "default": "null",
          "description": "Pod Disruption Budget maxUnavailable",
          "required": [],
          "title": "maxUnavailable",
          "type": "null"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for bloom-builder pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for bloom-builder pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels for bloom-builder pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "null",
          "description": "The name of the PriorityClass for bloom-builder pods",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        },
        "replicas": {
          "default": 0,
          "description": "Number of replicas for the bloom-builder",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource requests and limits for the bloom-builder",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "serviceAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for bloom-builder service",
          "required": [],
          "title": "serviceAnnotations",
          "type": "object"
        },
        "serviceLabels": {
          "additionalProperties": true,
          "description": "Labels for bloom-builder service",
          "required": [],
          "title": "serviceLabels",
          "type": "object"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "Grace period to allow the bloom-builder to shutdown before it is killed",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "Tolerations for bloom-builder pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        }
      },
      "required": [],
      "title": "bloomBuilder",
      "type": "object"
    },
    "bloomCompactor": {
      "additionalProperties": true,
      "properties": {
        "replicas": {
          "required": [],
          "title": "replicas",
          "type": "integer"
        }
      },
      "required": [],
      "title": "bloomCompactor",
      "type": "object"
    },
    "bloomGateway": {
      "additionalProperties": true,
      "description": "Configuration for the bloom-gateway",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for bloom-gateway pods.\nThe value will be passed through tpl.",
          "properties": {
            "podAntiAffinity": {
              "additionalProperties": true,
              "properties": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "additionalProperties": true,
                    "properties": {
                      "labelSelector": {
                        "additionalProperties": true,
                        "properties": {
                          "matchLabels": {
                            "additionalProperties": true,
                            "properties": {
                              "app.kubernetes.io/component": {
                                "default": "bloom-gateway",
                                "required": [],
                                "title": "app.kubernetes.io/component",
                                "type": "string"
                              },
                              "app.kubernetes.io/instance": {
                                "default": "{{ .Release.Name }}",
                                "required": [],
                                "title": "app.kubernetes.io/instance",
                                "type": "string"
                              },
                              "app.kubernetes.io/name": {
                                "default": "{{ include \"loki.name\" . }}",
                                "required": [],
                                "title": "app.kubernetes.io/name",
                                "type": "string"
                              }
                            },
                            "required": [],
                            "title": "matchLabels",
                            "type": "object"
                          }
                        },
                        "required": [],
                        "title": "labelSelector",
                        "type": "object"
                      },
                      "topologyKey": {
                        "default": "kubernetes.io/hostname",
                        "required": [],
                        "title": "topologyKey",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "required": [],
                  "title": "requiredDuringSchedulingIgnoredDuringExecution",
                  "type": "array"
                }
              },
              "required": [],
              "title": "podAntiAffinity",
              "type": "object"
            }
          },
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "appProtocol": {
          "additionalProperties": true,
          "description": "Set the optional grpc service protocol. Ex: \"grpc\", \"http2\" or \"https\"",
          "properties": {
            "grpc": {
              "default": "",
              "required": [],
              "title": "grpc",
              "type": "string"
            }
          },
          "required": [],
          "title": "appProtocol",
          "type": "object"
        },
        "command": {
          "default": "null",
          "description": "Command to execute instead of defined in Docker image",
          "required": [],
          "title": "command",
          "type": "null"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "DNSConfig for bloom-gateway pods",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "extraArgs": {
          "description": "Additional CLI args for the bloom-gateway",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Containers to add to the bloom-gateway pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraEnv": {
          "description": "Environment variables to add to the bloom-gateway pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "Environment variables from secrets or configmaps to add to the bloom-gateway pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "Volume mounts to add to the bloom-gateway pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Volumes to add to the bloom-gateway pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostAliases": {
          "description": "hostAliases to add",
          "items": {
            "required": []
          },
          "required": [],
          "title": "hostAliases",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": " - ip: 1.2.3.4\n   hostnames:\n     - domain.tld\nUse the host's user namespace in the bloom-gateway",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "registry": {
              "default": "null",
              "description": "The Docker registry for the bloom-gateway image. Overrides `loki.image.registry`",
              "required": [],
              "title": "registry",
              "type": "null"
            },
            "repository": {
              "default": "null",
              "description": "Docker image repository for the bloom-gateway image. Overrides `loki.image.repository`",
              "required": [],
              "title": "repository",
              "type": "null"
            },
            "tag": {
              "default": "null",
              "description": "Docker image tag for the bloom-gateway image. Overrides `loki.image.tag`",
              "required": [],
              "title": "tag",
              "type": "null"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "initContainers": {
          "description": "Init containers to add to the bloom-gateway pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "livenessProbe": {
          "additionalProperties": true,
          "description": "liveness probe settings for ingester pods. If empty use `loki.livenessProbe`",
          "required": [],
          "title": "livenessProbe",
          "type": "object"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for bloom-gateway pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "persistence": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations for bloom-gateway PVCs",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "claims": {
              "description": "List of the bloom-gateway PVCs",
              "items": {
                "additionalProperties": true,
                "properties": {
                  "accessModes": {
                    "description": "Set access modes on the PersistentVolumeClaim",
                    "items": {
                      "required": [],
                      "type": "string"
                    },
                    "required": [],
                    "title": "accessModes",
                    "type": "array"
                  },
                  "name": {
                    "default": "data",
                    "required": [],
                    "title": "name",
                    "type": "string"
                  },
                  "size": {
                    "default": "10Gi",
                    "description": "Size of persistent disk",
                    "required": [],
                    "title": "size",
                    "type": "string"
                  },
                  "storageClass": {
                    "default": "null",
                    "description": "  -- Storage class to be used.\n  If defined, storageClassName: \u003cstorageClass\u003e.\n  If set to \"-\", storageClassName: \"\", which disables dynamic provisioning.\n  If empty or set to null, no storageClassName spec is\n  set, choosing the default provisioner (gp2 on AWS, standard on GKE, AWS, and OpenStack).",
                    "required": [],
                    "title": "storageClass",
                    "type": "null"
                  }
                },
                "required": [],
                "type": "object"
              },
              "required": [],
              "title": "claims",
              "type": "array"
            },
            "enableStatefulSetAutoDeletePVC": {
              "default": false,
              "description": "Enable StatefulSetAutoDeletePVC feature",
              "required": [],
              "title": "enableStatefulSetAutoDeletePVC",
              "type": "boolean"
            },
            "enabled": {
              "default": false,
              "description": "Enable creating PVCs for the bloom-gateway",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels for bloom gateway PVCs",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "whenDeleted": {
              "default": "Retain",
              "required": [],
              "title": "whenDeleted",
              "type": "string"
            },
            "whenScaled": {
              "default": "Retain",
              "required": [],
              "title": "whenScaled",
              "type": "string"
            }
          },
          "required": [],
          "title": "persistence",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for bloom-gateway pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels for bloom-gateway pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "null",
          "description": "The name of the PriorityClass for bloom-gateway pods",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        },
        "readinessProbe": {
          "additionalProperties": true,
          "description": "readiness probe settings for ingester pods. If empty, use `loki.readinessProbe`",
          "required": [],
          "title": "readinessProbe",
          "type": "object"
        },
        "replicas": {
          "default": 0,
          "description": "Number of replicas for the bloom-gateway",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource requests and limits for the bloom-gateway",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "serviceAccount": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations for the bloom-gateway service account",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "automountServiceAccountToken": {
              "default": true,
              "description": "Set this toggle to false to opt out of automounting API credentials for the service account",
              "required": [],
              "title": "automountServiceAccountToken",
              "type": "boolean"
            },
            "create": {
              "default": false,
              "required": [],
              "title": "create",
              "type": "boolean"
            },
            "imagePullSecrets": {
              "description": "Image pull secrets for the bloom-gateway service account",
              "items": {
                "required": []
              },
              "required": [],
              "title": "imagePullSecrets",
              "type": "array"
            },
            "name": {
              "default": "null",
              "description": "The name of the ServiceAccount to use for the bloom-gateway.\nIf not set and create is true, a name is generated by appending\n\"-bloom-gateway\" to the common ServiceAccount.",
              "required": [],
              "title": "name",
              "type": "null"
            }
          },
          "required": [],
          "title": "serviceAccount",
          "type": "object"
        },
        "serviceAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for bloom-gateway service",
          "required": [],
          "title": "serviceAnnotations",
          "type": "object"
        },
        "serviceLabels": {
          "additionalProperties": true,
          "description": "Labels for bloom-gateway service",
          "required": [],
          "title": "serviceLabels",
          "type": "object"
        },
        "startupProbe": {
          "additionalProperties": true,
          "description": "startup probe settings for ingester pods. If empty, use `loki.startupProbe`",
          "required": [],
          "title": "startupProbe",
          "type": "object"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "Grace period to allow the bloom-gateway to shutdown before it is killed",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "Tolerations for bloom-gateway pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        }
      },
      "required": [],
      "title": "bloomGateway",
      "type": "object"
    },
    "bloomPlanner": {
      "additionalProperties": true,
      "description": "Configuration for the bloom-planner",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for bloom-planner pods.\nThe value will be passed through tpl.",
          "properties": {
            "podAntiAffinity": {
              "additionalProperties": true,
              "properties": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "additionalProperties": true,
                    "properties": {
                      "labelSelector": {
                        "additionalProperties": true,
                        "properties": {
                          "matchLabels": {
                            "additionalProperties": true,
                            "properties": {
                              "app.kubernetes.io/component": {
                                "default": "bloom-planner",
                                "required": [],
                                "title": "app.kubernetes.io/component",
                                "type": "string"
                              },
                              "app.kubernetes.io/instance": {
                                "default": "{{ .Release.Name }}",
                                "required": [],
                                "title": "app.kubernetes.io/instance",
                                "type": "string"
                              },
                              "app.kubernetes.io/name": {
                                "default": "{{ include \"loki.name\" . }}",
                                "required": [],
                                "title": "app.kubernetes.io/name",
                                "type": "string"
                              }
                            },
                            "required": [],
                            "title": "matchLabels",
                            "type": "object"
                          }
                        },
                        "required": [],
                        "title": "labelSelector",
                        "type": "object"
                      },
                      "topologyKey": {
                        "default": "kubernetes.io/hostname",
                        "required": [],
                        "title": "topologyKey",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "required": [],
                  "title": "requiredDuringSchedulingIgnoredDuringExecution",
                  "type": "array"
                }
              },
              "required": [],
              "title": "podAntiAffinity",
              "type": "object"
            }
          },
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "appProtocol": {
          "additionalProperties": true,
          "description": "Set the optional grpc service protocol. Ex: \"grpc\", \"http2\" or \"https\"",
          "properties": {
            "grpc": {
              "default": "",
              "required": [],
              "title": "grpc",
              "type": "string"
            }
          },
          "required": [],
          "title": "appProtocol",
          "type": "object"
        },
        "command": {
          "default": "null",
          "description": "Command to execute instead of defined in Docker image",
          "required": [],
          "title": "command",
          "type": "null"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "DNSConfig for bloom-planner pods",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "extraArgs": {
          "description": "Additional CLI args for the bloom-planner",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Containers to add to the bloom-planner pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraEnv": {
          "description": "Environment variables to add to the bloom-planner pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "Environment variables from secrets or configmaps to add to the bloom-planner pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "Volume mounts to add to the bloom-planner pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Volumes to add to the bloom-planner pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostAliases": {
          "description": "hostAliases to add",
          "items": {
            "required": []
          },
          "required": [],
          "title": "hostAliases",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": " - ip: 1.2.3.4\n   hostnames:\n     - domain.tld\nUse the host's user namespace in the bloom-planner",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "registry": {
              "default": "null",
              "description": "The Docker registry for the bloom-planner image. Overrides `loki.image.registry`",
              "required": [],
              "title": "registry",
              "type": "null"
            },
            "repository": {
              "default": "null",
              "description": "Docker image repository for the bloom-planner image. Overrides `loki.image.repository`",
              "required": [],
              "title": "repository",
              "type": "null"
            },
            "tag": {
              "default": "null",
              "description": "Docker image tag for the bloom-planner image. Overrides `loki.image.tag`",
              "required": [],
              "title": "tag",
              "type": "null"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "initContainers": {
          "description": "Init containers to add to the bloom-planner pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "livenessProbe": {
          "additionalProperties": true,
          "description": "liveness probe settings for ingester pods. If empty use `loki.livenessProbe`",
          "required": [],
          "title": "livenessProbe",
          "type": "object"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for bloom-planner pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "persistence": {
          "additionalProperties": true,
          "properties": {
            "claims": {
              "description": "List of the bloom-planner PVCs",
              "items": {
                "additionalProperties": true,
                "properties": {
                  "accessModes": {
                    "description": "Set access modes on the PersistentVolumeClaim",
                    "items": {
                      "required": [],
                      "type": "string"
                    },
                    "required": [],
                    "title": "accessModes",
                    "type": "array"
                  },
                  "annotations": {
                    "additionalProperties": true,
                    "description": "Annotations for bloom-planner PVCs",
                    "required": [],
                    "title": "annotations",
                    "type": "object"
                  },
                  "labels": {
                    "additionalProperties": true,
                    "description": "Labels for bloom planner PVCs",
                    "required": [],
                    "title": "labels",
                    "type": "object"
                  },
                  "name": {
                    "default": "data",
                    "required": [],
                    "title": "name",
                    "type": "string"
                  },
                  "size": {
                    "default": "10Gi",
                    "description": "Size of persistent disk",
                    "required": [],
                    "title": "size",
                    "type": "string"
                  },
                  "storageClass": {
                    "default": "null",
                    "description": "  -- Storage class to be used.\n  If defined, storageClassName: \u003cstorageClass\u003e.\n  If set to \"-\", storageClassName: \"\", which disables dynamic provisioning.\n  If empty or set to null, no storageClassName spec is\n  set, choosing the default provisioner (gp2 on AWS, standard on GKE, AWS, and OpenStack).",
                    "required": [],
                    "title": "storageClass",
                    "type": "null"
                  }
                },
                "required": [],
                "type": "object"
              },
              "required": [],
              "title": "claims",
              "type": "array"
            },
            "enableStatefulSetAutoDeletePVC": {
              "default": false,
              "description": "Enable StatefulSetAutoDeletePVC feature",
              "required": [],
              "title": "enableStatefulSetAutoDeletePVC",
              "type": "boolean"
            },
            "enabled": {
              "default": false,
              "description": "Enable creating PVCs for the bloom-planner",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "whenDeleted": {
              "default": "Retain",
              "required": [],
              "title": "whenDeleted",
              "type": "string"
            },
            "whenScaled": {
              "default": "Retain",
              "required": [],
              "title": "whenScaled",
              "type": "string"
            }
          },
          "required": [],
          "title": "persistence",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for bloom-planner pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels for bloom-planner pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "null",
          "description": "The name of the PriorityClass for bloom-planner pods",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        },
        "readinessProbe": {
          "additionalProperties": true,
          "description": "readiness probe settings for ingester pods. If empty, use `loki.readinessProbe`",
          "required": [],
          "title": "readinessProbe",
          "type": "object"
        },
        "replicas": {
          "default": 0,
          "description": "Number of replicas for the bloom-planner",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource requests and limits for the bloom-planner",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "serviceAccount": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations for the bloom-planner service account",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "automountServiceAccountToken": {
              "default": true,
              "description": "Set this toggle to false to opt out of automounting API credentials for the service account",
              "required": [],
              "title": "automountServiceAccountToken",
              "type": "boolean"
            },
            "create": {
              "default": false,
              "required": [],
              "title": "create",
              "type": "boolean"
            },
            "imagePullSecrets": {
              "description": "Image pull secrets for the bloom-planner service account",
              "items": {
                "required": []
              },
              "required": [],
              "title": "imagePullSecrets",
              "type": "array"
            },
            "name": {
              "default": "null",
              "description": "The name of the ServiceAccount to use for the bloom-planner.\nIf not set and create is true, a name is generated by appending\n\"-bloom-planner\" to the common ServiceAccount.",
              "required": [],
              "title": "name",
              "type": "null"
            }
          },
          "required": [],
          "title": "serviceAccount",
          "type": "object"
        },
        "serviceAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for bloom-planner service",
          "required": [],
          "title": "serviceAnnotations",
          "type": "object"
        },
        "serviceLabels": {
          "additionalProperties": true,
          "description": "Labels for bloom-planner service",
          "required": [],
          "title": "serviceLabels",
          "type": "object"
        },
        "startupProbe": {
          "additionalProperties": true,
          "description": "startup probe settings for ingester pods. If empty use `loki.startupProbe`",
          "required": [],
          "title": "startupProbe",
          "type": "object"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "Grace period to allow the bloom-planner to shutdown before it is killed",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "Tolerations for bloom-planner pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        }
      },
      "required": [],
      "title": "bloomPlanner",
      "type": "object"
    },
    "bucketRoot": {
      "default": "",
      "description": "# Override the root directory which the minio server should serve from.\n# If left empty, it defaults to the value of {{ .Values.mountPath }}\n# If defined, it must be a sub-directory of the path specified in {{ .Values.mountPath }}\n#",
      "required": [],
      "title": "bucketRoot",
      "type": "string"
    },
    "buckets": {
      "description": "# List of buckets to be created after minio install\n#",
      "items": {
        "required": []
      },
      "required": [],
      "title": "buckets",
      "type": "array"
    },
    "certsPath": {
      "default": "/etc/minio/certs/",
      "description": "# Directory on the MinIO pof",
      "required": [],
      "title": "certsPath",
      "type": "string"
    },
    "chunksCache": {
      "additionalProperties": true,
      "properties": {
        "addresses": {
          "default": "dnssrvnoa+_memcached-client._tcp.{{ include \"loki.resourceName\" (dict \"ctx\" $ \"component\" \"chunks-cache\" \"suffix\" $.Values.chunksCache.suffix ) }}.{{ include \"loki.namespace\" $ }}.svc",
          "description": "Comma separated addresses list in DNS Service Discovery format",
          "required": [],
          "title": "addresses",
          "type": "string"
        },
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for chunks-cache pods",
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "allocatedMemory": {
          "default": 8192,
          "description": "Amount of memory allocated to chunks-cache for object storage (in MB).",
          "required": [],
          "title": "allocatedMemory",
          "type": "integer"
        },
        "annotations": {
          "additionalProperties": true,
          "description": "Annotations for the chunks-cache pods",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "batchSize": {
          "default": 4,
          "description": "Batchsize for sending and receiving chunks from chunks cache",
          "required": [],
          "title": "batchSize",
          "type": "integer"
        },
        "connectionLimit": {
          "default": 16384,
          "description": "Maximum number of connections allowed",
          "required": [],
          "title": "connectionLimit",
          "type": "integer"
        },
        "defaultValidity": {
          "default": "0s",
          "description": "Specify how long cached chunks should be stored in the chunks-cache before being expired",
          "required": [],
          "title": "defaultValidity",
          "type": "string"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "DNSConfig for chunks-cache",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "enabled": {
          "default": true,
          "description": "Specifies whether memcached based chunks-cache should be enabled",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "extraArgs": {
          "additionalProperties": true,
          "description": "Additional CLI args for chunks-cache",
          "required": [],
          "title": "extraArgs",
          "type": "object"
        },
        "extraContainers": {
          "description": "Additional containers to be added to the chunks-cache pod.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraExtendedOptions": {
          "default": "",
          "description": "Add extended options for chunks-cache memcached container. The format is the same as for the memcached -o/--extend flag.\nExample:\nextraExtendedOptions: 'tls,no_hashexpand'",
          "required": [],
          "title": "extraExtendedOptions",
          "type": "string"
        },
        "extraVolumeMounts": {
          "description": "Additional volume mounts to be added to the chunks-cache pod (applies to both memcached and exporter containers).\nExample:\nextraVolumeMounts:\n- name: extra-volume\n  mountPath: /etc/extra-volume\n  readOnly: true",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Additional volumes to be added to the chunks-cache pod (applies to both memcached and exporter containers).\nExample:\nextraVolumes:\n- name: extra-volume\n  secret:\n   secretName: extra-volume-secret",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": "Use the host's user namespace in chunks-cache pods",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "initContainers": {
          "description": "Extra init containers for chunks-cache pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "l2": {
          "additionalProperties": true,
          "description": "l2 memcache configuration",
          "properties": {
            "addresses": {
              "default": "dnssrvnoa+_memcached-client._tcp.{{ include \"loki.resourceName\" (dict \"ctx\" $ \"component\" \"chunks-cache\" \"suffix\" $.Values.chunksCache.l2.suffix ) }}.{{ include \"loki.namespace\" $ }}.svc",
              "description": "Comma separated addresses list in DNS Service Discovery format",
              "required": [],
              "title": "addresses",
              "type": "string"
            },
            "affinity": {
              "additionalProperties": true,
              "description": "Affinity for chunks-cache-l2 pods",
              "required": [],
              "title": "affinity",
              "type": "object"
            },
            "allocatedMemory": {
              "default": 8192,
              "description": "Amount of memory allocated to chunks-cache-l2 for object storage (in MB).",
              "required": [],
              "title": "allocatedMemory",
              "type": "integer"
            },
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations for the chunks-cache-l2 pods",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "batchSize": {
              "default": 4,
              "description": "Batchsize for sending and receiving chunks from chunks cache",
              "required": [],
              "title": "batchSize",
              "type": "integer"
            },
            "connectionLimit": {
              "default": 16384,
              "description": "Maximum number of connections allowed",
              "required": [],
              "title": "connectionLimit",
              "type": "integer"
            },
            "defaultValidity": {
              "default": "0s",
              "description": "Specify how long cached chunks should be stored in the chunks-cache-l2 before being expired",
              "required": [],
              "title": "defaultValidity",
              "type": "string"
            },
            "dnsConfig": {
              "additionalProperties": true,
              "description": "DNSConfig for chunks-cache-l2",
              "required": [],
              "title": "dnsConfig",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Specifies whether memcached based chunks-cache-l2 should be enabled",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "extraArgs": {
              "additionalProperties": true,
              "description": "Additional CLI args for chunks-cache-l2",
              "required": [],
              "title": "extraArgs",
              "type": "object"
            },
            "extraContainers": {
              "description": "Additional containers to be added to the chunks-cache-l2 pod.",
              "items": {
                "required": []
              },
              "required": [],
              "title": "extraContainers",
              "type": "array"
            },
            "extraExtendedOptions": {
              "default": "",
              "description": "Add extended options for chunks-cache-l2 memcached container. The format is the same as for the memcached -o/--extend flag.\nExample:\nextraExtendedOptions: 'tls,no_hashexpand'",
              "required": [],
              "title": "extraExtendedOptions",
              "type": "string"
            },
            "extraVolumeMounts": {
              "description": "Additional volume mounts to be added to the chunks-cache-l2 pod (applies to both memcached and exporter containers).\nExample:\nextraVolumeMounts:\n- name: extra-volume\n  mountPath: /etc/extra-volume\n  readOnly: true",
              "items": {
                "required": []
              },
              "required": [],
              "title": "extraVolumeMounts",
              "type": "array"
            },
            "extraVolumes": {
              "description": "Additional volumes to be added to the chunks-cache-l2 pod (applies to both memcached and exporter containers).\nExample:\nextraVolumes:\n- name: extra-volume\n  secret:\n   secretName: extra-volume-secret",
              "items": {
                "required": []
              },
              "required": [],
              "title": "extraVolumes",
              "type": "array"
            },
            "hostUsers": {
              "default": "nil",
              "description": "Use the host's user namespace in chunks-cache-l2 pods",
              "required": [],
              "title": "hostUsers",
              "type": "string"
            },
            "initContainers": {
              "description": "Extra init containers for chunks-cache-l2 pods",
              "items": {
                "required": []
              },
              "required": [],
              "title": "initContainers",
              "type": "array"
            },
            "l2ChunkCacheHandoff": {
              "default": "345600s",
              "description": "The age of chunks should be transfered from l1 cache to l2\n4 days",
              "required": [],
              "title": "l2ChunkCacheHandoff",
              "type": "string"
            },
            "maxItemMemory": {
              "default": 5,
              "description": "Maximum item memory for chunks-cache-l2 (in MB).",
              "required": [],
              "title": "maxItemMemory",
              "type": "integer"
            },
            "maxUnavailable": {
              "default": 1,
              "description": "Pod Disruption Budget maxUnavailable",
              "required": [],
              "title": "maxUnavailable",
              "type": "integer"
            },
            "nodeSelector": {
              "additionalProperties": true,
              "description": "Node selector for chunks-cach-l2 pods",
              "required": [],
              "title": "nodeSelector",
              "type": "object"
            },
            "parallelism": {
              "default": 5,
              "description": "Parallel threads for sending and receiving chunks from chunks cache",
              "required": [],
              "title": "parallelism",
              "type": "integer"
            },
            "persistence": {
              "additionalProperties": true,
              "description": "Persistence settings for the chunks-cache-l2",
              "properties": {
                "enabled": {
                  "default": false,
                  "description": "Enable creating PVCs for the chunks-cache-l2",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "labels": {
                  "additionalProperties": true,
                  "properties": {
                    "baz": {
                      "required": [],
                      "title": "baz",
                      "type": "string"
                    },
                    "foo": {
                      "required": [],
                      "title": "foo",
                      "type": "string"
                    }
                  },
                  "required": [],
                  "title": "labels",
                  "type": "object"
                },
                "mountPath": {
                  "default": "/data",
                  "description": "Volume mount path",
                  "required": [],
                  "title": "mountPath",
                  "type": "string"
                },
                "storageClass": {
                  "default": "null",
                  "description": "Storage class to be used.\nIf defined, storageClassName: \u003cstorageClass\u003e.\nIf set to \"-\", storageClassName: \"\", which disables dynamic provisioning.\nIf empty or set to null, no storageClassName spec is\nset, choosing the default provisioner (gp2 on AWS, standard on GKE, AWS, and OpenStack).",
                  "required": [],
                  "title": "storageClass",
                  "type": "null"
                },
                "storageSize": {
                  "default": "10G",
                  "description": "Size of persistent disk, must be in G or Gi",
                  "required": [],
                  "title": "storageSize",
                  "type": "string"
                }
              },
              "required": [],
              "title": "persistence",
              "type": "object"
            },
            "podAnnotations": {
              "additionalProperties": true,
              "description": "Annotations for chunks-cache-l2 pods",
              "required": [],
              "title": "podAnnotations",
              "type": "object"
            },
            "podLabels": {
              "additionalProperties": true,
              "description": "Labels for chunks-cache-l2 pods",
              "required": [],
              "title": "podLabels",
              "type": "object"
            },
            "podManagementPolicy": {
              "default": "Parallel",
              "description": "Management policy for chunks-cache-l2 pods",
              "required": [],
              "title": "podManagementPolicy",
              "type": "string"
            },
            "port": {
              "default": 11211,
              "description": "Port of the chunks-cache-l2 service",
              "required": [],
              "title": "port",
              "type": "integer"
            },
            "priorityClassName": {
              "default": "null",
              "description": "The name of the PriorityClass for chunks-cache-l2 pods",
              "required": [],
              "title": "priorityClassName",
              "type": "null"
            },
            "replicas": {
              "default": 1,
              "description": "Specify how long cached chunks should be stored in the chunks-cache-l2 before being expired",
              "required": [],
              "title": "replicas",
              "type": "integer"
            },
            "resources": {
              "default": "null",
              "description": "Resource requests and limits for the chunks-cache-l2\nBy default a safe memory limit will be requested based on allocatedMemory value (floor (* 1.2 allocatedMemory)).",
              "required": [],
              "title": "resources",
              "type": "null"
            },
            "service": {
              "additionalProperties": true,
              "description": "Service annotations and labels",
              "properties": {
                "annotations": {
                  "additionalProperties": true,
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "labels": {
                  "additionalProperties": true,
                  "required": [],
                  "title": "labels",
                  "type": "object"
                }
              },
              "required": [],
              "title": "service",
              "type": "object"
            },
            "statefulStrategy": {
              "additionalProperties": true,
              "description": "Stateful chunks-cache strategy",
              "properties": {
                "type": {
                  "default": "RollingUpdate",
                  "required": [],
                  "title": "type",
                  "type": "string"
                }
              },
              "required": [],
              "title": "statefulStrategy",
              "type": "object"
            },
            "suffix": {
              "default": "l2",
              "description": "Append to the name of the resources to make names different for l1 and l2",
              "required": [],
              "title": "suffix",
              "type": "string"
            },
            "terminationGracePeriodSeconds": {
              "default": 60,
              "description": "Grace period to allow the chunks-cache-l2 to shutdown before it is killed",
              "required": [],
              "title": "terminationGracePeriodSeconds",
              "type": "integer"
            },
            "timeout": {
              "default": "2000ms",
              "description": "Memcached operation timeout",
              "required": [],
              "title": "timeout",
              "type": "string"
            },
            "tolerations": {
              "description": " maxSkew: 1\n topologyKey: kubernetes.io/hostname\n whenUnsatisfiable: ScheduleAnyway\nTolerations for chunks-cache-l2 pods",
              "items": {
                "required": []
              },
              "required": [],
              "title": "tolerations",
              "type": "array"
            },
            "topologySpreadConstraints": {
              "description": "topologySpreadConstraints allows to customize the default topologySpreadConstraints. This can be either a single dict as shown below or a slice of topologySpreadConstraints.\nlabelSelector is taken from the constraint itself (if it exists) or is generated by the chart using the same selectors as for services.",
              "items": {
                "required": []
              },
              "required": [],
              "title": "topologySpreadConstraints",
              "type": "array"
            },
            "writebackBuffer": {
              "default": 500000,
              "description": "Max number of objects to use for cache write back",
              "required": [],
              "title": "writebackBuffer",
              "type": "integer"
            },
            "writebackParallelism": {
              "default": 1,
              "description": "Number of parallel threads for cache write back",
              "required": [],
              "title": "writebackParallelism",
              "type": "integer"
            },
            "writebackSizeLimit": {
              "default": "500MB",
              "description": "Max memory to use for cache write back",
              "required": [],
              "title": "writebackSizeLimit",
              "type": "string"
            }
          },
          "required": [],
          "title": "l2",
          "type": "object"
        },
        "maxItemMemory": {
          "default": 5,
          "description": "Maximum item memory for chunks-cache (in MB).",
          "required": [],
          "title": "maxItemMemory",
          "type": "integer"
        },
        "maxUnavailable": {
          "default": 1,
          "description": "Pod Disruption Budget maxUnavailable",
          "required": [],
          "title": "maxUnavailable",
          "type": "integer"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for chunks-cache pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "parallelism": {
          "default": 5,
          "description": "Parallel threads for sending and receiving chunks from chunks cache",
          "required": [],
          "title": "parallelism",
          "type": "integer"
        },
        "persistence": {
          "additionalProperties": true,
          "description": "Persistence settings for the chunks-cache",
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enable creating PVCs for the chunks-cache",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "properties": {
                "baz": {
                  "required": [],
                  "title": "baz",
                  "type": "string"
                },
                "foo": {
                  "required": [],
                  "title": "foo",
                  "type": "string"
                }
              },
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "mountPath": {
              "default": "/data",
              "description": "Volume mount path",
              "required": [],
              "title": "mountPath",
              "type": "string"
            },
            "storageClass": {
              "default": "null",
              "description": "Storage class to be used.\nIf defined, storageClassName: \u003cstorageClass\u003e.\nIf set to \"-\", storageClassName: \"\", which disables dynamic provisioning.\nIf empty or set to null, no storageClassName spec is\nset, choosing the default provisioner (gp2 on AWS, standard on GKE, AWS, and OpenStack).",
              "required": [],
              "title": "storageClass",
              "type": "null"
            },
            "storageSize": {
              "default": "10G",
              "description": "Size of persistent disk, must be in G or Gi",
              "required": [],
              "title": "storageSize",
              "type": "string"
            }
          },
          "required": [],
          "title": "persistence",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for chunks-cache pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels for chunks-cache pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "podManagementPolicy": {
          "default": "Parallel",
          "description": "Management policy for chunks-cache pods",
          "required": [],
          "title": "podManagementPolicy",
          "type": "string"
        },
        "port": {
          "default": 11211,
          "description": "Port of the chunks-cache service",
          "required": [],
          "title": "port",
          "type": "integer"
        },
        "priorityClassName": {
          "default": "null",
          "description": "The name of the PriorityClass for chunks-cache pods",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        },
        "replicas": {
          "default": 1,
          "description": "Specify how long cached chunks should be stored in the chunks-cache before being expired",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "default": "null",
          "description": "Resource requests and limits for the chunks-cache\nBy default a safe memory limit will be requested based on allocatedMemory value (floor (* 1.2 allocatedMemory)).",
          "required": [],
          "title": "resources",
          "type": "null"
        },
        "service": {
          "additionalProperties": true,
          "description": "Service annotations and labels",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "labels": {
              "additionalProperties": true,
              "required": [],
              "title": "labels",
              "type": "object"
            }
          },
          "required": [],
          "title": "service",
          "type": "object"
        },
        "statefulStrategy": {
          "additionalProperties": true,
          "description": "Stateful chunks-cache strategy",
          "properties": {
            "type": {
              "default": "RollingUpdate",
              "required": [],
              "title": "type",
              "type": "string"
            }
          },
          "required": [],
          "title": "statefulStrategy",
          "type": "object"
        },
        "suffix": {
          "default": "",
          "description": "Append to the name of the resources to make names different for l1 and l2",
          "required": [],
          "title": "suffix",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "default": 60,
          "description": "Grace period to allow the chunks-cache to shutdown before it is killed",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "timeout": {
          "default": "2000ms",
          "description": "Memcached operation timeout",
          "required": [],
          "title": "timeout",
          "type": "string"
        },
        "tolerations": {
          "description": " maxSkew: 1\n topologyKey: kubernetes.io/hostname\n whenUnsatisfiable: ScheduleAnyway\nTolerations for chunks-cache pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "topologySpreadConstraints allows to customize the default topologySpreadConstraints. This can be either a single dict as shown below or a slice of topologySpreadConstraints.\nlabelSelector is taken from the constraint itself (if it exists) or is generated by the chart using the same selectors as for services.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        },
        "writebackBuffer": {
          "default": 500000,
          "description": "Max number of objects to use for cache write back",
          "required": [],
          "title": "writebackBuffer",
          "type": "integer"
        },
        "writebackParallelism": {
          "default": 1,
          "description": "Number of parallel threads for cache write back",
          "required": [],
          "title": "writebackParallelism",
          "type": "integer"
        },
        "writebackSizeLimit": {
          "default": "500MB",
          "description": "Max memory to use for cache write back",
          "required": [],
          "title": "writebackSizeLimit",
          "type": "string"
        }
      },
      "required": [],
      "title": "chunksCache",
      "type": "object"
    },
    "clusterDomain": {
      "default": "cluster.local",
      "description": "# set kubernetes cluster domain where minio is running\n#",
      "required": [],
      "title": "clusterDomain",
      "type": "string"
    },
    "clusterLabelOverride": {
      "default": "null",
      "description": "Overrides the chart's cluster label",
      "required": [],
      "title": "clusterLabelOverride",
      "type": "null"
    },
    "compactor": {
      "additionalProperties": true,
      "description": "Configuration for the compactor",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for compactor pods.\nThe value will be passed through tpl.",
          "properties": {
            "podAntiAffinity": {
              "additionalProperties": true,
              "properties": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "additionalProperties": true,
                    "properties": {
                      "labelSelector": {
                        "additionalProperties": true,
                        "properties": {
                          "matchLabels": {
                            "additionalProperties": true,
                            "properties": {
                              "app.kubernetes.io/component": {
                                "default": "compactor",
                                "required": [],
                                "title": "app.kubernetes.io/component",
                                "type": "string"
                              },
                              "app.kubernetes.io/instance": {
                                "default": "{{ .Release.Name }}",
                                "required": [],
                                "title": "app.kubernetes.io/instance",
                                "type": "string"
                              },
                              "app.kubernetes.io/name": {
                                "default": "{{ include \"loki.name\" . }}",
                                "required": [],
                                "title": "app.kubernetes.io/name",
                                "type": "string"
                              }
                            },
                            "required": [],
                            "title": "matchLabels",
                            "type": "object"
                          }
                        },
                        "required": [],
                        "title": "labelSelector",
                        "type": "object"
                      },
                      "topologyKey": {
                        "default": "kubernetes.io/hostname",
                        "required": [],
                        "title": "topologyKey",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "required": [],
                  "title": "requiredDuringSchedulingIgnoredDuringExecution",
                  "type": "array"
                }
              },
              "required": [],
              "title": "podAntiAffinity",
              "type": "object"
            }
          },
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "appProtocol": {
          "additionalProperties": true,
          "description": "Set the optional grpc service protocol. Ex: \"grpc\", \"http2\" or \"https\"",
          "properties": {
            "grpc": {
              "default": "",
              "required": [],
              "title": "grpc",
              "type": "string"
            }
          },
          "required": [],
          "title": "appProtocol",
          "type": "object"
        },
        "command": {
          "default": "null",
          "description": "Command to execute instead of defined in Docker image",
          "required": [],
          "title": "command",
          "type": "null"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "DNSConfig for compactor pods",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "extraArgs": {
          "description": "Additional CLI args for the compactor",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Containers to add to the compactor pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraEnv": {
          "description": "Environment variables to add to the compactor pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "Environment variables from secrets or configmaps to add to the compactor pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "Volume mounts to add to the compactor pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Volumes to add to the compactor pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostAliases": {
          "description": "hostAliases to add",
          "items": {
            "required": []
          },
          "required": [],
          "title": "hostAliases",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": " - ip: 1.2.3.4\n   hostnames:\n     - domain.tld\nUse the host's user namespace in the compactor",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "registry": {
              "default": "null",
              "description": "The Docker registry for the compactor image. Overrides `loki.image.registry`",
              "required": [],
              "title": "registry",
              "type": "null"
            },
            "repository": {
              "default": "null",
              "description": "Docker image repository for the compactor image. Overrides `loki.image.repository`",
              "required": [],
              "title": "repository",
              "type": "null"
            },
            "tag": {
              "default": "null",
              "description": "Docker image tag for the compactor image. Overrides `loki.image.tag`",
              "required": [],
              "title": "tag",
              "type": "null"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "initContainers": {
          "description": "Init containers to add to the compactor pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "livenessProbe": {
          "additionalProperties": true,
          "description": "liveness probe settings for ingester pods. If empty use `loki.livenessProbe`",
          "required": [],
          "title": "livenessProbe",
          "type": "object"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for compactor pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "persistence": {
          "additionalProperties": true,
          "properties": {
            "claims": {
              "description": "List of the compactor PVCs",
              "items": {
                "additionalProperties": true,
                "properties": {
                  "accessModes": {
                    "description": "Set access modes on the PersistentVolumeClaim",
                    "items": {
                      "required": [],
                      "type": "string"
                    },
                    "required": [],
                    "title": "accessModes",
                    "type": "array"
                  },
                  "annotations": {
                    "additionalProperties": true,
                    "description": "Annotations for compactor PVCs",
                    "required": [],
                    "title": "annotations",
                    "type": "object"
                  },
                  "labels": {
                    "additionalProperties": true,
                    "description": "Labels for compactor PVCs",
                    "required": [],
                    "title": "labels",
                    "type": "object"
                  },
                  "name": {
                    "default": "data",
                    "required": [],
                    "title": "name",
                    "type": "string"
                  },
                  "size": {
                    "default": "10Gi",
                    "required": [],
                    "title": "size",
                    "type": "string"
                  },
                  "storageClass": {
                    "default": "null",
                    "description": "  -- Storage class to be used.\n  If defined, storageClassName: \u003cstorageClass\u003e.\n  If set to \"-\", storageClassName: \"\", which disables dynamic provisioning.\n  If empty or set to null, no storageClassName spec is\n  set, choosing the default provisioner (gp2 on AWS, standard on GKE, AWS, and OpenStack).",
                    "required": [],
                    "title": "storageClass",
                    "type": "null"
                  }
                },
                "required": [],
                "type": "object"
              },
              "required": [],
              "title": "claims",
              "type": "array"
            },
            "enableStatefulSetAutoDeletePVC": {
              "default": false,
              "description": "Enable StatefulSetAutoDeletePVC feature",
              "required": [],
              "title": "enableStatefulSetAutoDeletePVC",
              "type": "boolean"
            },
            "enabled": {
              "default": false,
              "description": "Enable creating PVCs for the compactor",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "size": {
              "default": "10Gi",
              "description": "Size of persistent disk",
              "required": [],
              "title": "size",
              "type": "string"
            },
            "storageClass": {
              "default": "null",
              "description": "Storage class to be used.\nIf defined, storageClassName: \u003cstorageClass\u003e.\nIf set to \"-\", storageClassName: \"\", which disables dynamic provisioning.\nIf empty or set to null, no storageClassName spec is\nset, choosing the default provisioner (gp2 on AWS, standard on GKE, AWS, and OpenStack).",
              "required": [],
              "title": "storageClass",
              "type": "null"
            },
            "whenDeleted": {
              "default": "Retain",
              "required": [],
              "title": "whenDeleted",
              "type": "string"
            },
            "whenScaled": {
              "default": "Retain",
              "required": [],
              "title": "whenScaled",
              "type": "string"
            }
          },
          "required": [],
          "title": "persistence",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for compactor pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels for compactor pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "null",
          "description": "The name of the PriorityClass for compactor pods",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        },
        "readinessProbe": {
          "additionalProperties": true,
          "description": "readiness probe settings for ingester pods. If empty, use `loki.readinessProbe`",
          "required": [],
          "title": "readinessProbe",
          "type": "object"
        },
        "replicas": {
          "default": 0,
          "description": "Number of replicas for the compactor",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource requests and limits for the compactor",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "serviceAccount": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations for the compactor service account",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "automountServiceAccountToken": {
              "default": true,
              "description": "Set this toggle to false to opt out of automounting API credentials for the service account",
              "required": [],
              "title": "automountServiceAccountToken",
              "type": "boolean"
            },
            "create": {
              "default": false,
              "required": [],
              "title": "create",
              "type": "boolean"
            },
            "imagePullSecrets": {
              "description": "Image pull secrets for the compactor service account",
              "items": {
                "required": []
              },
              "required": [],
              "title": "imagePullSecrets",
              "type": "array"
            },
            "name": {
              "default": "null",
              "description": "The name of the ServiceAccount to use for the compactor.\nIf not set and create is true, a name is generated by appending\n\"-compactor\" to the common ServiceAccount.",
              "required": [],
              "title": "name",
              "type": "null"
            }
          },
          "required": [],
          "title": "serviceAccount",
          "type": "object"
        },
        "serviceAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for compactor service",
          "required": [],
          "title": "serviceAnnotations",
          "type": "object"
        },
        "serviceLabels": {
          "additionalProperties": true,
          "description": "Labels for compactor service",
          "required": [],
          "title": "serviceLabels",
          "type": "object"
        },
        "serviceType": {
          "default": "ClusterIP",
          "description": "Service type for compactor service",
          "required": [],
          "title": "serviceType",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "Grace period to allow the compactor to shutdown before it is killed",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "Tolerations for compactor pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        }
      },
      "required": [],
      "title": "compactor",
      "type": "object"
    },
    "configPathmc": {
      "default": "/etc/minio/mc/",
      "required": [],
      "title": "configPathmc",
      "type": "string"
    },
    "consoleIngress": {
      "additionalProperties": true,
      "properties": {
        "annotations": {
          "additionalProperties": true,
          "description": "node-role.kubernetes.io/ingress: platform",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "enabled": {
          "default": false,
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "hosts": {
          "items": {
            "required": [],
            "type": "string"
          },
          "required": [],
          "title": "hosts",
          "type": "array"
        },
        "ingressClassName": {
          "default": "~",
          "required": [],
          "title": "ingressClassName",
          "type": "null"
        },
        "labels": {
          "additionalProperties": true,
          "required": [],
          "title": "labels",
          "type": "object"
        },
        "path": {
          "default": "/",
          "description": "kubernetes.io/ingress.class: nginx\nkubernetes.io/tls-acme: \"true\"\nkubernetes.io/ingress.allow-http: \"false\"\nkubernetes.io/ingress.global-static-ip-name: \"\"\nnginx.ingress.kubernetes.io/secure-backends: \"true\"\nnginx.ingress.kubernetes.io/backend-protocol: \"HTTPS\"\nnginx.ingress.kubernetes.io/whitelist-source-range: 0.0.0.0/0",
          "required": [],
          "title": "path",
          "type": "string"
        },
        "tls": {
          "items": {
            "required": []
          },
          "required": [],
          "title": "tls",
          "type": "array"
        }
      },
      "required": [],
      "title": "consoleIngress",
      "type": "object"
    },
    "consoleService": {
      "additionalProperties": true,
      "properties": {
        "annotations": {
          "additionalProperties": true,
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "clusterIP": {
          "default": "~",
          "required": [],
          "title": "clusterIP",
          "type": "null"
        },
        "externalIPs": {
          "items": {
            "required": []
          },
          "required": [],
          "title": "externalIPs",
          "type": "array"
        },
        "externalTrafficPolicy": {
          "default": "Cluster",
          "description": "# servconsoleServiceice.externalTrafficPolicy minio service external traffic policy\n# ref http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip\n#",
          "required": [],
          "title": "externalTrafficPolicy",
          "type": "string"
        },
        "loadBalancerIP": {
          "default": "~",
          "required": [],
          "title": "loadBalancerIP",
          "type": "null"
        },
        "loadBalancerSourceRanges": {
          "description": "# consoleService.loadBalancerSourceRanges Addresses that are allowed when service is LoadBalancer\n# https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service\n#\nloadBalancerSourceRanges:\n  - 10.10.10.0/24",
          "items": {
            "required": []
          },
          "required": [],
          "title": "loadBalancerSourceRanges",
          "type": "array"
        },
        "nodePort": {
          "default": 32001,
          "required": [],
          "title": "nodePort",
          "type": "integer"
        },
        "port": {
          "default": "9001",
          "required": [],
          "title": "port",
          "type": "string"
        },
        "type": {
          "default": "ClusterIP",
          "required": [],
          "title": "type",
          "type": "string"
        }
      },
      "required": [],
      "title": "consoleService",
      "type": "object"
    },
    "containerSecurityContext": {
      "additionalProperties": true,
      "description": "Container security context (allowPrivilegeEscalation, etc.)",
      "properties": {
        "readOnlyRootFilesystem": {
          "default": false,
          "required": [],
          "title": "readOnlyRootFilesystem",
          "type": "boolean"
        }
      },
      "required": [],
      "title": "containerSecurityContext",
      "type": "object"
    },
    "customCommandJob": {
      "additionalProperties": true,
      "description": "# Additional Annotations for the Kubernetes Job customCommandJob",
      "properties": {
        "exitCommand": {
          "default": "",
          "description": "- name: extra-policies\n  mountPath: /mnt/extras/\nCommand to run after the main command on exit",
          "required": [],
          "title": "exitCommand",
          "type": "string"
        },
        "extraVolumeMounts": {
          "description": "- name: extra-policies\n  configMap:\n    name: my-extra-policies-cm\n# Additional volumeMounts to add to the custom commands container when\n# running the post-job.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "# Additional volumes to add to the post-job.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "resources": {
          "additionalProperties": true,
          "properties": {
            "requests": {
              "additionalProperties": true,
              "properties": {
                "memory": {
                  "default": "128Mi",
                  "required": [],
                  "title": "memory",
                  "type": "string"
                }
              },
              "required": [],
              "title": "requests",
              "type": "object"
            }
          },
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "securityContext": {
          "additionalProperties": true,
          "properties": {
            "enabled": {
              "default": false,
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "runAsGroup": {
              "default": 1000,
              "required": [],
              "title": "runAsGroup",
              "type": "integer"
            },
            "runAsUser": {
              "default": 1000,
              "required": [],
              "title": "runAsUser",
              "type": "integer"
            }
          },
          "required": [],
          "title": "securityContext",
          "type": "object"
        }
      },
      "required": [],
      "title": "customCommandJob",
      "type": "object"
    },
    "customCommands": {
      "default": "",
      "description": "# List of command to run after minio install\n# NOTE: the mc command TARGET is always \"myminio\"",
      "required": [],
      "title": "customCommands",
      "type": "null"
    },
    "deploymentMode": {
      "default": "SimpleScalable",
      "description": "Deployment mode lets you specify how to deploy Loki.\nThere are 3 options:\n- SingleBinary: Loki is deployed as a single binary, useful for small installs typically without HA, up to a few tens of GB/day.\n- SimpleScalable: Loki is deployed as 3 targets: read, write, and backend. Useful for medium installs easier to manage than distributed, up to a about 1TB/day.\n- Distributed: Loki is deployed as individual microservices. The most complicated but most capable, useful for large installs, typically over 1TB/day.\nThere are also 2 additional modes used for migrating between deployment modes:\n- SingleBinary\u003c-\u003eSimpleScalable: Migrate from SingleBinary to SimpleScalable (or vice versa)\n- SimpleScalable\u003c-\u003eDistributed: Migrate from SimpleScalable to Distributed (or vice versa)\nNote: SimpleScalable and Distributed REQUIRE the use of object storage.",
      "required": [],
      "title": "deploymentMode",
      "type": "string"
    },
    "deploymentUpdate": {
      "additionalProperties": true,
      "description": "# Update strategy for Deployments",
      "properties": {
        "maxSurge": {
          "default": "100%",
          "required": [],
          "title": "maxSurge",
          "type": "string"
        },
        "maxUnavailable": {
          "default": 0,
          "required": [],
          "title": "maxUnavailable",
          "type": "integer"
        },
        "type": {
          "default": "RollingUpdate",
          "required": [],
          "title": "type",
          "type": "string"
        }
      },
      "required": [],
      "title": "deploymentUpdate",
      "type": "object"
    },
    "distributor": {
      "additionalProperties": true,
      "description": " Configuration for the distributor",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for distributor pods.\nThe value will be passed through tpl.",
          "properties": {
            "podAntiAffinity": {
              "additionalProperties": true,
              "properties": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "additionalProperties": true,
                    "properties": {
                      "labelSelector": {
                        "additionalProperties": true,
                        "properties": {
                          "matchLabels": {
                            "additionalProperties": true,
                            "properties": {
                              "app.kubernetes.io/component": {
                                "default": "distributor",
                                "required": [],
                                "title": "app.kubernetes.io/component",
                                "type": "string"
                              },
                              "app.kubernetes.io/instance": {
                                "default": "{{ .Release.Name }}",
                                "required": [],
                                "title": "app.kubernetes.io/instance",
                                "type": "string"
                              },
                              "app.kubernetes.io/name": {
                                "default": "{{ include \"loki.name\" . }}",
                                "required": [],
                                "title": "app.kubernetes.io/name",
                                "type": "string"
                              }
                            },
                            "required": [],
                            "title": "matchLabels",
                            "type": "object"
                          }
                        },
                        "required": [],
                        "title": "labelSelector",
                        "type": "object"
                      },
                      "topologyKey": {
                        "default": "kubernetes.io/hostname",
                        "required": [],
                        "title": "topologyKey",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "required": [],
                  "title": "requiredDuringSchedulingIgnoredDuringExecution",
                  "type": "array"
                }
              },
              "required": [],
              "title": "podAntiAffinity",
              "type": "object"
            }
          },
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "appProtocol": {
          "additionalProperties": true,
          "description": "Adds the appProtocol field to the distributor service. This allows distributor to work with istio protocol selection.",
          "properties": {
            "grpc": {
              "default": "",
              "description": "Set the optional grpc service protocol. Ex: \"grpc\", \"http2\" or \"https\"",
              "required": [],
              "title": "grpc",
              "type": "string"
            }
          },
          "required": [],
          "title": "appProtocol",
          "type": "object"
        },
        "autoscaling": {
          "additionalProperties": true,
          "properties": {
            "behavior": {
              "additionalProperties": true,
              "description": "- type: Pods\n  pods:\n    metric:\n      name: loki_lines_total\n    target:\n      type: AverageValue\n      averageValue: 10k",
              "properties": {
                "enabled": {
                  "default": false,
                  "description": "Enable autoscaling behaviours",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "scaleDown": {
                  "additionalProperties": true,
                  "description": "define scale down policies, must conform to HPAScalingRules",
                  "required": [],
                  "title": "scaleDown",
                  "type": "object"
                },
                "scaleUp": {
                  "additionalProperties": true,
                  "description": "define scale up policies, must conform to HPAScalingRules",
                  "required": [],
                  "title": "scaleUp",
                  "type": "object"
                }
              },
              "required": [],
              "title": "behavior",
              "type": "object"
            },
            "customMetrics": {
              "description": "Allows one to define custom metrics using the HPA/v2 schema (for example, Pods, Object or External metrics)",
              "items": {
                "required": []
              },
              "required": [],
              "title": "customMetrics",
              "type": "array"
            },
            "enabled": {
              "default": false,
              "description": "Enable autoscaling for the distributor",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "maxReplicas": {
              "default": 3,
              "description": "Maximum autoscaling replicas for the distributor",
              "required": [],
              "title": "maxReplicas",
              "type": "integer"
            },
            "minReplicas": {
              "default": 1,
              "description": "Minimum autoscaling replicas for the distributor",
              "required": [],
              "title": "minReplicas",
              "type": "integer"
            },
            "targetCPUUtilizationPercentage": {
              "default": 60,
              "description": "Target CPU utilisation percentage for the distributor",
              "required": [],
              "title": "targetCPUUtilizationPercentage",
              "type": "integer"
            },
            "targetMemoryUtilizationPercentage": {
              "default": "null",
              "description": "Target memory utilisation percentage for the distributor",
              "required": [],
              "title": "targetMemoryUtilizationPercentage",
              "type": "null"
            }
          },
          "required": [],
          "title": "autoscaling",
          "type": "object"
        },
        "command": {
          "default": "null",
          "description": "Command to execute instead of defined in Docker image",
          "required": [],
          "title": "command",
          "type": "null"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "DNSConfig for distributor pods",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "extraArgs": {
          "description": "Additional CLI args for the distributor",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Containers to add to the distributor pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraEnv": {
          "description": "Environment variables to add to the distributor pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "Environment variables from secrets or configmaps to add to the distributor pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "Volume mounts to add to the distributor pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Volumes to add to the distributor pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostAliases": {
          "description": "hostAliases to add",
          "items": {
            "required": []
          },
          "required": [],
          "title": "hostAliases",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": " - ip: 1.2.3.4\n   hostnames:\n     - domain.tld\nUse the host's user namespace in the distributor",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "registry": {
              "default": "null",
              "description": "The Docker registry for the distributor image. Overrides `loki.image.registry`",
              "required": [],
              "title": "registry",
              "type": "null"
            },
            "repository": {
              "default": "null",
              "description": "Docker image repository for the distributor image. Overrides `loki.image.repository`",
              "required": [],
              "title": "repository",
              "type": "null"
            },
            "tag": {
              "default": "null",
              "description": "Docker image tag for the distributor image. Overrides `loki.image.tag`",
              "required": [],
              "title": "tag",
              "type": "null"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "initContainers": {
          "description": "Init containers to add to the distributor pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "maxSurge": {
          "default": 0,
          "description": "Max Surge for distributor pods",
          "required": [],
          "title": "maxSurge",
          "type": "integer"
        },
        "maxUnavailable": {
          "default": "null",
          "description": "Pod Disruption Budget maxUnavailable",
          "required": [],
          "title": "maxUnavailable",
          "type": "null"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for distributor pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for distributor pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels for distributor pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "null",
          "description": "The name of the PriorityClass for distributor pods",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        },
        "replicas": {
          "default": 0,
          "description": "Number of replicas for the distributor",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource requests and limits for the distributor",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "serviceAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for distributor service",
          "required": [],
          "title": "serviceAnnotations",
          "type": "object"
        },
        "serviceLabels": {
          "additionalProperties": true,
          "description": "Labels for distributor service",
          "required": [],
          "title": "serviceLabels",
          "type": "object"
        },
        "serviceType": {
          "default": "ClusterIP",
          "description": "Service type for distributor service",
          "required": [],
          "title": "serviceType",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "Grace period to allow the distributor to shutdown before it is killed",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "Tolerations for distributor pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "Topology Spread Constraints for distributor pods\nThe value will be passed through tpl.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        },
        "trafficDistribution": {
          "default": "",
          "description": "trafficDistribution for distributor service",
          "required": [],
          "title": "trafficDistribution",
          "type": "string"
        }
      },
      "required": [],
      "title": "distributor",
      "type": "object"
    },
    "drivesPerNode": {
      "default": 1,
      "description": "Number of drives attached to a node",
      "required": [],
      "title": "drivesPerNode",
      "type": "integer"
    },
    "enterprise": {
      "additionalProperties": true,
      "description": "Configuration for running Enterprise Loki",
      "properties": {
        "adminApi": {
          "additionalProperties": true,
          "description": "If enabled, the correct admin_client storage will be configured. If disabled while running enterprise,\nmake sure auth is set to `type: trust`, or that `auth_enabled` is set to `false`.",
          "properties": {
            "enabled": {
              "default": true,
              "required": [],
              "title": "enabled",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "adminApi",
          "type": "object"
        },
        "adminToken": {
          "additionalProperties": true,
          "description": "Admin token secret for provisioner (must be created externally)",
          "properties": {
            "secret": {
              "default": "null",
              "description": "Name of external secret containing the admin token for enterprise provisioner\nThis secret must exist before deploying and must contain a key named 'token'",
              "required": [],
              "title": "secret",
              "type": "null"
            }
          },
          "required": [],
          "title": "adminToken",
          "type": "object"
        },
        "canarySecret": {
          "default": "null",
          "description": "Alternative name of the secret to store token for the canary",
          "required": [],
          "title": "canarySecret",
          "type": "null"
        },
        "cluster_name": {
          "default": "null",
          "description": "Optional name of the GEL cluster, otherwise will use .Release.Name\nThe cluster name must match what is in your GEL license",
          "required": [],
          "title": "cluster_name",
          "type": "null"
        },
        "config": {
          "default": "{{- if .Values.enterprise.adminApi.enabled }}\nadmin_client:\n  {{ include \"enterprise-logs.adminAPIStorageConfig\" . | nindent 2 }}\n{{ end }}\nauth:\n  type: {{ .Values.enterprise.adminApi.enabled | ternary \"enterprise\" \"trust\" }}\nauth_enabled: {{ .Values.loki.auth_enabled }}\ncluster_name: {{ include \"loki.clusterName\" . }}\nlicense:\n  path: /etc/loki/license/license.jwt\n",
          "description": "enterprise specific sections of the config.yaml file",
          "required": [],
          "title": "config",
          "type": "string"
        },
        "enabled": {
          "default": false,
          "description": "Enable enterprise features, license must be provided",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "externalConfigName": {
          "default": "",
          "description": "Name of the external config secret to use",
          "required": [],
          "title": "externalConfigName",
          "type": "string"
        },
        "externalLicenseName": {
          "default": "null",
          "description": "Name of external license secret to use",
          "required": [],
          "title": "externalLicenseName",
          "type": "null"
        },
        "gelGateway": {
          "default": true,
          "description": "Use GEL gateway, if false will use the default nginx gateway",
          "required": [],
          "title": "gelGateway",
          "type": "boolean"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "digest": {
              "default": "null",
              "description": "Overrides the image tag with an image digest",
              "required": [],
              "title": "digest",
              "type": "null"
            },
            "pullPolicy": {
              "default": "IfNotPresent",
              "description": "Docker image pull policy",
              "required": [],
              "title": "pullPolicy",
              "type": "string"
            },
            "registry": {
              "default": "docker.io",
              "description": "The Docker registry",
              "required": [],
              "title": "registry",
              "type": "string"
            },
            "repository": {
              "default": "grafana/enterprise-logs",
              "description": "Docker image repository",
              "required": [],
              "title": "repository",
              "type": "string"
            },
            "tag": {
              "default": "3.5.5",
              "description": "Docker image tag",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "license": {
          "additionalProperties": true,
          "description": "Grafana Enterprise Logs license\nIn order to use Grafana Enterprise Logs features, you will need to provide\nthe contents of your Grafana Enterprise Logs license, either by providing the\ncontents of the license.jwt, or the name Kubernetes Secret that contains your\nlicense.jwt.\nTo set the license contents, use the flag `--set-file 'enterprise.license.contents=./license.jwt'`",
          "properties": {
            "contents": {
              "default": "NOTAVALIDLICENSE",
              "required": [],
              "title": "contents",
              "type": "string"
            }
          },
          "required": [],
          "title": "license",
          "type": "object"
        },
        "provisioner": {
          "additionalProperties": true,
          "description": "Configuration for `provisioner` target\nNote: Uses enterprise.adminToken.secret value to mount the admin token used to call the admin api.",
          "properties": {
            "additionalTenants": {
              "description": "Additional tenants to be created. Each tenant will get a read and write policy\nand associated token. Tenant must have a name and a namespace for the secret containting\nthe token to be created in. For example\nadditionalTenants:\n  - name: loki\n    secretNamespace: grafana",
              "items": {
                "required": []
              },
              "required": [],
              "title": "additionalTenants",
              "type": "array"
            },
            "affinity": {
              "additionalProperties": true,
              "description": "Affinity for provisioner Pods\nThe value will be passed through tpl.",
              "required": [],
              "title": "affinity",
              "type": "object"
            },
            "annotations": {
              "additionalProperties": true,
              "description": "Additional annotations for the `provisioner` Job",
              "properties": {
                "eks.amazonaws.com/role-arn": {
                  "required": [],
                  "title": "eks.amazonaws.com/role-arn",
                  "type": "string"
                }
              },
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "apiUrl": {
              "default": "{{ include \"loki.address\" . }}",
              "description": "url of the admin api to use for the provisioner",
              "required": [],
              "title": "apiUrl",
              "type": "string"
            },
            "enabled": {
              "default": true,
              "description": "Whether the job should be part of the deployment",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "env": {
              "description": "Additional Kubernetes environment",
              "items": {
                "required": []
              },
              "required": [],
              "title": "env",
              "type": "array"
            },
            "extraVolumeMounts": {
              "description": "Volume mounts to add to the provisioner pods",
              "items": {
                "required": []
              },
              "required": [],
              "title": "extraVolumeMounts",
              "type": "array"
            },
            "extraVolumes": {
              "description": "Additional volumes for Pods",
              "items": {
                "required": []
              },
              "required": [],
              "title": "extraVolumes",
              "type": "array"
            },
            "hookType": {
              "default": "post-install",
              "description": "Hook type(s) to customize when the job runs.  defaults to post-install",
              "required": [],
              "title": "hookType",
              "type": "string"
            },
            "hostUsers": {
              "default": "nil",
              "description": "Use the host's user namespace in provisioner pods",
              "required": [],
              "title": "hostUsers",
              "type": "string"
            },
            "image": {
              "additionalProperties": true,
              "description": "Provisioner image to Utilize",
              "properties": {
                "digest": {
                  "default": "null",
                  "description": "Overrides the image tag with an image digest",
                  "required": [],
                  "title": "digest",
                  "type": "null"
                },
                "pullPolicy": {
                  "default": "IfNotPresent",
                  "description": "Docker image pull policy",
                  "required": [],
                  "title": "pullPolicy",
                  "type": "string"
                },
                "registry": {
                  "default": "us-docker.pkg.dev",
                  "description": "The Docker registry",
                  "required": [],
                  "title": "registry",
                  "type": "string"
                },
                "repository": {
                  "default": "grafanalabs-global/docker-enterprise-provisioner-prod/enterprise-provisioner",
                  "description": "Docker image repository",
                  "required": [],
                  "title": "repository",
                  "type": "string"
                },
                "tag": {
                  "default": "latest",
                  "description": "Overrides the image tag whose default is the chart's appVersion",
                  "required": [],
                  "title": "tag",
                  "type": "string"
                }
              },
              "required": [],
              "title": "image",
              "type": "object"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Additional labels for the `provisioner` Job",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "nodeSelector": {
              "additionalProperties": true,
              "description": "Node selector for provisioner Pods",
              "required": [],
              "title": "nodeSelector",
              "type": "object"
            },
            "priorityClassName": {
              "default": "null",
              "description": "The name of the PriorityClass for provisioner Job",
              "required": [],
              "title": "priorityClassName",
              "type": "null"
            },
            "provisionedSecretPrefix": {
              "default": "null",
              "description": "Name of the secret to store provisioned tokens in",
              "required": [],
              "title": "provisionedSecretPrefix",
              "type": "null"
            },
            "securityContext": {
              "additionalProperties": true,
              "description": "Run containers as user `enterprise-logs(uid=10001)`",
              "properties": {
                "fsGroup": {
                  "default": 10001,
                  "required": [],
                  "title": "fsGroup",
                  "type": "integer"
                },
                "runAsGroup": {
                  "default": 10001,
                  "required": [],
                  "title": "runAsGroup",
                  "type": "integer"
                },
                "runAsNonRoot": {
                  "default": true,
                  "required": [],
                  "title": "runAsNonRoot",
                  "type": "boolean"
                },
                "runAsUser": {
                  "default": 10001,
                  "required": [],
                  "title": "runAsUser",
                  "type": "integer"
                }
              },
              "required": [],
              "title": "securityContext",
              "type": "object"
            },
            "tolerations": {
              "description": "Tolerations for provisioner Pods",
              "items": {
                "required": []
              },
              "required": [],
              "title": "tolerations",
              "type": "array"
            }
          },
          "required": [],
          "title": "provisioner",
          "type": "object"
        },
        "useExternalLicense": {
          "default": false,
          "description": "Set to true when providing an external license",
          "required": [],
          "title": "useExternalLicense",
          "type": "boolean"
        },
        "version": {
          "default": "3.5.2",
          "description": "Default verion of GEL to deploy",
          "required": [],
          "title": "version",
          "type": "string"
        }
      },
      "required": [],
      "title": "enterprise",
      "type": "object"
    },
    "enterpriseGateway": {
      "additionalProperties": true,
      "description": "If running enterprise and using the default enterprise gateway, configs go here.",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for gateway Pods\nThe value will be passed through tpl.",
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "annotations": {
          "additionalProperties": true,
          "description": "Additional annotations for the `gateway` Pod",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "containerSecurityContext": {
          "additionalProperties": true,
          "properties": {
            "allowPrivilegeEscalation": {
              "default": false,
              "required": [],
              "title": "allowPrivilegeEscalation",
              "type": "boolean"
            },
            "capabilities": {
              "additionalProperties": true,
              "properties": {
                "drop": {
                  "items": {
                    "required": [],
                    "type": "string"
                  },
                  "required": [],
                  "title": "drop",
                  "type": "array"
                }
              },
              "required": [],
              "title": "capabilities",
              "type": "object"
            },
            "readOnlyRootFilesystem": {
              "default": true,
              "required": [],
              "title": "readOnlyRootFilesystem",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "containerSecurityContext",
          "type": "object"
        },
        "env": {
          "description": "Configure optional environment variables",
          "items": {
            "required": []
          },
          "required": [],
          "title": "env",
          "type": "array"
        },
        "extraArgs": {
          "additionalProperties": true,
          "description": "Additional CLI arguments for the `gateway` target",
          "required": [],
          "title": "extraArgs",
          "type": "object"
        },
        "extraContainers": {
          "description": "Conifgure optional extraContainers",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "Environment variables from secrets or configmaps to add to the enterprise gateway pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "Additional volume mounts for Pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Additional volumes for Pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostAliases": {
          "description": "hostAliases to add",
          "items": {
            "required": []
          },
          "required": [],
          "title": "hostAliases",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": " - ip: 1.2.3.4\n   hostnames:\n     - domain.tld\nUse the host's user namespace in the `gateway` pod",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "initContainers": {
          "description": "Configure optional initContainers",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "labels": {
          "additionalProperties": true,
          "description": "Additional labels for the `gateway` Pod",
          "required": [],
          "title": "labels",
          "type": "object"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for gateway Pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "podSecurityContext": {
          "additionalProperties": true,
          "description": "Run container as user `enterprise-logs(uid=10001)`",
          "properties": {
            "fsGroup": {
              "default": 10001,
              "required": [],
              "title": "fsGroup",
              "type": "integer"
            },
            "runAsGroup": {
              "default": 10001,
              "required": [],
              "title": "runAsGroup",
              "type": "integer"
            },
            "runAsNonRoot": {
              "default": true,
              "required": [],
              "title": "runAsNonRoot",
              "type": "boolean"
            },
            "runAsUser": {
              "default": 10001,
              "required": [],
              "title": "runAsUser",
              "type": "integer"
            }
          },
          "required": [],
          "title": "podSecurityContext",
          "type": "object"
        },
        "readinessProbe": {
          "additionalProperties": true,
          "description": "Readiness probe",
          "properties": {
            "httpGet": {
              "additionalProperties": true,
              "properties": {
                "path": {
                  "default": "/ready",
                  "required": [],
                  "title": "path",
                  "type": "string"
                },
                "port": {
                  "default": "http-metrics",
                  "required": [],
                  "title": "port",
                  "type": "string"
                }
              },
              "required": [],
              "title": "httpGet",
              "type": "object"
            },
            "initialDelaySeconds": {
              "default": 45,
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "readinessProbe",
          "type": "object"
        },
        "replicas": {
          "default": 1,
          "description": "Define the amount of instances",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Request and limit Kubernetes resources\nValues are defined in small.yaml and large.yaml",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "service": {
          "additionalProperties": true,
          "description": "Additional labels and annotations for the `gateway` Service\nService overriding service type",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "labels": {
              "additionalProperties": true,
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "type": {
              "default": "ClusterIP",
              "required": [],
              "title": "type",
              "type": "string"
            }
          },
          "required": [],
          "title": "service",
          "type": "object"
        },
        "strategy": {
          "additionalProperties": true,
          "description": "update strategy",
          "properties": {
            "type": {
              "default": "RollingUpdate",
              "required": [],
              "title": "type",
              "type": "string"
            }
          },
          "required": [],
          "title": "strategy",
          "type": "object"
        },
        "terminationGracePeriodSeconds": {
          "default": 60,
          "description": "Grace period to allow the gateway to shutdown before it is killed",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "Tolerations for gateway Pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "Topology Spread Constraints for enterprise-gateway pods\nThe value will be passed through tpl.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        },
        "useDefaultProxyURLs": {
          "default": true,
          "description": "If you want to use your own proxy URLs, set this to false.",
          "required": [],
          "title": "useDefaultProxyURLs",
          "type": "boolean"
        }
      },
      "required": [],
      "title": "enterpriseGateway",
      "type": "object"
    },
    "environment": {
      "default": "",
      "description": "# Use this field to add environment variables relevant to MinIO server. These fields will be passed on to MinIO container(s)\n# when Chart is deployed",
      "required": [],
      "title": "environment",
      "type": "null"
    },
    "etcd": {
      "additionalProperties": true,
      "description": "# ETCD settings: https://github.com/minio/minio/blob/master/docs/sts/etcd.md\n# Define endpoints to enable this section.",
      "properties": {
        "clientCert": {
          "default": "",
          "required": [],
          "title": "clientCert",
          "type": "string"
        },
        "clientCertKey": {
          "default": "",
          "required": [],
          "title": "clientCertKey",
          "type": "string"
        },
        "corednsPathPrefix": {
          "default": "",
          "required": [],
          "title": "corednsPathPrefix",
          "type": "string"
        },
        "endpoints": {
          "items": {
            "required": []
          },
          "required": [],
          "title": "endpoints",
          "type": "array"
        },
        "pathPrefix": {
          "default": "",
          "required": [],
          "title": "pathPrefix",
          "type": "string"
        }
      },
      "required": [],
      "title": "etcd",
      "type": "object"
    },
    "existingSecret": {
      "default": "",
      "description": "# Use existing Secret that store following variables:\n#\n# | Chart var             | .data.\u003ckey\u003e in Secret    |\n# |:----------------------|:-------------------------|\n# | rootUser              | rootUser                 |\n# | rootPassword          | rootPassword             |\n#\n# All mentioned variables will be ignored in values file.\n# .data.rootUser and .data.rootPassword are mandatory,\n# others depend on enabled status of corresponding sections.",
      "required": [],
      "title": "existingSecret",
      "type": "string"
    },
    "extraArgs": {
      "description": "List of additional CLI arguments to configure rollout-operator (example: `--log.level=info`)",
      "items": {
        "required": []
      },
      "required": [],
      "title": "extraArgs",
      "type": "array"
    },
    "extraContainers": {
      "description": "# Additional sidecar containers",
      "items": {
        "required": []
      },
      "required": [],
      "title": "extraContainers",
      "type": "array"
    },
    "extraEnv": {
      "description": "Environment variables to add to rollout-operator container",
      "items": {
        "required": []
      },
      "required": [],
      "title": "extraEnv",
      "type": "array"
    },
    "extraEnvFrom": {
      "description": "Environment variables from secrets or configmaps to add to rollout-operator container",
      "items": {
        "required": []
      },
      "required": [],
      "title": "extraEnvFrom",
      "type": "array"
    },
    "extraObjects": {
      "default": "null",
      "description": "Create extra manifests via values\nCan be a list or dictionary, both are passed through `tpl`.  If dict, keys are ignored and only values are used.\nObjects can also be defined as multiline strings, useful for templating field names",
      "required": [],
      "title": "extraObjects",
      "type": "null"
    },
    "extraSecret": {
      "default": "~",
      "description": "# The name of a secret in the same kubernetes namespace which contain secret values\n# This can be useful for LDAP password, etc\n# The key in the secret must be 'config.env'\n#",
      "required": [],
      "title": "extraSecret",
      "type": "null"
    },
    "extraVolumeMounts": {
      "description": "# Additional volumeMounts to minio container",
      "items": {
        "required": []
      },
      "required": [],
      "title": "extraVolumeMounts",
      "type": "array"
    },
    "extraVolumes": {
      "description": "# Additional volumes to minio container",
      "items": {
        "required": []
      },
      "required": [],
      "title": "extraVolumes",
      "type": "array"
    },
    "fullnameOverride": {
      "default": "null",
      "description": "Overrides the chart's computed fullname",
      "required": [],
      "title": "fullnameOverride",
      "type": "null"
    },
    "gateway": {
      "additionalProperties": true,
      "description": "Configuration for the gateway",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for gateway pods.\nThe value will be passed through tpl.",
          "properties": {
            "podAntiAffinity": {
              "additionalProperties": true,
              "properties": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "additionalProperties": true,
                    "properties": {
                      "labelSelector": {
                        "additionalProperties": true,
                        "properties": {
                          "matchLabels": {
                            "additionalProperties": true,
                            "properties": {
                              "app.kubernetes.io/component": {
                                "default": "gateway",
                                "required": [],
                                "title": "app.kubernetes.io/component",
                                "type": "string"
                              },
                              "app.kubernetes.io/instance": {
                                "default": "{{ .Release.Name }}",
                                "required": [],
                                "title": "app.kubernetes.io/instance",
                                "type": "string"
                              },
                              "app.kubernetes.io/name": {
                                "default": "{{ include \"loki.name\" . }}",
                                "required": [],
                                "title": "app.kubernetes.io/name",
                                "type": "string"
                              }
                            },
                            "required": [],
                            "title": "matchLabels",
                            "type": "object"
                          }
                        },
                        "required": [],
                        "title": "labelSelector",
                        "type": "object"
                      },
                      "topologyKey": {
                        "default": "kubernetes.io/hostname",
                        "required": [],
                        "title": "topologyKey",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "required": [],
                  "title": "requiredDuringSchedulingIgnoredDuringExecution",
                  "type": "array"
                }
              },
              "required": [],
              "title": "podAntiAffinity",
              "type": "object"
            }
          },
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "annotations": {
          "additionalProperties": true,
          "description": "Annotations for gateway deployment",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "autoscaling": {
          "additionalProperties": true,
          "properties": {
            "behavior": {
              "additionalProperties": true,
              "description": "See `kubectl explain deployment.spec.strategy` for more\nref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy\nBehavior policies while scaling.",
              "required": [],
              "title": "behavior",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Enable autoscaling for the gateway",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "maxReplicas": {
              "default": 3,
              "description": "Maximum autoscaling replicas for the gateway",
              "required": [],
              "title": "maxReplicas",
              "type": "integer"
            },
            "minReplicas": {
              "default": 1,
              "description": "Minimum autoscaling replicas for the gateway",
              "required": [],
              "title": "minReplicas",
              "type": "integer"
            },
            "targetCPUUtilizationPercentage": {
              "default": 60,
              "description": "Target CPU utilisation percentage for the gateway",
              "required": [],
              "title": "targetCPUUtilizationPercentage",
              "type": "integer"
            },
            "targetMemoryUtilizationPercentage": {
              "default": "",
              "description": "Target memory utilisation percentage for the gateway",
              "required": [],
              "title": "targetMemoryUtilizationPercentage",
              "type": "null"
            }
          },
          "required": [],
          "title": "autoscaling",
          "type": "object"
        },
        "basicAuth": {
          "additionalProperties": true,
          "description": "Basic auth configuration",
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enables basic authentication for the gateway",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "existingSecret": {
              "default": "null",
              "description": "Existing basic auth secret to use. Must contain '.htpasswd'",
              "required": [],
              "title": "existingSecret",
              "type": "null"
            },
            "htpasswd": {
              "default": "{{- with $tenants := .Values.loki.tenants }}\n  {{- range $t := $tenants }}\n    {{- $username := required \"All tenants must have a 'name' set\" $t.name }}\n    {{- if $passwordHash := $t.passwordHash }}\n      {{- printf \"%s:%s\\n\" $username $passwordHash }}\n    {{- else if $password := $t.password }}\n      {{- printf \"%s\\n\" (htpasswd $username $password) }}\n    {{- else }}\n      {{- fail \"All tenants must have a 'password' or 'passwordHash' set\" }}\n    {{- end }}\n  {{- end }}\n{{- else }}\n  {{- printf \"%s\\n\" (htpasswd (required \"'gateway.basicAuth.username' is required\" .Values.gateway.basicAuth.username) (required \"'gateway.basicAuth.password' is required\" .Values.gateway.basicAuth.password)) }}\n{{- end }}\n",
              "description": "Uses the specified users from the `loki.tenants` list to create the htpasswd file.\nif `loki.tenants` is not set, the `gateway.basicAuth.username` and `gateway.basicAuth.password` are used.\nThe value is templated using `tpl`. Override this to use a custom htpasswd, e.g. in case the default causes\nhigh CPU load.",
              "required": [],
              "title": "htpasswd",
              "type": "string"
            },
            "password": {
              "default": "null",
              "description": "The basic auth password for the gateway",
              "required": [],
              "title": "password",
              "type": "null"
            },
            "username": {
              "default": "null",
              "description": "The basic auth username for the gateway",
              "required": [],
              "title": "username",
              "type": "null"
            }
          },
          "required": [],
          "title": "basicAuth",
          "type": "object"
        },
        "containerPort": {
          "default": 8080,
          "description": "Default container port",
          "required": [],
          "title": "containerPort",
          "type": "integer"
        },
        "containerSecurityContext": {
          "additionalProperties": true,
          "description": "The SecurityContext for gateway containers",
          "properties": {
            "allowPrivilegeEscalation": {
              "default": false,
              "required": [],
              "title": "allowPrivilegeEscalation",
              "type": "boolean"
            },
            "capabilities": {
              "additionalProperties": true,
              "properties": {
                "drop": {
                  "items": {
                    "required": [],
                    "type": "string"
                  },
                  "required": [],
                  "title": "drop",
                  "type": "array"
                }
              },
              "required": [],
              "title": "capabilities",
              "type": "object"
            },
            "readOnlyRootFilesystem": {
              "default": true,
              "required": [],
              "title": "readOnlyRootFilesystem",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "containerSecurityContext",
          "type": "object"
        },
        "deploymentStrategy": {
          "additionalProperties": true,
          "properties": {
            "type": {
              "default": "RollingUpdate",
              "required": [],
              "title": "type",
              "type": "string"
            }
          },
          "required": [],
          "title": "deploymentStrategy",
          "type": "object"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "DNS config for gateway pods",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "enabled": {
          "default": true,
          "description": "Specifies whether the gateway should be enabled",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "extraArgs": {
          "description": "Additional CLI args for the gateway",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Containers to add to the gateway pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraEnv": {
          "description": "Environment variables to add to the gateway pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "Environment variables from secrets or configmaps to add to the gateway pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "Volume mounts to add to the gateway pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Volumes to add to the gateway pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": "Use the host's user namespace in the gateway",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "digest": {
              "default": "null",
              "description": "Overrides the gateway image tag with an image digest",
              "required": [],
              "title": "digest",
              "type": "null"
            },
            "pullPolicy": {
              "default": "IfNotPresent",
              "description": "The gateway image pull policy",
              "required": [],
              "title": "pullPolicy",
              "type": "string"
            },
            "registry": {
              "default": "docker.io",
              "description": "The Docker registry for the gateway image",
              "required": [],
              "title": "registry",
              "type": "string"
            },
            "repository": {
              "default": "nginxinc/nginx-unprivileged",
              "description": "The gateway image repository",
              "required": [],
              "title": "repository",
              "type": "string"
            },
            "tag": {
              "default": "1.29-alpine",
              "description": "The gateway image tag",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "ingress": {
          "additionalProperties": true,
          "description": "Gateway ingress configuration",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations for the gateway ingress",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Specifies whether an ingress for the gateway should be created",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "hosts": {
              "description": "Hosts configuration for the gateway ingress, passed through the `tpl` function to allow templating",
              "items": {
                "additionalProperties": true,
                "properties": {
                  "host": {
                    "default": "gateway.loki.example.com",
                    "required": [],
                    "title": "host",
                    "type": "string"
                  },
                  "paths": {
                    "items": {
                      "additionalProperties": true,
                      "properties": {
                        "path": {
                          "default": "/",
                          "required": [],
                          "title": "path",
                          "type": "string"
                        },
                        "pathType": {
                          "required": [],
                          "title": "pathType",
                          "type": "string"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "required": [],
                    "title": "paths",
                    "type": "array"
                  }
                },
                "required": [],
                "type": "object"
              },
              "required": [],
              "title": "hosts",
              "type": "array"
            },
            "ingressClassName": {
              "default": "",
              "description": "Ingress Class Name. MAY be required for Kubernetes versions \u003e= 1.18",
              "required": [],
              "title": "ingressClassName",
              "type": "string"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels for the gateway ingress",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "tls": {
              "description": "TLS configuration for the gateway ingress. Hosts passed through the `tpl` function to allow templating",
              "items": {
                "additionalProperties": true,
                "properties": {
                  "hosts": {
                    "items": {
                      "required": [],
                      "type": "string"
                    },
                    "required": [],
                    "title": "hosts",
                    "type": "array"
                  },
                  "secretName": {
                    "default": "loki-gateway-tls",
                    "required": [],
                    "title": "secretName",
                    "type": "string"
                  }
                },
                "required": [],
                "type": "object"
              },
              "required": [],
              "title": "tls",
              "type": "array"
            }
          },
          "required": [],
          "title": "ingress",
          "type": "object"
        },
        "lifecycle": {
          "additionalProperties": true,
          "description": "Lifecycle for the gateway container",
          "required": [],
          "title": "lifecycle",
          "type": "object"
        },
        "livenessProbe": {
          "additionalProperties": true,
          "description": "liveness probe for the nginx container in the gateway pods.",
          "required": [],
          "title": "livenessProbe",
          "type": "object"
        },
        "nginxConfig": {
          "additionalProperties": true,
          "properties": {
            "clientMaxBodySize": {
              "default": "4M",
              "description": "Allows customizing the `client_max_body_size` directive",
              "required": [],
              "title": "clientMaxBodySize",
              "type": "string"
            },
            "customBackendUrl": {
              "default": "null",
              "description": "Override Backend URL",
              "required": [],
              "title": "customBackendUrl",
              "type": "null"
            },
            "customReadUrl": {
              "default": "null",
              "description": "Override Read URL",
              "required": [],
              "title": "customReadUrl",
              "type": "null"
            },
            "customWriteUrl": {
              "default": "null",
              "description": "Override Write URL",
              "required": [],
              "title": "customWriteUrl",
              "type": "null"
            },
            "enableIPv6": {
              "default": true,
              "description": "Enable listener for IPv6, disable on IPv4-only systems",
              "required": [],
              "title": "enableIPv6",
              "type": "boolean"
            },
            "file": {
              "default": "{{- include \"loki.nginxFile\" . -}}\n",
              "description": "Config file contents for Nginx. Passed through the `tpl` function to allow templating",
              "required": [],
              "title": "file",
              "type": "string"
            },
            "httpSnippet": {
              "default": "",
              "description": "Allows appending custom configuration to the http block, passed through the `tpl` function to allow templating",
              "required": [],
              "title": "httpSnippet",
              "type": "string"
            },
            "locationSnippet": {
              "default": "{{ if .Values.loki.tenants }}proxy_set_header X-Scope-OrgID $remote_user;{{ end }}",
              "description": "Allows appending custom configuration inside every location block, useful for authentication or setting headers that are not inherited from the server block, passed through the `tpl` function to allow templating.",
              "required": [],
              "title": "locationSnippet",
              "type": "string"
            },
            "logFormat": {
              "default": "main '$remote_addr - $remote_user [$time_local]  $status '\n        '\"$request\" $body_bytes_sent \"$http_referer\" '\n        '\"$http_user_agent\" \"$http_x_forwarded_for\"';",
              "description": "NGINX log format",
              "required": [],
              "title": "logFormat",
              "type": "string"
            },
            "resolver": {
              "default": "",
              "description": "Allows overriding the DNS resolver address nginx will use.",
              "required": [],
              "title": "resolver",
              "type": "string"
            },
            "schema": {
              "default": "http",
              "description": "Which schema to be used when building URLs. Can be 'http' or 'https'.",
              "required": [],
              "title": "schema",
              "type": "string"
            },
            "serverSnippet": {
              "default": "",
              "description": "Allows appending custom configuration to the server block",
              "required": [],
              "title": "serverSnippet",
              "type": "string"
            },
            "ssl": {
              "default": false,
              "description": "Whether ssl should be appended to the listen directive of the server block or not.",
              "required": [],
              "title": "ssl",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "nginxConfig",
          "type": "object"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for gateway pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for gateway pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Additional labels for gateway pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "podSecurityContext": {
          "additionalProperties": true,
          "description": "The SecurityContext for gateway containers",
          "properties": {
            "fsGroup": {
              "default": 101,
              "required": [],
              "title": "fsGroup",
              "type": "integer"
            },
            "runAsGroup": {
              "default": 101,
              "required": [],
              "title": "runAsGroup",
              "type": "integer"
            },
            "runAsNonRoot": {
              "default": true,
              "required": [],
              "title": "runAsNonRoot",
              "type": "boolean"
            },
            "runAsUser": {
              "default": 101,
              "required": [],
              "title": "runAsUser",
              "type": "integer"
            }
          },
          "required": [],
          "title": "podSecurityContext",
          "type": "object"
        },
        "priorityClassName": {
          "default": "null",
          "description": "The name of the PriorityClass for gateway pods",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        },
        "readinessProbe": {
          "additionalProperties": true,
          "description": "Configures the readiness probe for the gateway",
          "properties": {
            "httpGet": {
              "additionalProperties": true,
              "properties": {
                "path": {
                  "default": "/",
                  "required": [],
                  "title": "path",
                  "type": "string"
                },
                "port": {
                  "default": "http-metrics",
                  "required": [],
                  "title": "port",
                  "type": "string"
                }
              },
              "required": [],
              "title": "httpGet",
              "type": "object"
            },
            "initialDelaySeconds": {
              "default": 15,
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 1,
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "readinessProbe",
          "type": "object"
        },
        "replicas": {
          "default": 1,
          "description": "Number of replicas for the gateway",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource requests and limits for the gateway",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "service": {
          "additionalProperties": true,
          "description": "Gateway service configuration",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations for the gateway service",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "clusterIP": {
              "default": "null",
              "description": "ClusterIP of the gateway service",
              "required": [],
              "title": "clusterIP",
              "type": "null"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels for gateway service",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "loadBalancerIP": {
              "default": "null",
              "description": "Load balancer IPO address if service type is LoadBalancer",
              "required": [],
              "title": "loadBalancerIP",
              "type": "null"
            },
            "nodePort": {
              "default": "null",
              "description": "(int) Node port if service type is NodePort",
              "required": [],
              "title": "nodePort",
              "type": "null"
            },
            "port": {
              "default": 80,
              "description": "Port of the gateway service",
              "required": [],
              "title": "port",
              "type": "integer"
            },
            "type": {
              "default": "ClusterIP",
              "description": "Type of the gateway service",
              "required": [],
              "title": "type",
              "type": "string"
            }
          },
          "required": [],
          "title": "service",
          "type": "object"
        },
        "startupProbe": {
          "additionalProperties": true,
          "description": "startup probe for the nginx container in the gateway pods.",
          "required": [],
          "title": "startupProbe",
          "type": "object"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "Grace period to allow the gateway to shutdown before it is killed",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "Tolerations for gateway pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "Topology Spread Constraints for gateway pods\nThe value will be passed through tpl.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        },
        "verboseLogging": {
          "default": true,
          "description": "Enable logging of 2xx and 3xx HTTP requests",
          "required": [],
          "title": "verboseLogging",
          "type": "boolean"
        }
      },
      "required": [],
      "title": "gateway",
      "type": "object"
    },
    "global": {
      "additionalProperties": true,
      "description": "Global values are values that can be accessed from any chart or subchart by exactly the same name.",
      "properties": {
        "clusterDomain": {
          "default": "cluster.local",
          "description": "configures cluster domain (\"cluster.local\" by default)",
          "required": [],
          "title": "clusterDomain",
          "type": "string"
        },
        "commonLabels": {
          "additionalProperties": true,
          "description": "Common labels for all object directly managed by this chart.",
          "required": [],
          "title": "commonLabels",
          "type": "object"
        },
        "dnsNamespace": {
          "default": "kube-system",
          "description": "configures DNS service namespace",
          "required": [],
          "title": "dnsNamespace",
          "type": "string"
        },
        "dnsService": {
          "default": "kube-dns",
          "description": "configures DNS service name",
          "required": [],
          "title": "dnsService",
          "type": "string"
        },
        "extraArgs": {
          "description": "Common additional CLI arguments for all jobs (that is, -log.level debug, -config.expand-env=true or -log-config-reverse-order)\nscope: admin-api, backend, bloom-builder, bloom-gateway, bloom-planner, compactor, distributor, index-gateway, ingester, overrides-exporter, pattern-ingester, querier, query-frontend, query-scheduler, read, ruler, write.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraEnv": {
          "description": "Common environment variables to add to all pods directly managed by this chart.\nscope: admin-api, backend, bloom-builder, bloom-gateway, bloom-planner, compactor, distributor, index-gateway, ingester, overrides-exporter, pattern-ingester, querier, query-frontend, query-scheduler, read, ruler, write.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "Common source of environment injections to add to all pods directly managed by this chart.\nscope: admin-api, backend, bloom-builder, bloom-gateway, bloom-planner, compactor, distributor, index-gateway, ingester, overrides-exporter, pattern-ingester, querier, query-frontend, query-scheduler, read, ruler, write.\nFor example to inject values from a Secret, use:\nextraEnvFrom:\n  - secretRef:\n      name: mysecret",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "Common mount points to add to all pods directly managed by this chart.\nscope: admin-api, backend, bloom-builder, bloom-gateway, bloom-planner, compactor, distributor, index-gateway, ingester, overrides-exporter, pattern-ingester, querier, query-frontend, query-scheduler, read, ruler, write.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Common volumes to add to all pods directly managed by this chart.\nscope: admin-api, backend, bloom-builder, bloom-gateway, bloom-planner, compactor, distributor, index-gateway, ingester, overrides-exporter, pattern-ingester, querier, query-frontend, query-scheduler, read, ruler, write.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "registry": {
              "default": "null",
              "description": "Overrides the Docker registry globally for all images",
              "required": [],
              "title": "registry",
              "type": "null"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "priorityClassName": {
          "default": "null",
          "description": "Overrides the priorityClassName for all pods",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        }
      },
      "required": [],
      "title": "global",
      "type": "object"
    },
    "hostAliases": {
      "description": "hostAliases to add",
      "items": {
        "required": []
      },
      "required": [],
      "title": "hostAliases",
      "type": "array"
    },
    "ignoreChartChecksums": {
      "default": false,
      "description": "# Typically the deployment/statefulset includes checksums of secrets/config,\n# So that when these change on a subsequent helm install, the deployment/statefulset\n# is restarted. This can result in unnecessary restarts under GitOps tooling such as\n# flux, so set to \"true\" to disable this behaviour.",
      "required": [],
      "title": "ignoreChartChecksums",
      "type": "boolean"
    },
    "image": {
      "additionalProperties": true,
      "description": "# Set default image, imageTag, and imagePullPolicy. mode is used to indicate the\n#",
      "properties": {
        "pullPolicy": {
          "default": "IfNotPresent",
          "description": "Image pull policy",
          "required": [],
          "title": "pullPolicy",
          "type": "string"
        },
        "pullSecrets": {
          "description": "Image pull secrets",
          "items": {
            "required": []
          },
          "required": [],
          "title": "pullSecrets",
          "type": "array"
        },
        "registry": {
          "default": "docker.io",
          "description": "Image registry",
          "required": [],
          "title": "registry",
          "type": "string"
        },
        "repository": {
          "default": "grafana/rollout-operator",
          "description": "Image repo",
          "required": [],
          "title": "repository",
          "type": "string"
        },
        "tag": {
          "default": "",
          "description": "Overrides the image tag whose default is the chart appVersion.",
          "required": [],
          "title": "tag",
          "type": "string"
        }
      },
      "required": [],
      "title": "image",
      "type": "object"
    },
    "imagePullSecrets": {
      "description": "Image pull secrets for Docker images",
      "items": {
        "required": []
      },
      "required": [],
      "title": "imagePullSecrets",
      "type": "array"
    },
    "indexGateway": {
      "additionalProperties": true,
      "description": "Configuration for the index-gateway",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for index-gateway pods.\nThe value will be passed through tpl.",
          "properties": {
            "podAntiAffinity": {
              "additionalProperties": true,
              "properties": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "additionalProperties": true,
                    "properties": {
                      "labelSelector": {
                        "additionalProperties": true,
                        "properties": {
                          "matchLabels": {
                            "additionalProperties": true,
                            "properties": {
                              "app.kubernetes.io/component": {
                                "default": "index-gateway",
                                "required": [],
                                "title": "app.kubernetes.io/component",
                                "type": "string"
                              },
                              "app.kubernetes.io/instance": {
                                "default": "{{ .Release.Name }}",
                                "required": [],
                                "title": "app.kubernetes.io/instance",
                                "type": "string"
                              },
                              "app.kubernetes.io/name": {
                                "default": "{{ include \"loki.name\" . }}",
                                "required": [],
                                "title": "app.kubernetes.io/name",
                                "type": "string"
                              }
                            },
                            "required": [],
                            "title": "matchLabels",
                            "type": "object"
                          }
                        },
                        "required": [],
                        "title": "labelSelector",
                        "type": "object"
                      },
                      "topologyKey": {
                        "default": "kubernetes.io/hostname",
                        "required": [],
                        "title": "topologyKey",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "required": [],
                  "title": "requiredDuringSchedulingIgnoredDuringExecution",
                  "type": "array"
                }
              },
              "required": [],
              "title": "podAntiAffinity",
              "type": "object"
            }
          },
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "appProtocol": {
          "additionalProperties": true,
          "description": "Set the optional grpc service protocol. Ex: \"grpc\", \"http2\" or \"https\"",
          "properties": {
            "grpc": {
              "default": "",
              "required": [],
              "title": "grpc",
              "type": "string"
            }
          },
          "required": [],
          "title": "appProtocol",
          "type": "object"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "DNSConfig for index-gateway pods",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "extraArgs": {
          "description": "Additional CLI args for the index-gateway",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Containers to add to the index-gateway pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraEnv": {
          "description": "Environment variables to add to the index-gateway pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "Environment variables from secrets or configmaps to add to the index-gateway pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "Volume mounts to add to the index-gateway pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Volumes to add to the index-gateway pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostAliases": {
          "description": "hostAliases to add",
          "items": {
            "required": []
          },
          "required": [],
          "title": "hostAliases",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": " - ip: 1.2.3.4\n   hostnames:\n     - domain.tld\nUse the host's user namespace in the index-gateway",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "registry": {
              "default": "null",
              "description": "The Docker registry for the index-gateway image. Overrides `loki.image.registry`",
              "required": [],
              "title": "registry",
              "type": "null"
            },
            "repository": {
              "default": "null",
              "description": "Docker image repository for the index-gateway image. Overrides `loki.image.repository`",
              "required": [],
              "title": "repository",
              "type": "null"
            },
            "tag": {
              "default": "null",
              "description": "Docker image tag for the index-gateway image. Overrides `loki.image.tag`",
              "required": [],
              "title": "tag",
              "type": "null"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "initContainers": {
          "description": "Init containers to add to the index-gateway pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "joinMemberlist": {
          "default": true,
          "description": "Whether the index gateway should join the memberlist hashring",
          "required": [],
          "title": "joinMemberlist",
          "type": "boolean"
        },
        "maxUnavailable": {
          "default": "null",
          "description": "Pod Disruption Budget maxUnavailable",
          "required": [],
          "title": "maxUnavailable",
          "type": "null"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for index-gateway pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "persistence": {
          "additionalProperties": true,
          "properties": {
            "accessModes": {
              "description": "Set access modes on the PersistentVolumeClaim",
              "items": {
                "required": [],
                "type": "string"
              },
              "required": [],
              "title": "accessModes",
              "type": "array"
            },
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations for index gateway PVCs",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "enableStatefulSetAutoDeletePVC": {
              "default": false,
              "description": "Enable StatefulSetAutoDeletePVC feature",
              "required": [],
              "title": "enableStatefulSetAutoDeletePVC",
              "type": "boolean"
            },
            "enabled": {
              "default": false,
              "description": "Enable creating PVCs which is required when using boltdb-shipper",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "inMemory": {
              "default": false,
              "description": "Use emptyDir with ramdisk for storage. **Please note that all data in indexGateway will be lost on pod restart**",
              "required": [],
              "title": "inMemory",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels for index gateway PVCs",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "size": {
              "default": "10Gi",
              "description": "Size of persistent or memory disk",
              "required": [],
              "title": "size",
              "type": "string"
            },
            "storageClass": {
              "default": "null",
              "description": "Storage class to be used.\nIf defined, storageClassName: \u003cstorageClass\u003e.\nIf set to \"-\", storageClassName: \"\", which disables dynamic provisioning.\nIf empty or set to null, no storageClassName spec is\nset, choosing the default provisioner (gp2 on AWS, standard on GKE, AWS, and OpenStack).",
              "required": [],
              "title": "storageClass",
              "type": "null"
            },
            "whenDeleted": {
              "default": "Retain",
              "required": [],
              "title": "whenDeleted",
              "type": "string"
            },
            "whenScaled": {
              "default": "Retain",
              "required": [],
              "title": "whenScaled",
              "type": "string"
            }
          },
          "required": [],
          "title": "persistence",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for index-gateway pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels for index-gateway pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "null",
          "description": "The name of the PriorityClass for index-gateway pods",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        },
        "replicas": {
          "default": 0,
          "description": "Number of replicas for the index-gateway",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource requests and limits for the index-gateway",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "serviceAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for index-gateway service",
          "required": [],
          "title": "serviceAnnotations",
          "type": "object"
        },
        "serviceLabels": {
          "additionalProperties": true,
          "description": "Labels for index-gateway service",
          "required": [],
          "title": "serviceLabels",
          "type": "object"
        },
        "serviceType": {
          "default": "ClusterIP",
          "description": "Service type for index-gateway service",
          "required": [],
          "title": "serviceType",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "default": 300,
          "description": "Grace period to allow the index-gateway to shutdown before it is killed.",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "Tolerations for index-gateway pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "Topology Spread Constraints for index-gateway pods\nThe value will be passed through tpl.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        },
        "updateStrategy": {
          "additionalProperties": true,
          "description": "UpdateStrategy for the indexGateway StatefulSet.",
          "properties": {
            "type": {
              "default": "RollingUpdate",
              "description": "One of  'OnDelete' or 'RollingUpdate'",
              "required": [],
              "title": "type",
              "type": "string"
            }
          },
          "required": [],
          "title": "updateStrategy",
          "type": "object"
        }
      },
      "required": [],
      "title": "indexGateway",
      "type": "object"
    },
    "ingester": {
      "additionalProperties": true,
      "description": "Configuration for the ingester",
      "properties": {
        "addIngesterNamePrefix": {
          "default": false,
          "description": "optionally allow adding 'loki-' prefix to ingester name label",
          "required": [],
          "title": "addIngesterNamePrefix",
          "type": "boolean"
        },
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for ingester pods. Ignored if zoneAwareReplication is enabled.\nThe value will be passed through tpl.",
          "properties": {
            "podAntiAffinity": {
              "additionalProperties": true,
              "properties": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "additionalProperties": true,
                    "properties": {
                      "labelSelector": {
                        "additionalProperties": true,
                        "properties": {
                          "matchLabels": {
                            "additionalProperties": true,
                            "properties": {
                              "app.kubernetes.io/component": {
                                "default": "ingester",
                                "required": [],
                                "title": "app.kubernetes.io/component",
                                "type": "string"
                              },
                              "app.kubernetes.io/instance": {
                                "default": "{{ .Release.Name }}",
                                "required": [],
                                "title": "app.kubernetes.io/instance",
                                "type": "string"
                              },
                              "app.kubernetes.io/name": {
                                "default": "{{ include \"loki.name\" . }}",
                                "required": [],
                                "title": "app.kubernetes.io/name",
                                "type": "string"
                              }
                            },
                            "required": [],
                            "title": "matchLabels",
                            "type": "object"
                          }
                        },
                        "required": [],
                        "title": "labelSelector",
                        "type": "object"
                      },
                      "topologyKey": {
                        "default": "kubernetes.io/hostname",
                        "required": [],
                        "title": "topologyKey",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "required": [],
                  "title": "requiredDuringSchedulingIgnoredDuringExecution",
                  "type": "array"
                }
              },
              "required": [],
              "title": "podAntiAffinity",
              "type": "object"
            }
          },
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "appProtocol": {
          "additionalProperties": true,
          "description": "Adds the appProtocol field to the ingester service. This allows ingester to work with istio protocol selection.",
          "properties": {
            "grpc": {
              "default": "",
              "description": "Set the optional grpc service protocol. Ex: \"grpc\", \"http2\" or \"https\"",
              "required": [],
              "title": "grpc",
              "type": "string"
            }
          },
          "required": [],
          "title": "appProtocol",
          "type": "object"
        },
        "autoscaling": {
          "additionalProperties": true,
          "properties": {
            "behavior": {
              "additionalProperties": true,
              "description": "- type: Pods\n  pods:\n    metric:\n      name: loki_lines_total\n    target:\n      type: AverageValue\n      averageValue: 10k",
              "properties": {
                "enabled": {
                  "default": false,
                  "description": "Enable autoscaling behaviours",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "scaleDown": {
                  "additionalProperties": true,
                  "description": "define scale down policies, must conform to HPAScalingRules",
                  "required": [],
                  "title": "scaleDown",
                  "type": "object"
                },
                "scaleUp": {
                  "additionalProperties": true,
                  "description": "define scale up policies, must conform to HPAScalingRules",
                  "required": [],
                  "title": "scaleUp",
                  "type": "object"
                }
              },
              "required": [],
              "title": "behavior",
              "type": "object"
            },
            "customMetrics": {
              "description": "Allows one to define custom metrics using the HPA/v2 schema (for example, Pods, Object or External metrics)",
              "items": {
                "required": []
              },
              "required": [],
              "title": "customMetrics",
              "type": "array"
            },
            "enabled": {
              "default": false,
              "description": "Enable autoscaling for the ingester",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "maxReplicas": {
              "default": 3,
              "description": "Maximum autoscaling replicas for the ingester",
              "required": [],
              "title": "maxReplicas",
              "type": "integer"
            },
            "minReplicas": {
              "default": 1,
              "description": "Minimum autoscaling replicas for the ingester",
              "required": [],
              "title": "minReplicas",
              "type": "integer"
            },
            "targetCPUUtilizationPercentage": {
              "default": 60,
              "description": "Target CPU utilisation percentage for the ingester",
              "required": [],
              "title": "targetCPUUtilizationPercentage",
              "type": "integer"
            },
            "targetMemoryUtilizationPercentage": {
              "default": "null",
              "description": "Target memory utilisation percentage for the ingester",
              "required": [],
              "title": "targetMemoryUtilizationPercentage",
              "type": "null"
            }
          },
          "required": [],
          "title": "autoscaling",
          "type": "object"
        },
        "command": {
          "default": "null",
          "description": "Command to execute instead of defined in Docker image",
          "required": [],
          "title": "command",
          "type": "null"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "DNSConfig for ingester pods",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "extraArgs": {
          "description": "Additional CLI args for the ingester",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Containers to add to the ingester pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraEnv": {
          "description": "Environment variables to add to the ingester pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "Environment variables from secrets or configmaps to add to the ingester pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "Volume mounts to add to the ingester pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Volumes to add to the ingester pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostAliases": {
          "description": "hostAliases to add",
          "items": {
            "required": []
          },
          "required": [],
          "title": "hostAliases",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": " - ip: 1.2.3.4\n   hostnames:\n     - domain.tld\nUse the host's user namespace in the ingester",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "registry": {
              "default": "null",
              "description": "The Docker registry for the ingester image. Overrides `loki.image.registry`",
              "required": [],
              "title": "registry",
              "type": "null"
            },
            "repository": {
              "default": "null",
              "description": "Docker image repository for the ingester image. Overrides `loki.image.repository`",
              "required": [],
              "title": "repository",
              "type": "null"
            },
            "tag": {
              "default": "null",
              "description": "Docker image tag for the ingester image. Overrides `loki.image.tag`",
              "required": [],
              "title": "tag",
              "type": "null"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "initContainers": {
          "description": "Init containers to add to the ingester pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "labels": {
          "additionalProperties": true,
          "required": [],
          "title": "labels",
          "type": "object"
        },
        "lifecycle": {
          "additionalProperties": true,
          "description": "Lifecycle for the ingester container",
          "required": [],
          "title": "lifecycle",
          "type": "object"
        },
        "livenessProbe": {
          "additionalProperties": true,
          "description": "liveness probe settings for ingester pods. If empty use `loki.livenessProbe`",
          "required": [],
          "title": "livenessProbe",
          "type": "object"
        },
        "maxUnavailable": {
          "default": 1,
          "description": "Pod Disruption Budget maxUnavailable",
          "required": [],
          "title": "maxUnavailable",
          "type": "integer"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for ingester pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "persistence": {
          "additionalProperties": true,
          "properties": {
            "claims": {
              "description": "List of the ingester PVCs",
              "items": {
                "additionalProperties": true,
                "properties": {
                  "accessModes": {
                    "description": "Set access modes on the PersistentVolumeClaim",
                    "items": {
                      "required": [],
                      "type": "string"
                    },
                    "required": [],
                    "title": "accessModes",
                    "type": "array"
                  },
                  "name": {
                    "default": "data",
                    "required": [],
                    "title": "name",
                    "type": "string"
                  },
                  "size": {
                    "default": "10Gi",
                    "required": [],
                    "title": "size",
                    "type": "string"
                  },
                  "storageClass": {
                    "default": "null",
                    "description": "  -- Storage class to be used.\n  If defined, storageClassName: \u003cstorageClass\u003e.\n  If set to \"-\", storageClassName: \"\", which disables dynamic provisioning.\n  If empty or set to null, no storageClassName spec is\n  set, choosing the default provisioner (gp2 on AWS, standard on GKE, AWS, and OpenStack).",
                    "required": [],
                    "title": "storageClass",
                    "type": "null"
                  }
                },
                "required": [],
                "type": "object"
              },
              "required": [],
              "title": "claims",
              "type": "array"
            },
            "enableStatefulSetAutoDeletePVC": {
              "default": false,
              "description": "Enable StatefulSetAutoDeletePVC feature",
              "required": [],
              "title": "enableStatefulSetAutoDeletePVC",
              "type": "boolean"
            },
            "enabled": {
              "default": false,
              "description": "Enable creating PVCs which is required when using boltdb-shipper",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "inMemory": {
              "default": false,
              "description": "Use emptyDir with ramdisk for storage. **Please note that all data in ingester will be lost on pod restart**",
              "required": [],
              "title": "inMemory",
              "type": "boolean"
            },
            "whenDeleted": {
              "default": "Retain",
              "required": [],
              "title": "whenDeleted",
              "type": "string"
            },
            "whenScaled": {
              "default": "Retain",
              "required": [],
              "title": "whenScaled",
              "type": "string"
            }
          },
          "required": [],
          "title": "persistence",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for ingester pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels for ingester pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "null",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        },
        "readinessProbe": {
          "additionalProperties": true,
          "description": "readiness probe settings for ingester pods. If empty, use `loki.readinessProbe`",
          "required": [],
          "title": "readinessProbe",
          "type": "object"
        },
        "replicas": {
          "default": 0,
          "description": "Number of replicas for the ingester, when zoneAwareReplication.enabled is true, the total\nnumber of replicas will match this value with each zone having 1/3rd of the total replicas.",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource requests and limits for the ingester",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "rolloutGroupPrefix": {
          "default": "null",
          "description": "optionally allow adding arbitrary prefix to the ingester rollout-group label",
          "required": [],
          "title": "rolloutGroupPrefix",
          "type": "null"
        },
        "serviceAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for ingestor service",
          "required": [],
          "title": "serviceAnnotations",
          "type": "object"
        },
        "serviceLabels": {
          "additionalProperties": true,
          "description": "The name of the PriorityClass for ingester pods\nLabels for ingestor service",
          "required": [],
          "title": "serviceLabels",
          "type": "object"
        },
        "serviceType": {
          "default": "ClusterIP",
          "description": "Service type for ingestor service",
          "required": [],
          "title": "serviceType",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "default": 300,
          "description": "Grace period to allow the ingester to shutdown before it is killed. Especially for the ingestor,\nthis must be increased. It must be long enough so ingesters can be gracefully shutdown flushing/transferring\nall data and to successfully leave the member ring on shutdown.",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "Tolerations for ingester pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "topologySpread for ingester pods.\nThe value will be passed through tpl.",
          "items": {
            "additionalProperties": true,
            "properties": {
              "labelSelector": {
                "additionalProperties": true,
                "properties": {
                  "matchLabels": {
                    "additionalProperties": true,
                    "properties": {
                      "app.kubernetes.io/component": {
                        "default": "ingester",
                        "required": [],
                        "title": "app.kubernetes.io/component",
                        "type": "string"
                      },
                      "app.kubernetes.io/instance": {
                        "default": "{{ .Release.Name }}",
                        "required": [],
                        "title": "app.kubernetes.io/instance",
                        "type": "string"
                      },
                      "app.kubernetes.io/name": {
                        "default": "{{ include \"loki.name\" . }}",
                        "required": [],
                        "title": "app.kubernetes.io/name",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "title": "matchLabels",
                    "type": "object"
                  }
                },
                "required": [],
                "title": "labelSelector",
                "type": "object"
              },
              "maxSkew": {
                "default": 1,
                "required": [],
                "title": "maxSkew",
                "type": "integer"
              },
              "topologyKey": {
                "default": "kubernetes.io/hostname",
                "required": [],
                "title": "topologyKey",
                "type": "string"
              },
              "whenUnsatisfiable": {
                "default": "ScheduleAnyway",
                "required": [],
                "title": "whenUnsatisfiable",
                "type": "string"
              }
            },
            "required": [],
            "type": "object"
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        },
        "updateStrategy": {
          "additionalProperties": true,
          "description": "UpdateStrategy for the ingester StatefulSets.",
          "properties": {
            "type": {
              "default": "RollingUpdate",
              "description": "One of  'OnDelete' or 'RollingUpdate'",
              "required": [],
              "title": "type",
              "type": "string"
            }
          },
          "required": [],
          "title": "updateStrategy",
          "type": "object"
        },
        "zoneAwareReplication": {
          "additionalProperties": true,
          "description": "Enabling zone awareness on ingesters will create 3 statefulests where all writes will send a replica to each zone.\nThis is primarily intended to accelerate rollout operations by allowing for multiple ingesters within a single\nzone to be shutdown and restart simultaneously (the remaining 2 zones will be guaranteed to have at least one copy\nof the data).\nNote: This can be used to run Loki over multiple cloud provider availability zones however this is not currently\nrecommended as Loki is not optimized for this and cross zone network traffic costs can become extremely high\nextremely quickly. Even with zone awareness enabled, it is recommended to run Loki in a single availability zone.",
          "properties": {
            "enabled": {
              "default": true,
              "description": "Enable zone awareness.",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "maxUnavailablePct": {
              "default": 33,
              "description": "The percent of replicas in each zone that will be restarted at once. In a value of 0-100",
              "required": [],
              "title": "maxUnavailablePct",
              "type": "integer"
            },
            "migration": {
              "additionalProperties": true,
              "description": "The migration block allows migrating non zone aware ingesters to zone aware ingesters.",
              "properties": {
                "enabled": {
                  "default": false,
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "excludeDefaultZone": {
                  "default": false,
                  "required": [],
                  "title": "excludeDefaultZone",
                  "type": "boolean"
                },
                "readPath": {
                  "default": false,
                  "required": [],
                  "title": "readPath",
                  "type": "boolean"
                },
                "writePath": {
                  "default": false,
                  "required": [],
                  "title": "writePath",
                  "type": "boolean"
                }
              },
              "required": [],
              "title": "migration",
              "type": "object"
            },
            "zoneA": {
              "additionalProperties": true,
              "description": "zoneA configuration",
              "properties": {
                "annotations": {
                  "additionalProperties": true,
                  "description": "Specific annotations to add to zone A statefulset",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "extraAffinity": {
                  "additionalProperties": true,
                  "description": "optionally define extra affinity rules, by default different zones are not allowed to schedule on the same host\nThe value will be passed through tpl.",
                  "required": [],
                  "title": "extraAffinity",
                  "type": "object"
                },
                "nodeSelector": {
                  "default": "null",
                  "description": "optionally define a node selector for this zone",
                  "required": [],
                  "title": "nodeSelector",
                  "type": "null"
                },
                "podAnnotations": {
                  "additionalProperties": true,
                  "description": "Specific annotations to add to zone A pods",
                  "required": [],
                  "title": "podAnnotations",
                  "type": "object"
                }
              },
              "required": [],
              "title": "zoneA",
              "type": "object"
            },
            "zoneB": {
              "additionalProperties": true,
              "properties": {
                "annotations": {
                  "additionalProperties": true,
                  "description": "Specific annotations to add to zone B statefulset",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "extraAffinity": {
                  "additionalProperties": true,
                  "description": "optionally define extra affinity rules, by default different zones are not allowed to schedule on the same host\nThe value will be passed through tpl.",
                  "required": [],
                  "title": "extraAffinity",
                  "type": "object"
                },
                "nodeSelector": {
                  "default": "null",
                  "description": "optionally define a node selector for this zone",
                  "required": [],
                  "title": "nodeSelector",
                  "type": "null"
                },
                "podAnnotations": {
                  "additionalProperties": true,
                  "description": "Specific annotations to add to zone B pods",
                  "required": [],
                  "title": "podAnnotations",
                  "type": "object"
                }
              },
              "required": [],
              "title": "zoneB",
              "type": "object"
            },
            "zoneC": {
              "additionalProperties": true,
              "properties": {
                "annotations": {
                  "additionalProperties": true,
                  "description": "Specific annotations to add to zone C statefulset",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "extraAffinity": {
                  "additionalProperties": true,
                  "description": "optionally define extra affinity rules, by default different zones are not allowed to schedule on the same host\nThe value will be passed through tpl.",
                  "required": [],
                  "title": "extraAffinity",
                  "type": "object"
                },
                "nodeSelector": {
                  "default": "null",
                  "description": "optionally define a node selector for this zone",
                  "required": [],
                  "title": "nodeSelector",
                  "type": "null"
                },
                "podAnnotations": {
                  "additionalProperties": true,
                  "description": "Specific annotations to add to zone C pods",
                  "required": [],
                  "title": "podAnnotations",
                  "type": "object"
                }
              },
              "required": [],
              "title": "zoneC",
              "type": "object"
            }
          },
          "required": [],
          "title": "zoneAwareReplication",
          "type": "object"
        }
      },
      "required": [],
      "title": "ingester",
      "type": "object"
    },
    "ingress": {
      "additionalProperties": true,
      "description": "Ingress configuration Use either this ingress or the gateway, but not both at once.\nIf you enable this, make sure to disable the gateway.\nYou'll need to supply authn configuration for your ingress controller.",
      "properties": {
        "annotations": {
          "additionalProperties": true,
          "description": "node-role.kubernetes.io/ingress: platform",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "enabled": {
          "default": false,
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "hosts": {
          "description": "Hosts configuration for the ingress, passed through the `tpl` function to allow templating",
          "items": {
            "required": [],
            "type": "string"
          },
          "required": [],
          "title": "hosts",
          "type": "array"
        },
        "ingressClassName": {
          "default": "",
          "required": [],
          "title": "ingressClassName",
          "type": "string"
        },
        "labels": {
          "additionalProperties": true,
          "description": "   nginx.ingress.kubernetes.io/auth-type: basic\n   nginx.ingress.kubernetes.io/auth-secret: loki-distributed-basic-auth\n   nginx.ingress.kubernetes.io/auth-secret-type: auth-map\n   nginx.ingress.kubernetes.io/configuration-snippet: |\n     proxy_set_header X-Scope-OrgID $remote_user;",
          "required": [],
          "title": "labels",
          "type": "object"
        },
        "path": {
          "default": "/",
          "description": "kubernetes.io/ingress.class: nginx\nkubernetes.io/tls-acme: \"true\"\nkubernetes.io/ingress.allow-http: \"false\"\nkubernetes.io/ingress.global-static-ip-name: \"\"\nnginx.ingress.kubernetes.io/secure-backends: \"true\"\nnginx.ingress.kubernetes.io/backend-protocol: \"HTTPS\"\nnginx.ingress.kubernetes.io/whitelist-source-range: 0.0.0.0/0",
          "required": [],
          "title": "path",
          "type": "string"
        },
        "paths": {
          "additionalProperties": true,
          "description": "   blackbox.monitoring.exclude: \"true\"",
          "properties": {
            "compactor": {
              "description": "Paths that are exposed by Loki Compactor.\nIf deployment mode is Distributed, the requests are forwarded to the service: `{{\"loki.compactorFullname\"}}`.\nIf deployment mode is SimpleScalable, the requests are forwarded to k8s service: `{{\"loki.backendFullname\"}}`.\nIf deployment mode is SingleBinary, the requests are forwarded to the central/single k8s service: `{{\"loki.singleBinaryFullname\"}}`",
              "items": {
                "required": [],
                "type": "string"
              },
              "required": [],
              "title": "compactor",
              "type": "array"
            },
            "distributor": {
              "description": "Paths that are exposed by Loki Distributor.\nIf deployment mode is Distributed, the requests are forwarded to the service: `{{\"loki.distributorFullname\"}}`.\nIf deployment mode is SimpleScalable, the requests are forwarded to write k8s service: `{{\"loki.writeFullname\"}}`.\nIf deployment mode is SingleBinary, the requests are forwarded to the central/single k8s service: `{{\"loki.singleBinaryFullname\"}}`",
              "items": {
                "required": [],
                "type": "string"
              },
              "required": [],
              "title": "distributor",
              "type": "array"
            },
            "queryFrontend": {
              "description": "Paths that are exposed by Loki Query Frontend.\nIf deployment mode is Distributed, the requests are forwarded to the service: `{{\"loki.queryFrontendFullname\"}}`.\nIf deployment mode is SimpleScalable, the requests are forwarded to write k8s service: `{{\"loki.readFullname\"}}`.\nIf deployment mode is SingleBinary, the requests are forwarded to the central/single k8s service: `{{\"loki.singleBinaryFullname\"}}`",
              "items": {
                "required": [],
                "type": "string"
              },
              "required": [],
              "title": "queryFrontend",
              "type": "array"
            },
            "ruler": {
              "description": "Paths that are exposed by Loki Ruler.\nIf deployment mode is Distributed, the requests are forwarded to the service: `{{\"loki.rulerFullname\"}}`.\nIf deployment mode is SimpleScalable, the requests are forwarded to k8s service: `{{\"loki.backendFullname\"}}`.\nIf deployment mode is SimpleScalable but `read.legacyReadTarget` is `true`, the requests are forwarded to k8s service: `{{\"loki.readFullname\"}}`.\nIf deployment mode is SingleBinary, the requests are forwarded to the central/single k8s service: `{{\"loki.singleBinaryFullname\"}}`",
              "items": {
                "required": [],
                "type": "string"
              },
              "required": [],
              "title": "ruler",
              "type": "array"
            }
          },
          "required": [],
          "title": "paths",
          "type": "object"
        },
        "tls": {
          "description": "TLS configuration for the ingress. Hosts passed through the `tpl` function to allow templating",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tls",
          "type": "array"
        }
      },
      "required": [],
      "title": "ingress",
      "type": "object"
    },
    "kubeVersionOverride": {
      "default": "null",
      "description": "Overrides the version used to determine compatibility of resources with the target Kubernetes cluster.\nThis is useful when using `helm template`, because then helm will use the client version of kubectl as the Kubernetes version,\nwhich may or may not match your cluster's server version. Example: 'v1.24.4'. Set to null to use the version that helm\ndevises.",
      "required": [],
      "title": "kubeVersionOverride",
      "type": "null"
    },
    "kubeletService": {
      "additionalProperties": true,
      "description": "If both are set, Agent Operator will create and maintain a service for scraping kubelets\nhttps://grafana.com/docs/agent/latest/operator/getting-started/#monitor-kubelets",
      "properties": {
        "namespace": {
          "default": "default",
          "required": [],
          "title": "namespace",
          "type": "string"
        },
        "serviceName": {
          "default": "kubelet",
          "required": [],
          "title": "serviceName",
          "type": "string"
        }
      },
      "required": [],
      "title": "kubeletService",
      "type": "object"
    },
    "loki": {
      "additionalProperties": true,
      "description": "#####################################################################################################################\n\nBase Loki Configs including kubernetes configurations and configurations for Loki itself,\nsee below for more specifics on Loki's configuration.\n\n#####################################################################################################################\nConfiguration for running Loki",
      "properties": {
        "analytics": {
          "additionalProperties": true,
          "description": " Optional analytics configuration",
          "required": [],
          "title": "analytics",
          "type": "object"
        },
        "annotations": {
          "additionalProperties": true,
          "description": "Common annotations for all deployments/StatefulSets",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "auth_enabled": {
          "default": true,
          "description": "Should authentication be enabled",
          "required": [],
          "title": "auth_enabled",
          "type": "boolean"
        },
        "block_builder": {
          "additionalProperties": true,
          "description": " Optional block builder configuration",
          "required": [],
          "title": "block_builder",
          "type": "object"
        },
        "bloom_build": {
          "additionalProperties": true,
          "properties": {
            "builder": {
              "additionalProperties": true,
              "properties": {
                "planner_address": {
                  "default": "{{ include \"loki.bloomPlannerAddress\" . }}",
                  "required": [],
                  "title": "planner_address",
                  "type": "string"
                }
              },
              "required": [],
              "title": "builder",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "required": [],
              "title": "enabled",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "bloom_build",
          "type": "object"
        },
        "bloom_gateway": {
          "additionalProperties": true,
          "properties": {
            "client": {
              "additionalProperties": true,
              "properties": {
                "addresses": {
                  "default": "{{ include \"loki.bloomGatewayAddresses\" . }}",
                  "required": [],
                  "title": "addresses",
                  "type": "string"
                }
              },
              "required": [],
              "title": "client",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "required": [],
              "title": "enabled",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "bloom_gateway",
          "type": "object"
        },
        "commonConfig": {
          "additionalProperties": true,
          "description": "Check https://grafana.com/docs/loki/latest/configuration/#common_config for more info on how to provide a common configuration",
          "properties": {
            "compactor_grpc_address": {
              "default": "{{ include \"loki.compactorAddress\" . }}",
              "description": "The gRPC address of the compactor. The use of compactor_grpc_address is prefered over compactor_address.\nIf a customized compactor_address is set, compactor_grpc_address should be set to an empty string.",
              "required": [],
              "title": "compactor_grpc_address",
              "type": "string"
            },
            "path_prefix": {
              "default": "/var/loki",
              "required": [],
              "title": "path_prefix",
              "type": "string"
            },
            "replication_factor": {
              "default": 3,
              "required": [],
              "title": "replication_factor",
              "type": "integer"
            }
          },
          "required": [],
          "title": "commonConfig",
          "type": "object"
        },
        "compactor": {
          "additionalProperties": true,
          "description": " Optional compactor configuration",
          "required": [],
          "title": "compactor",
          "type": "object"
        },
        "compactor_grpc_client": {
          "additionalProperties": true,
          "description": " Optional compactor grpc client configuration",
          "required": [],
          "title": "compactor_grpc_client",
          "type": "object"
        },
        "config": {
          "default": "{{- if .Values.enterprise.enabled}}\n{{- tpl .Values.enterprise.config . }}\n{{- else }}\nauth_enabled: {{ .Values.loki.auth_enabled }}\n{{- end }}\n\n{{- with .Values.loki.server }}\nserver:\n  {{- toYaml . | nindent 2}}\n{{- end}}\n\n{{- with .Values.loki.pattern_ingester }}\npattern_ingester:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\nmemberlist:\n{{- if .Values.loki.memberlistConfig }}\n  {{- toYaml .Values.loki.memberlistConfig | nindent 2 }}\n{{- else }}\n{{- if .Values.loki.extraMemberlistConfig}}\n{{- toYaml .Values.loki.extraMemberlistConfig | nindent 2}}\n{{- end }}\n  join_members:\n    - {{ include \"loki.memberlist\" . }}\n    {{- with .Values.migrate.fromDistributed }}\n    {{- if .enabled }}\n    - {{ .memberlistService }}\n    {{- end }}\n    {{- end }}\n{{- end }}\n\n{{- with .Values.loki.ingester }}\ningester:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\n{{- with .Values.loki.ingester_client }}\ningester_client:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\n{{- with .Values.loki.block_builder }}\nblock_builder:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\n{{- if .Values.loki.commonConfig}}\ncommon:\n{{- toYaml .Values.loki.commonConfig | nindent 2}}\n  storage:\n  {{- include \"loki.commonStorageConfig\" . | nindent 4}}\n{{- end}}\n\n{{- with .Values.loki.limits_config }}\nlimits_config:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\nruntime_config:\n  file: /etc/loki/runtime-config/runtime-config.yaml\n\n{{- if .Values.chunksCache.enabled }}\n{{- with .Values.chunksCache }}\nchunk_store_config:\n  chunk_cache_config:\n    default_validity: {{ .defaultValidity }}\n    background:\n      writeback_goroutines: {{ .writebackParallelism }}\n      writeback_buffer: {{ .writebackBuffer }}\n      writeback_size_limit: {{ .writebackSizeLimit }}\n    memcached:\n      batch_size: {{ .batchSize }}\n      parallelism: {{ .parallelism }}\n    memcached_client:\n      addresses: {{ .addresses }}\n      consistent_hash: true\n      timeout: {{ .timeout }}\n      max_idle_conns: 72\n  {{- end }}\n  {{- with .Values.chunksCache.l2 }}\n  {{- if .enabled }}\n  l2_chunk_cache_handoff: {{ .l2ChunkCacheHandoff }}\n  chunk_cache_config_l2:\n    default_validity: {{ .defaultValidity }}\n    background:\n      writeback_goroutines: {{ .writebackParallelism }}\n      writeback_buffer: {{ .writebackBuffer }}\n      writeback_size_limit: {{ .writebackSizeLimit }}\n    memcached:\n      batch_size: {{ .batchSize }}\n      parallelism: {{ .parallelism }}\n    memcached_client:\n      addresses: {{ .addresses }}\n      consistent_hash: true\n      timeout: {{ .timeout }}\n      max_idle_conns: 72\n  {{- end }}\n  {{- end }}\n{{- end }}\n\n{{- if .Values.loki.schemaConfig }}\nschema_config:\n{{- toYaml .Values.loki.schemaConfig | nindent 2}}\n{{- end }}\n\n{{- if .Values.loki.useTestSchema }}\nschema_config:\n{{- toYaml .Values.loki.testSchemaConfig | nindent 2}}\n{{- end }}\n\n{{- if .Values.ruler.enabled }}\n{{ include \"loki.rulerConfig\" . }}\n{{- end }}\n\n{{- if and .Values.loki.storage.use_thanos_objstore .Values.ruler.enabled}}\nruler_storage:\n  {{- include \"loki.rulerThanosStorageConfig\" . | nindent 2 }}\n{{- end }}\n\n{{- if or .Values.tableManager.retention_deletes_enabled .Values.tableManager.retention_period }}\ntable_manager:\n  retention_deletes_enabled: {{ .Values.tableManager.retention_deletes_enabled }}\n  retention_period: {{ .Values.tableManager.retention_period }}\n{{- end }}\n\nquery_range:\n  align_queries_with_step: true\n  {{- with .Values.loki.query_range }}\n  {{- tpl (. | toYaml) $ | nindent 2 }}\n  {{- end }}\n  {{- if .Values.resultsCache.enabled }}\n  {{- with .Values.resultsCache }}\n  cache_results: true\n  results_cache:\n    cache:\n      default_validity: {{ .defaultValidity }}\n      background:\n        writeback_goroutines: {{ .writebackParallelism }}\n        writeback_buffer: {{ .writebackBuffer }}\n        writeback_size_limit: {{ .writebackSizeLimit }}\n      memcached_client:\n        addresses: {{ .addresses }}\n        consistent_hash: true\n        timeout: {{ .timeout }}\n        update_interval: 1m\n  {{- end }}\n  {{- end }}\n\n{{- with .Values.loki.storage_config }}\nstorage_config:\n    {{- if not (hasKey $.Values.loki.storage_config \"use_thanos_objstore\") }}\n    use_thanos_objstore: {{ $.Values.loki.storage.use_thanos_objstore }}\n    {{- end }}\n    {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\n{{- with .Values.loki.query_scheduler }}\nquery_scheduler:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\n{{- with .Values.loki.compactor }}\ncompactor:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\n{{- with .Values.loki.compactor_grpc_client }}\ncompactor_grpc_client:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\n{{- with .Values.loki.analytics }}\nanalytics:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\n{{- if .Values.loki.ui.enabled }}\nui:\n  enabled: true\n  discovery:\n    join_peers:\n      - '{{ include \"loki.queryFrontendFullname\" . }}.{{ include \"loki.namespace\" . }}.svc.{{ .Values.global.clusterDomain }}'\n{{- end }}\n{{- with .Values.loki.querier }}\nquerier:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\n{{- with .Values.loki.index_gateway }}\nindex_gateway:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\n{{- with .Values.loki.frontend }}\nfrontend:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\n{{- with .Values.loki.frontend_worker }}\nfrontend_worker:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\n{{- with .Values.loki.distributor }}\ndistributor:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\ntracing:\n  enabled: {{ .Values.loki.tracing.enabled }}\n\n{{- with .Values.loki.bloom_build }}\nbloom_build:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\n{{- with .Values.loki.bloom_gateway }}\nbloom_gateway:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n\n{{- with .Values.loki.operational_config }}\noperational_config:\n  {{- tpl (. | toYaml) $ | nindent 4 }}\n{{- end }}\n",
          "description": "Config file contents for Loki",
          "required": [],
          "title": "config",
          "type": "string"
        },
        "configObjectName": {
          "default": "{{ include \"loki.name\" . }}",
          "description": "The name of the object which Loki will mount as a volume containing the config.\nIf the configStorageType is Secret, this will be the name of the Secret, if it is ConfigMap, this will be the name of the ConfigMap.\nThe value will be passed through tpl.",
          "required": [],
          "title": "configObjectName",
          "type": "string"
        },
        "configStorageType": {
          "default": "ConfigMap",
          "description": "Defines what kind of object stores the configuration, a ConfigMap or a Secret.\nIn order to move sensitive information (such as credentials) from the ConfigMap/Secret to a more secure location (e.g. vault), it is possible to use [environment variables in the configuration](https://grafana.com/docs/loki/latest/configuration/#use-environment-variables-in-the-configuration).\nSuch environment variables can be then stored in a separate Secret and injected via the global.extraEnvFrom value. For details about environment injection from a Secret please see [Secrets](https://kubernetes.io/docs/concepts/configuration/secret/#use-case-as-container-environment-variables).",
          "required": [],
          "title": "configStorageType",
          "type": "string"
        },
        "containerSecurityContext": {
          "additionalProperties": true,
          "description": "The SecurityContext for Loki containers",
          "properties": {
            "allowPrivilegeEscalation": {
              "default": false,
              "required": [],
              "title": "allowPrivilegeEscalation",
              "type": "boolean"
            },
            "capabilities": {
              "additionalProperties": true,
              "properties": {
                "drop": {
                  "items": {
                    "required": [],
                    "type": "string"
                  },
                  "required": [],
                  "title": "drop",
                  "type": "array"
                }
              },
              "required": [],
              "title": "capabilities",
              "type": "object"
            },
            "readOnlyRootFilesystem": {
              "default": true,
              "required": [],
              "title": "readOnlyRootFilesystem",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "containerSecurityContext",
          "type": "object"
        },
        "distributor": {
          "additionalProperties": true,
          "description": "Optional distributor configuration",
          "required": [],
          "title": "distributor",
          "type": "object"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "DNS config for Loki pods",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "enableServiceLinks": {
          "default": true,
          "description": "Should enableServiceLinks be enabled. Default to enable",
          "required": [],
          "title": "enableServiceLinks",
          "type": "boolean"
        },
        "extraMemberlistConfig": {
          "additionalProperties": true,
          "description": "Extra memberlist configuration",
          "required": [],
          "title": "extraMemberlistConfig",
          "type": "object"
        },
        "frontend": {
          "additionalProperties": true,
          "properties": {
            "scheduler_address": {
              "default": "{{ include \"loki.querySchedulerAddress\" . }}",
              "required": [],
              "title": "scheduler_address",
              "type": "string"
            },
            "tail_proxy_url": {
              "default": "{{ include \"loki.querierAddress\" . }}",
              "required": [],
              "title": "tail_proxy_url",
              "type": "string"
            }
          },
          "required": [],
          "title": "frontend",
          "type": "object"
        },
        "frontend_worker": {
          "additionalProperties": true,
          "properties": {
            "scheduler_address": {
              "default": "{{ include \"loki.querySchedulerAddress\" . }}",
              "required": [],
              "title": "scheduler_address",
              "type": "string"
            }
          },
          "required": [],
          "title": "frontend_worker",
          "type": "object"
        },
        "generatedConfigObjectName": {
          "default": "{{ include \"loki.name\" . }}",
          "description": "The name of the Secret or ConfigMap that will be created by this chart.\nIf empty, no configmap or secret will be created.\nThe value will be passed through tpl.",
          "required": [],
          "title": "generatedConfigObjectName",
          "type": "string"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "digest": {
              "default": "null",
              "description": "Overrides the image tag with an image digest",
              "required": [],
              "title": "digest",
              "type": "null"
            },
            "pullPolicy": {
              "default": "IfNotPresent",
              "description": "Docker image pull policy",
              "required": [],
              "title": "pullPolicy",
              "type": "string"
            },
            "registry": {
              "default": "docker.io",
              "description": "The Docker registry",
              "required": [],
              "title": "registry",
              "type": "string"
            },
            "repository": {
              "default": "grafana/loki",
              "description": "Docker image repository",
              "required": [],
              "title": "repository",
              "type": "string"
            },
            "tag": {
              "default": "3.5.5",
              "description": "Overrides the image tag whose default is the chart's appVersion",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "index_gateway": {
          "additionalProperties": true,
          "description": " Optional index gateway configuration",
          "properties": {
            "mode": {
              "default": "simple",
              "required": [],
              "title": "mode",
              "type": "string"
            }
          },
          "required": [],
          "title": "index_gateway",
          "type": "object"
        },
        "ingester": {
          "additionalProperties": true,
          "description": " Optional ingester configuration",
          "properties": {
            "chunk_encoding": {
              "required": [],
              "title": "chunk_encoding",
              "type": "string"
            }
          },
          "required": [],
          "title": "ingester",
          "type": "object"
        },
        "ingester_client": {
          "additionalProperties": true,
          "description": " Optional ingester client configuration",
          "required": [],
          "title": "ingester_client",
          "type": "object"
        },
        "limits_config": {
          "additionalProperties": true,
          "description": "Limits config",
          "properties": {
            "max_cache_freshness_per_query": {
              "default": "10m",
              "required": [],
              "title": "max_cache_freshness_per_query",
              "type": "string"
            },
            "query_timeout": {
              "default": "300s",
              "required": [],
              "title": "query_timeout",
              "type": "string"
            },
            "reject_old_samples": {
              "default": true,
              "required": [],
              "title": "reject_old_samples",
              "type": "boolean"
            },
            "reject_old_samples_max_age": {
              "default": "168h",
              "required": [],
              "title": "reject_old_samples_max_age",
              "type": "string"
            },
            "split_queries_by_interval": {
              "default": "15m",
              "required": [],
              "title": "split_queries_by_interval",
              "type": "string"
            },
            "volume_enabled": {
              "default": true,
              "required": [],
              "title": "volume_enabled",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "limits_config",
          "type": "object"
        },
        "livenessProbe": {
          "additionalProperties": true,
          "description": "Configures the liveness probe for all of the Loki pods",
          "required": [],
          "title": "livenessProbe",
          "type": "object"
        },
        "memberlistConfig": {
          "additionalProperties": true,
          "description": "memberlist configuration (overrides embedded default)",
          "required": [],
          "title": "memberlistConfig",
          "type": "object"
        },
        "operational_config": {
          "additionalProperties": true,
          "description": "Optional operational configuration",
          "required": [],
          "title": "operational_config",
          "type": "object"
        },
        "pattern_ingester": {
          "additionalProperties": true,
          "description": " Optional pattern ingester configuration",
          "properties": {
            "enabled": {
              "default": false,
              "required": [],
              "title": "enabled",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "pattern_ingester",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Common annotations for all pods",
          "properties": {
            "prometheus.io/port": {
              "required": [],
              "title": "prometheus.io/port",
              "type": "string"
            },
            "prometheus.io/scrape": {
              "required": [],
              "title": "prometheus.io/scrape",
              "type": "string"
            }
          },
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Common labels for all pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "podSecurityContext": {
          "additionalProperties": true,
          "description": "The SecurityContext for Loki pods",
          "properties": {
            "fsGroup": {
              "default": 10001,
              "required": [],
              "title": "fsGroup",
              "type": "integer"
            },
            "runAsGroup": {
              "default": 10001,
              "required": [],
              "title": "runAsGroup",
              "type": "integer"
            },
            "runAsNonRoot": {
              "default": true,
              "required": [],
              "title": "runAsNonRoot",
              "type": "boolean"
            },
            "runAsUser": {
              "default": 10001,
              "required": [],
              "title": "runAsUser",
              "type": "integer"
            }
          },
          "required": [],
          "title": "podSecurityContext",
          "type": "object"
        },
        "querier": {
          "additionalProperties": true,
          "description": " Optional querier configuration",
          "properties": {
            "max_concurrent": {
              "description": "Default is 4, if you have enough memory and CPU you can increase, reduce if OOMing",
              "required": [],
              "title": "max_concurrent",
              "type": "integer"
            }
          },
          "required": [],
          "title": "querier",
          "type": "object"
        },
        "query_range": {
          "additionalProperties": true,
          "description": " Optional querier configuration",
          "required": [],
          "title": "query_range",
          "type": "object"
        },
        "query_scheduler": {
          "additionalProperties": true,
          "description": "Additional query scheduler config",
          "required": [],
          "title": "query_scheduler",
          "type": "object"
        },
        "readinessProbe": {
          "additionalProperties": true,
          "description": "Configures the readiness probe for all of the Loki pods",
          "properties": {
            "httpGet": {
              "additionalProperties": true,
              "properties": {
                "path": {
                  "default": "/ready",
                  "required": [],
                  "title": "path",
                  "type": "string"
                },
                "port": {
                  "default": "http-metrics",
                  "required": [],
                  "title": "port",
                  "type": "string"
                }
              },
              "required": [],
              "title": "httpGet",
              "type": "object"
            },
            "initialDelaySeconds": {
              "default": 30,
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 1,
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "readinessProbe",
          "type": "object"
        },
        "revisionHistoryLimit": {
          "default": 10,
          "description": "The number of old ReplicaSets to retain to allow rollback",
          "required": [],
          "title": "revisionHistoryLimit",
          "type": "integer"
        },
        "rulerConfig": {
          "additionalProperties": true,
          "description": "# A separate loki ruler storage configuration can be provided via rulerStorage.storage section:\n#  rulerConfig:\n#    storage:\n#      type: local\nCheck https://grafana.com/docs/loki/latest/configuration/#ruler for more info on configuring ruler",
          "properties": {
            "wal": {
              "additionalProperties": true,
              "properties": {
                "dir": {
                  "default": "/var/loki/ruler-wal",
                  "required": [],
                  "title": "dir",
                  "type": "string"
                }
              },
              "required": [],
              "title": "wal",
              "type": "object"
            }
          },
          "required": [],
          "title": "rulerConfig",
          "type": "object"
        },
        "runtimeConfig": {
          "additionalProperties": true,
          "description": "Provides a reloadable runtime configuration file for some specific configuration",
          "required": [],
          "title": "runtimeConfig",
          "type": "object"
        },
        "schemaConfig": {
          "additionalProperties": true,
          "description": "Check https://grafana.com/docs/loki/latest/configuration/#schema_config for more info on how to configure schemas",
          "properties": {
            "configs": {
              "items": {
                "additionalProperties": true,
                "properties": {
                  "from": {
                    "required": [],
                    "title": "from",
                    "type": "string"
                  },
                  "index": {
                    "additionalProperties": true,
                    "properties": {
                      "period": {
                        "required": [],
                        "title": "period",
                        "type": "string"
                      },
                      "prefix": {
                        "required": [],
                        "title": "prefix",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "title": "index",
                    "type": "object"
                  },
                  "object_store": {
                    "required": [],
                    "title": "object_store",
                    "type": "string"
                  },
                  "schema": {
                    "required": [],
                    "title": "schema",
                    "type": "string"
                  },
                  "store": {
                    "required": [],
                    "title": "store",
                    "type": "string"
                  }
                },
                "required": [],
                "type": "object"
              },
              "required": [],
              "title": "configs",
              "type": "array"
            }
          },
          "required": [],
          "title": "schemaConfig",
          "type": "object"
        },
        "server": {
          "additionalProperties": true,
          "description": "Check https://grafana.com/docs/loki/latest/configuration/#server for more info on the server configuration.",
          "properties": {
            "grpc_listen_port": {
              "default": 9095,
              "required": [],
              "title": "grpc_listen_port",
              "type": "integer"
            },
            "http_listen_port": {
              "default": 3100,
              "required": [],
              "title": "http_listen_port",
              "type": "integer"
            },
            "http_server_read_timeout": {
              "default": "600s",
              "required": [],
              "title": "http_server_read_timeout",
              "type": "string"
            },
            "http_server_write_timeout": {
              "default": "600s",
              "required": [],
              "title": "http_server_write_timeout",
              "type": "string"
            }
          },
          "required": [],
          "title": "server",
          "type": "object"
        },
        "serviceAnnotations": {
          "additionalProperties": true,
          "description": "Common annotations for all services",
          "required": [],
          "title": "serviceAnnotations",
          "type": "object"
        },
        "serviceLabels": {
          "additionalProperties": true,
          "description": "Common labels for all services",
          "required": [],
          "title": "serviceLabels",
          "type": "object"
        },
        "startupProbe": {
          "additionalProperties": true,
          "description": "Configures the startup probe for all of the Loki pods",
          "required": [],
          "title": "startupProbe",
          "type": "object"
        },
        "storage": {
          "additionalProperties": true,
          "description": "Storage config. Providing this will automatically populate all necessary storage configs in the templated config.\nIn case of using thanos storage, enable use_thanos_objstore and the configuration should be done inside the object_store section.",
          "properties": {
            "azure": {
              "additionalProperties": true,
              "properties": {
                "accountKey": {
                  "default": "null",
                  "required": [],
                  "title": "accountKey",
                  "type": "null"
                },
                "accountName": {
                  "default": "null",
                  "required": [],
                  "title": "accountName",
                  "type": "null"
                },
                "chunkDelimiter": {
                  "default": "null",
                  "required": [],
                  "title": "chunkDelimiter",
                  "type": "null"
                },
                "connectionString": {
                  "default": "null",
                  "required": [],
                  "title": "connectionString",
                  "type": "null"
                },
                "endpointSuffix": {
                  "default": "null",
                  "required": [],
                  "title": "endpointSuffix",
                  "type": "null"
                },
                "requestTimeout": {
                  "default": "null",
                  "required": [],
                  "title": "requestTimeout",
                  "type": "null"
                },
                "useFederatedToken": {
                  "default": false,
                  "required": [],
                  "title": "useFederatedToken",
                  "type": "boolean"
                },
                "useManagedIdentity": {
                  "default": false,
                  "required": [],
                  "title": "useManagedIdentity",
                  "type": "boolean"
                },
                "userAssignedId": {
                  "default": "null",
                  "required": [],
                  "title": "userAssignedId",
                  "type": "null"
                }
              },
              "required": [],
              "title": "azure",
              "type": "object"
            },
            "bucketNames": {
              "additionalProperties": true,
              "description": "Loki requires a bucket for chunks and the ruler. GEL requires a third bucket for the admin API.\nPlease provide these values if you are using object storage.",
              "properties": {
                "admin": {
                  "required": [],
                  "title": "admin",
                  "type": "string"
                },
                "chunks": {
                  "required": [],
                  "title": "chunks",
                  "type": "string"
                },
                "ruler": {
                  "required": [],
                  "title": "ruler",
                  "type": "string"
                }
              },
              "required": [],
              "title": "bucketNames",
              "type": "object"
            },
            "filesystem": {
              "additionalProperties": true,
              "properties": {
                "chunks_directory": {
                  "default": "/var/loki/chunks",
                  "required": [],
                  "title": "chunks_directory",
                  "type": "string"
                },
                "rules_directory": {
                  "default": "/var/loki/rules",
                  "required": [],
                  "title": "rules_directory",
                  "type": "string"
                }
              },
              "required": [],
              "title": "filesystem",
              "type": "object"
            },
            "gcs": {
              "additionalProperties": true,
              "properties": {
                "chunkBufferSize": {
                  "default": 0,
                  "required": [],
                  "title": "chunkBufferSize",
                  "type": "integer"
                },
                "enableHttp2": {
                  "default": true,
                  "required": [],
                  "title": "enableHttp2",
                  "type": "boolean"
                },
                "requestTimeout": {
                  "default": "0s",
                  "required": [],
                  "title": "requestTimeout",
                  "type": "string"
                }
              },
              "required": [],
              "title": "gcs",
              "type": "object"
            },
            "object_store": {
              "additionalProperties": true,
              "properties": {
                "azure": {
                  "additionalProperties": true,
                  "description": "Azure configuration (when type is \"azure\")",
                  "properties": {
                    "account_key": {
                      "default": "null",
                      "description": "Optional storage account key",
                      "required": [],
                      "title": "account_key",
                      "type": "null"
                    },
                    "account_name": {
                      "default": "null",
                      "description": "Storage account name",
                      "required": [],
                      "title": "account_name",
                      "type": "null"
                    }
                  },
                  "required": [],
                  "title": "azure",
                  "type": "object"
                },
                "gcs": {
                  "additionalProperties": true,
                  "description": "GCS configuration (when type is \"gcs\")",
                  "properties": {
                    "bucket_name": {
                      "default": "null",
                      "description": "Name of the bucket",
                      "required": [],
                      "title": "bucket_name",
                      "type": "null"
                    },
                    "service_account": {
                      "default": "null",
                      "description": "Optional service account JSON",
                      "required": [],
                      "title": "service_account",
                      "type": "null"
                    }
                  },
                  "required": [],
                  "title": "gcs",
                  "type": "object"
                },
                "s3": {
                  "additionalProperties": true,
                  "description": "S3 configuration (when type is \"s3\")",
                  "properties": {
                    "access_key_id": {
                      "default": "null",
                      "description": "Optional access key",
                      "required": [],
                      "title": "access_key_id",
                      "type": "null"
                    },
                    "endpoint": {
                      "default": "null",
                      "description": "S3 endpoint URL",
                      "required": [],
                      "title": "endpoint",
                      "type": "null"
                    },
                    "http": {
                      "additionalProperties": true,
                      "description": "Optional HTTP client configuration",
                      "properties": {
                        "tls_config": {
                          "additionalProperties": true,
                          "properties": {
                            "insecure_skip_verify": {
                              "required": [],
                              "title": "insecure_skip_verify",
                              "type": "boolean"
                            }
                          },
                          "required": [],
                          "title": "tls_config",
                          "type": "object"
                        }
                      },
                      "required": [],
                      "title": "http",
                      "type": "object"
                    },
                    "insecure": {
                      "default": false,
                      "description": "Optional. Enable if using self-signed TLS",
                      "required": [],
                      "title": "insecure",
                      "type": "boolean"
                    },
                    "region": {
                      "default": "null",
                      "description": "Optional region",
                      "required": [],
                      "title": "region",
                      "type": "null"
                    },
                    "secret_access_key": {
                      "default": "null",
                      "description": "Optional secret key",
                      "required": [],
                      "title": "secret_access_key",
                      "type": "null"
                    },
                    "sse": {
                      "additionalProperties": true,
                      "description": "Optional server-side encryption configuration",
                      "required": [],
                      "title": "sse",
                      "type": "object"
                    }
                  },
                  "required": [],
                  "title": "s3",
                  "type": "object"
                },
                "storage_prefix": {
                  "default": "null",
                  "description": "Optional prefix for storage keys",
                  "required": [],
                  "title": "storage_prefix",
                  "type": "null"
                },
                "type": {
                  "default": "s3",
                  "description": "Type of object store. Valid options are: s3, gcs, azure",
                  "required": [],
                  "title": "type",
                  "type": "string"
                }
              },
              "required": [],
              "title": "object_store",
              "type": "object"
            },
            "s3": {
              "additionalProperties": true,
              "properties": {
                "accessKeyId": {
                  "default": "null",
                  "required": [],
                  "title": "accessKeyId",
                  "type": "null"
                },
                "backoff_config": {
                  "additionalProperties": true,
                  "description": "Check https://grafana.com/docs/loki/latest/configure/#s3_storage_config for more info on how to provide a backoff_config",
                  "required": [],
                  "title": "backoff_config",
                  "type": "object"
                },
                "disable_dualstack": {
                  "default": false,
                  "required": [],
                  "title": "disable_dualstack",
                  "type": "boolean"
                },
                "endpoint": {
                  "default": "null",
                  "required": [],
                  "title": "endpoint",
                  "type": "null"
                },
                "http_config": {
                  "additionalProperties": true,
                  "required": [],
                  "title": "http_config",
                  "type": "object"
                },
                "insecure": {
                  "default": false,
                  "required": [],
                  "title": "insecure",
                  "type": "boolean"
                },
                "region": {
                  "default": "null",
                  "required": [],
                  "title": "region",
                  "type": "null"
                },
                "s3": {
                  "default": "null",
                  "required": [],
                  "title": "s3",
                  "type": "null"
                },
                "s3ForcePathStyle": {
                  "default": false,
                  "required": [],
                  "title": "s3ForcePathStyle",
                  "type": "boolean"
                },
                "secretAccessKey": {
                  "default": "null",
                  "required": [],
                  "title": "secretAccessKey",
                  "type": "null"
                },
                "signatureVersion": {
                  "default": "null",
                  "required": [],
                  "title": "signatureVersion",
                  "type": "null"
                }
              },
              "required": [],
              "title": "s3",
              "type": "object"
            },
            "swift": {
              "additionalProperties": true,
              "properties": {
                "auth_url": {
                  "default": "null",
                  "required": [],
                  "title": "auth_url",
                  "type": "null"
                },
                "auth_version": {
                  "default": "null",
                  "required": [],
                  "title": "auth_version",
                  "type": "null"
                },
                "connect_timeout": {
                  "default": "null",
                  "required": [],
                  "title": "connect_timeout",
                  "type": "null"
                },
                "container_name": {
                  "default": "null",
                  "required": [],
                  "title": "container_name",
                  "type": "null"
                },
                "domain_id": {
                  "default": "null",
                  "required": [],
                  "title": "domain_id",
                  "type": "null"
                },
                "domain_name": {
                  "default": "null",
                  "required": [],
                  "title": "domain_name",
                  "type": "null"
                },
                "internal": {
                  "default": "null",
                  "required": [],
                  "title": "internal",
                  "type": "null"
                },
                "max_retries": {
                  "default": "null",
                  "required": [],
                  "title": "max_retries",
                  "type": "null"
                },
                "password": {
                  "default": "null",
                  "required": [],
                  "title": "password",
                  "type": "null"
                },
                "project_domain_id": {
                  "default": "null",
                  "required": [],
                  "title": "project_domain_id",
                  "type": "null"
                },
                "project_domain_name": {
                  "default": "null",
                  "required": [],
                  "title": "project_domain_name",
                  "type": "null"
                },
                "project_id": {
                  "default": "null",
                  "required": [],
                  "title": "project_id",
                  "type": "null"
                },
                "project_name": {
                  "default": "null",
                  "required": [],
                  "title": "project_name",
                  "type": "null"
                },
                "region_name": {
                  "default": "null",
                  "required": [],
                  "title": "region_name",
                  "type": "null"
                },
                "request_timeout": {
                  "default": "null",
                  "required": [],
                  "title": "request_timeout",
                  "type": "null"
                },
                "user_domain_id": {
                  "default": "null",
                  "required": [],
                  "title": "user_domain_id",
                  "type": "null"
                },
                "user_domain_name": {
                  "default": "null",
                  "required": [],
                  "title": "user_domain_name",
                  "type": "null"
                },
                "user_id": {
                  "default": "null",
                  "required": [],
                  "title": "user_id",
                  "type": "null"
                },
                "username": {
                  "default": "null",
                  "required": [],
                  "title": "username",
                  "type": "null"
                }
              },
              "required": [],
              "title": "swift",
              "type": "object"
            },
            "type": {
              "default": "s3",
              "description": "Loki requires a bucket for chunks and the ruler. GEL requires a third bucket for the admin API.\nPlease provide these values if you are using object storage.\nbucketNames:\n  chunks: FIXME\n  ruler: FIXME\n  admin: FIXME",
              "required": [],
              "title": "type",
              "type": "string"
            },
            "use_thanos_objstore": {
              "default": false,
              "description": "Loki now supports using thanos storage clients for connecting to object storage backend.\nThis will become the default way to configure storage in a future releases.",
              "required": [],
              "title": "use_thanos_objstore",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "storage",
          "type": "object"
        },
        "storage_config": {
          "additionalProperties": true,
          "description": "Additional storage config",
          "properties": {
            "bloom_shipper": {
              "additionalProperties": true,
              "properties": {
                "working_directory": {
                  "default": "/var/loki/data/bloomshipper",
                  "required": [],
                  "title": "working_directory",
                  "type": "string"
                }
              },
              "required": [],
              "title": "bloom_shipper",
              "type": "object"
            },
            "boltdb_shipper": {
              "additionalProperties": true,
              "properties": {
                "index_gateway_client": {
                  "additionalProperties": true,
                  "properties": {
                    "server_address": {
                      "default": "{{ include \"loki.indexGatewayAddress\" . }}",
                      "required": [],
                      "title": "server_address",
                      "type": "string"
                    }
                  },
                  "required": [],
                  "title": "index_gateway_client",
                  "type": "object"
                }
              },
              "required": [],
              "title": "boltdb_shipper",
              "type": "object"
            },
            "hedging": {
              "additionalProperties": true,
              "properties": {
                "at": {
                  "default": "250ms",
                  "required": [],
                  "title": "at",
                  "type": "string"
                },
                "max_per_second": {
                  "default": 20,
                  "required": [],
                  "title": "max_per_second",
                  "type": "integer"
                },
                "up_to": {
                  "default": 3,
                  "required": [],
                  "title": "up_to",
                  "type": "integer"
                }
              },
              "required": [],
              "title": "hedging",
              "type": "object"
            },
            "tsdb_shipper": {
              "additionalProperties": true,
              "properties": {
                "index_gateway_client": {
                  "additionalProperties": true,
                  "properties": {
                    "server_address": {
                      "default": "{{ include \"loki.indexGatewayAddress\" . }}",
                      "required": [],
                      "title": "server_address",
                      "type": "string"
                    }
                  },
                  "required": [],
                  "title": "index_gateway_client",
                  "type": "object"
                }
              },
              "required": [],
              "title": "tsdb_shipper",
              "type": "object"
            }
          },
          "required": [],
          "title": "storage_config",
          "type": "object"
        },
        "structuredConfig": {
          "additionalProperties": true,
          "description": "Structured loki configuration, takes precedence over `loki.config`, `loki.schemaConfig`, `loki.storageConfig`",
          "required": [],
          "title": "structuredConfig",
          "type": "object"
        },
        "tenants": {
          "description": "Tenants list to be created on nginx htpasswd file, with name and password or passwordHash keys\u003cbr\u003e\u003cbr\u003e\nExample:\n\u003cpre\u003e\ntenants:\u003cbr\u003e\n  - name: \"test-user-1\"\u003cbr\u003e\n    password: \"test-password-1\"\u003cbr\u003e\n  - name: \"test-user-2\"\u003cbr\u003e\n    passwordHash: \"$2y$10$7O40CaY1yz7fu9O24k2/u.ct/wELYHRBsn25v/7AyuQ8E8hrLqpva\" # generated using `htpasswd -nbBC10 test-user-2 test-password-2`\n\u003c/pre\u003e",
          "items": {
            "additionalProperties": true,
            "properties": {
              "name": {
                "required": [],
                "title": "name",
                "type": "string"
              },
              "password": {
                "required": [],
                "title": "password",
                "type": "string"
              },
              "passwordHash": {
                "required": [],
                "title": "passwordHash",
                "type": "string"
              }
            },
            "required": [],
            "type": "object"
          },
          "required": [],
          "title": "tenants",
          "type": "array"
        },
        "testSchemaConfig": {
          "additionalProperties": true,
          "properties": {
            "configs": {
              "items": {
                "additionalProperties": true,
                "properties": {
                  "from": {
                    "default": "2024-04-01",
                    "required": [],
                    "title": "from",
                    "type": "string"
                  },
                  "index": {
                    "additionalProperties": true,
                    "properties": {
                      "period": {
                        "default": "24h",
                        "required": [],
                        "title": "period",
                        "type": "string"
                      },
                      "prefix": {
                        "default": "index_",
                        "required": [],
                        "title": "prefix",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "title": "index",
                    "type": "object"
                  },
                  "object_store": {
                    "default": "{{ include \"loki.testSchemaObjectStore\" . }}",
                    "required": [],
                    "title": "object_store",
                    "type": "string"
                  },
                  "schema": {
                    "default": "v13",
                    "required": [],
                    "title": "schema",
                    "type": "string"
                  },
                  "store": {
                    "default": "tsdb",
                    "required": [],
                    "title": "store",
                    "type": "string"
                  }
                },
                "required": [],
                "type": "object"
              },
              "required": [],
              "title": "configs",
              "type": "array"
            }
          },
          "required": [],
          "title": "testSchemaConfig",
          "type": "object"
        },
        "tracing": {
          "additionalProperties": true,
          "description": "Enable tracing",
          "properties": {
            "enabled": {
              "default": false,
              "required": [],
              "title": "enabled",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "tracing",
          "type": "object"
        },
        "ui": {
          "additionalProperties": true,
          "description": " Optional Loki UI: Provides access to a operators UI for Loki distributed. When enabled UI will be available at /ui/ of loki-gateway",
          "properties": {
            "enabled": {
              "default": false,
              "description": "Disabled by default for backwards compatibility. Enable to use the Loki UI.",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "gateway": {
              "additionalProperties": true,
              "properties": {
                "enabled": {
                  "default": true,
                  "description": "enable gateway proxying to UI under /ui",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                }
              },
              "required": [],
              "title": "gateway",
              "type": "object"
            }
          },
          "required": [],
          "title": "ui",
          "type": "object"
        },
        "useTestSchema": {
          "default": false,
          "description": "a real Loki install requires a proper schemaConfig defined above this, however for testing or playing around\nyou can enable useTestSchema",
          "required": [],
          "title": "useTestSchema",
          "type": "boolean"
        }
      },
      "required": [],
      "title": "loki",
      "type": "object"
    },
    "lokiCanary": {
      "additionalProperties": true,
      "description": "The Loki canary pushes logs to and queries from this loki installation to test\nthat it's working correctly",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for canary pods",
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "annotations": {
          "additionalProperties": true,
          "description": "Additional annotations for the `loki-canary` Daemonset",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "DNS config for canary pods",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "enabled": {
          "default": true,
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "extraArgs": {
          "description": "Additional CLI arguments for the `loki-canary' command",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraEnv": {
          "description": "Environment variables to add to the canary pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "Environment variables from secrets or configmaps to add to the canary pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "Volume mounts to add to the canary pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Volumes to add to the canary pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": "Use the host's user namespace in loki-canary pods",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "image": {
          "additionalProperties": true,
          "description": "Image to use for loki canary",
          "properties": {
            "digest": {
              "default": "null",
              "description": "Overrides the image tag with an image digest",
              "required": [],
              "title": "digest",
              "type": "null"
            },
            "pullPolicy": {
              "default": "IfNotPresent",
              "description": "Docker image pull policy",
              "required": [],
              "title": "pullPolicy",
              "type": "string"
            },
            "registry": {
              "default": "docker.io",
              "description": "The Docker registry",
              "required": [],
              "title": "registry",
              "type": "string"
            },
            "repository": {
              "default": "grafana/loki-canary",
              "description": "Docker image repository",
              "required": [],
              "title": "repository",
              "type": "string"
            },
            "tag": {
              "default": "null",
              "description": "Overrides the image tag whose default is the chart's appVersion",
              "required": [],
              "title": "tag",
              "type": "null"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "kind": {
          "default": "DaemonSet",
          "description": "The type of the loki canary k8s rollout. This can be a DaemonSet or Deployment.",
          "required": [],
          "title": "kind",
          "type": "string"
        },
        "labelname": {
          "default": "pod",
          "description": "The name of the label to look for at loki when doing the checks.",
          "required": [],
          "title": "labelname",
          "type": "string"
        },
        "lokiurl": {
          "default": "null",
          "description": "If set overwrites the default value set by loki.host helper function. Use this if gateway not enabled.",
          "required": [],
          "title": "lokiurl",
          "type": "null"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for canary pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Additional labels for each `loki-canary` pod",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "null",
          "description": "The name of the PriorityClass for loki-canary pods",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        },
        "push": {
          "default": true,
          "description": "If true, the canary will send directly to Loki via the address configured for verification --\nIf false, it will write to stdout and an Agent will be needed to scrape and send the logs --",
          "required": [],
          "title": "push",
          "type": "boolean"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource requests and limits for the canary",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "service": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations for loki-canary Service",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Additional labels for loki-canary Service",
              "required": [],
              "title": "labels",
              "type": "object"
            }
          },
          "required": [],
          "title": "service",
          "type": "object"
        },
        "tolerations": {
          "description": "Tolerations for canary pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "updateStrategy": {
          "additionalProperties": true,
          "description": "Update strategy for the `loki-canary` Daemonset pods",
          "properties": {
            "rollingUpdate": {
              "additionalProperties": true,
              "properties": {
                "maxUnavailable": {
                  "default": 1,
                  "required": [],
                  "title": "maxUnavailable",
                  "type": "integer"
                }
              },
              "required": [],
              "title": "rollingUpdate",
              "type": "object"
            },
            "type": {
              "default": "RollingUpdate",
              "required": [],
              "title": "type",
              "type": "string"
            }
          },
          "required": [],
          "title": "updateStrategy",
          "type": "object"
        }
      },
      "required": [],
      "title": "lokiCanary",
      "type": "object"
    },
    "makeBucketJob": {
      "additionalProperties": true,
      "description": "# Additional Annotations for the Kubernetes Job makeBucketJob",
      "properties": {
        "exitCommand": {
          "default": "",
          "description": "Command to run after the main command on exit",
          "required": [],
          "title": "exitCommand",
          "type": "string"
        },
        "resources": {
          "additionalProperties": true,
          "properties": {
            "requests": {
              "additionalProperties": true,
              "properties": {
                "memory": {
                  "default": "128Mi",
                  "required": [],
                  "title": "memory",
                  "type": "string"
                }
              },
              "required": [],
              "title": "requests",
              "type": "object"
            }
          },
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "securityContext": {
          "additionalProperties": true,
          "properties": {
            "enabled": {
              "default": false,
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "runAsGroup": {
              "default": 1000,
              "required": [],
              "title": "runAsGroup",
              "type": "integer"
            },
            "runAsUser": {
              "default": 1000,
              "required": [],
              "title": "runAsUser",
              "type": "integer"
            }
          },
          "required": [],
          "title": "securityContext",
          "type": "object"
        }
      },
      "required": [],
      "title": "makeBucketJob",
      "type": "object"
    },
    "makePolicyJob": {
      "additionalProperties": true,
      "description": "# writeexamplepolicy policy grants creation or deletion of buckets with name\n# starting with example. In addition, grants objects write permissions on buckets starting with\n# example.\n- name: writeexamplepolicy\n  statements:\n    - effect: Allow  # this is the default\n      resources:\n        - 'arn:aws:s3:::example*/*'\n      actions:\n        - \"s3:AbortMultipartUpload\"\n        - \"s3:GetObject\"\n        - \"s3:DeleteObject\"\n        - \"s3:PutObject\"\n        - \"s3:ListMultipartUploadParts\"\n    - resources:\n        - 'arn:aws:s3:::example*'\n      actions:\n        - \"s3:CreateBucket\"\n        - \"s3:DeleteBucket\"\n        - \"s3:GetBucketLocation\"\n        - \"s3:ListBucket\"\n        - \"s3:ListBucketMultipartUploads\"\n# readonlyexamplepolicy policy grants access to buckets with name starting with example.\n# In addition, grants objects read permissions on buckets starting with example.\n- name: readonlyexamplepolicy\n  statements:\n    - resources:\n        - 'arn:aws:s3:::example*/*'\n      actions:\n        - \"s3:GetObject\"\n    - resources:\n        - 'arn:aws:s3:::example*'\n      actions:\n        - \"s3:GetBucketLocation\"\n        - \"s3:ListBucket\"\n        - \"s3:ListBucketMultipartUploads\"\n# conditionsexample policy creates all access to example bucket with aws:username=\"johndoe\" and source ip range 10.0.0.0/8 and 192.168.0.0/24 only\n- name: conditionsexample\n  statements:\n    - resources:\n      - 'arn:aws:s3:::example/*'\n      actions:\n      - 's3:*'\n      conditions:\n        - StringEquals: '\"aws:username\": \"johndoe\"'\n        - IpAddress: |\n            \"aws:SourceIp\": [\n              \"10.0.0.0/8\",\n              \"192.168.0.0/24\"\n            ]\n\n# Additional Annotations for the Kubernetes Job makePolicyJob",
      "properties": {
        "exitCommand": {
          "default": "",
          "description": "Command to run after the main command on exit",
          "required": [],
          "title": "exitCommand",
          "type": "string"
        },
        "resources": {
          "additionalProperties": true,
          "properties": {
            "requests": {
              "additionalProperties": true,
              "properties": {
                "memory": {
                  "default": "128Mi",
                  "required": [],
                  "title": "memory",
                  "type": "string"
                }
              },
              "required": [],
              "title": "requests",
              "type": "object"
            }
          },
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "securityContext": {
          "additionalProperties": true,
          "properties": {
            "enabled": {
              "default": false,
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "runAsGroup": {
              "default": 1000,
              "required": [],
              "title": "runAsGroup",
              "type": "integer"
            },
            "runAsUser": {
              "default": 1000,
              "required": [],
              "title": "runAsUser",
              "type": "integer"
            }
          },
          "required": [],
          "title": "securityContext",
          "type": "object"
        }
      },
      "required": [],
      "title": "makePolicyJob",
      "type": "object"
    },
    "makeServiceAccountJob": {
      "additionalProperties": true,
      "properties": {
        "exitCommand": {
          "default": "",
          "description": "Command to run after the main command on exit",
          "required": [],
          "title": "exitCommand",
          "type": "string"
        },
        "resources": {
          "additionalProperties": true,
          "properties": {
            "requests": {
              "additionalProperties": true,
              "properties": {
                "memory": {
                  "default": "128Mi",
                  "required": [],
                  "title": "memory",
                  "type": "string"
                }
              },
              "required": [],
              "title": "requests",
              "type": "object"
            }
          },
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "securityContext": {
          "additionalProperties": true,
          "properties": {
            "enabled": {
              "default": false,
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "runAsGroup": {
              "default": 1000,
              "required": [],
              "title": "runAsGroup",
              "type": "integer"
            },
            "runAsUser": {
              "default": 1000,
              "required": [],
              "title": "runAsUser",
              "type": "integer"
            }
          },
          "required": [],
          "title": "securityContext",
          "type": "object"
        }
      },
      "required": [],
      "title": "makeServiceAccountJob",
      "type": "object"
    },
    "makeUserJob": {
      "additionalProperties": true,
      "description": "# Additional Annotations for the Kubernetes Job makeUserJob",
      "properties": {
        "exitCommand": {
          "default": "",
          "description": "Command to run after the main command on exit",
          "required": [],
          "title": "exitCommand",
          "type": "string"
        },
        "resources": {
          "additionalProperties": true,
          "properties": {
            "requests": {
              "additionalProperties": true,
              "properties": {
                "memory": {
                  "default": "128Mi",
                  "required": [],
                  "title": "memory",
                  "type": "string"
                }
              },
              "required": [],
              "title": "requests",
              "type": "object"
            }
          },
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "securityContext": {
          "additionalProperties": true,
          "properties": {
            "enabled": {
              "default": false,
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "runAsGroup": {
              "default": 1000,
              "required": [],
              "title": "runAsGroup",
              "type": "integer"
            },
            "runAsUser": {
              "default": 1000,
              "required": [],
              "title": "runAsUser",
              "type": "integer"
            }
          },
          "required": [],
          "title": "securityContext",
          "type": "object"
        }
      },
      "required": [],
      "title": "makeUserJob",
      "type": "object"
    },
    "mcImage": {
      "additionalProperties": true,
      "description": "# Set default image, imageTag, and imagePullPolicy for the `mc` (the minio\n# client used to create a default bucket).\n#",
      "properties": {
        "pullPolicy": {
          "default": "IfNotPresent",
          "required": [],
          "title": "pullPolicy",
          "type": "string"
        },
        "repository": {
          "default": "quay.io/minio/mc",
          "required": [],
          "title": "repository",
          "type": "string"
        },
        "tag": {
          "default": "RELEASE.2024-11-21T17-21-54Z",
          "required": [],
          "title": "tag",
          "type": "string"
        }
      },
      "required": [],
      "title": "mcImage",
      "type": "object"
    },
    "memberlist": {
      "additionalProperties": true,
      "description": "Configuration for the memberlist service",
      "properties": {
        "service": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "publishNotReadyAddresses": {
              "default": false,
              "required": [],
              "title": "publishNotReadyAddresses",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "service",
          "type": "object"
        }
      },
      "required": [],
      "title": "memberlist",
      "type": "object"
    },
    "memcached": {
      "additionalProperties": true,
      "description": "You can use a self hosted memcached by setting enabled to false and providing addresses.",
      "properties": {
        "containerSecurityContext": {
          "additionalProperties": true,
          "description": "The SecurityContext for memcached containers",
          "properties": {
            "allowPrivilegeEscalation": {
              "default": false,
              "required": [],
              "title": "allowPrivilegeEscalation",
              "type": "boolean"
            },
            "capabilities": {
              "additionalProperties": true,
              "properties": {
                "drop": {
                  "items": {
                    "required": [],
                    "type": "string"
                  },
                  "required": [],
                  "title": "drop",
                  "type": "array"
                }
              },
              "required": [],
              "title": "capabilities",
              "type": "object"
            },
            "readOnlyRootFilesystem": {
              "default": true,
              "required": [],
              "title": "readOnlyRootFilesystem",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "containerSecurityContext",
          "type": "object"
        },
        "enabled": {
          "default": true,
          "description": "Enable the built in memcached server provided by the chart",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "pullPolicy": {
              "default": "IfNotPresent",
              "description": "Memcached Docker image pull policy",
              "required": [],
              "title": "pullPolicy",
              "type": "string"
            },
            "repository": {
              "default": "memcached",
              "description": "Memcached Docker image repository",
              "required": [],
              "title": "repository",
              "type": "string"
            },
            "tag": {
              "default": "1.6.39-alpine",
              "description": "Memcached Docker image tag",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "livenessProbe": {
          "additionalProperties": true,
          "description": "Liveness probe for memcached pods",
          "properties": {
            "failureThreshold": {
              "default": 3,
              "required": [],
              "title": "failureThreshold",
              "type": "integer"
            },
            "initialDelaySeconds": {
              "default": 30,
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 10,
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "tcpSocket": {
              "additionalProperties": true,
              "properties": {
                "port": {
                  "default": "client",
                  "required": [],
                  "title": "port",
                  "type": "string"
                }
              },
              "required": [],
              "title": "tcpSocket",
              "type": "object"
            },
            "timeoutSeconds": {
              "default": 5,
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "livenessProbe",
          "type": "object"
        },
        "podSecurityContext": {
          "additionalProperties": true,
          "description": "The SecurityContext override for memcached pods",
          "properties": {
            "fsGroup": {
              "default": 11211,
              "required": [],
              "title": "fsGroup",
              "type": "integer"
            },
            "runAsGroup": {
              "default": 11211,
              "required": [],
              "title": "runAsGroup",
              "type": "integer"
            },
            "runAsNonRoot": {
              "default": true,
              "required": [],
              "title": "runAsNonRoot",
              "type": "boolean"
            },
            "runAsUser": {
              "default": 11211,
              "required": [],
              "title": "runAsUser",
              "type": "integer"
            }
          },
          "required": [],
          "title": "podSecurityContext",
          "type": "object"
        },
        "priorityClassName": {
          "default": "null",
          "description": "The name of the PriorityClass for memcached pods",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        },
        "readinessProbe": {
          "additionalProperties": true,
          "description": "Readiness probe for memcached pods (probe port defaults to container port)",
          "properties": {
            "failureThreshold": {
              "default": 6,
              "required": [],
              "title": "failureThreshold",
              "type": "integer"
            },
            "initialDelaySeconds": {
              "default": 5,
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 5,
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "tcpSocket": {
              "additionalProperties": true,
              "properties": {
                "port": {
                  "default": "client",
                  "required": [],
                  "title": "port",
                  "type": "string"
                }
              },
              "required": [],
              "title": "tcpSocket",
              "type": "object"
            },
            "timeoutSeconds": {
              "default": 3,
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "readinessProbe",
          "type": "object"
        },
        "replicas": {
          "required": [],
          "title": "replicas",
          "type": "integer"
        }
      },
      "required": [],
      "title": "memcached",
      "type": "object"
    },
    "memcachedExporter": {
      "additionalProperties": true,
      "properties": {
        "containerSecurityContext": {
          "additionalProperties": true,
          "description": "The SecurityContext for memcached exporter containers",
          "properties": {
            "allowPrivilegeEscalation": {
              "default": false,
              "required": [],
              "title": "allowPrivilegeEscalation",
              "type": "boolean"
            },
            "capabilities": {
              "additionalProperties": true,
              "properties": {
                "drop": {
                  "items": {
                    "required": [],
                    "type": "string"
                  },
                  "required": [],
                  "title": "drop",
                  "type": "array"
                }
              },
              "required": [],
              "title": "capabilities",
              "type": "object"
            },
            "readOnlyRootFilesystem": {
              "default": true,
              "required": [],
              "title": "readOnlyRootFilesystem",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "containerSecurityContext",
          "type": "object"
        },
        "enabled": {
          "default": true,
          "description": "Whether memcached metrics should be exported",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "extraArgs": {
          "additionalProperties": true,
          "description": "Extra args to add to the exporter container.\nExample:\nextraArgs:\n  memcached.tls.enable: true\n  memcached.tls.cert-file: /certs/cert.crt\n  memcached.tls.key-file: /certs/cert.key\n  memcached.tls.ca-file: /certs/ca.crt\n  memcached.tls.insecure-skip-verify: false\n  memcached.tls.server-name: memcached",
          "required": [],
          "title": "extraArgs",
          "type": "object"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "pullPolicy": {
              "default": "IfNotPresent",
              "required": [],
              "title": "pullPolicy",
              "type": "string"
            },
            "repository": {
              "default": "prom/memcached-exporter",
              "required": [],
              "title": "repository",
              "type": "string"
            },
            "tag": {
              "default": "v0.15.3",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "livenessProbe": {
          "additionalProperties": true,
          "description": "Liveness probe for memcached exporter",
          "properties": {
            "failureThreshold": {
              "default": 3,
              "required": [],
              "title": "failureThreshold",
              "type": "integer"
            },
            "httpGet": {
              "additionalProperties": true,
              "properties": {
                "path": {
                  "default": "/metrics",
                  "required": [],
                  "title": "path",
                  "type": "string"
                },
                "port": {
                  "default": "http-metrics",
                  "required": [],
                  "title": "port",
                  "type": "string"
                }
              },
              "required": [],
              "title": "httpGet",
              "type": "object"
            },
            "initialDelaySeconds": {
              "default": 30,
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 10,
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 5,
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "livenessProbe",
          "type": "object"
        },
        "readinessProbe": {
          "additionalProperties": true,
          "description": "Readiness probe for memcached exporter",
          "properties": {
            "failureThreshold": {
              "default": 3,
              "required": [],
              "title": "failureThreshold",
              "type": "integer"
            },
            "httpGet": {
              "additionalProperties": true,
              "properties": {
                "path": {
                  "default": "/metrics",
                  "required": [],
                  "title": "path",
                  "type": "string"
                },
                "port": {
                  "default": "http-metrics",
                  "required": [],
                  "title": "port",
                  "type": "string"
                }
              },
              "required": [],
              "title": "httpGet",
              "type": "object"
            },
            "initialDelaySeconds": {
              "default": 5,
              "required": [],
              "title": "initialDelaySeconds",
              "type": "integer"
            },
            "periodSeconds": {
              "default": 5,
              "required": [],
              "title": "periodSeconds",
              "type": "integer"
            },
            "timeoutSeconds": {
              "default": 3,
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [],
          "title": "readinessProbe",
          "type": "object"
        },
        "resources": {
          "additionalProperties": true,
          "properties": {
            "limits": {
              "additionalProperties": true,
              "required": [],
              "title": "limits",
              "type": "object"
            },
            "requests": {
              "additionalProperties": true,
              "required": [],
              "title": "requests",
              "type": "object"
            }
          },
          "required": [],
          "title": "resources",
          "type": "object"
        }
      },
      "required": [],
      "title": "memcachedExporter",
      "type": "object"
    },
    "metrics": {
      "additionalProperties": true,
      "properties": {
        "serviceMonitor": {
          "additionalProperties": true,
          "properties": {
            "additionalLabels": {
              "additionalProperties": true,
              "required": [],
              "title": "additionalLabels",
              "type": "object"
            },
            "annotations": {
              "additionalProperties": true,
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "includeNode": {
              "default": false,
              "description": "scrape each node/pod individually for additional metrics",
              "required": [],
              "title": "includeNode",
              "type": "boolean"
            },
            "interval": {
              "default": "~",
              "description": "Scrape interval, for example `interval: 30s`",
              "required": [],
              "title": "interval",
              "type": "null"
            },
            "namespace": {
              "default": "~",
              "description": "metricRelabelings:\n  - regex: (server|pod)\n    action: labeldrop",
              "required": [],
              "title": "namespace",
              "type": "null"
            },
            "public": {
              "default": true,
              "required": [],
              "title": "public",
              "type": "boolean"
            },
            "relabelConfigs": {
              "additionalProperties": true,
              "description": "for node metrics",
              "required": [],
              "title": "relabelConfigs",
              "type": "object"
            },
            "relabelConfigsCluster": {
              "additionalProperties": true,
              "description": "for cluster metrics",
              "required": [],
              "title": "relabelConfigsCluster",
              "type": "object"
            },
            "scrapeTimeout": {
              "default": "~",
              "description": "Scrape timeout, for example `scrapeTimeout: 10s`",
              "required": [],
              "title": "scrapeTimeout",
              "type": "null"
            }
          },
          "required": [],
          "title": "serviceMonitor",
          "type": "object"
        }
      },
      "required": [],
      "title": "metrics",
      "type": "object"
    },
    "migrate": {
      "additionalProperties": true,
      "description": "Options that may be necessary when performing a migration from another helm chart",
      "properties": {
        "fromDistributed": {
          "additionalProperties": true,
          "description": "When migrating from a distributed chart like loki-distributed or enterprise-logs",
          "properties": {
            "enabled": {
              "default": false,
              "description": "Set to true if migrating from a distributed helm chart",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "memberlistService": {
              "default": "",
              "description": "If migrating from a distributed service, provide the distributed deployment's\nmemberlist service DNS so the new deployment can join its ring.",
              "required": [],
              "title": "memberlistService",
              "type": "string"
            }
          },
          "required": [],
          "title": "fromDistributed",
          "type": "object"
        }
      },
      "required": [],
      "title": "migrate",
      "type": "object"
    },
    "minReadySeconds": {
      "default": 10,
      "required": [],
      "title": "minReadySeconds",
      "type": "integer"
    },
    "minio": {
      "additionalProperties": true,
      "description": "Configuration for the minio subchart",
      "properties": {
        "address": {
          "default": "null",
          "description": "Allow the address used by Loki to refer to Minio to be overridden",
          "required": [],
          "title": "address",
          "type": "null"
        },
        "buckets": {
          "items": {
            "additionalProperties": true,
            "properties": {
              "name": {
                "default": "admin",
                "required": [],
                "title": "name",
                "type": "string"
              },
              "policy": {
                "default": "none",
                "required": [],
                "title": "policy",
                "type": "string"
              },
              "purge": {
                "default": false,
                "required": [],
                "title": "purge",
                "type": "boolean"
              }
            },
            "required": [],
            "type": "object"
          },
          "required": [],
          "title": "buckets",
          "type": "array"
        },
        "drivesPerNode": {
          "default": 2,
          "description": "Minio requires 2 to 16 drives for erasure code (drivesPerNode * replicas)\nhttps://docs.min.io/docs/minio-erasure-code-quickstart-guide\nSince we only have 1 replica, that means 2 drives must be used.",
          "required": [],
          "title": "drivesPerNode",
          "type": "integer"
        },
        "enabled": {
          "default": false,
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "persistence": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "size": {
              "default": "5Gi",
              "required": [],
              "title": "size",
              "type": "string"
            }
          },
          "required": [],
          "title": "persistence",
          "type": "object"
        },
        "replicas": {
          "default": 1,
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "properties": {
            "requests": {
              "additionalProperties": true,
              "properties": {
                "cpu": {
                  "default": "100m",
                  "required": [],
                  "title": "cpu",
                  "type": "string"
                },
                "memory": {
                  "default": "128Mi",
                  "required": [],
                  "title": "memory",
                  "type": "string"
                }
              },
              "required": [],
              "title": "requests",
              "type": "object"
            }
          },
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "rootPassword": {
          "default": "supersecretpassword",
          "required": [],
          "title": "rootPassword",
          "type": "string"
        },
        "rootUser": {
          "default": "root-user",
          "description": "root user; not used for GEL authentication",
          "required": [],
          "title": "rootUser",
          "type": "string"
        },
        "users": {
          "description": "The first user in the list below is used for Loki/GEL authentication.\nYou can add additional users if desired; they will not impact Loki/GEL.\n`accessKey` = username, `secretKey` = password",
          "items": {
            "additionalProperties": true,
            "properties": {
              "accessKey": {
                "default": "logs-user",
                "required": [],
                "title": "accessKey",
                "type": "string"
              },
              "policy": {
                "default": "readwrite",
                "required": [],
                "title": "policy",
                "type": "string"
              },
              "secretKey": {
                "default": "supersecretpassword",
                "required": [],
                "title": "secretKey",
                "type": "string"
              }
            },
            "required": [],
            "type": "object"
          },
          "required": [],
          "title": "users",
          "type": "array"
        }
      },
      "required": [],
      "title": "minio",
      "type": "object"
    },
    "minioAPIPort": {
      "default": "9000",
      "description": "# Internal port number for MinIO S3 API container\n# Change service.port to change external port number",
      "required": [],
      "title": "minioAPIPort",
      "type": "string"
    },
    "minioConsolePort": {
      "default": "9001",
      "description": "# Internal port number for MinIO Browser Console container\n# Change consoleService.port to change external port number",
      "required": [],
      "title": "minioConsolePort",
      "type": "string"
    },
    "mode": {
      "default": "distributed",
      "description": "# minio mode, i.e. standalone or distributed",
      "required": [],
      "title": "mode",
      "type": "string"
    },
    "monitoring": {
      "additionalProperties": true,
      "description": "Monitoring section determines which monitoring features to enable",
      "properties": {
        "dashboards": {
          "additionalProperties": true,
          "description": "Dashboards for monitoring Loki",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Additional annotations for the dashboards ConfigMap",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "If enabled, create configmap with dashboards for monitoring Loki",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels for the dashboards ConfigMap",
              "properties": {
                "grafana_dashboard": {
                  "default": "1",
                  "required": [],
                  "title": "grafana_dashboard",
                  "type": "string"
                }
              },
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "namespace": {
              "default": "null",
              "description": "Alternative namespace to create dashboards ConfigMap in",
              "required": [],
              "title": "namespace",
              "type": "null"
            }
          },
          "required": [],
          "title": "dashboards",
          "type": "object"
        },
        "enabled": {
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "lokiCanary": {
          "additionalProperties": true,
          "properties": {
            "enabled": {
              "required": [],
              "title": "enabled",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "lokiCanary",
          "type": "object"
        },
        "rules": {
          "additionalProperties": true,
          "description": "Recording rules for monitoring Loki, required for some dashboards",
          "properties": {
            "additionalGroups": {
              "description": "Additional groups to add to the rules file",
              "items": {
                "required": []
              },
              "required": [],
              "title": "additionalGroups",
              "type": "array"
            },
            "additionalRuleLabels": {
              "additionalProperties": true,
              "description": "Additional labels for PrometheusRule alerts",
              "required": [],
              "title": "additionalRuleLabels",
              "type": "object"
            },
            "alerting": {
              "default": true,
              "description": "Include alerting rules",
              "required": [],
              "title": "alerting",
              "type": "boolean"
            },
            "annotations": {
              "additionalProperties": true,
              "description": "Additional annotations for the rules PrometheusRule resource",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "disabled": {
              "additionalProperties": true,
              "description": "Specify which individual alerts should be disabled\nInstead of turning off each alert one by one, set the .monitoring.rules.alerting value to false instead.\nIf you disable all the alerts and keep .monitoring.rules.alerting set to true, the chart will fail to render.",
              "required": [],
              "title": "disabled",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "If enabled, create PrometheusRule resource with Loki recording rules",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Additional labels for the rules PrometheusRule resource",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "namespace": {
              "default": "null",
              "description": " LokiRequestErrors: true\n LokiRequestPanics: true\nAlternative namespace to create PrometheusRule resources in",
              "required": [],
              "title": "namespace",
              "type": "null"
            }
          },
          "required": [],
          "title": "rules",
          "type": "object"
        },
        "selfMonitoring": {
          "additionalProperties": true,
          "description": "DEPRECATED Self monitoring determines whether Loki should scrape its own logs.\nThis feature relies on Grafana Agent Operator, which is deprecated.\nIt will create custom resources for GrafanaAgent, LogsInstance, and PodLogs to configure\nscrape configs to scrape its own logs with the labels expected by the included dashboards.",
          "properties": {
            "enabled": {
              "default": false,
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "grafanaAgent": {
              "additionalProperties": true,
              "description": "DEPRECATED Grafana Agent configuration",
              "properties": {
                "annotations": {
                  "additionalProperties": true,
                  "description": "Grafana Agent annotations",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "enableConfigReadAPI": {
                  "default": false,
                  "description": "Enable the config read api on port 8080 of the agent",
                  "required": [],
                  "title": "enableConfigReadAPI",
                  "type": "boolean"
                },
                "installOperator": {
                  "default": false,
                  "description": "DEPRECATED Controls whether to install the Grafana Agent Operator and its CRDs.\nNote that helm will not install CRDs if this flag is enabled during an upgrade.\nIn that case install the CRDs manually from https://github.com/grafana/agent/tree/main/production/operator/crds",
                  "required": [],
                  "title": "installOperator",
                  "type": "boolean"
                },
                "labels": {
                  "additionalProperties": true,
                  "description": "Additional Grafana Agent labels",
                  "required": [],
                  "title": "labels",
                  "type": "object"
                },
                "priorityClassName": {
                  "default": "null",
                  "description": "The name of the PriorityClass for GrafanaAgent pods",
                  "required": [],
                  "title": "priorityClassName",
                  "type": "null"
                },
                "resources": {
                  "additionalProperties": true,
                  "description": "Resource requests and limits for the grafanaAgent pods",
                  "required": [],
                  "title": "resources",
                  "type": "object"
                },
                "tolerations": {
                  "description": "  limits:\n    memory: 200Mi\n  requests:\n    cpu: 50m\n    memory: 100Mi\nTolerations for GrafanaAgent pods",
                  "items": {
                    "required": []
                  },
                  "required": [],
                  "title": "tolerations",
                  "type": "array"
                }
              },
              "required": [],
              "title": "grafanaAgent",
              "type": "object"
            },
            "logsInstance": {
              "additionalProperties": true,
              "description": "LogsInstance configuration",
              "properties": {
                "annotations": {
                  "additionalProperties": true,
                  "description": "LogsInstance annotations",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "clients": {
                  "default": "null",
                  "description": "Additional clients for remote write",
                  "required": [],
                  "title": "clients",
                  "type": "null"
                },
                "labels": {
                  "additionalProperties": true,
                  "description": "Additional LogsInstance labels",
                  "required": [],
                  "title": "labels",
                  "type": "object"
                }
              },
              "required": [],
              "title": "logsInstance",
              "type": "object"
            },
            "podLogs": {
              "additionalProperties": true,
              "description": "PodLogs configuration",
              "properties": {
                "additionalPipelineStages": {
                  "description": "Additional pipeline stages to process logs after scraping\nhttps://grafana.com/docs/agent/latest/operator/api/#pipelinestagespec-a-namemonitoringgrafanacomv1alpha1pipelinestagespeca",
                  "items": {
                    "required": []
                  },
                  "required": [],
                  "title": "additionalPipelineStages",
                  "type": "array"
                },
                "annotations": {
                  "additionalProperties": true,
                  "description": "PodLogs annotations",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "apiVersion": {
                  "default": "monitoring.grafana.com/v1alpha1",
                  "description": "PodLogs version",
                  "required": [],
                  "title": "apiVersion",
                  "type": "string"
                },
                "labels": {
                  "additionalProperties": true,
                  "description": "Additional PodLogs labels",
                  "required": [],
                  "title": "labels",
                  "type": "object"
                },
                "relabelings": {
                  "description": "PodLogs relabel configs to apply to samples before scraping\nhttps://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#relabelconfig",
                  "items": {
                    "required": []
                  },
                  "required": [],
                  "title": "relabelings",
                  "type": "array"
                }
              },
              "required": [],
              "title": "podLogs",
              "type": "object"
            },
            "tenant": {
              "additionalProperties": true,
              "description": "Tenant to use for self monitoring",
              "properties": {
                "name": {
                  "default": "self-monitoring",
                  "description": "Name of the tenant",
                  "required": [],
                  "title": "name",
                  "type": "string"
                },
                "password": {
                  "default": "null",
                  "description": "Password of the gateway for Basic auth",
                  "required": [],
                  "title": "password",
                  "type": "null"
                },
                "secretNamespace": {
                  "default": "{{ include \"loki.namespace\" . }}",
                  "description": "Namespace to create additional tenant token secret in. Useful if your Grafana instance\nis in a separate namespace. Token will still be created in the canary namespace.",
                  "required": [],
                  "title": "secretNamespace",
                  "type": "string"
                }
              },
              "required": [],
              "title": "tenant",
              "type": "object"
            }
          },
          "required": [],
          "title": "selfMonitoring",
          "type": "object"
        },
        "serviceMonitor": {
          "additionalProperties": true,
          "description": "ServiceMonitor configuration",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "ServiceMonitor annotations",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "If enabled, ServiceMonitor resources for Prometheus Operator are created",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "interval": {
              "default": "15s",
              "description": "ServiceMonitor scrape interval\nDefault is 15s because included recording rules use a 1m rate, and scrape interval needs to be at\nleast 1/4 rate interval.",
              "required": [],
              "title": "interval",
              "type": "string"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Additional ServiceMonitor labels",
              "properties": {
                "release": {
                  "required": [],
                  "title": "release",
                  "type": "string"
                }
              },
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "metricRelabelings": {
              "description": "ServiceMonitor metric relabel configs to apply to samples before ingestion\nhttps://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#endpoint",
              "items": {
                "required": []
              },
              "required": [],
              "title": "metricRelabelings",
              "type": "array"
            },
            "metricsInstance": {
              "additionalProperties": true,
              "description": "DEPRECATED If defined, will create a MetricsInstance for the Grafana Agent Operator.",
              "properties": {
                "annotations": {
                  "additionalProperties": true,
                  "description": "MetricsInstance annotations",
                  "required": [],
                  "title": "annotations",
                  "type": "object"
                },
                "enabled": {
                  "default": true,
                  "description": "If enabled, MetricsInstance resources for Grafana Agent Operator are created",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "labels": {
                  "additionalProperties": true,
                  "description": "Additional MetricsInstance labels",
                  "required": [],
                  "title": "labels",
                  "type": "object"
                },
                "remoteWrite": {
                  "default": "null",
                  "description": "If defined a MetricsInstance will be created to remote write metrics.",
                  "required": [],
                  "title": "remoteWrite",
                  "type": "null"
                }
              },
              "required": [],
              "title": "metricsInstance",
              "type": "object"
            },
            "namespaceSelector": {
              "additionalProperties": true,
              "description": "Namespace selector for ServiceMonitor resources",
              "required": [],
              "title": "namespaceSelector",
              "type": "object"
            },
            "relabelings": {
              "description": "ServiceMonitor relabel configs to apply to samples before scraping\nhttps://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#relabelconfig",
              "items": {
                "required": []
              },
              "required": [],
              "title": "relabelings",
              "type": "array"
            },
            "scheme": {
              "default": "http",
              "description": "ServiceMonitor will use http by default, but you can pick https as well",
              "required": [],
              "title": "scheme",
              "type": "string"
            },
            "scrapeTimeout": {
              "default": "null",
              "description": "ServiceMonitor scrape timeout in Go duration format (e.g. 15s)",
              "required": [],
              "title": "scrapeTimeout",
              "type": "null"
            },
            "tlsConfig": {
              "default": "null",
              "description": "ServiceMonitor will use these tlsConfig settings to make the health check requests",
              "required": [],
              "title": "tlsConfig",
              "type": "null"
            }
          },
          "required": [],
          "title": "serviceMonitor",
          "type": "object"
        }
      },
      "required": [],
      "title": "monitoring",
      "type": "object"
    },
    "mountPath": {
      "default": "/export",
      "description": "# Path where PV would be mounted on the MinIO Pod",
      "required": [],
      "title": "mountPath",
      "type": "string"
    },
    "nameOverride": {
      "default": "null",
      "description": "Overrides the chart's name",
      "required": [],
      "title": "nameOverride",
      "type": "null"
    },
    "namespaceOverride": {
      "default": "null",
      "description": "Overrides the chart's namespace",
      "required": [],
      "title": "namespaceOverride",
      "type": "null"
    },
    "networkPolicy": {
      "additionalProperties": true,
      "description": "#####################################################################################################################\n\nNetwork Policy configuration\n\n#####################################################################################################################",
      "properties": {
        "alertmanager": {
          "additionalProperties": true,
          "properties": {
            "namespaceSelector": {
              "additionalProperties": true,
              "description": "Specifies the namespace the alertmanager is running in",
              "required": [],
              "title": "namespaceSelector",
              "type": "object"
            },
            "podSelector": {
              "additionalProperties": true,
              "description": "Specifies the alertmanager Pods.\nAs this is cross-namespace communication, you also need the namespaceSelector.",
              "required": [],
              "title": "podSelector",
              "type": "object"
            },
            "port": {
              "default": 9093,
              "description": "Specify the alertmanager port used for alerting",
              "required": [],
              "title": "port",
              "type": "integer"
            }
          },
          "required": [],
          "title": "alertmanager",
          "type": "object"
        },
        "allowExternal": {
          "default": true,
          "required": [],
          "title": "allowExternal",
          "type": "boolean"
        },
        "discovery": {
          "additionalProperties": true,
          "properties": {
            "namespaceSelector": {
              "additionalProperties": true,
              "description": "Specifies the namespace the discovery Pods are running in",
              "required": [],
              "title": "namespaceSelector",
              "type": "object"
            },
            "podSelector": {
              "additionalProperties": true,
              "description": "Specifies the Pods labels used for discovery.\nAs this is cross-namespace communication, you also need the namespaceSelector.",
              "required": [],
              "title": "podSelector",
              "type": "object"
            },
            "port": {
              "default": "null",
              "description": "(int) Specify the port used for discovery",
              "required": [],
              "title": "port",
              "type": "null"
            }
          },
          "required": [],
          "title": "discovery",
          "type": "object"
        },
        "egressEntities": {
          "description": "only when using flavor: cilium",
          "items": {
            "required": [],
            "type": "string"
          },
          "required": [],
          "title": "egressEntities",
          "type": "array"
        },
        "egressKubeApiserver": {
          "additionalProperties": true,
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enable additional cilium egress rules to kube-apiserver for backend.",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "egressKubeApiserver",
          "type": "object"
        },
        "egressWorld": {
          "additionalProperties": true,
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enable additional cilium egress rules to external world for write, read and backend.",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "egressWorld",
          "type": "object"
        },
        "enabled": {
          "default": false,
          "description": "Specifies whether Network Policies should be created",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "externalStorage": {
          "additionalProperties": true,
          "properties": {
            "cidrs": {
              "description": "Specifies specific network CIDRs you want to limit access to",
              "items": {
                "required": []
              },
              "required": [],
              "title": "cidrs",
              "type": "array"
            },
            "ports": {
              "description": "Specify the port used for external storage, e.g. AWS S3",
              "items": {
                "required": []
              },
              "required": [],
              "title": "ports",
              "type": "array"
            }
          },
          "required": [],
          "title": "externalStorage",
          "type": "object"
        },
        "flavor": {
          "default": "kubernetes",
          "description": "Specifies whether the policies created will be standard Network Policies (flavor: kubernetes)\nor Cilium Network Policies (flavor: cilium)",
          "required": [],
          "title": "flavor",
          "type": "string"
        },
        "ingress": {
          "additionalProperties": true,
          "properties": {
            "namespaceSelector": {
              "additionalProperties": true,
              "description": "Specifies the namespaces which are allowed to access the http port",
              "required": [],
              "title": "namespaceSelector",
              "type": "object"
            },
            "podSelector": {
              "additionalProperties": true,
              "description": "Specifies the Pods which are allowed to access the http port.\nAs this is cross-namespace communication, you also need the namespaceSelector.",
              "required": [],
              "title": "podSelector",
              "type": "object"
            }
          },
          "required": [],
          "title": "ingress",
          "type": "object"
        },
        "metrics": {
          "additionalProperties": true,
          "properties": {
            "cidrs": {
              "description": "Specifies specific network CIDRs which are allowed to access the metrics port.\nIn case you use namespaceSelector, you also have to specify your kubelet networks here.\nThe metrics ports are also used for probes.",
              "items": {
                "required": []
              },
              "required": [],
              "title": "cidrs",
              "type": "array"
            },
            "namespaceSelector": {
              "additionalProperties": true,
              "description": "Specifies the namespaces which are allowed to access the metrics port",
              "required": [],
              "title": "namespaceSelector",
              "type": "object"
            },
            "podSelector": {
              "additionalProperties": true,
              "description": "Specifies the Pods which are allowed to access the metrics port.\nAs this is cross-namespace communication, you also need the namespaceSelector.",
              "required": [],
              "title": "podSelector",
              "type": "object"
            }
          },
          "required": [],
          "title": "metrics",
          "type": "object"
        }
      },
      "required": [],
      "title": "networkPolicy",
      "type": "object"
    },
    "nodeSelector": {
      "additionalProperties": true,
      "description": "# Node labels for pod assignment\n# Ref: https://kubernetes.io/docs/user-guide/node-selection/\n#",
      "required": [],
      "title": "nodeSelector",
      "type": "object"
    },
    "oidc": {
      "additionalProperties": true,
      "description": "# OpenID Identity Management\n# The following section documents environment variables for enabling external identity management using an OpenID Connect (OIDC)-compatible provider.\n# See https://min.io/docs/minio/linux/operations/external-iam/configure-openid-external-identity-management.html for a tutorial on using these variables.",
      "properties": {
        "claimName": {
          "default": "policy",
          "required": [],
          "title": "claimName",
          "type": "string"
        },
        "claimPrefix": {
          "default": "",
          "description": "Can leave empty",
          "required": [],
          "title": "claimPrefix",
          "type": "string"
        },
        "clientId": {
          "default": "minio",
          "required": [],
          "title": "clientId",
          "type": "string"
        },
        "clientSecret": {
          "default": "",
          "required": [],
          "title": "clientSecret",
          "type": "string"
        },
        "comment": {
          "default": "",
          "required": [],
          "title": "comment",
          "type": "string"
        },
        "configUrl": {
          "default": "https://identity-provider-url/.well-known/openid-configuration",
          "required": [],
          "title": "configUrl",
          "type": "string"
        },
        "displayName": {
          "default": "",
          "required": [],
          "title": "displayName",
          "type": "string"
        },
        "enabled": {
          "default": false,
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "existingClientIdKey": {
          "default": "",
          "required": [],
          "title": "existingClientIdKey",
          "type": "string"
        },
        "existingClientSecretKey": {
          "default": "",
          "required": [],
          "title": "existingClientSecretKey",
          "type": "string"
        },
        "existingClientSecretName": {
          "default": "",
          "description": "Provide existing client secret from the Kubernetes Secret resource, existing secret will have priority over `clientId` and/or `clientSecret``",
          "required": [],
          "title": "existingClientSecretName",
          "type": "string"
        },
        "redirectUri": {
          "default": "https://console-endpoint-url/oauth_callback",
          "required": [],
          "title": "redirectUri",
          "type": "string"
        },
        "scopes": {
          "default": "openid,profile,email",
          "required": [],
          "title": "scopes",
          "type": "string"
        }
      },
      "required": [],
      "title": "oidc",
      "type": "object"
    },
    "overridesExporter": {
      "additionalProperties": true,
      "description": "Configuration for the overrides-exporter",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for overrides-exporter pods.\nThe value will be passed through tpl.",
          "properties": {
            "podAntiAffinity": {
              "additionalProperties": true,
              "properties": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "additionalProperties": true,
                    "properties": {
                      "labelSelector": {
                        "additionalProperties": true,
                        "properties": {
                          "matchLabels": {
                            "additionalProperties": true,
                            "properties": {
                              "app.kubernetes.io/component": {
                                "default": "overrides-exporter",
                                "required": [],
                                "title": "app.kubernetes.io/component",
                                "type": "string"
                              },
                              "app.kubernetes.io/instance": {
                                "default": "{{ .Release.Name }}",
                                "required": [],
                                "title": "app.kubernetes.io/instance",
                                "type": "string"
                              },
                              "app.kubernetes.io/name": {
                                "default": "{{ include \"loki.name\" . }}",
                                "required": [],
                                "title": "app.kubernetes.io/name",
                                "type": "string"
                              }
                            },
                            "required": [],
                            "title": "matchLabels",
                            "type": "object"
                          }
                        },
                        "required": [],
                        "title": "labelSelector",
                        "type": "object"
                      },
                      "topologyKey": {
                        "default": "kubernetes.io/hostname",
                        "required": [],
                        "title": "topologyKey",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "required": [],
                  "title": "requiredDuringSchedulingIgnoredDuringExecution",
                  "type": "array"
                }
              },
              "required": [],
              "title": "podAntiAffinity",
              "type": "object"
            }
          },
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "appProtocol": {
          "additionalProperties": true,
          "description": "Set the optional grpc service protocol. Ex: \"grpc\", \"http2\" or \"https\"",
          "properties": {
            "grpc": {
              "default": "",
              "required": [],
              "title": "grpc",
              "type": "string"
            }
          },
          "required": [],
          "title": "appProtocol",
          "type": "object"
        },
        "command": {
          "default": "null",
          "description": "Command to execute instead of defined in Docker image",
          "required": [],
          "title": "command",
          "type": "null"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "DNSConfig for overrides-exporter",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "enabled": {
          "default": false,
          "description": "The overrides-exporter component is optional and can be disabled if desired.",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "extraArgs": {
          "description": "Additional CLI args for the overrides-exporter",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Containers to add to the overrides-exporter pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraEnv": {
          "description": "Environment variables to add to the overrides-exporter pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "Environment variables from secrets or configmaps to add to the overrides-exporter pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "Volume mounts to add to the overrides-exporter pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Volumes to add to the overrides-exporter pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostAliases": {
          "description": "hostAliases to add",
          "items": {
            "required": []
          },
          "required": [],
          "title": "hostAliases",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": " - ip: 1.2.3.4\n   hostnames:\n     - domain.tld\nUse the host's user namespace in the overrides-exporter",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "registry": {
              "default": "null",
              "description": "The Docker registry for the overrides-exporter image. Overrides `loki.image.registry`",
              "required": [],
              "title": "registry",
              "type": "null"
            },
            "repository": {
              "default": "null",
              "description": "Docker image repository for the overrides-exporter image. Overrides `loki.image.repository`",
              "required": [],
              "title": "repository",
              "type": "null"
            },
            "tag": {
              "default": "null",
              "description": "Docker image tag for the overrides-exporter image. Overrides `loki.image.tag`",
              "required": [],
              "title": "tag",
              "type": "null"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "initContainers": {
          "description": "Init containers to add to the overrides-exporter pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "maxUnavailable": {
          "default": "null",
          "description": "Pod Disruption Budget maxUnavailable",
          "required": [],
          "title": "maxUnavailable",
          "type": "null"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for overrides-exporter pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for overrides-exporter pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels for overrides-exporter pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "null",
          "description": "The name of the PriorityClass for overrides-exporter pods",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        },
        "replicas": {
          "default": 0,
          "description": "Number of replicas for the overrides-exporter",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource requests and limits for the overrides-exporter",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "serviceAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for overrides-exporter service",
          "required": [],
          "title": "serviceAnnotations",
          "type": "object"
        },
        "serviceLabels": {
          "additionalProperties": true,
          "description": "Labels for overrides-exporter service",
          "required": [],
          "title": "serviceLabels",
          "type": "object"
        },
        "terminationGracePeriodSeconds": {
          "default": 300,
          "description": "Grace period to allow the overrides-exporter to shutdown before it is killed",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "Tolerations for overrides-exporter pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "Topology Spread Constraints for overrides-exporter pods\nThe value will be passed through tpl.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        }
      },
      "required": [],
      "title": "overridesExporter",
      "type": "object"
    },
    "patternIngester": {
      "additionalProperties": true,
      "description": "Configuration for the pattern ingester",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for pattern ingester pods.\nThe value will be passed through tpl.",
          "properties": {
            "podAntiAffinity": {
              "additionalProperties": true,
              "properties": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "additionalProperties": true,
                    "properties": {
                      "labelSelector": {
                        "additionalProperties": true,
                        "properties": {
                          "matchLabels": {
                            "additionalProperties": true,
                            "properties": {
                              "app.kubernetes.io/component": {
                                "default": "pattern-ingester",
                                "required": [],
                                "title": "app.kubernetes.io/component",
                                "type": "string"
                              },
                              "app.kubernetes.io/instance": {
                                "default": "{{ .Release.Name }}",
                                "required": [],
                                "title": "app.kubernetes.io/instance",
                                "type": "string"
                              },
                              "app.kubernetes.io/name": {
                                "default": "{{ include \"loki.name\" . }}",
                                "required": [],
                                "title": "app.kubernetes.io/name",
                                "type": "string"
                              }
                            },
                            "required": [],
                            "title": "matchLabels",
                            "type": "object"
                          }
                        },
                        "required": [],
                        "title": "labelSelector",
                        "type": "object"
                      },
                      "topologyKey": {
                        "default": "kubernetes.io/hostname",
                        "required": [],
                        "title": "topologyKey",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "required": [],
                  "title": "requiredDuringSchedulingIgnoredDuringExecution",
                  "type": "array"
                }
              },
              "required": [],
              "title": "podAntiAffinity",
              "type": "object"
            }
          },
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "appProtocol": {
          "additionalProperties": true,
          "description": "Set the optional grpc service protocol. Ex: \"grpc\", \"http2\" or \"https\"",
          "properties": {
            "grpc": {
              "default": "",
              "required": [],
              "title": "grpc",
              "type": "string"
            }
          },
          "required": [],
          "title": "appProtocol",
          "type": "object"
        },
        "command": {
          "default": "null",
          "description": "Command to execute instead of defined in Docker image",
          "required": [],
          "title": "command",
          "type": "null"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "DNSConfig for pattern ingester pods",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "extraArgs": {
          "description": "Additional CLI args for the pattern ingester",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Containers to add to the pattern ingester pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraEnv": {
          "description": "Environment variables to add to the pattern ingester pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "Environment variables from secrets or configmaps to add to the pattern ingester pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "Volume mounts to add to the pattern ingester pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Volumes to add to the pattern ingester pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostAliases": {
          "description": "hostAliases to add",
          "items": {
            "required": []
          },
          "required": [],
          "title": "hostAliases",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": " - ip: 1.2.3.4\n   hostnames:\n     - domain.tld\nUse the host's user namespace in the pattern ingester",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "registry": {
              "default": "null",
              "description": "The Docker registry for the pattern ingester image. Overrides `loki.image.registry`",
              "required": [],
              "title": "registry",
              "type": "null"
            },
            "repository": {
              "default": "null",
              "description": "Docker image repository for the pattern ingester image. Overrides `loki.image.repository`",
              "required": [],
              "title": "repository",
              "type": "null"
            },
            "tag": {
              "default": "null",
              "description": "Docker image tag for the pattern ingester image. Overrides `loki.image.tag`",
              "required": [],
              "title": "tag",
              "type": "null"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "initContainers": {
          "description": "Init containers to add to the pattern ingester pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "livenessProbe": {
          "additionalProperties": true,
          "description": "liveness probe settings for ingester pods. If empty use `loki.livenessProbe`",
          "required": [],
          "title": "livenessProbe",
          "type": "object"
        },
        "maxUnavailable": {
          "default": "null",
          "description": "Pod Disruption Budget maxUnavailable",
          "required": [],
          "title": "maxUnavailable",
          "type": "null"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for pattern ingester pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "persistence": {
          "additionalProperties": true,
          "properties": {
            "claims": {
              "description": "List of the pattern ingester PVCs",
              "items": {
                "additionalProperties": true,
                "properties": {
                  "accessModes": {
                    "description": "Set access modes on the PersistentVolumeClaim",
                    "items": {
                      "required": [],
                      "type": "string"
                    },
                    "required": [],
                    "title": "accessModes",
                    "type": "array"
                  },
                  "annotations": {
                    "additionalProperties": true,
                    "description": "Annotations for pattern ingester PVCs",
                    "required": [],
                    "title": "annotations",
                    "type": "object"
                  },
                  "labels": {
                    "additionalProperties": true,
                    "description": "Labels for pattern ingester PVCs",
                    "required": [],
                    "title": "labels",
                    "type": "object"
                  },
                  "name": {
                    "default": "data",
                    "required": [],
                    "title": "name",
                    "type": "string"
                  },
                  "size": {
                    "default": "10Gi",
                    "required": [],
                    "title": "size",
                    "type": "string"
                  },
                  "storageClass": {
                    "default": "null",
                    "description": "  -- Storage class to be used.\n  If defined, storageClassName: \u003cstorageClass\u003e.\n  If set to \"-\", storageClassName: \"\", which disables dynamic provisioning.\n  If empty or set to null, no storageClassName spec is\n  set, choosing the default provisioner (gp2 on AWS, standard on GKE, AWS, and OpenStack).",
                    "required": [],
                    "title": "storageClass",
                    "type": "null"
                  }
                },
                "required": [],
                "type": "object"
              },
              "required": [],
              "title": "claims",
              "type": "array"
            },
            "enableStatefulSetAutoDeletePVC": {
              "default": false,
              "description": "Enable StatefulSetAutoDeletePVC feature",
              "required": [],
              "title": "enableStatefulSetAutoDeletePVC",
              "type": "boolean"
            },
            "enabled": {
              "default": false,
              "description": "Enable creating PVCs for the pattern ingester",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "size": {
              "default": "10Gi",
              "description": "Size of persistent disk",
              "required": [],
              "title": "size",
              "type": "string"
            },
            "storageClass": {
              "default": "null",
              "description": "Storage class to be used.\nIf defined, storageClassName: \u003cstorageClass\u003e.\nIf set to \"-\", storageClassName: \"\", which disables dynamic provisioning.\nIf empty or set to null, no storageClassName spec is\nset, choosing the default provisioner (gp2 on AWS, standard on GKE, AWS, and OpenStack).",
              "required": [],
              "title": "storageClass",
              "type": "null"
            },
            "whenDeleted": {
              "default": "Retain",
              "required": [],
              "title": "whenDeleted",
              "type": "string"
            },
            "whenScaled": {
              "default": "Retain",
              "required": [],
              "title": "whenScaled",
              "type": "string"
            }
          },
          "required": [],
          "title": "persistence",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for pattern ingester pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels for pattern ingester pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "null",
          "description": "The name of the PriorityClass for pattern ingester pods",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        },
        "readinessProbe": {
          "additionalProperties": true,
          "description": "readiness probe settings for ingester pods. If empty, use `loki.readinessProbe`",
          "required": [],
          "title": "readinessProbe",
          "type": "object"
        },
        "replicas": {
          "default": 0,
          "description": "Number of replicas for the pattern ingester",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource requests and limits for the pattern ingester",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "serviceAccount": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations for the pattern ingester service account",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "automountServiceAccountToken": {
              "default": true,
              "description": "Set this toggle to false to opt out of automounting API credentials for the service account",
              "required": [],
              "title": "automountServiceAccountToken",
              "type": "boolean"
            },
            "create": {
              "default": false,
              "required": [],
              "title": "create",
              "type": "boolean"
            },
            "imagePullSecrets": {
              "description": "Image pull secrets for the pattern ingester service account",
              "items": {
                "required": []
              },
              "required": [],
              "title": "imagePullSecrets",
              "type": "array"
            },
            "name": {
              "default": "null",
              "description": "The name of the ServiceAccount to use for the pattern ingester.\nIf not set and create is true, a name is generated by appending\n\"-pattern-ingester\" to the common ServiceAccount.",
              "required": [],
              "title": "name",
              "type": "null"
            }
          },
          "required": [],
          "title": "serviceAccount",
          "type": "object"
        },
        "serviceAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for pattern ingester service",
          "required": [],
          "title": "serviceAnnotations",
          "type": "object"
        },
        "serviceLabels": {
          "additionalProperties": true,
          "description": "Labels for pattern ingester service",
          "required": [],
          "title": "serviceLabels",
          "type": "object"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "Grace period to allow the pattern ingester to shutdown before it is killed",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "Tolerations for pattern ingester pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "Topology Spread Constraints for pattern ingester pods\nThe value will be passed through tpl.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        }
      },
      "required": [],
      "title": "patternIngester",
      "type": "object"
    },
    "persistence": {
      "additionalProperties": true,
      "description": "# Enable persistence using Persistent Volume Claims\n# ref: http://kubernetes.io/docs/user-guide/persistent-volumes/\n#",
      "properties": {
        "accessMode": {
          "default": "ReadWriteOnce",
          "required": [],
          "title": "accessMode",
          "type": "string"
        },
        "annotations": {
          "additionalProperties": true,
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "enabled": {
          "default": true,
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "existingClaim": {
          "default": "",
          "description": "# A manually managed Persistent Volume and Claim\n# Requires persistence.enabled: true\n# If defined, PVC must be created manually before volume will be bound",
          "required": [],
          "title": "existingClaim",
          "type": "string"
        },
        "size": {
          "default": "500Gi",
          "required": [],
          "title": "size",
          "type": "string"
        },
        "storageClass": {
          "default": "",
          "description": "# minio data Persistent Volume Storage Class\n# If defined, storageClassName: \u003cstorageClass\u003e\n# If set to \"-\", storageClassName: \"\", which disables dynamic provisioning\n# If undefined (the default) or set to null, no storageClassName spec is\n#   set, choosing the default provisioner.  (gp2 on AWS, standard on\n#   GKE, AWS \u0026 OpenStack)\n#\n# Storage class of PV to bind. By default it looks for standard storage class.\n# If the PV uses a different storage class, specify that here.",
          "required": [],
          "title": "storageClass",
          "type": "string"
        },
        "subPath": {
          "default": "",
          "description": "# If subPath is set mount a sub folder of a volume instead of the root of the volume.\n# This is especially handy for volume plugins that don't natively support sub mounting (like glusterfs).\n#",
          "required": [],
          "title": "subPath",
          "type": "string"
        },
        "volumeName": {
          "default": "",
          "required": [],
          "title": "volumeName",
          "type": "string"
        }
      },
      "required": [],
      "title": "persistence",
      "type": "object"
    },
    "podAnnotations": {
      "additionalProperties": true,
      "description": "Pod Annotations",
      "required": [],
      "title": "podAnnotations",
      "type": "object"
    },
    "podDisruptionBudget": {
      "additionalProperties": true,
      "description": "# PodDisruptionBudget settings\n# ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/\n#",
      "properties": {
        "enabled": {
          "default": false,
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "maxUnavailable": {
          "default": 1,
          "required": [],
          "title": "maxUnavailable",
          "type": "integer"
        }
      },
      "required": [],
      "title": "podDisruptionBudget",
      "type": "object"
    },
    "podLabels": {
      "additionalProperties": true,
      "description": "Pod (extra) Labels",
      "required": [],
      "title": "podLabels",
      "type": "object"
    },
    "podSecurityContext": {
      "additionalProperties": true,
      "description": "Pod security context (runAsUser, etc.)",
      "required": [],
      "title": "podSecurityContext",
      "type": "object"
    },
    "policies": {
      "description": "# List of policies to be created after minio install\n#\n# In addition to default policies [readonly|readwrite|writeonly|consoleAdmin|diagnostics]\n# you can define additional policies with custom supported actions and resources",
      "items": {
        "required": []
      },
      "required": [],
      "title": "policies",
      "type": "array"
    },
    "pools": {
      "default": 1,
      "description": "Number of expanded MinIO clusters",
      "required": [],
      "title": "pools",
      "type": "integer"
    },
    "postJob": {
      "additionalProperties": true,
      "description": "# Merge jobs",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "annotations": {
          "additionalProperties": true,
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "securityContext": {
          "additionalProperties": true,
          "properties": {
            "enabled": {
              "default": false,
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "fsGroup": {
              "default": 1000,
              "required": [],
              "title": "fsGroup",
              "type": "integer"
            },
            "runAsGroup": {
              "default": 1000,
              "required": [],
              "title": "runAsGroup",
              "type": "integer"
            },
            "runAsUser": {
              "default": 1000,
              "required": [],
              "title": "runAsUser",
              "type": "integer"
            }
          },
          "required": [],
          "title": "securityContext",
          "type": "object"
        },
        "tolerations": {
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        }
      },
      "required": [],
      "title": "postJob",
      "type": "object"
    },
    "priorityClassName": {
      "default": "",
      "description": "# Pod priority settings\n# ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/\n#",
      "required": [],
      "title": "priorityClassName",
      "type": "string"
    },
    "querier": {
      "additionalProperties": true,
      "description": " Configuration for the querier",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for querier pods.\nThe value will be passed through tpl.",
          "properties": {
            "podAntiAffinity": {
              "additionalProperties": true,
              "properties": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "additionalProperties": true,
                    "properties": {
                      "labelSelector": {
                        "additionalProperties": true,
                        "properties": {
                          "matchLabels": {
                            "additionalProperties": true,
                            "properties": {
                              "app.kubernetes.io/component": {
                                "default": "querier",
                                "required": [],
                                "title": "app.kubernetes.io/component",
                                "type": "string"
                              },
                              "app.kubernetes.io/instance": {
                                "default": "{{ .Release.Name }}",
                                "required": [],
                                "title": "app.kubernetes.io/instance",
                                "type": "string"
                              },
                              "app.kubernetes.io/name": {
                                "default": "{{ include \"loki.name\" . }}",
                                "required": [],
                                "title": "app.kubernetes.io/name",
                                "type": "string"
                              }
                            },
                            "required": [],
                            "title": "matchLabels",
                            "type": "object"
                          }
                        },
                        "required": [],
                        "title": "labelSelector",
                        "type": "object"
                      },
                      "topologyKey": {
                        "default": "kubernetes.io/hostname",
                        "required": [],
                        "title": "topologyKey",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "required": [],
                  "title": "requiredDuringSchedulingIgnoredDuringExecution",
                  "type": "array"
                }
              },
              "required": [],
              "title": "podAntiAffinity",
              "type": "object"
            }
          },
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "appProtocol": {
          "additionalProperties": true,
          "description": "Adds the appProtocol field to the querier service. This allows querier to work with istio protocol selection.",
          "properties": {
            "grpc": {
              "default": "",
              "description": "Set the optional grpc service protocol. Ex: \"grpc\", \"http2\" or \"https\"",
              "required": [],
              "title": "grpc",
              "type": "string"
            }
          },
          "required": [],
          "title": "appProtocol",
          "type": "object"
        },
        "autoscaling": {
          "additionalProperties": true,
          "properties": {
            "behavior": {
              "additionalProperties": true,
              "description": "- type: External\n  external:\n    metric:\n      name: loki_inflight_queries\n    target:\n      type: AverageValue\n      averageValue: 12",
              "properties": {
                "enabled": {
                  "default": false,
                  "description": "Enable autoscaling behaviours",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "scaleDown": {
                  "additionalProperties": true,
                  "description": "define scale down policies, must conform to HPAScalingRules",
                  "required": [],
                  "title": "scaleDown",
                  "type": "object"
                },
                "scaleUp": {
                  "additionalProperties": true,
                  "description": "define scale up policies, must conform to HPAScalingRules",
                  "required": [],
                  "title": "scaleUp",
                  "type": "object"
                }
              },
              "required": [],
              "title": "behavior",
              "type": "object"
            },
            "customMetrics": {
              "description": "Allows one to define custom metrics using the HPA/v2 schema (for example, Pods, Object or External metrics)",
              "items": {
                "required": []
              },
              "required": [],
              "title": "customMetrics",
              "type": "array"
            },
            "enabled": {
              "default": false,
              "description": "Enable autoscaling for the querier, this is only used if `indexGateway.enabled: true`",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "maxReplicas": {
              "default": 3,
              "description": "Maximum autoscaling replicas for the querier",
              "required": [],
              "title": "maxReplicas",
              "type": "integer"
            },
            "minReplicas": {
              "default": 1,
              "description": "Minimum autoscaling replicas for the querier",
              "required": [],
              "title": "minReplicas",
              "type": "integer"
            },
            "targetCPUUtilizationPercentage": {
              "default": 60,
              "description": "Target CPU utilisation percentage for the querier",
              "required": [],
              "title": "targetCPUUtilizationPercentage",
              "type": "integer"
            },
            "targetMemoryUtilizationPercentage": {
              "default": "null",
              "description": "Target memory utilisation percentage for the querier",
              "required": [],
              "title": "targetMemoryUtilizationPercentage",
              "type": "null"
            }
          },
          "required": [],
          "title": "autoscaling",
          "type": "object"
        },
        "command": {
          "default": "null",
          "description": "Command to execute instead of defined in Docker image",
          "required": [],
          "title": "command",
          "type": "null"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "DNSConfig for querier pods",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "extraArgs": {
          "description": "Additional CLI args for the querier",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Containers to add to the querier pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraEnv": {
          "description": "Environment variables to add to the querier pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "Environment variables from secrets or configmaps to add to the querier pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "Volume mounts to add to the querier pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Volumes to add to the querier pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostAliases": {
          "description": "hostAliases to add",
          "items": {
            "required": []
          },
          "required": [],
          "title": "hostAliases",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": " - ip: 1.2.3.4\n   hostnames:\n     - domain.tld\nUse the host's user namespace in the querier",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "registry": {
              "default": "null",
              "description": "The Docker registry for the querier image. Overrides `loki.image.registry`",
              "required": [],
              "title": "registry",
              "type": "null"
            },
            "repository": {
              "default": "null",
              "description": "Docker image repository for the querier image. Overrides `loki.image.repository`",
              "required": [],
              "title": "repository",
              "type": "null"
            },
            "tag": {
              "default": "null",
              "description": "Docker image tag for the querier image. Overrides `loki.image.tag`",
              "required": [],
              "title": "tag",
              "type": "null"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "initContainers": {
          "description": "Init containers to add to the querier pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "maxSurge": {
          "default": 0,
          "description": "Max Surge for querier pods",
          "required": [],
          "title": "maxSurge",
          "type": "integer"
        },
        "maxUnavailable": {
          "default": "null",
          "description": "Pod Disruption Budget maxUnavailable",
          "required": [],
          "title": "maxUnavailable",
          "type": "null"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for querier pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for querier pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels for querier pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "null",
          "description": "The name of the PriorityClass for querier pods",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        },
        "replicas": {
          "default": 0,
          "description": "Number of replicas for the querier",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource requests and limits for the querier",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "serviceAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for querier service",
          "required": [],
          "title": "serviceAnnotations",
          "type": "object"
        },
        "serviceLabels": {
          "additionalProperties": true,
          "description": "Labels for querier service",
          "required": [],
          "title": "serviceLabels",
          "type": "object"
        },
        "serviceType": {
          "default": "ClusterIP",
          "description": "Service Type for querier service",
          "required": [],
          "title": "serviceType",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "Grace period to allow the querier to shutdown before it is killed",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "Tolerations for querier pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "topologySpread for querier pods.\nThe value will be passed through tpl.",
          "items": {
            "additionalProperties": true,
            "properties": {
              "labelSelector": {
                "additionalProperties": true,
                "properties": {
                  "matchLabels": {
                    "additionalProperties": true,
                    "properties": {
                      "app.kubernetes.io/component": {
                        "default": "querier",
                        "required": [],
                        "title": "app.kubernetes.io/component",
                        "type": "string"
                      },
                      "app.kubernetes.io/instance": {
                        "default": "{{ .Release.Name }}",
                        "required": [],
                        "title": "app.kubernetes.io/instance",
                        "type": "string"
                      },
                      "app.kubernetes.io/name": {
                        "default": "{{ include \"loki.name\" . }}",
                        "required": [],
                        "title": "app.kubernetes.io/name",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "title": "matchLabels",
                    "type": "object"
                  }
                },
                "required": [],
                "title": "labelSelector",
                "type": "object"
              },
              "maxSkew": {
                "default": 1,
                "required": [],
                "title": "maxSkew",
                "type": "integer"
              },
              "topologyKey": {
                "default": "kubernetes.io/hostname",
                "required": [],
                "title": "topologyKey",
                "type": "string"
              },
              "whenUnsatisfiable": {
                "default": "ScheduleAnyway",
                "required": [],
                "title": "whenUnsatisfiable",
                "type": "string"
              }
            },
            "required": [],
            "type": "object"
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        }
      },
      "required": [],
      "title": "querier",
      "type": "object"
    },
    "queryFrontend": {
      "additionalProperties": true,
      "description": "Configuration for the query-frontend",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for query-frontend pods.\nThe value will be passed through tpl.",
          "properties": {
            "podAntiAffinity": {
              "additionalProperties": true,
              "properties": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "additionalProperties": true,
                    "properties": {
                      "labelSelector": {
                        "additionalProperties": true,
                        "properties": {
                          "matchLabels": {
                            "additionalProperties": true,
                            "properties": {
                              "app.kubernetes.io/component": {
                                "default": "query-frontend",
                                "required": [],
                                "title": "app.kubernetes.io/component",
                                "type": "string"
                              },
                              "app.kubernetes.io/instance": {
                                "default": "{{ .Release.Name }}",
                                "required": [],
                                "title": "app.kubernetes.io/instance",
                                "type": "string"
                              },
                              "app.kubernetes.io/name": {
                                "default": "{{ include \"loki.name\" . }}",
                                "required": [],
                                "title": "app.kubernetes.io/name",
                                "type": "string"
                              }
                            },
                            "required": [],
                            "title": "matchLabels",
                            "type": "object"
                          }
                        },
                        "required": [],
                        "title": "labelSelector",
                        "type": "object"
                      },
                      "topologyKey": {
                        "default": "kubernetes.io/hostname",
                        "required": [],
                        "title": "topologyKey",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "required": [],
                  "title": "requiredDuringSchedulingIgnoredDuringExecution",
                  "type": "array"
                }
              },
              "required": [],
              "title": "podAntiAffinity",
              "type": "object"
            }
          },
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "appProtocol": {
          "additionalProperties": true,
          "description": "Adds the appProtocol field to the queryFrontend service. This allows queryFrontend to work with istio protocol selection.",
          "properties": {
            "grpc": {
              "default": "",
              "description": "Set the optional grpc service protocol. Ex: \"grpc\", \"http2\" or \"https\"",
              "required": [],
              "title": "grpc",
              "type": "string"
            }
          },
          "required": [],
          "title": "appProtocol",
          "type": "object"
        },
        "autoscaling": {
          "additionalProperties": true,
          "properties": {
            "behavior": {
              "additionalProperties": true,
              "description": "- type: Pods\n  pods:\n    metric:\n      name: loki_query_rate\n    target:\n      type: AverageValue\n      averageValue: 100",
              "properties": {
                "enabled": {
                  "default": false,
                  "description": "Enable autoscaling behaviours",
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                },
                "scaleDown": {
                  "additionalProperties": true,
                  "description": "define scale down policies, must conform to HPAScalingRules",
                  "required": [],
                  "title": "scaleDown",
                  "type": "object"
                },
                "scaleUp": {
                  "additionalProperties": true,
                  "description": "define scale up policies, must conform to HPAScalingRules",
                  "required": [],
                  "title": "scaleUp",
                  "type": "object"
                }
              },
              "required": [],
              "title": "behavior",
              "type": "object"
            },
            "customMetrics": {
              "description": "Allows one to define custom metrics using the HPA/v2 schema (for example, Pods, Object or External metrics)",
              "items": {
                "required": []
              },
              "required": [],
              "title": "customMetrics",
              "type": "array"
            },
            "enabled": {
              "default": false,
              "description": "Enable autoscaling for the query-frontend",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "maxReplicas": {
              "default": 3,
              "description": "Maximum autoscaling replicas for the query-frontend",
              "required": [],
              "title": "maxReplicas",
              "type": "integer"
            },
            "minReplicas": {
              "default": 1,
              "description": "Minimum autoscaling replicas for the query-frontend",
              "required": [],
              "title": "minReplicas",
              "type": "integer"
            },
            "targetCPUUtilizationPercentage": {
              "default": 60,
              "description": "Target CPU utilisation percentage for the query-frontend",
              "required": [],
              "title": "targetCPUUtilizationPercentage",
              "type": "integer"
            },
            "targetMemoryUtilizationPercentage": {
              "default": "null",
              "description": "Target memory utilisation percentage for the query-frontend",
              "required": [],
              "title": "targetMemoryUtilizationPercentage",
              "type": "null"
            }
          },
          "required": [],
          "title": "autoscaling",
          "type": "object"
        },
        "command": {
          "default": "null",
          "description": "Command to execute instead of defined in Docker image",
          "required": [],
          "title": "command",
          "type": "null"
        },
        "extraArgs": {
          "description": "Additional CLI args for the query-frontend",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Containers to add to the query-frontend pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraEnv": {
          "description": "Environment variables to add to the query-frontend pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "Environment variables from secrets or configmaps to add to the query-frontend pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "Volume mounts to add to the query-frontend pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Volumes to add to the query-frontend pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostAliases": {
          "description": "hostAliases to add",
          "items": {
            "required": []
          },
          "required": [],
          "title": "hostAliases",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": " - ip: 1.2.3.4\n   hostnames:\n     - domain.tld\nUse the host's user namespace in the query-frontend",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "registry": {
              "default": "null",
              "description": "The Docker registry for the query-frontend image. Overrides `loki.image.registry`",
              "required": [],
              "title": "registry",
              "type": "null"
            },
            "repository": {
              "default": "null",
              "description": "Docker image repository for the query-frontend image. Overrides `loki.image.repository`",
              "required": [],
              "title": "repository",
              "type": "null"
            },
            "tag": {
              "default": "null",
              "description": "Docker image tag for the query-frontend image. Overrides `loki.image.tag`",
              "required": [],
              "title": "tag",
              "type": "null"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "initContainers": {
          "description": "init containers to add to the query-frontend pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "maxUnavailable": {
          "default": "null",
          "description": "Pod Disruption Budget maxUnavailable",
          "required": [],
          "title": "maxUnavailable",
          "type": "null"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for query-frontend pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for query-frontend pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels for query-frontend pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "null",
          "description": "The name of the PriorityClass for query-frontend pods",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        },
        "replicas": {
          "default": 0,
          "description": "Number of replicas for the query-frontend",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource requests and limits for the query-frontend",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "serviceAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for query-frontend service",
          "required": [],
          "title": "serviceAnnotations",
          "type": "object"
        },
        "serviceLabels": {
          "additionalProperties": true,
          "description": "Labels for query-frontend service",
          "required": [],
          "title": "serviceLabels",
          "type": "object"
        },
        "serviceType": {
          "default": "ClusterIP",
          "description": "Service Type for query-frontend service",
          "required": [],
          "title": "serviceType",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "Grace period to allow the query-frontend to shutdown before it is killed",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "Tolerations for query-frontend pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "Topology Spread Constraints for query-frontend pods\nThe value will be passed through tpl.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        }
      },
      "required": [],
      "title": "queryFrontend",
      "type": "object"
    },
    "queryScheduler": {
      "additionalProperties": true,
      "description": "Configuration for the query-scheduler",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for query-scheduler pods.\nThe value will be passed through tpl.",
          "properties": {
            "podAntiAffinity": {
              "additionalProperties": true,
              "properties": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "additionalProperties": true,
                    "properties": {
                      "labelSelector": {
                        "additionalProperties": true,
                        "properties": {
                          "matchLabels": {
                            "additionalProperties": true,
                            "properties": {
                              "app.kubernetes.io/component": {
                                "default": "query-scheduler",
                                "required": [],
                                "title": "app.kubernetes.io/component",
                                "type": "string"
                              },
                              "app.kubernetes.io/instance": {
                                "default": "{{ .Release.Name }}",
                                "required": [],
                                "title": "app.kubernetes.io/instance",
                                "type": "string"
                              },
                              "app.kubernetes.io/name": {
                                "default": "{{ include \"loki.name\" . }}",
                                "required": [],
                                "title": "app.kubernetes.io/name",
                                "type": "string"
                              }
                            },
                            "required": [],
                            "title": "matchLabels",
                            "type": "object"
                          }
                        },
                        "required": [],
                        "title": "labelSelector",
                        "type": "object"
                      },
                      "topologyKey": {
                        "default": "kubernetes.io/hostname",
                        "required": [],
                        "title": "topologyKey",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "required": [],
                  "title": "requiredDuringSchedulingIgnoredDuringExecution",
                  "type": "array"
                }
              },
              "required": [],
              "title": "podAntiAffinity",
              "type": "object"
            }
          },
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "appProtocol": {
          "additionalProperties": true,
          "description": "Set the optional grpc service protocol. Ex: \"grpc\", \"http2\" or \"https\"",
          "properties": {
            "grpc": {
              "default": "",
              "required": [],
              "title": "grpc",
              "type": "string"
            }
          },
          "required": [],
          "title": "appProtocol",
          "type": "object"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "DNSConfig for query-scheduler",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "extraArgs": {
          "description": "Additional CLI args for the query-scheduler",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Containers to add to the query-scheduler pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraEnv": {
          "description": "Environment variables to add to the query-scheduler pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "Environment variables from secrets or configmaps to add to the query-scheduler pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "Volume mounts to add to the query-scheduler pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Volumes to add to the query-scheduler pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostAliases": {
          "description": "hostAliases to add",
          "items": {
            "required": []
          },
          "required": [],
          "title": "hostAliases",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": " - ip: 1.2.3.4\n   hostnames:\n     - domain.tld\nUse the host's user namespace in the query-scheduler",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "registry": {
              "default": "null",
              "description": "The Docker registry for the query-scheduler image. Overrides `loki.image.registry`",
              "required": [],
              "title": "registry",
              "type": "null"
            },
            "repository": {
              "default": "null",
              "description": "Docker image repository for the query-scheduler image. Overrides `loki.image.repository`",
              "required": [],
              "title": "repository",
              "type": "null"
            },
            "tag": {
              "default": "null",
              "description": "Docker image tag for the query-scheduler image. Overrides `loki.image.tag`",
              "required": [],
              "title": "tag",
              "type": "null"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "initContainers": {
          "description": "init containers to add to the query-scheduler pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "maxUnavailable": {
          "default": 1,
          "description": "Pod Disruption Budget maxUnavailable",
          "required": [],
          "title": "maxUnavailable",
          "type": "integer"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for query-scheduler pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for query-scheduler pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels for query-scheduler pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "null",
          "description": "The name of the PriorityClass for query-scheduler pods",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        },
        "replicas": {
          "default": 0,
          "description": "Number of replicas for the query-scheduler.\nIt should be lower than `-querier.max-concurrent` to avoid generating back-pressure in queriers;\nit's also recommended that this value evenly divides the latter",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource requests and limits for the query-scheduler",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "serviceAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for query-scheduler service",
          "required": [],
          "title": "serviceAnnotations",
          "type": "object"
        },
        "serviceLabels": {
          "additionalProperties": true,
          "description": "Labels for query-scheduler service",
          "required": [],
          "title": "serviceLabels",
          "type": "object"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "Grace period to allow the query-scheduler to shutdown before it is killed",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "Tolerations for query-scheduler pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "Topology Spread Constraints for query-scheduler pods\nThe value will be passed through tpl.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        }
      },
      "required": [],
      "title": "queryScheduler",
      "type": "object"
    },
    "rbac": {
      "additionalProperties": true,
      "description": "RBAC configuration",
      "properties": {
        "create": {
          "default": true,
          "description": "Toggle to create ClusterRole and ClusterRoleBinding",
          "required": [],
          "title": "create",
          "type": "boolean"
        },
        "namespaced": {
          "default": false,
          "description": "seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'\nseccomp.security.alpha.kubernetes.io/defaultProfileName: 'docker/default'\napparmor.security.beta.kubernetes.io/defaultProfileName: 'runtime/default'\nWhether to install RBAC in the namespace only or cluster-wide. Useful if you want to watch ConfigMap globally.",
          "required": [],
          "title": "namespaced",
          "type": "boolean"
        },
        "podSecurityPolicyName": {
          "default": "",
          "description": "Name of a PodSecurityPolicy to use in the ClusterRole. If unset, no PodSecurityPolicy is used.",
          "required": [],
          "title": "podSecurityPolicyName",
          "type": "string"
        },
        "pspAnnotations": {
          "additionalProperties": true,
          "description": "Specify PSP annotations\nRef: https://kubernetes.io/docs/reference/access-authn-authz/psp-to-pod-security-standards/#podsecuritypolicy-annotations",
          "required": [],
          "title": "pspAnnotations",
          "type": "object"
        },
        "pspEnabled": {
          "default": false,
          "description": "If pspEnabled true, a PodSecurityPolicy is created for K8s that use psp.",
          "required": [],
          "title": "pspEnabled",
          "type": "boolean"
        },
        "sccAllowHostDirVolumePlugin": {
          "default": false,
          "description": "Toggle this to true to allow the use of hostPath volumes on OpenShift",
          "required": [],
          "title": "sccAllowHostDirVolumePlugin",
          "type": "boolean"
        },
        "sccEnabled": {
          "default": false,
          "description": "For OpenShift set pspEnabled to 'false' and sccEnabled to 'true' to use the SecurityContextConstraints.",
          "required": [],
          "title": "sccEnabled",
          "type": "boolean"
        }
      },
      "required": [],
      "title": "rbac",
      "type": "object"
    },
    "read": {
      "additionalProperties": true,
      "description": " Configuration for the read pod(s)",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for read pods.\nThe value will be passed through tpl.",
          "properties": {
            "podAntiAffinity": {
              "additionalProperties": true,
              "properties": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "additionalProperties": true,
                    "properties": {
                      "labelSelector": {
                        "additionalProperties": true,
                        "properties": {
                          "matchLabels": {
                            "additionalProperties": true,
                            "properties": {
                              "app.kubernetes.io/component": {
                                "default": "read",
                                "required": [],
                                "title": "app.kubernetes.io/component",
                                "type": "string"
                              },
                              "app.kubernetes.io/instance": {
                                "default": "{{ .Release.Name }}",
                                "required": [],
                                "title": "app.kubernetes.io/instance",
                                "type": "string"
                              },
                              "app.kubernetes.io/name": {
                                "default": "{{ include \"loki.name\" . }}",
                                "required": [],
                                "title": "app.kubernetes.io/name",
                                "type": "string"
                              }
                            },
                            "required": [],
                            "title": "matchLabels",
                            "type": "object"
                          }
                        },
                        "required": [],
                        "title": "labelSelector",
                        "type": "object"
                      },
                      "topologyKey": {
                        "default": "kubernetes.io/hostname",
                        "required": [],
                        "title": "topologyKey",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "required": [],
                  "title": "requiredDuringSchedulingIgnoredDuringExecution",
                  "type": "array"
                }
              },
              "required": [],
              "title": "podAntiAffinity",
              "type": "object"
            }
          },
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "annotations": {
          "additionalProperties": true,
          "description": "Annotations for read deployment",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "autoscaling": {
          "additionalProperties": true,
          "properties": {
            "behavior": {
              "additionalProperties": true,
              "description": "Behavior policies while scaling.",
              "required": [],
              "title": "behavior",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Enable autoscaling for the read, this is only used if `queryIndex.enabled: true`",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "maxReplicas": {
              "default": 6,
              "description": "Maximum autoscaling replicas for the read",
              "required": [],
              "title": "maxReplicas",
              "type": "integer"
            },
            "minReplicas": {
              "default": 2,
              "description": "Minimum autoscaling replicas for the read",
              "required": [],
              "title": "minReplicas",
              "type": "integer"
            },
            "targetCPUUtilizationPercentage": {
              "default": 60,
              "description": "Target CPU utilisation percentage for the read",
              "required": [],
              "title": "targetCPUUtilizationPercentage",
              "type": "integer"
            },
            "targetMemoryUtilizationPercentage": {
              "default": "",
              "description": "Target memory utilisation percentage for the read",
              "required": [],
              "title": "targetMemoryUtilizationPercentage",
              "type": "null"
            }
          },
          "required": [],
          "title": "autoscaling",
          "type": "object"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "DNS config for read pods",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "extraArgs": {
          "description": "Additional CLI args for the read",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Containers to add to the read pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraEnv": {
          "description": "Environment variables to add to the read pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "Environment variables from secrets or configmaps to add to the read pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "Volume mounts to add to the read pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Volumes to add to the read pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": "Use the host's user namespace in the read pods.",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "registry": {
              "default": "null",
              "description": "The Docker registry for the read image. Overrides `loki.image.registry`",
              "required": [],
              "title": "registry",
              "type": "null"
            },
            "repository": {
              "default": "null",
              "description": "Docker image repository for the read image. Overrides `loki.image.repository`",
              "required": [],
              "title": "repository",
              "type": "null"
            },
            "tag": {
              "default": "null",
              "description": "Docker image tag for the read image. Overrides `loki.image.tag`",
              "required": [],
              "title": "tag",
              "type": "null"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "initContainers": {
          "description": "init containers to add to the read pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "legacyReadTarget": {
          "default": false,
          "description": "Whether or not to use the 2 target type simple scalable mode (read, write) or the\n3 target type (read, write, backend). Legacy refers to the 2 target type, so true will\nrun two targets, false will run 3 targets.",
          "required": [],
          "title": "legacyReadTarget",
          "type": "boolean"
        },
        "lifecycle": {
          "additionalProperties": true,
          "description": "Lifecycle for the read container",
          "required": [],
          "title": "lifecycle",
          "type": "object"
        },
        "livenessProbe": {
          "additionalProperties": true,
          "description": "liveness probe settings for read pods. If empty, applies no livenessProbe",
          "required": [],
          "title": "livenessProbe",
          "type": "object"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for read pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "persistence": {
          "additionalProperties": true,
          "description": "read.persistence is used only if legacyReadTarget is set to true",
          "properties": {
            "accessModes": {
              "description": "Set access modes on the PersistentVolumeClaim",
              "items": {
                "required": [],
                "type": "string"
              },
              "required": [],
              "title": "accessModes",
              "type": "array"
            },
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations for volume claim",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "enableStatefulSetAutoDeletePVC": {
              "default": true,
              "description": "Enable StatefulSetAutoDeletePVC feature",
              "required": [],
              "title": "enableStatefulSetAutoDeletePVC",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels for volume claim",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "selector": {
              "default": "null",
              "description": "Selector for persistent disk",
              "required": [],
              "title": "selector",
              "type": "null"
            },
            "size": {
              "default": "10Gi",
              "description": "Size of persistent disk",
              "required": [],
              "title": "size",
              "type": "string"
            },
            "storageClass": {
              "default": "null",
              "description": "Storage class to be used.\nIf defined, storageClassName: \u003cstorageClass\u003e.\nIf set to \"-\", storageClassName: \"\", which disables dynamic provisioning.\nIf empty or set to null, no storageClassName spec is\nset, choosing the default provisioner (gp2 on AWS, standard on GKE, AWS, and OpenStack).",
              "required": [],
              "title": "storageClass",
              "type": "null"
            }
          },
          "required": [],
          "title": "persistence",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for read pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Additional labels for each `read` pod",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "podManagementPolicy": {
          "default": "Parallel",
          "description": "The default is to deploy all pods in parallel.",
          "required": [],
          "title": "podManagementPolicy",
          "type": "string"
        },
        "priorityClassName": {
          "default": "null",
          "description": "The name of the PriorityClass for read pods",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        },
        "replicas": {
          "default": 3,
          "description": "Number of replicas for the read",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource requests and limits for the read",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "selectorLabels": {
          "additionalProperties": true,
          "description": "Additional selector labels for each `read` pod",
          "required": [],
          "title": "selectorLabels",
          "type": "object"
        },
        "service": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations for read Service",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Additional labels for read Service",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "type": {
              "default": "ClusterIP",
              "description": "Service Type for read Service",
              "required": [],
              "title": "type",
              "type": "string"
            }
          },
          "required": [],
          "title": "service",
          "type": "object"
        },
        "targetModule": {
          "default": "read",
          "description": "Comma-separated list of Loki modules to load for the read",
          "required": [],
          "title": "targetModule",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "Grace period to allow the read to shutdown before it is killed",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "Tolerations for read pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "Topology Spread Constraints for read pods\nThe value will be passed through tpl.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        }
      },
      "required": [],
      "title": "read",
      "type": "object"
    },
    "replicas": {
      "default": 16,
      "description": "Number of MinIO containers running",
      "required": [],
      "title": "replicas",
      "type": "integer"
    },
    "resources": {
      "additionalProperties": true,
      "description": "# Configure resource requests and limits\n# ref: http://kubernetes.io/docs/user-guide/compute-resources/\n#",
      "properties": {
        "limits": {
          "additionalProperties": true,
          "properties": {
            "memory": {
              "default": "200Mi",
              "description": "cpu: \"1\"",
              "required": [],
              "title": "memory",
              "type": "string"
            }
          },
          "required": [],
          "title": "limits",
          "type": "object"
        },
        "requests": {
          "additionalProperties": true,
          "properties": {
            "cpu": {
              "default": "100m",
              "required": [],
              "title": "cpu",
              "type": "string"
            },
            "memory": {
              "default": "100Mi",
              "required": [],
              "title": "memory",
              "type": "string"
            }
          },
          "required": [],
          "title": "requests",
          "type": "object"
        }
      },
      "required": [],
      "title": "resources",
      "type": "object"
    },
    "resultsCache": {
      "additionalProperties": true,
      "properties": {
        "addresses": {
          "default": "dnssrvnoa+_memcached-client._tcp.{{ include \"loki.resourceName\" (dict \"ctx\" $ \"component\" \"results-cache\") }}.{{ include \"loki.namespace\" $ }}.svc",
          "description": "Comma separated addresses list in DNS Service Discovery format",
          "required": [],
          "title": "addresses",
          "type": "string"
        },
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for results-cache pods",
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "allocatedMemory": {
          "default": 1024,
          "description": "Amount of memory allocated to results-cache for object storage (in MB).",
          "required": [],
          "title": "allocatedMemory",
          "type": "integer"
        },
        "annotations": {
          "additionalProperties": true,
          "description": "Annotations for the results-cache pods",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "connectionLimit": {
          "default": 16384,
          "description": "Maximum number of connections allowed",
          "required": [],
          "title": "connectionLimit",
          "type": "integer"
        },
        "defaultValidity": {
          "default": "12h",
          "description": "Specify how long cached results should be stored in the results-cache before being expired",
          "required": [],
          "title": "defaultValidity",
          "type": "string"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "DNSConfig for results-cache",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "enabled": {
          "default": true,
          "description": "Specifies whether memcached based results-cache should be enabled",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "extraArgs": {
          "additionalProperties": true,
          "description": "Additional CLI args for results-cache",
          "required": [],
          "title": "extraArgs",
          "type": "object"
        },
        "extraContainers": {
          "description": "Additional containers to be added to the results-cache pod.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraExtendedOptions": {
          "default": "",
          "description": "Add extended options for results-cache memcached container. The format is the same as for the memcached -o/--extend flag.\nExample:\nextraExtendedOptions: 'tls,modern,track_sizes'",
          "required": [],
          "title": "extraExtendedOptions",
          "type": "string"
        },
        "extraVolumeMounts": {
          "description": "Additional volume mounts to be added to the results-cache pod (applies to both memcached and exporter containers).\nExample:\nextraVolumeMounts:\n- name: extra-volume\n  mountPath: /etc/extra-volume\n  readOnly: true",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Additional volumes to be added to the results-cache pod (applies to both memcached and exporter containers).\nExample:\nextraVolumes:\n- name: extra-volume\n  secret:\n   secretName: extra-volume-secret",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": "Use the host's user namespace in results-cache pods",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "initContainers": {
          "description": "Extra init containers for results-cache pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "maxItemMemory": {
          "default": 5,
          "description": "Maximum item results-cache for memcached (in MB).",
          "required": [],
          "title": "maxItemMemory",
          "type": "integer"
        },
        "maxUnavailable": {
          "default": 1,
          "description": "Pod Disruption Budget maxUnavailable",
          "required": [],
          "title": "maxUnavailable",
          "type": "integer"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for results-cache pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "persistence": {
          "additionalProperties": true,
          "description": "Persistence settings for the results-cache",
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enable creating PVCs for the results-cache",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "PVC additional labels",
              "properties": {
                "baz": {
                  "required": [],
                  "title": "baz",
                  "type": "string"
                },
                "foo": {
                  "required": [],
                  "title": "foo",
                  "type": "string"
                }
              },
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "mountPath": {
              "default": "/data",
              "description": "Volume mount path",
              "required": [],
              "title": "mountPath",
              "type": "string"
            },
            "storageClass": {
              "default": "null",
              "description": "Storage class to be used.\nIf defined, storageClassName: \u003cstorageClass\u003e.\nIf set to \"-\", storageClassName: \"\", which disables dynamic provisioning.\nIf empty or set to null, no storageClassName spec is\nset, choosing the default provisioner (gp2 on AWS, standard on GKE, AWS, and OpenStack).",
              "required": [],
              "title": "storageClass",
              "type": "null"
            },
            "storageSize": {
              "default": "10G",
              "description": "Size of persistent disk, must be in G or Gi",
              "required": [],
              "title": "storageSize",
              "type": "string"
            }
          },
          "required": [],
          "title": "persistence",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for results-cache pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels for results-cache pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "podManagementPolicy": {
          "default": "Parallel",
          "description": "Management policy for results-cache pods",
          "required": [],
          "title": "podManagementPolicy",
          "type": "string"
        },
        "port": {
          "default": 11211,
          "description": "Port of the results-cache service",
          "required": [],
          "title": "port",
          "type": "integer"
        },
        "priorityClassName": {
          "default": "null",
          "description": "The name of the PriorityClass for results-cache pods",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        },
        "replicas": {
          "default": 1,
          "description": "Total number of results-cache replicas",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "default": "null",
          "description": "Resource requests and limits for the results-cache\nBy default a safe memory limit will be requested based on allocatedMemory value (floor (* 1.2 allocatedMemory)).",
          "required": [],
          "title": "resources",
          "type": "null"
        },
        "service": {
          "additionalProperties": true,
          "description": "Service annotations and labels",
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "labels": {
              "additionalProperties": true,
              "required": [],
              "title": "labels",
              "type": "object"
            }
          },
          "required": [],
          "title": "service",
          "type": "object"
        },
        "statefulStrategy": {
          "additionalProperties": true,
          "description": "Stateful results-cache strategy",
          "properties": {
            "type": {
              "default": "RollingUpdate",
              "required": [],
              "title": "type",
              "type": "string"
            }
          },
          "required": [],
          "title": "statefulStrategy",
          "type": "object"
        },
        "terminationGracePeriodSeconds": {
          "default": 60,
          "description": "Grace period to allow the results-cache to shutdown before it is killed",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "timeout": {
          "default": "500ms",
          "description": "Memcached operation timeout",
          "required": [],
          "title": "timeout",
          "type": "string"
        },
        "tolerations": {
          "description": " maxSkew: 1\n topologyKey: kubernetes.io/hostname\n whenUnsatisfiable: ScheduleAnyway\nTolerations for results-cache pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "topologySpreadConstraints allows to customize the default topologySpreadConstraints. This can be either a single dict as shown below or a slice of topologySpreadConstraints.\nlabelSelector is taken from the constraint itself (if it exists) or is generated by the chart using the same selectors as for services.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        },
        "writebackBuffer": {
          "default": 500000,
          "description": "Max number of objects to use for cache write back",
          "required": [],
          "title": "writebackBuffer",
          "type": "integer"
        },
        "writebackParallelism": {
          "default": 1,
          "description": "Number of parallel threads for cache write back",
          "required": [],
          "title": "writebackParallelism",
          "type": "integer"
        },
        "writebackSizeLimit": {
          "default": "500MB",
          "description": "Max memory to use for cache write back",
          "required": [],
          "title": "writebackSizeLimit",
          "type": "string"
        }
      },
      "required": [],
      "title": "resultsCache",
      "type": "object"
    },
    "revisionHistoryLimit": {
      "default": 10,
      "description": "Number of old ReplicaSets to retain",
      "required": [],
      "title": "revisionHistoryLimit",
      "type": "integer"
    },
    "rollout_operator": {
      "additionalProperties": true,
      "description": "#####################################################################################################################\n\nSubchart configurations\n\n#####################################################################################################################\nSetting for the Grafana Rollout Operator https://github.com/grafana/helm-charts/tree/main/charts/rollout-operator",
      "properties": {
        "enabled": {
          "default": false,
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "podSecurityContext": {
          "additionalProperties": true,
          "description": "podSecurityContext is the pod security context for the rollout operator.\nWhen installing on OpenShift, override podSecurityContext settings with\n\nrollout_operator:\n  podSecurityContext:\n    fsGroup: null\n    runAsGroup: null\n    runAsUser: null",
          "properties": {
            "fsGroup": {
              "default": 10001,
              "required": [],
              "title": "fsGroup",
              "type": "integer"
            },
            "runAsGroup": {
              "default": 10001,
              "required": [],
              "title": "runAsGroup",
              "type": "integer"
            },
            "runAsNonRoot": {
              "default": true,
              "required": [],
              "title": "runAsNonRoot",
              "type": "boolean"
            },
            "runAsUser": {
              "default": 10001,
              "required": [],
              "title": "runAsUser",
              "type": "integer"
            },
            "seccompProfile": {
              "additionalProperties": true,
              "properties": {
                "type": {
                  "default": "RuntimeDefault",
                  "required": [],
                  "title": "type",
                  "type": "string"
                }
              },
              "required": [],
              "title": "seccompProfile",
              "type": "object"
            }
          },
          "required": [],
          "title": "podSecurityContext",
          "type": "object"
        },
        "securityContext": {
          "additionalProperties": true,
          "description": "Set the container security context",
          "properties": {
            "allowPrivilegeEscalation": {
              "default": false,
              "required": [],
              "title": "allowPrivilegeEscalation",
              "type": "boolean"
            },
            "capabilities": {
              "additionalProperties": true,
              "properties": {
                "drop": {
                  "items": {
                    "required": [],
                    "type": "string"
                  },
                  "required": [],
                  "title": "drop",
                  "type": "array"
                }
              },
              "required": [],
              "title": "capabilities",
              "type": "object"
            },
            "readOnlyRootFilesystem": {
              "default": true,
              "required": [],
              "title": "readOnlyRootFilesystem",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "securityContext",
          "type": "object"
        }
      },
      "required": [],
      "title": "rollout_operator",
      "type": "object"
    },
    "rootPassword": {
      "default": "",
      "required": [],
      "title": "rootPassword",
      "type": "string"
    },
    "rootUser": {
      "default": "",
      "description": "# Set default rootUser, rootPassword\n# rootUser and rootPassword is generated when not set\n# Distributed MinIO ref: https://min.io/docs/minio/linux/operations/install-deploy-manage/deploy-minio-multi-node-multi-drive.html\n#",
      "required": [],
      "title": "rootUser",
      "type": "string"
    },
    "ruler": {
      "additionalProperties": true,
      "description": "Configuration for the ruler",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for ruler pods.\nThe value will be passed through tpl.",
          "properties": {
            "podAntiAffinity": {
              "additionalProperties": true,
              "properties": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "additionalProperties": true,
                    "properties": {
                      "labelSelector": {
                        "additionalProperties": true,
                        "properties": {
                          "matchLabels": {
                            "additionalProperties": true,
                            "properties": {
                              "app.kubernetes.io/component": {
                                "default": "ruler",
                                "required": [],
                                "title": "app.kubernetes.io/component",
                                "type": "string"
                              },
                              "app.kubernetes.io/instance": {
                                "default": "{{ .Release.Name }}",
                                "required": [],
                                "title": "app.kubernetes.io/instance",
                                "type": "string"
                              },
                              "app.kubernetes.io/name": {
                                "default": "{{ include \"loki.name\" . }}",
                                "required": [],
                                "title": "app.kubernetes.io/name",
                                "type": "string"
                              }
                            },
                            "required": [],
                            "title": "matchLabels",
                            "type": "object"
                          }
                        },
                        "required": [],
                        "title": "labelSelector",
                        "type": "object"
                      },
                      "topologyKey": {
                        "default": "kubernetes.io/hostname",
                        "required": [],
                        "title": "topologyKey",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "required": [],
                  "title": "requiredDuringSchedulingIgnoredDuringExecution",
                  "type": "array"
                }
              },
              "required": [],
              "title": "podAntiAffinity",
              "type": "object"
            }
          },
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "appProtocol": {
          "additionalProperties": true,
          "description": "Set the optional grpc service protocol. Ex: \"grpc\", \"http2\" or \"https\"",
          "properties": {
            "grpc": {
              "default": "",
              "required": [],
              "title": "grpc",
              "type": "string"
            }
          },
          "required": [],
          "title": "appProtocol",
          "type": "object"
        },
        "command": {
          "default": "null",
          "description": "Command to execute instead of defined in Docker image",
          "required": [],
          "title": "command",
          "type": "null"
        },
        "directories": {
          "additionalProperties": true,
          "description": "Directories containing rules files. If used, you must also configure `loki.rulerConfig.storage` to use local storage.",
          "required": [],
          "title": "directories",
          "type": "object"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "DNSConfig for ruler pods",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "enabled": {
          "default": true,
          "description": "The ruler component is optional and can be disabled if desired.",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "extraArgs": {
          "description": "Additional CLI args for the ruler",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Containers to add to the ruler pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraEnv": {
          "description": "Environment variables to add to the ruler pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "Environment variables from secrets or configmaps to add to the ruler pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "Volume mounts to add to the ruler pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Volumes to add to the ruler pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostAliases": {
          "description": "hostAliases to add",
          "items": {
            "required": []
          },
          "required": [],
          "title": "hostAliases",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": " - ip: 1.2.3.4\n   hostnames:\n     - domain.tld\nUse the host's user namespace in the ruler",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "registry": {
              "default": "null",
              "description": "The Docker registry for the ruler image. Overrides `loki.image.registry`",
              "required": [],
              "title": "registry",
              "type": "null"
            },
            "repository": {
              "default": "null",
              "description": "Docker image repository for the ruler image. Overrides `loki.image.repository`",
              "required": [],
              "title": "repository",
              "type": "null"
            },
            "tag": {
              "default": "null",
              "description": "Docker image tag for the ruler image. Overrides `loki.image.tag`",
              "required": [],
              "title": "tag",
              "type": "null"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "initContainers": {
          "description": "Init containers to add to the ruler pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "maxUnavailable": {
          "default": "null",
          "description": "Pod Disruption Budget maxUnavailable",
          "required": [],
          "title": "maxUnavailable",
          "type": "null"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for ruler pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "persistence": {
          "additionalProperties": true,
          "properties": {
            "accessModes": {
              "description": "Set access modes on the PersistentVolumeClaim",
              "items": {
                "required": [],
                "type": "string"
              },
              "required": [],
              "title": "accessModes",
              "type": "array"
            },
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations for ruler PVCs",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Enable creating PVCs which is required when using recording rules",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels for ruler PVCs",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "size": {
              "default": "10Gi",
              "description": "Size of persistent disk",
              "required": [],
              "title": "size",
              "type": "string"
            },
            "storageClass": {
              "default": "null",
              "description": "Storage class to be used.\nIf defined, storageClassName: \u003cstorageClass\u003e.\nIf set to \"-\", storageClassName: \"\", which disables dynamic provisioning.\nIf empty or set to null, no storageClassName spec is\nset, choosing the default provisioner (gp2 on AWS, standard on GKE, AWS, and OpenStack).",
              "required": [],
              "title": "storageClass",
              "type": "null"
            }
          },
          "required": [],
          "title": "persistence",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for ruler pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels for compactor pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "null",
          "description": "The name of the PriorityClass for ruler pods",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        },
        "replicas": {
          "default": 0,
          "description": "Number of replicas for the ruler",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource requests and limits for the ruler",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "serviceAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for ruler service",
          "required": [],
          "title": "serviceAnnotations",
          "type": "object"
        },
        "serviceLabels": {
          "additionalProperties": true,
          "description": "Labels for ruler service",
          "required": [],
          "title": "serviceLabels",
          "type": "object"
        },
        "sidecar": {
          "default": false,
          "description": "Whether to enable the rules sidecar",
          "required": [],
          "title": "sidecar",
          "type": "boolean"
        },
        "terminationGracePeriodSeconds": {
          "default": 300,
          "description": "Grace period to allow the ruler to shutdown before it is killed",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "Tolerations for ruler pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "Topology Spread Constraints for ruler pods\nThe value will be passed through tpl.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        }
      },
      "required": [],
      "title": "ruler",
      "type": "object"
    },
    "runtimeClassName": {
      "default": "",
      "description": "# Pod runtime class name\n# ref https://kubernetes.io/docs/concepts/containers/runtime-class/\n#",
      "required": [],
      "title": "runtimeClassName",
      "type": "string"
    },
    "securityContext": {
      "additionalProperties": true,
      "description": "# Add stateful containers to have security context, if enabled MinIO will run as this\n# user and group NOTE: securityContext is only enabled if persistence.enabled=true",
      "properties": {
        "enabled": {
          "default": true,
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "fsGroup": {
          "default": 1000,
          "required": [],
          "title": "fsGroup",
          "type": "integer"
        },
        "fsGroupChangePolicy": {
          "default": "OnRootMismatch",
          "required": [],
          "title": "fsGroupChangePolicy",
          "type": "string"
        },
        "runAsGroup": {
          "default": 1000,
          "required": [],
          "title": "runAsGroup",
          "type": "integer"
        },
        "runAsUser": {
          "default": 1000,
          "required": [],
          "title": "runAsUser",
          "type": "integer"
        }
      },
      "required": [],
      "title": "securityContext",
      "type": "object"
    },
    "service": {
      "additionalProperties": true,
      "description": "# Expose the MinIO service to be accessed from outside the cluster (LoadBalancer service).\n# or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.\n# ref: http://kubernetes.io/docs/user-guide/services/\n#",
      "properties": {
        "annotations": {
          "additionalProperties": true,
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "clusterIP": {
          "default": "~",
          "required": [],
          "title": "clusterIP",
          "type": "null"
        },
        "externalIPs": {
          "items": {
            "required": []
          },
          "required": [],
          "title": "externalIPs",
          "type": "array"
        },
        "externalTrafficPolicy": {
          "default": "Cluster",
          "description": "# service.externalTrafficPolicy minio service external traffic policy\n# ref http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip\n#",
          "required": [],
          "title": "externalTrafficPolicy",
          "type": "string"
        },
        "loadBalancerIP": {
          "default": "~",
          "required": [],
          "title": "loadBalancerIP",
          "type": "null"
        },
        "loadBalancerSourceRanges": {
          "description": "# service.loadBalancerSourceRanges Addresses that are allowed when service is LoadBalancer\n# https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service\n#\nloadBalancerSourceRanges:\n  - 10.10.10.0/24",
          "items": {
            "required": []
          },
          "required": [],
          "title": "loadBalancerSourceRanges",
          "type": "array"
        },
        "nodePort": {
          "default": 32000,
          "required": [],
          "title": "nodePort",
          "type": "integer"
        },
        "port": {
          "default": "9000",
          "required": [],
          "title": "port",
          "type": "string"
        },
        "type": {
          "default": "ClusterIP",
          "required": [],
          "title": "type",
          "type": "string"
        }
      },
      "required": [],
      "title": "service",
      "type": "object"
    },
    "serviceAccount": {
      "additionalProperties": true,
      "description": "#####################################################################################################################\n\nService Accounts and Kubernetes RBAC\n\n#####################################################################################################################",
      "properties": {
        "annotations": {
          "additionalProperties": true,
          "description": "Annotations for the service account",
          "properties": {
            "eks.amazonaws.com/role-arn": {
              "required": [],
              "title": "eks.amazonaws.com/role-arn",
              "type": "string"
            }
          },
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "automountServiceAccountToken": {
          "default": true,
          "description": "Set this toggle to false to opt out of automounting API credentials for the service account",
          "required": [],
          "title": "automountServiceAccountToken",
          "type": "boolean"
        },
        "create": {
          "default": true,
          "description": "Specifies whether a ServiceAccount should be created",
          "required": [],
          "title": "create",
          "type": "boolean"
        },
        "imagePullSecrets": {
          "description": "Image pull secrets for the service account",
          "items": {
            "required": []
          },
          "required": [],
          "title": "imagePullSecrets",
          "type": "array"
        },
        "labels": {
          "additionalProperties": true,
          "description": "Labels for the service account",
          "required": [],
          "title": "labels",
          "type": "object"
        },
        "name": {
          "default": "null",
          "description": "The name of the ServiceAccount to use.\nIf not set and create is true, a name is generated using the fullname template",
          "required": [],
          "title": "name",
          "type": "null"
        }
      },
      "required": [],
      "title": "serviceAccount",
      "type": "object"
    },
    "serviceMonitor": {
      "additionalProperties": true,
      "properties": {
        "annotations": {
          "additionalProperties": true,
          "description": "ServiceMonitor annotations",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "enabled": {
          "default": false,
          "description": "Create ServiceMonitor to scrape metrics for Prometheus",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "interval": {
          "default": "null",
          "description": "ServiceMonitor scrape interval",
          "required": [],
          "title": "interval",
          "type": "null"
        },
        "labels": {
          "additionalProperties": true,
          "description": "Additional ServiceMonitor labels",
          "required": [],
          "title": "labels",
          "type": "object"
        },
        "namespace": {
          "default": "null",
          "description": "Alternative namespace for ServiceMonitor resources",
          "required": [],
          "title": "namespace",
          "type": "null"
        },
        "namespaceSelector": {
          "additionalProperties": true,
          "description": "Namespace selector for ServiceMonitor resources",
          "required": [],
          "title": "namespaceSelector",
          "type": "object"
        },
        "relabelings": {
          "description": "ServiceMonitor relabel configs to apply to samples before scraping\nhttps://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#relabelconfig",
          "items": {
            "required": []
          },
          "required": [],
          "title": "relabelings",
          "type": "array"
        },
        "scrapeTimeout": {
          "default": "null",
          "description": "ServiceMonitor scrape timeout in Go duration format (e.g. 15s)",
          "required": [],
          "title": "scrapeTimeout",
          "type": "null"
        }
      },
      "required": [],
      "title": "serviceMonitor",
      "type": "object"
    },
    "sidecar": {
      "additionalProperties": true,
      "properties": {
        "enableUniqueFilenames": {
          "default": false,
          "description": "Ensure that rule files aren't conflicting and being overwritten by prefixing their name with the namespace they are defined in.",
          "required": [],
          "title": "enableUniqueFilenames",
          "type": "boolean"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "pullPolicy": {
              "default": "IfNotPresent",
              "description": "Docker image pull policy",
              "required": [],
              "title": "pullPolicy",
              "type": "string"
            },
            "repository": {
              "default": "docker.io/kiwigrid/k8s-sidecar",
              "description": "The Docker registry and image for the k8s sidecar",
              "required": [],
              "title": "repository",
              "type": "string"
            },
            "sha": {
              "default": "",
              "description": "Docker image sha. If empty, no sha will be used",
              "required": [],
              "title": "sha",
              "type": "string"
            },
            "tag": {
              "default": "1.30.10",
              "description": "Docker image tag",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "livenessProbe": {
          "additionalProperties": true,
          "description": "Liveness probe definition. Probe is disabled on the sidecar by default.",
          "required": [],
          "title": "livenessProbe",
          "type": "object"
        },
        "readinessProbe": {
          "additionalProperties": true,
          "description": "Readiness probe definition. Probe is disabled on the sidecar by default.",
          "required": [],
          "title": "readinessProbe",
          "type": "object"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource requests and limits for the sidecar",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "rules": {
          "additionalProperties": true,
          "properties": {
            "enabled": {
              "default": true,
              "description": "Whether or not to create a sidecar to ingest rule from specific ConfigMaps and/or Secrets.",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "folder": {
              "default": "/rules",
              "description": "Folder into which the rules will be placed.",
              "required": [],
              "title": "folder",
              "type": "string"
            },
            "folderAnnotation": {
              "default": "null",
              "description": "The annotation overwriting the folder value.\nThe annotation value can be either an absolute or a relative path. Relative paths will be relative to FOLDER.\nUseful for multi-tenancy setups.",
              "required": [],
              "title": "folderAnnotation",
              "type": "null"
            },
            "label": {
              "default": "loki_rule",
              "description": "Label that the configmaps/secrets with rules will be marked with.",
              "required": [],
              "title": "label",
              "type": "string"
            },
            "labelValue": {
              "default": "",
              "description": "Label value that the configmaps/secrets with rules will be set to.",
              "required": [],
              "title": "labelValue",
              "type": "string"
            },
            "logLevel": {
              "default": "INFO",
              "description": "Log level of the sidecar container.",
              "required": [],
              "title": "logLevel",
              "type": "string"
            },
            "resource": {
              "default": "both",
              "description": "Search in configmap, secret, or both.",
              "required": [],
              "title": "resource",
              "type": "string"
            },
            "script": {
              "default": "null",
              "description": "Absolute path to the shell script to execute after a configmap or secret has been reloaded.",
              "required": [],
              "title": "script",
              "type": "null"
            },
            "searchNamespace": {
              "default": "null",
              "description": "Comma separated list of namespaces. If specified, the sidecar will search for config-maps/secrets inside these namespaces.\nOtherwise the namespace in which the sidecar is running will be used.\nIt's also possible to specify 'ALL' to search in all namespaces.",
              "required": [],
              "title": "searchNamespace",
              "type": "null"
            },
            "watchClientTimeout": {
              "default": 60,
              "description": "\nWatchClientTimeout: is a client-side timeout, configuring your local socket.\nIf you have a network outage dropping all packets with no RST/FIN,\nthis is how long your client waits before realizing \u0026 dropping the connection.\nDefaults to 66sec.",
              "required": [],
              "title": "watchClientTimeout",
              "type": "integer"
            },
            "watchMethod": {
              "default": "WATCH",
              "description": "Method to use to detect ConfigMap changes. With WATCH the sidecar will do a WATCH request, with SLEEP it will list all ConfigMaps, then sleep for 60 seconds.",
              "required": [],
              "title": "watchMethod",
              "type": "string"
            },
            "watchServerTimeout": {
              "default": 60,
              "description": "WatchServerTimeout: request to the server, asking it to cleanly close the connection after that.\ndefaults to 60sec; much higher values like 3600 seconds (1h) are feasible for non-Azure K8S.",
              "required": [],
              "title": "watchServerTimeout",
              "type": "integer"
            }
          },
          "required": [],
          "title": "rules",
          "type": "object"
        },
        "securityContext": {
          "additionalProperties": true,
          "description": "  limits:\n    cpu: 100m\n    memory: 100Mi\n  requests:\n    cpu: 50m\n    memory: 50Mi\nThe SecurityContext for the sidecar.",
          "properties": {
            "allowPrivilegeEscalation": {
              "default": false,
              "required": [],
              "title": "allowPrivilegeEscalation",
              "type": "boolean"
            },
            "capabilities": {
              "additionalProperties": true,
              "properties": {
                "drop": {
                  "items": {
                    "required": [],
                    "type": "string"
                  },
                  "required": [],
                  "title": "drop",
                  "type": "array"
                }
              },
              "required": [],
              "title": "capabilities",
              "type": "object"
            },
            "readOnlyRootFilesystem": {
              "default": true,
              "required": [],
              "title": "readOnlyRootFilesystem",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "securityContext",
          "type": "object"
        },
        "skipTlsVerify": {
          "default": false,
          "description": "Set to true to skip tls verification for kube api calls.",
          "required": [],
          "title": "skipTlsVerify",
          "type": "boolean"
        },
        "startupProbe": {
          "additionalProperties": true,
          "description": "Startup probe definition. Probe is disabled on the sidecar by default.",
          "required": [],
          "title": "startupProbe",
          "type": "object"
        }
      },
      "required": [],
      "title": "sidecar",
      "type": "object"
    },
    "singleBinary": {
      "additionalProperties": true,
      "description": "Configuration for the single binary node(s)",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for single binary pods.\nThe value will be passed through tpl.",
          "properties": {
            "podAntiAffinity": {
              "additionalProperties": true,
              "properties": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "additionalProperties": true,
                    "properties": {
                      "labelSelector": {
                        "additionalProperties": true,
                        "properties": {
                          "matchLabels": {
                            "additionalProperties": true,
                            "properties": {
                              "app.kubernetes.io/component": {
                                "default": "single-binary",
                                "required": [],
                                "title": "app.kubernetes.io/component",
                                "type": "string"
                              },
                              "app.kubernetes.io/instance": {
                                "default": "{{ .Release.Name }}",
                                "required": [],
                                "title": "app.kubernetes.io/instance",
                                "type": "string"
                              },
                              "app.kubernetes.io/name": {
                                "default": "{{ include \"loki.name\" . }}",
                                "required": [],
                                "title": "app.kubernetes.io/name",
                                "type": "string"
                              }
                            },
                            "required": [],
                            "title": "matchLabels",
                            "type": "object"
                          }
                        },
                        "required": [],
                        "title": "labelSelector",
                        "type": "object"
                      },
                      "topologyKey": {
                        "default": "kubernetes.io/hostname",
                        "required": [],
                        "title": "topologyKey",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "required": [],
                  "title": "requiredDuringSchedulingIgnoredDuringExecution",
                  "type": "array"
                }
              },
              "required": [],
              "title": "podAntiAffinity",
              "type": "object"
            }
          },
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "annotations": {
          "additionalProperties": true,
          "description": "Annotations for single binary StatefulSet",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "autoscaling": {
          "additionalProperties": true,
          "properties": {
            "enabled": {
              "default": false,
              "description": "Enable autoscaling",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "maxReplicas": {
              "default": 3,
              "description": "Maximum autoscaling replicas for the single binary",
              "required": [],
              "title": "maxReplicas",
              "type": "integer"
            },
            "minReplicas": {
              "default": 1,
              "description": "Minimum autoscaling replicas for the single binary",
              "required": [],
              "title": "minReplicas",
              "type": "integer"
            },
            "targetCPUUtilizationPercentage": {
              "default": 60,
              "description": "Target CPU utilisation percentage for the single binary",
              "required": [],
              "title": "targetCPUUtilizationPercentage",
              "type": "integer"
            },
            "targetMemoryUtilizationPercentage": {
              "default": "",
              "description": "Target memory utilisation percentage for the single binary",
              "required": [],
              "title": "targetMemoryUtilizationPercentage",
              "type": "null"
            }
          },
          "required": [],
          "title": "autoscaling",
          "type": "object"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "DNS config for single binary pods",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "extraArgs": {
          "description": "Labels for single binary service",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Extra containers to add to the single binary loki pod",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraEnv": {
          "description": "Environment variables to add to the single binary pods",
          "items": {
            "additionalProperties": true,
            "properties": {
              "name": {
                "required": [],
                "title": "name",
                "type": "string"
              },
              "value": {
                "required": [],
                "title": "value",
                "type": "string"
              }
            },
            "required": [],
            "type": "object"
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "Environment variables from secrets or configmaps to add to the single binary pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "Volume mounts to add to the single binary pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Volumes to add to the single binary pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": "Use the host's user namespace in the single binary pods",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "registry": {
              "default": "null",
              "description": "The Docker registry for the single binary image. Overrides `loki.image.registry`",
              "required": [],
              "title": "registry",
              "type": "null"
            },
            "repository": {
              "default": "null",
              "description": "Docker image repository for the single binary image. Overrides `loki.image.repository`",
              "required": [],
              "title": "repository",
              "type": "null"
            },
            "tag": {
              "default": "null",
              "description": "Docker image tag for the single binary image. Overrides `loki.image.tag`",
              "required": [],
              "title": "tag",
              "type": "null"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "initContainers": {
          "description": "Init containers to add to the single binary pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for single binary pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "persistence": {
          "additionalProperties": true,
          "properties": {
            "accessModes": {
              "description": "Set access modes on the PersistentVolumeClaim",
              "items": {
                "required": [],
                "type": "string"
              },
              "required": [],
              "title": "accessModes",
              "type": "array"
            },
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations for volume claim",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "enableStatefulSetAutoDeletePVC": {
              "default": true,
              "description": "Enable StatefulSetAutoDeletePVC feature",
              "required": [],
              "title": "enableStatefulSetAutoDeletePVC",
              "type": "boolean"
            },
            "enabled": {
              "default": true,
              "description": "Enable persistent disk",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels for volume claim",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "selector": {
              "default": "null",
              "description": "Selector for persistent disk",
              "required": [],
              "title": "selector",
              "type": "null"
            },
            "size": {
              "default": "10Gi",
              "description": "Size of persistent disk",
              "required": [],
              "title": "size",
              "type": "string"
            },
            "storageClass": {
              "default": "null",
              "description": "Storage class to be used.\nIf defined, storageClassName: \u003cstorageClass\u003e.\nIf set to \"-\", storageClassName: \"\", which disables dynamic provisioning.\nIf empty or set to null, no storageClassName spec is\nset, choosing the default provisioner (gp2 on AWS, standard on GKE, AWS, and OpenStack).",
              "required": [],
              "title": "storageClass",
              "type": "null"
            }
          },
          "required": [],
          "title": "persistence",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for single binary pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Additional labels for each `single binary` pod",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "null",
          "description": "The name of the PriorityClass for single binary pods",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        },
        "replicas": {
          "default": 0,
          "description": "Number of replicas for the single binary",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource requests and limits for the single binary",
          "properties": {
            "limits": {
              "additionalProperties": true,
              "properties": {
                "cpu": {
                  "required": [],
                  "title": "cpu",
                  "type": "integer"
                },
                "memory": {
                  "required": [],
                  "title": "memory",
                  "type": "string"
                }
              },
              "required": [],
              "title": "limits",
              "type": "object"
            },
            "requests": {
              "additionalProperties": true,
              "properties": {
                "cpu": {
                  "required": [],
                  "title": "cpu",
                  "type": "integer"
                },
                "memory": {
                  "required": [],
                  "title": "memory",
                  "type": "string"
                }
              },
              "required": [],
              "title": "requests",
              "type": "object"
            }
          },
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "selectorLabels": {
          "additionalProperties": true,
          "description": "Additional selector labels for each `single binary` pod",
          "required": [],
          "title": "selectorLabels",
          "type": "object"
        },
        "service": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations for single binary Service",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Additional labels for single binary Service",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "type": {
              "default": "ClusterIP",
              "description": "Service Type for single binary Service",
              "required": [],
              "title": "type",
              "type": "string"
            }
          },
          "required": [],
          "title": "service",
          "type": "object"
        },
        "targetModule": {
          "default": "all",
          "description": "Comma-separated list of Loki modules to load for the single binary",
          "required": [],
          "title": "targetModule",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "Grace period to allow the single binary to shutdown before it is killed",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "Tolerations for single binary pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        }
      },
      "required": [],
      "title": "singleBinary",
      "type": "object"
    },
    "statefulSetUpdate": {
      "additionalProperties": true,
      "description": "# Update strategy for StatefulSets",
      "properties": {
        "updateStrategy": {
          "default": "RollingUpdate",
          "required": [],
          "title": "updateStrategy",
          "type": "string"
        }
      },
      "required": [],
      "title": "statefulSetUpdate",
      "type": "object"
    },
    "svcaccts": {
      "description": "# List of service accounts to be created after minio install\n#",
      "items": {
        "required": []
      },
      "required": [],
      "title": "svcaccts",
      "type": "array"
    },
    "tableManager": {
      "additionalProperties": true,
      "description": "DEPRECATED Configuration for the table-manager. The table-manager is only necessary when using a deprecated\nindex type such as Cassandra, Bigtable, or DynamoDB, it has not been necessary since loki introduced self-\ncontained index types like 'boltdb-shipper' and 'tsdb'. This will be removed in a future helm chart.",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for table-manager pods.\nThe value will be passed through tpl.",
          "properties": {
            "podAntiAffinity": {
              "additionalProperties": true,
              "properties": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "additionalProperties": true,
                    "properties": {
                      "labelSelector": {
                        "additionalProperties": true,
                        "properties": {
                          "matchLabels": {
                            "additionalProperties": true,
                            "properties": {
                              "app.kubernetes.io/component": {
                                "default": "table-manager",
                                "required": [],
                                "title": "app.kubernetes.io/component",
                                "type": "string"
                              },
                              "app.kubernetes.io/instance": {
                                "default": "{{ .Release.Name }}",
                                "required": [],
                                "title": "app.kubernetes.io/instance",
                                "type": "string"
                              },
                              "app.kubernetes.io/name": {
                                "default": "{{ include \"loki.name\" . }}",
                                "required": [],
                                "title": "app.kubernetes.io/name",
                                "type": "string"
                              }
                            },
                            "required": [],
                            "title": "matchLabels",
                            "type": "object"
                          }
                        },
                        "required": [],
                        "title": "labelSelector",
                        "type": "object"
                      },
                      "topologyKey": {
                        "default": "kubernetes.io/hostname",
                        "required": [],
                        "title": "topologyKey",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "required": [],
                  "title": "requiredDuringSchedulingIgnoredDuringExecution",
                  "type": "array"
                }
              },
              "required": [],
              "title": "podAntiAffinity",
              "type": "object"
            }
          },
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "annotations": {
          "additionalProperties": true,
          "description": "Annotations for table-manager deployment",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "command": {
          "default": "null",
          "description": "Command to execute instead of defined in Docker image",
          "required": [],
          "title": "command",
          "type": "null"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "DNS config table-manager pods",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "enabled": {
          "default": false,
          "description": "Specifies whether the table-manager should be enabled",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "extraArgs": {
          "description": "Additional CLI args for the table-manager",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Containers to add to the table-manager pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraEnv": {
          "description": "Environment variables to add to the table-manager pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "Environment variables from secrets or configmaps to add to the table-manager pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "Volume mounts to add to the table-manager pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Volumes to add to the table-manager pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": "Use the host's user namespace in table-manager pods",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "registry": {
              "default": "null",
              "description": "The Docker registry for the table-manager image. Overrides `loki.image.registry`",
              "required": [],
              "title": "registry",
              "type": "null"
            },
            "repository": {
              "default": "null",
              "description": "Docker image repository for the table-manager image. Overrides `loki.image.repository`",
              "required": [],
              "title": "repository",
              "type": "null"
            },
            "tag": {
              "default": "null",
              "description": "Docker image tag for the table-manager image. Overrides `loki.image.tag`",
              "required": [],
              "title": "tag",
              "type": "null"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for table-manager pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for table-manager pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Labels for table-manager pods",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "priorityClassName": {
          "default": "null",
          "description": "The name of the PriorityClass for table-manager pods",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource requests and limits for the table-manager",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "retention_deletes_enabled": {
          "default": false,
          "description": "Enable deletes by retention",
          "required": [],
          "title": "retention_deletes_enabled",
          "type": "boolean"
        },
        "retention_period": {
          "default": 0,
          "description": "Set retention period",
          "required": [],
          "title": "retention_period",
          "type": "integer"
        },
        "service": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations for table-manager Service",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Additional labels for table-manager Service",
              "required": [],
              "title": "labels",
              "type": "object"
            }
          },
          "required": [],
          "title": "service",
          "type": "object"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "Grace period to allow the table-manager to shutdown before it is killed",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "Tolerations for table-manager pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        }
      },
      "required": [],
      "title": "tableManager",
      "type": "object"
    },
    "test": {
      "additionalProperties": true,
      "description": "Section for configuring optional Helm test",
      "properties": {
        "annotations": {
          "additionalProperties": true,
          "description": "Additional annotations for test pods",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "canaryServiceAddress": {
          "default": "http://loki-canary:3500/metrics",
          "description": "Used to directly query the metrics endpoint of the canary for testing, this approach avoids needing prometheus for testing.\nThis in a newer approach to using prometheusAddress such that tests do not have a dependency on prometheus",
          "required": [],
          "title": "canaryServiceAddress",
          "type": "string"
        },
        "enabled": {
          "default": true,
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "hostUsers": {
          "default": "nil",
          "description": "Use the host's user namespace in test pods",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "image": {
          "additionalProperties": true,
          "description": "Image to use for loki canary",
          "properties": {
            "digest": {
              "default": "null",
              "description": "Overrides the image tag with an image digest",
              "required": [],
              "title": "digest",
              "type": "null"
            },
            "pullPolicy": {
              "default": "IfNotPresent",
              "description": "Docker image pull policy",
              "required": [],
              "title": "pullPolicy",
              "type": "string"
            },
            "registry": {
              "default": "docker.io",
              "description": "The Docker registry",
              "required": [],
              "title": "registry",
              "type": "string"
            },
            "repository": {
              "default": "grafana/loki-helm-test",
              "description": "Docker image repository",
              "required": [],
              "title": "repository",
              "type": "string"
            },
            "tag": {
              "default": "latest",
              "description": "Overrides the image tag whose default is the chart's appVersion",
              "required": [],
              "title": "tag",
              "type": "string"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "labels": {
          "additionalProperties": true,
          "description": "Additional labels for the test pods",
          "required": [],
          "title": "labels",
          "type": "object"
        },
        "prometheusAddress": {
          "default": "",
          "description": "Address of the prometheus server to query for the test. This overrides any value set for canaryServiceAddress.\nThis is kept for backward compatibility and may be removed in future releases. Previous value was 'http://prometheus:9090'",
          "required": [],
          "title": "prometheusAddress",
          "type": "string"
        },
        "timeout": {
          "default": "1m",
          "description": "Number of times to retry the test before failing",
          "required": [],
          "title": "timeout",
          "type": "string"
        }
      },
      "required": [],
      "title": "test",
      "type": "object"
    },
    "tls": {
      "additionalProperties": true,
      "description": "# TLS Settings for MinIO",
      "properties": {
        "certSecret": {
          "default": "",
          "description": "# Create a secret with private.key and public.crt files and pass that here. Ref: https://github.com/minio/minio/tree/master/docs/tls/kubernetes#2-create-kubernetes-secret",
          "required": [],
          "title": "certSecret",
          "type": "string"
        },
        "enabled": {
          "default": false,
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "privateKey": {
          "default": "private.key",
          "required": [],
          "title": "privateKey",
          "type": "string"
        },
        "publicCrt": {
          "default": "public.crt",
          "required": [],
          "title": "publicCrt",
          "type": "string"
        }
      },
      "required": [],
      "title": "tls",
      "type": "object"
    },
    "tolerations": {
      "description": "Tolerations applied to Pods",
      "items": {
        "required": []
      },
      "required": [],
      "title": "tolerations",
      "type": "array"
    },
    "topologySpreadConstraints": {
      "items": {
        "required": []
      },
      "required": [],
      "title": "topologySpreadConstraints",
      "type": "array"
    },
    "trustedCertsSecret": {
      "default": "",
      "description": "# Trusted Certificates Settings for MinIO. Ref: https://min.io/docs/minio/linux/operations/network-encryption.html#third-party-certificate-authorities\n# Bundle multiple trusted certificates into one secret and pass that here. Ref: https://github.com/minio/minio/tree/master/docs/tls/kubernetes#2-create-kubernetes-secret\n# When using self-signed certificates, remember to include MinIO's own certificate in the bundle with key public.crt.\n# If certSecret is left empty and tls is enabled, this chart installs the public certificate from .Values.tls.certSecret.",
      "required": [],
      "title": "trustedCertsSecret",
      "type": "string"
    },
    "users": {
      "description": "# List of users to be created after minio install\n#",
      "items": {
        "additionalProperties": true,
        "properties": {
          "accessKey": {
            "default": "console",
            "required": [],
            "title": "accessKey",
            "type": "string"
          },
          "policy": {
            "default": "consoleAdmin",
            "required": [],
            "title": "policy",
            "type": "string"
          },
          "secretKey": {
            "default": "console123",
            "required": [],
            "title": "secretKey",
            "type": "string"
          }
        },
        "required": [],
        "type": "object"
      },
      "required": [],
      "title": "users",
      "type": "array"
    },
    "webhooks": {
      "additionalProperties": true,
      "properties": {
        "enabled": {
          "default": true,
          "description": "Enable the rollout-operator webhooks. See https://github.com/grafana/rollout-operator/#webhooks.\nNote that the webhooks require custom resource definitions. If upgrading, manually apply the files in the `crds` directory.",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "failurePolicy": {
          "default": "Fail",
          "description": "Validating and mutating webhook failure policy. `Ignore` or `Fail`.",
          "required": [],
          "title": "failurePolicy",
          "type": "string"
        },
        "selfSignedCertSecretName": {
          "default": "certificate",
          "description": "Secret resource name for the TLS certificate to be used with the webhooks",
          "required": [],
          "title": "selfSignedCertSecretName",
          "type": "string"
        }
      },
      "required": [],
      "title": "webhooks",
      "type": "object"
    },
    "write": {
      "additionalProperties": true,
      "description": "Configuration for the write pod(s)",
      "properties": {
        "affinity": {
          "additionalProperties": true,
          "description": "Affinity for write pods.\nThe value will be passed through tpl.",
          "properties": {
            "podAntiAffinity": {
              "additionalProperties": true,
              "properties": {
                "requiredDuringSchedulingIgnoredDuringExecution": {
                  "items": {
                    "additionalProperties": true,
                    "properties": {
                      "labelSelector": {
                        "additionalProperties": true,
                        "properties": {
                          "matchLabels": {
                            "additionalProperties": true,
                            "properties": {
                              "app.kubernetes.io/component": {
                                "default": "write",
                                "required": [],
                                "title": "app.kubernetes.io/component",
                                "type": "string"
                              },
                              "app.kubernetes.io/instance": {
                                "default": "{{ .Release.Name }}",
                                "required": [],
                                "title": "app.kubernetes.io/instance",
                                "type": "string"
                              },
                              "app.kubernetes.io/name": {
                                "default": "{{ include \"loki.name\" . }}",
                                "required": [],
                                "title": "app.kubernetes.io/name",
                                "type": "string"
                              }
                            },
                            "required": [],
                            "title": "matchLabels",
                            "type": "object"
                          }
                        },
                        "required": [],
                        "title": "labelSelector",
                        "type": "object"
                      },
                      "topologyKey": {
                        "default": "kubernetes.io/hostname",
                        "required": [],
                        "title": "topologyKey",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "required": [],
                  "title": "requiredDuringSchedulingIgnoredDuringExecution",
                  "type": "array"
                }
              },
              "required": [],
              "title": "podAntiAffinity",
              "type": "object"
            }
          },
          "required": [],
          "title": "affinity",
          "type": "object"
        },
        "annotations": {
          "additionalProperties": true,
          "description": "Annotations for write StatefulSet",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "autoscaling": {
          "additionalProperties": true,
          "properties": {
            "behavior": {
              "additionalProperties": true,
              "description": "Behavior policies while scaling.",
              "properties": {
                "scaleDown": {
                  "additionalProperties": true,
                  "properties": {
                    "policies": {
                      "items": {
                        "additionalProperties": true,
                        "properties": {
                          "periodSeconds": {
                            "default": 1800,
                            "required": [],
                            "title": "periodSeconds",
                            "type": "integer"
                          },
                          "type": {
                            "default": "Pods",
                            "required": [],
                            "title": "type",
                            "type": "string"
                          },
                          "value": {
                            "default": 1,
                            "required": [],
                            "title": "value",
                            "type": "integer"
                          }
                        },
                        "required": [],
                        "type": "object"
                      },
                      "required": [],
                      "title": "policies",
                      "type": "array"
                    },
                    "stabilizationWindowSeconds": {
                      "default": 3600,
                      "required": [],
                      "title": "stabilizationWindowSeconds",
                      "type": "integer"
                    }
                  },
                  "required": [],
                  "title": "scaleDown",
                  "type": "object"
                },
                "scaleUp": {
                  "additionalProperties": true,
                  "description": "see https://github.com/grafana/loki/blob/main/docs/sources/operations/storage/wal.md#how-to-scale-updown for scaledown details",
                  "properties": {
                    "policies": {
                      "items": {
                        "additionalProperties": true,
                        "properties": {
                          "periodSeconds": {
                            "default": 900,
                            "required": [],
                            "title": "periodSeconds",
                            "type": "integer"
                          },
                          "type": {
                            "default": "Pods",
                            "required": [],
                            "title": "type",
                            "type": "string"
                          },
                          "value": {
                            "default": 1,
                            "required": [],
                            "title": "value",
                            "type": "integer"
                          }
                        },
                        "required": [],
                        "type": "object"
                      },
                      "required": [],
                      "title": "policies",
                      "type": "array"
                    }
                  },
                  "required": [],
                  "title": "scaleUp",
                  "type": "object"
                }
              },
              "required": [],
              "title": "behavior",
              "type": "object"
            },
            "enabled": {
              "default": false,
              "description": "Enable autoscaling for the write.",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "maxReplicas": {
              "default": 6,
              "description": "Maximum autoscaling replicas for the write.",
              "required": [],
              "title": "maxReplicas",
              "type": "integer"
            },
            "minReplicas": {
              "default": 2,
              "description": "Minimum autoscaling replicas for the write.",
              "required": [],
              "title": "minReplicas",
              "type": "integer"
            },
            "targetCPUUtilizationPercentage": {
              "default": 60,
              "description": "Target CPU utilisation percentage for the write.",
              "required": [],
              "title": "targetCPUUtilizationPercentage",
              "type": "integer"
            },
            "targetMemoryUtilizationPercentage": {
              "default": "",
              "description": "Target memory utilization percentage for the write.",
              "required": [],
              "title": "targetMemoryUtilizationPercentage",
              "type": "null"
            }
          },
          "required": [],
          "title": "autoscaling",
          "type": "object"
        },
        "dnsConfig": {
          "additionalProperties": true,
          "description": "DNS config for write pods",
          "required": [],
          "title": "dnsConfig",
          "type": "object"
        },
        "extraArgs": {
          "description": "Additional CLI args for the write",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraArgs",
          "type": "array"
        },
        "extraContainers": {
          "description": "Containers to add to the write pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraContainers",
          "type": "array"
        },
        "extraEnv": {
          "description": "Environment variables to add to the write pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnv",
          "type": "array"
        },
        "extraEnvFrom": {
          "description": "Environment variables from secrets or configmaps to add to the write pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraEnvFrom",
          "type": "array"
        },
        "extraVolumeClaimTemplates": {
          "description": "volumeClaimTemplates to add to StatefulSet",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeClaimTemplates",
          "type": "array"
        },
        "extraVolumeMounts": {
          "description": "Volume mounts to add to the write pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumeMounts",
          "type": "array"
        },
        "extraVolumes": {
          "description": "Volumes to add to the write pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "extraVolumes",
          "type": "array"
        },
        "hostUsers": {
          "default": "nil",
          "description": "Use the host's user namespace in the write pods.",
          "required": [],
          "title": "hostUsers",
          "type": "string"
        },
        "image": {
          "additionalProperties": true,
          "properties": {
            "registry": {
              "default": "null",
              "description": "The Docker registry for the write image. Overrides `loki.image.registry`",
              "required": [],
              "title": "registry",
              "type": "null"
            },
            "repository": {
              "default": "null",
              "description": "Docker image repository for the write image. Overrides `loki.image.repository`",
              "required": [],
              "title": "repository",
              "type": "null"
            },
            "tag": {
              "default": "null",
              "description": "Docker image tag for the write image. Overrides `loki.image.tag`",
              "required": [],
              "title": "tag",
              "type": "null"
            }
          },
          "required": [],
          "title": "image",
          "type": "object"
        },
        "initContainers": {
          "description": "The default /flush_shutdown preStop hook is recommended as part of the ingester\nscaledown process so it's added to the template by default when autoscaling is enabled,\nbut it's disabled to optimize rolling restarts in instances that will never be scaled\ndown or when using chunks storage with WAL disabled.\nhttps://github.com/grafana/loki/blob/main/docs/sources/operations/storage/wal.md#how-to-scale-updown\nInit containers to add to the write pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "initContainers",
          "type": "array"
        },
        "lifecycle": {
          "additionalProperties": true,
          "description": "Lifecycle for the write container",
          "required": [],
          "title": "lifecycle",
          "type": "object"
        },
        "nodeSelector": {
          "additionalProperties": true,
          "description": "Node selector for write pods",
          "required": [],
          "title": "nodeSelector",
          "type": "object"
        },
        "persistence": {
          "additionalProperties": true,
          "properties": {
            "accessModes": {
              "description": "Set access modes on the PersistentVolumeClaim",
              "items": {
                "required": [],
                "type": "string"
              },
              "required": [],
              "title": "accessModes",
              "type": "array"
            },
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations for volume claim",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "dataVolumeParameters": {
              "additionalProperties": true,
              "description": "Parameters used for the `data` volume when volumeClaimEnabled if false",
              "properties": {
                "emptyDir": {
                  "additionalProperties": true,
                  "required": [],
                  "title": "emptyDir",
                  "type": "object"
                }
              },
              "required": [],
              "title": "dataVolumeParameters",
              "type": "object"
            },
            "enableStatefulSetAutoDeletePVC": {
              "default": false,
              "description": "Enable StatefulSetAutoDeletePVC feature",
              "required": [],
              "title": "enableStatefulSetAutoDeletePVC",
              "type": "boolean"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Labels for volume claim",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "selector": {
              "default": "null",
              "description": "Selector for persistent disk",
              "required": [],
              "title": "selector",
              "type": "null"
            },
            "size": {
              "default": "10Gi",
              "description": "Size of persistent disk",
              "required": [],
              "title": "size",
              "type": "string"
            },
            "storageClass": {
              "default": "null",
              "description": "Storage class to be used.\nIf defined, storageClassName: \u003cstorageClass\u003e.\nIf set to \"-\", storageClassName: \"\", which disables dynamic provisioning.\nIf empty or set to null, no storageClassName spec is\nset, choosing the default provisioner (gp2 on AWS, standard on GKE, AWS, and OpenStack).",
              "required": [],
              "title": "storageClass",
              "type": "null"
            },
            "volumeClaimsEnabled": {
              "default": true,
              "description": "Enable volume claims in pod spec",
              "required": [],
              "title": "volumeClaimsEnabled",
              "type": "boolean"
            }
          },
          "required": [],
          "title": "persistence",
          "type": "object"
        },
        "podAnnotations": {
          "additionalProperties": true,
          "description": "Annotations for write pods",
          "required": [],
          "title": "podAnnotations",
          "type": "object"
        },
        "podLabels": {
          "additionalProperties": true,
          "description": "Additional labels for each `write` pod",
          "required": [],
          "title": "podLabels",
          "type": "object"
        },
        "podManagementPolicy": {
          "default": "Parallel",
          "description": "The default is to deploy all pods in parallel.",
          "required": [],
          "title": "podManagementPolicy",
          "type": "string"
        },
        "priorityClassName": {
          "default": "null",
          "description": "The name of the PriorityClass for write pods",
          "required": [],
          "title": "priorityClassName",
          "type": "null"
        },
        "replicas": {
          "default": 3,
          "description": "Number of replicas for the write",
          "required": [],
          "title": "replicas",
          "type": "integer"
        },
        "resources": {
          "additionalProperties": true,
          "description": "Resource requests and limits for the write",
          "required": [],
          "title": "resources",
          "type": "object"
        },
        "selectorLabels": {
          "additionalProperties": true,
          "description": "Additional selector labels for each `write` pod",
          "required": [],
          "title": "selectorLabels",
          "type": "object"
        },
        "service": {
          "additionalProperties": true,
          "properties": {
            "annotations": {
              "additionalProperties": true,
              "description": "Annotations for write Service",
              "required": [],
              "title": "annotations",
              "type": "object"
            },
            "labels": {
              "additionalProperties": true,
              "description": "Additional labels for write Service",
              "required": [],
              "title": "labels",
              "type": "object"
            },
            "type": {
              "default": "ClusterIP",
              "description": "Service Type for write Service",
              "required": [],
              "title": "type",
              "type": "string"
            }
          },
          "required": [],
          "title": "service",
          "type": "object"
        },
        "targetModule": {
          "default": "write",
          "description": "Comma-separated list of Loki modules to load for the write",
          "required": [],
          "title": "targetModule",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "default": 300,
          "description": "Grace period to allow the write to shutdown before it is killed. Especially for the ingester,\nthis must be increased. It must be long enough so writes can be gracefully shutdown flushing/transferring\nall data and to successfully leave the member ring on shutdown.",
          "required": [],
          "title": "terminationGracePeriodSeconds",
          "type": "integer"
        },
        "tolerations": {
          "description": "Tolerations for write pods",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tolerations",
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "Topology Spread Constraints for write pods\nThe value will be passed through tpl.",
          "items": {
            "required": []
          },
          "required": [],
          "title": "topologySpreadConstraints",
          "type": "array"
        }
      },
      "required": [],
      "title": "write",
      "type": "object"
    }
  },
  "required": [],
  "type": "object"
}