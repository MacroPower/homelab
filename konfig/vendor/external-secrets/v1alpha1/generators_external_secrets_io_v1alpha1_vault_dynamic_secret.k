"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema VaultDynamicSecret:
    """
    generators external secrets io v1alpha1 vault dynamic secret

    Attributes
    ----------
    apiVersion : str, default is "generators.external-secrets.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "VaultDynamicSecret", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpec, default is Undefined, optional
        spec
    """


    apiVersion: "generators.external-secrets.io/v1alpha1" = "generators.external-secrets.io/v1alpha1"

    kind: "VaultDynamicSecret" = "VaultDynamicSecret"

    metadata?: v1.ObjectMeta

    spec?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpec


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpec:
    """
    generators external secrets io v1alpha1 vault dynamic secret spec

    Attributes
    ----------
    controller : str, default is Undefined, optional
        Used to select the correct ESO controller (think: ingress.ingressClassName)
        The ESO controller is instantiated with a specific controller name and filters VDS based on this property
    method : str, default is Undefined, optional
        Vault API method to use (GET/POST/other)
    parameters : any, default is Undefined, optional
        Parameters to pass to Vault write (for non-GET methods)
    path : str, default is Undefined, required
        Vault path to obtain the dynamic secret from
    provider : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProvider, default is Undefined, required
        provider
    resultType : str, default is "Data", optional
        Result type defines which data is returned from the generator.
        By default it is the "data" section of the Vault API response.
        When using e.g. /auth/token/create the "data" section is empty but
        the "auth" section contains the generated token.
        Please refer to the vault docs regarding the result data structure.
    """


    controller?: str

    method?: str

    parameters?: any

    path: str

    provider: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProvider

    resultType?: "Data" | "Auth" = "Data"


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProvider:
    """
    Vault provider common spec

    Attributes
    ----------
    auth : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuth, default is Undefined, required
        auth
    caBundle : str, default is Undefined, optional
        PEM encoded CA bundle used to validate Vault server certificate. Only used
        if the Server URL is using HTTPS protocol. This parameter is ignored for
        plain HTTP protocol connection. If not set the system root certificates
        are used to validate the TLS connection.
    caProvider : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderCaProvider, default is Undefined, optional
        ca provider
    forwardInconsistent : bool, default is Undefined, optional
        ForwardInconsistent tells Vault to forward read-after-write requests to the Vault
        leader instead of simply retrying within a loop. This can increase performance if
        the option is enabled serverside.
        https://www.vaultproject.io/docs/configuration/replication#allow_forwarding_via_header
    headers : {str:str}, default is Undefined, optional
        Headers to be added in Vault request
    namespace : str, default is Undefined, optional
        Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows
        Vault environments to support Secure Multi-tenancy. e.g: "ns1".
        More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
    path : str, default is Undefined, optional
        Path is the mount path of the Vault KV backend endpoint, e.g:
        "secret". The v2 KV secret engine version specific "/data" path suffix
        for fetching secrets from Vault is optional and will be appended
        if not present in specified path.
    readYourWrites : bool, default is Undefined, optional
        ReadYourWrites ensures isolated read-after-write semantics by
        providing discovered cluster replication states in each request.
        More information about eventual consistency in Vault can be found here
        https://www.vaultproject.io/docs/enterprise/consistency
    server : str, default is Undefined, required
        Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
    tls : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderTLS, default is Undefined, optional
        tls
    version : str, default is "v2", optional
        Version is the Vault KV secret engine version. This can be either "v1" or
        "v2". Version defaults to "v2".
    """


    auth: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuth

    caBundle?: str

    caProvider?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderCaProvider

    forwardInconsistent?: bool

    headers?: {str:str}

    namespace?: str

    path?: str

    readYourWrites?: bool

    server: str

    tls?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderTLS

    version?: "v1" | "v2" = "v2"


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuth:
    """
    Auth configures how secret-manager authenticates with the Vault server.

    Attributes
    ----------
    appRole : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthAppRole, default is Undefined, optional
        app role
    cert : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthCert, default is Undefined, optional
        cert
    iam : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthIam, default is Undefined, optional
        iam
    jwt : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthJwt, default is Undefined, optional
        jwt
    kubernetes : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthKubernetes, default is Undefined, optional
        kubernetes
    ldap : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthLdap, default is Undefined, optional
        ldap
    namespace : str, default is Undefined, optional
        Name of the vault namespace to authenticate to. This can be different than the namespace your secret is in.
        Namespaces is a set of features within Vault Enterprise that allows
        Vault environments to support Secure Multi-tenancy. e.g: "ns1".
        More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
        This will default to Vault.Namespace field if set, or empty otherwise
    tokenSecretRef : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthTokenSecretRef, default is Undefined, optional
        token secret ref
    userPass : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthUserPass, default is Undefined, optional
        user pass
    """


    appRole?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthAppRole

    cert?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthCert

    iam?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthIam

    jwt?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthJwt

    kubernetes?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthKubernetes

    ldap?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthLdap

    namespace?: str

    tokenSecretRef?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthTokenSecretRef

    userPass?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthUserPass


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthAppRole:
    """
    AppRole authenticates with Vault using the App Role auth mechanism,
    with the role and secret stored in a Kubernetes Secret resource.

    Attributes
    ----------
    path : str, default is "approle", required
        Path where the App Role authentication backend is mounted
        in Vault, e.g: "approle"
    roleId : str, default is Undefined, optional
        RoleID configured in the App Role authentication backend when setting
        up the authentication backend in Vault.
    roleRef : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthAppRoleRoleRef, default is Undefined, optional
        role ref
    secretRef : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthAppRoleSecretRef, default is Undefined, required
        secret ref
    """


    path: str = "approle"

    roleId?: str

    roleRef?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthAppRoleRoleRef

    secretRef: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthAppRoleSecretRef


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthAppRoleRoleRef:
    """
    Reference to a key in a Secret that contains the App Role ID used
    to authenticate with Vault.
    The `key` field must be specified and denotes which entry within the Secret
    resource is used as the app role id.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
        defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
        to the namespace of the referent.
    """


    key?: str

    name?: str

    namespace?: str


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthAppRoleSecretRef:
    """
    Reference to a key in a Secret that contains the App Role secret used
    to authenticate with Vault.
    The `key` field must be specified and denotes which entry within the Secret
    resource is used as the app role secret.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
        defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
        to the namespace of the referent.
    """


    key?: str

    name?: str

    namespace?: str


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthCert:
    """
    Cert authenticates with TLS Certificates by passing client certificate, private key and ca certificate
    Cert authentication method

    Attributes
    ----------
    clientCert : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthCertClientCert, default is Undefined, optional
        client cert
    secretRef : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthCertSecretRef, default is Undefined, optional
        secret ref
    """


    clientCert?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthCertClientCert

    secretRef?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthCertSecretRef


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthCertClientCert:
    """
    ClientCert is a certificate to authenticate using the Cert Vault
    authentication method

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
        defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
        to the namespace of the referent.
    """


    key?: str

    name?: str

    namespace?: str


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthCertSecretRef:
    """
    SecretRef to a key in a Secret resource containing client private key to
    authenticate with Vault using the Cert authentication method

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
        defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
        to the namespace of the referent.
    """


    key?: str

    name?: str

    namespace?: str


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthIam:
    """
    Iam authenticates with vault by passing a special AWS request signed with AWS IAM credentials
    AWS IAM authentication method

    Attributes
    ----------
    externalID : str, default is Undefined, optional
        AWS External ID set on assumed IAM roles
    jwt : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthIamJwt, default is Undefined, optional
        jwt
    path : str, default is Undefined, optional
        Path where the AWS auth method is enabled in Vault, e.g: "aws"
    region : str, default is Undefined, optional
        AWS region
    role : str, default is Undefined, optional
        This is the AWS role to be assumed before talking to vault
    secretRef : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthIamSecretRef, default is Undefined, optional
        secret ref
    vaultAwsIamServerID : str, default is Undefined, optional
        X-Vault-AWS-IAM-Server-ID is an additional header used by Vault IAM auth method to mitigate against different types of replay attacks. More details here: https://developer.hashicorp.com/vault/docs/auth/aws
    vaultRole : str, default is Undefined, required
        Vault Role. In vault, a role describes an identity with a set of permissions, groups, or policies you want to attach a user of the secrets engine
    """


    externalID?: str

    jwt?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthIamJwt

    path?: str

    region?: str

    role?: str

    secretRef?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthIamSecretRef

    vaultAwsIamServerID?: str

    vaultRole: str


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthIamJwt:
    """
    Specify a service account with IRSA enabled

    Attributes
    ----------
    serviceAccountRef : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef, default is Undefined, optional
        service account ref
    """


    serviceAccountRef?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef:
    """
    A reference to a ServiceAccount resource.

    Attributes
    ----------
    audiences : [str], default is Undefined, optional
        Audience specifies the `aud` claim for the service account token
        If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
        then this audiences will be appended to the list
    name : str, default is Undefined, required
        The name of the ServiceAccount resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
        to the namespace of the referent.
    """


    audiences?: [str]

    name: str

    namespace?: str


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthIamSecretRef:
    """
    Specify credentials in a Secret object

    Attributes
    ----------
    accessKeyIDSecretRef : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef, default is Undefined, optional
        access key ID secret ref
    secretAccessKeySecretRef : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef, default is Undefined, optional
        secret access key secret ref
    sessionTokenSecretRef : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef, default is Undefined, optional
        session token secret ref
    """


    accessKeyIDSecretRef?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef

    secretAccessKeySecretRef?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef

    sessionTokenSecretRef?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIDSecretRef:
    """
    The AccessKeyID is used for authentication

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
        defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
        to the namespace of the referent.
    """


    key?: str

    name?: str

    namespace?: str


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef:
    """
    The SecretAccessKey is used for authentication

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
        defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
        to the namespace of the referent.
    """


    key?: str

    name?: str

    namespace?: str


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef:
    """
    The SessionToken used for authentication
    This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
    see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
        defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
        to the namespace of the referent.
    """


    key?: str

    name?: str

    namespace?: str


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthJwt:
    """
    Jwt authenticates with Vault by passing role and JWT token using the
    JWT/OIDC authentication method

    Attributes
    ----------
    kubernetesServiceAccountToken : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken, default is Undefined, optional
        kubernetes service account token
    path : str, default is "jwt", required
        Path where the JWT authentication backend is mounted
        in Vault, e.g: "jwt"
    role : str, default is Undefined, optional
        Role is a JWT role to authenticate using the JWT/OIDC Vault
        authentication method
    secretRef : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthJwtSecretRef, default is Undefined, optional
        secret ref
    """


    kubernetesServiceAccountToken?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken

    path: str = "jwt"

    role?: str

    secretRef?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthJwtSecretRef


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken:
    """
    Optional ServiceAccountToken specifies the Kubernetes service account for which to request
    a token for with the `TokenRequest` API.

    Attributes
    ----------
    audiences : [str], default is Undefined, optional
        Optional audiences field that will be used to request a temporary Kubernetes service
        account token for the service account referenced by `serviceAccountRef`.
        Defaults to a single audience `vault` it not specified.
        Deprecated: use serviceAccountRef.Audiences instead
    expirationSeconds : int, default is Undefined, optional
        Optional expiration time in seconds that will be used to request a temporary
        Kubernetes service account token for the service account referenced by
        `serviceAccountRef`.
        Deprecated: this will be removed in the future.
        Defaults to 10 minutes.
    serviceAccountRef : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef, default is Undefined, required
        service account ref
    """


    audiences?: [str]

    expirationSeconds?: int

    serviceAccountRef: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef:
    """
    Service account field containing the name of a kubernetes ServiceAccount.

    Attributes
    ----------
    audiences : [str], default is Undefined, optional
        Audience specifies the `aud` claim for the service account token
        If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
        then this audiences will be appended to the list
    name : str, default is Undefined, required
        The name of the ServiceAccount resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
        to the namespace of the referent.
    """


    audiences?: [str]

    name: str

    namespace?: str


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthJwtSecretRef:
    """
    Optional SecretRef that refers to a key in a Secret resource containing JWT token to
    authenticate with Vault using the JWT/OIDC authentication method.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
        defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
        to the namespace of the referent.
    """


    key?: str

    name?: str

    namespace?: str


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthKubernetes:
    """
    Kubernetes authenticates with Vault by passing the ServiceAccount
    token stored in the named Secret resource to the Vault server.

    Attributes
    ----------
    mountPath : str, default is "kubernetes", required
        Path where the Kubernetes authentication backend is mounted in Vault, e.g:
        "kubernetes"
    role : str, default is Undefined, required
        A required field containing the Vault Role to assume. A Role binds a
        Kubernetes ServiceAccount with a set of Vault policies.
    secretRef : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthKubernetesSecretRef, default is Undefined, optional
        secret ref
    serviceAccountRef : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef, default is Undefined, optional
        service account ref
    """


    mountPath: str = "kubernetes"

    role: str

    secretRef?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthKubernetesSecretRef

    serviceAccountRef?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthKubernetesSecretRef:
    """
    Optional secret field containing a Kubernetes ServiceAccount JWT used
    for authenticating with Vault. If a name is specified without a key,
    `token` is the default. If one is not specified, the one bound to
    the controller will be used.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
        defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
        to the namespace of the referent.
    """


    key?: str

    name?: str

    namespace?: str


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef:
    """
    Optional service account field containing the name of a kubernetes ServiceAccount.
    If the service account is specified, the service account secret token JWT will be used
    for authenticating with Vault. If the service account selector is not supplied,
    the secretRef will be used instead.

    Attributes
    ----------
    audiences : [str], default is Undefined, optional
        Audience specifies the `aud` claim for the service account token
        If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
        then this audiences will be appended to the list
    name : str, default is Undefined, required
        The name of the ServiceAccount resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
        to the namespace of the referent.
    """


    audiences?: [str]

    name: str

    namespace?: str


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthLdap:
    """
    Ldap authenticates with Vault by passing username/password pair using
    the LDAP authentication method

    Attributes
    ----------
    path : str, default is "ldap", required
        Path where the LDAP authentication backend is mounted
        in Vault, e.g: "ldap"
    secretRef : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthLdapSecretRef, default is Undefined, optional
        secret ref
    username : str, default is Undefined, required
        Username is a LDAP user name used to authenticate using the LDAP Vault
        authentication method
    """


    path: str = "ldap"

    secretRef?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthLdapSecretRef

    username: str


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthLdapSecretRef:
    """
    SecretRef to a key in a Secret resource containing password for the LDAP
    user used to authenticate with Vault using the LDAP authentication
    method

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
        defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
        to the namespace of the referent.
    """


    key?: str

    name?: str

    namespace?: str


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthTokenSecretRef:
    """
    TokenSecretRef authenticates with Vault by presenting a token.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
        defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
        to the namespace of the referent.
    """


    key?: str

    name?: str

    namespace?: str


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthUserPass:
    """
    UserPass authenticates with Vault by passing username/password pair

    Attributes
    ----------
    path : str, default is "user", required
        Path where the UserPassword authentication backend is mounted
        in Vault, e.g: "user"
    secretRef : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthUserPassSecretRef, default is Undefined, optional
        secret ref
    username : str, default is Undefined, required
        Username is a user name used to authenticate using the UserPass Vault
        authentication method
    """


    path: str = "user"

    secretRef?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthUserPassSecretRef

    username: str


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderAuthUserPassSecretRef:
    """
    SecretRef to a key in a Secret resource containing password for the
    user used to authenticate with Vault using the UserPass authentication
    method

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
        defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
        to the namespace of the referent.
    """


    key?: str

    name?: str

    namespace?: str


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderCaProvider:
    """
    The provider for the CA bundle to use to validate Vault server certificate.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key where the CA certificate can be found in the Secret or ConfigMap.
    name : str, default is Undefined, required
        The name of the object located at the provider type.
    namespace : str, default is Undefined, optional
        The namespace the Provider type is in.
        Can only be defined when used in a ClusterSecretStore.
    $type : str, default is Undefined, required
        The type of provider to use such as "Secret", or "ConfigMap".
    """


    key?: str

    name: str

    namespace?: str

    $type: "Secret" | "ConfigMap"


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderTLS:
    """
    The configuration used for client side related TLS communication, when the Vault server
    requires mutual authentication. Only used if the Server URL is using HTTPS protocol.
    This parameter is ignored for plain HTTP protocol connection.
    It's worth noting this configuration is different from the "TLS certificates auth method",
    which is available under the `auth.cert` section.

    Attributes
    ----------
    certSecretRef : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderTLSCertSecretRef, default is Undefined, optional
        cert secret ref
    keySecretRef : GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderTLSKeySecretRef, default is Undefined, optional
        key secret ref
    """


    certSecretRef?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderTLSCertSecretRef

    keySecretRef?: GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderTLSKeySecretRef


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderTLSCertSecretRef:
    """
    CertSecretRef is a certificate added to the transport layer
    when communicating with the Vault server.
    If no key for the Secret is specified, external-secret will default to 'tls.crt'.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
        defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
        to the namespace of the referent.
    """


    key?: str

    name?: str

    namespace?: str


schema GeneratorsExternalSecretsIoV1alpha1VaultDynamicSecretSpecProviderTLSKeySecretRef:
    """
    KeySecretRef to a key in a Secret resource containing client private key
    added to the transport layer when communicating with the Vault server.
    If no key for the Secret is specified, external-secret will default to 'tls.key'.

    Attributes
    ----------
    key : str, default is Undefined, optional
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
        defaulted, in others it may be required.
    name : str, default is Undefined, optional
        The name of the Secret resource being referred to.
    namespace : str, default is Undefined, optional
        Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
        to the namespace of the referent.
    """


    key?: str

    name?: str

    namespace?: str


