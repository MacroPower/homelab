"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1


schema CiliumEgressGatewayPolicy:
    """
    cilium io v2 cilium egress gateway policy

    Attributes
    ----------
    apiVersion : str, default is "cilium.io/v2", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "CiliumEgressGatewayPolicy", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, required
        metadata
    spec : CiliumIoV2CiliumEgressGatewayPolicySpec, default is Undefined, optional
        spec
    """


    apiVersion: "cilium.io/v2" = "cilium.io/v2"

    kind: "CiliumEgressGatewayPolicy" = "CiliumEgressGatewayPolicy"

    metadata: v1.ObjectMeta

    spec?: CiliumIoV2CiliumEgressGatewayPolicySpec


schema CiliumIoV2CiliumEgressGatewayPolicySpec:
    """
    cilium io v2 cilium egress gateway policy spec

    Attributes
    ----------
    destinationCIDRs : [str], default is Undefined, required
        DestinationCIDRs is a list of destination CIDRs for destination IP addresses. If a destination IP matches any one CIDR, it will be selected.
    egressGateway : CiliumIoV2CiliumEgressGatewayPolicySpecEgressGateway, default is Undefined, required
        egress gateway
    excludedCIDRs : [str], default is Undefined, optional
        ExcludedCIDRs is a list of destination CIDRs that will be excluded from the egress gateway redirection and SNAT logic. Should be a subset of destinationCIDRs otherwise it will not have any effect.
    selectors : [CiliumIoV2CiliumEgressGatewayPolicySpecSelectorsItems0], default is Undefined, required
        Egress represents a list of rules by which egress traffic is filtered from the source pods.
    """


    destinationCIDRs: [str]

    egressGateway: CiliumIoV2CiliumEgressGatewayPolicySpecEgressGateway

    excludedCIDRs?: [str]

    selectors: [CiliumIoV2CiliumEgressGatewayPolicySpecSelectorsItems0]


    check:
        all destinationCIDRs in destinationCIDRs {_regex_match(str(destinationCIDRs), r"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$") if destinationCIDRs }
        all excludedCIDRs in excludedCIDRs {_regex_match(str(excludedCIDRs), r"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$") if excludedCIDRs } if excludedCIDRs


schema CiliumIoV2CiliumEgressGatewayPolicySpecEgressGateway:
    """
    EgressGateway is the gateway node responsible for SNATing traffic.

    Attributes
    ----------
    egressIP : str, default is Undefined, optional
        EgressIP is the source IP address that the egress traffic is SNATed with. 
         Example: When set to "192.168.1.100", matching egress traffic will be redirected to the node matching the NodeSelector field and SNATed with IP address 192.168.1.100. 
         When none of the Interface or EgressIP fields is specified, the policy will use the first IPv4 assigned to the interface with the default route.
    interface : str, default is Undefined, optional
        Interface is the network interface to which the egress IP address that the traffic is SNATed with is assigned. 
         Example: When set to "eth1", matching egress traffic will be redirected to the node matching the NodeSelector field and SNATed with the first IPv4 address assigned to the eth1 interface. 
         When none of the Interface or EgressIP fields is specified, the policy will use the first IPv4 assigned to the interface with the default route.
    nodeSelector : CiliumIoV2CiliumEgressGatewayPolicySpecEgressGatewayNodeSelector, default is Undefined, required
        node selector
    """


    egressIP?: str

    interface?: str

    nodeSelector: CiliumIoV2CiliumEgressGatewayPolicySpecEgressGatewayNodeSelector


schema CiliumIoV2CiliumEgressGatewayPolicySpecEgressGatewayNodeSelector:
    """
    This is a label selector which selects the node that should act as egress gateway for the given policy. In case multiple nodes are selected, only the first one in the lexical ordering over the node names will be used. This field follows standard label selector semantics.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumEgressGatewayPolicySpecEgressGatewayNodeSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumEgressGatewayPolicySpecEgressGatewayNodeSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumEgressGatewayPolicySpecEgressGatewayNodeSelectorMatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumEgressGatewayPolicySpecSelectorsItems0:
    """
    cilium io v2 cilium egress gateway policy spec selectors items0

    Attributes
    ----------
    namespaceSelector : CiliumIoV2CiliumEgressGatewayPolicySpecSelectorsItems0NamespaceSelector, default is Undefined, optional
        namespace selector
    podSelector : CiliumIoV2CiliumEgressGatewayPolicySpecSelectorsItems0PodSelector, default is Undefined, optional
        pod selector
    """


    namespaceSelector?: CiliumIoV2CiliumEgressGatewayPolicySpecSelectorsItems0NamespaceSelector

    podSelector?: CiliumIoV2CiliumEgressGatewayPolicySpecSelectorsItems0PodSelector


schema CiliumIoV2CiliumEgressGatewayPolicySpecSelectorsItems0NamespaceSelector:
    """
    Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumEgressGatewayPolicySpecSelectorsItems0NamespaceSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumEgressGatewayPolicySpecSelectorsItems0NamespaceSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumEgressGatewayPolicySpecSelectorsItems0NamespaceSelectorMatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumEgressGatewayPolicySpecSelectorsItems0PodSelector:
    """
    This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumEgressGatewayPolicySpecSelectorsItems0PodSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumEgressGatewayPolicySpecSelectorsItems0PodSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumEgressGatewayPolicySpecSelectorsItems0PodSelectorMatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


