"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex
import k8s.apimachinery.pkg.apis.meta.v1


schema CiliumClusterwideNetworkPolicy:
    """
    CiliumClusterwideNetworkPolicy is a Kubernetes third-party resource with an modified version of CiliumNetworkPolicy which is cluster scoped rather than namespace scoped.

    Attributes
    ----------
    apiVersion : str, default is "cilium.io/v2", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "CiliumClusterwideNetworkPolicy", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, required
        metadata
    spec : CiliumIoV2CiliumClusterwideNetworkPolicySpec, default is Undefined, optional
        spec
    specs : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0], default is Undefined, optional
        Specs is a list of desired Cilium specific rule specification.
    status : CiliumIoV2CiliumClusterwideNetworkPolicyStatus, default is Undefined, optional
        status
    """


    apiVersion: "cilium.io/v2" = "cilium.io/v2"

    kind: "CiliumClusterwideNetworkPolicy" = "CiliumClusterwideNetworkPolicy"

    metadata: v1.ObjectMeta

    spec?: CiliumIoV2CiliumClusterwideNetworkPolicySpec

    specs?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0]

    status?: CiliumIoV2CiliumClusterwideNetworkPolicyStatus


schema CiliumIoV2CiliumClusterwideNetworkPolicySpec:
    """
    Spec is the desired Cilium specific rule specification.

    Attributes
    ----------
    description : str, default is Undefined, optional
        Description is a free form string, it can be used by the creator of the rule to store human readable explanation of the purpose of this rule. Rules cannot be identified by comment.
    egress : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0], default is Undefined, optional
        Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.
    egressDeny : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0], default is Undefined, optional
        EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.
    enableDefaultDeny : CiliumIoV2CiliumClusterwideNetworkPolicySpecEnableDefaultDeny, default is Undefined, optional
        enable default deny
    endpointSelector : CiliumIoV2CiliumClusterwideNetworkPolicySpecEndpointSelector, default is Undefined, optional
        endpoint selector
    ingress : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0], default is Undefined, optional
        Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.
    ingressDeny : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0], default is Undefined, optional
        IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.
    labels : [CiliumIoV2CiliumClusterwideNetworkPolicySpecLabelsItems0], default is Undefined, optional
        Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.
    nodeSelector : CiliumIoV2CiliumClusterwideNetworkPolicySpecNodeSelector, default is Undefined, optional
        node selector
    """


    description?: str

    egress?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0]

    egressDeny?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0]

    enableDefaultDeny?: CiliumIoV2CiliumClusterwideNetworkPolicySpecEnableDefaultDeny

    endpointSelector?: CiliumIoV2CiliumClusterwideNetworkPolicySpecEndpointSelector

    ingress?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0]

    ingressDeny?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0]

    labels?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecLabelsItems0]

    nodeSelector?: CiliumIoV2CiliumClusterwideNetworkPolicySpecNodeSelector


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0:
    """
    EgressDenyRule contains all rule types which can be applied at egress, i.e. network traffic that originates inside the endpoint and exits the endpoint selected by the endpointSelector. 
     - All members of this structure are optional. If omitted or empty, the member will have no effect on the rule. 
     - If multiple members of the structure are specified, then all members must match in order for the rule to take effect. The exception to this rule is the ToRequires member; the effects of any Requires field in any rule will apply to all other rules as well. 
     - ToEndpoints, ToCIDR, ToCIDRSet, ToEntities, ToServices and ToGroups are mutually exclusive. Only one of these members may be present within an individual rule.

    Attributes
    ----------
    icmps : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0IcmpsItems0], default is Undefined, optional
        ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. 
         Example: Any endpoint with the label "app=httpd" is not allowed to initiate type 8 ICMP connections.
    toCIDR : [str], default is Undefined, optional
        ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. 
         Example: Any endpoint with the label "app=database-proxy" is allowed to initiate connections to 10.2.3.0/24
    toCIDRSet : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToCIDRSetItems0], default is Undefined, optional
        ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. 
         Example: Any endpoint with the label "app=database-proxy" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.
    toEndpoints : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToEndpointsItems0], default is Undefined, optional
        ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. 
         Example: Any endpoint with the label "role=frontend" can communicate with any endpoint carrying the label "role=backend".
    toEntities : [str], default is Undefined, optional
        ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are `world`, `cluster`,`host`,`remote-node`,`kube-apiserver`, `init`, `health`,`unmanaged` and `all`.
    toGroups : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToGroupsItems0], default is Undefined, optional
        ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: 
         Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'
    toNodes : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToNodesItems0], default is Undefined, optional
        ToNodes is a list of nodes identified by an EndpointSelector to which endpoints subject to the rule is allowed to communicate.
    toPorts : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToPortsItems0], default is Undefined, optional
        ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. 
         Example: Any endpoint with the label "role=frontend" is not allowed to initiate connections to destination port 8080/tcp
    toRequires : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToRequiresItems0], default is Undefined, optional
        ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. 
         Example: Any Endpoint with the label "team=A" requires any endpoint to which it communicates to also carry the label "team=A".
    toServices : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToServicesItems0], default is Undefined, optional
        ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. 
         Example: Any endpoint with the label "app=backend-app" is allowed to initiate connections to all cidrs backing the "external-service" service
    """


    icmps?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0IcmpsItems0]

    toCIDR?: [str]

    toCIDRSet?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToCIDRSetItems0]

    toEndpoints?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToEndpointsItems0]

    toEntities?: [str]

    toGroups?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToGroupsItems0]

    toNodes?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToNodesItems0]

    toPorts?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToPortsItems0]

    toRequires?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToRequiresItems0]

    toServices?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToServicesItems0]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0IcmpsItems0:
    """
    ICMPRule is a list of ICMP fields.

    Attributes
    ----------
    fields : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0IcmpsItems0FieldsItems0], default is Undefined, optional
        Fields is a list of ICMP fields.
    """


    fields?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0IcmpsItems0FieldsItems0]


    check:
        len(fields) <= 40


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0IcmpsItems0FieldsItems0:
    """
    ICMPField is a ICMP field.

    Attributes
    ----------
    family : str, default is "IPv4", optional
        Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.
    $type : int | str, default is Undefined, required
        Type is a ICMP-type. It should be an 8bit code (0-255), or it's CamelCase name (for example, "EchoReply"). Allowed ICMP types are: Ipv4: EchoReply | DestinationUnreachable | Redirect | Echo | EchoRequest | RouterAdvertisement | RouterSelection | TimeExceeded | ParameterProblem | Timestamp | TimestampReply | Photuris | ExtendedEcho Request | ExtendedEcho Reply Ipv6: DestinationUnreachable | PacketTooBig | TimeExceeded | ParameterProblem | EchoRequest | EchoReply | MulticastListenerQuery| MulticastListenerReport | MulticastListenerDone | RouterSolicitation | RouterAdvertisement | NeighborSolicitation | NeighborAdvertisement | RedirectMessage | RouterRenumbering | ICMPNodeInformationQuery | ICMPNodeInformationResponse | InverseNeighborDiscoverySolicitation | InverseNeighborDiscoveryAdvertisement | HomeAgentAddressDiscoveryRequest | HomeAgentAddressDiscoveryReply | MobilePrefixSolicitation | MobilePrefixAdvertisement | DuplicateAddressRequestCodeSuffix | DuplicateAddressConfirmationCodeSuffix | ExtendedEchoRequest | ExtendedEchoReply
    """


    family?: "IPv4" | "IPv6" = "IPv4"

    $type: int | str


    check:
        _regex_match(str($type), r"^([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]|EchoReply|DestinationUnreachable|Redirect|Echo|RouterAdvertisement|RouterSelection|TimeExceeded|ParameterProblem|Timestamp|TimestampReply|Photuris|ExtendedEchoRequest|ExtendedEcho Reply|PacketTooBig|ParameterProblem|EchoRequest|MulticastListenerQuery|MulticastListenerReport|MulticastListenerDone|RouterSolicitation|RouterAdvertisement|NeighborSolicitation|NeighborAdvertisement|RedirectMessage|RouterRenumbering|ICMPNodeInformationQuery|ICMPNodeInformationResponse|InverseNeighborDiscoverySolicitation|InverseNeighborDiscoveryAdvertisement|HomeAgentAddressDiscoveryRequest|HomeAgentAddressDiscoveryReply|MobilePrefixSolicitation|MobilePrefixAdvertisement|DuplicateAddressRequestCodeSuffix|DuplicateAddressConfirmationCodeSuffix)$")


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToCIDRSetItems0:
    """
    CIDRRule is a rule that specifies a CIDR prefix to/from which outside communication  is allowed, along with an optional list of subnets within that CIDR prefix to/from which outside communication is not allowed.

    Attributes
    ----------
    cidr : str, default is Undefined, optional
        CIDR is a CIDR prefix / IP Block.
    cidrGroupRef : str, default is Undefined, optional
        CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress/Egress) or cannot (IngressDeny/EgressDeny) receive connections from.
    except : [str], default is Undefined, optional
        ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.
    """


    cidr?: str

    cidrGroupRef?: str

    except?: [str]


    check:
        len(cidrGroupRef) <= 253
        _regex_match(str(cidrGroupRef), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if cidrGroupRef


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToEndpointsItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToEndpointsItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToEndpointsItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToEndpointsItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToGroupsItems0:
    """
    Groups structure to store all kinds of new integrations that needs a new derivative policy.

    Attributes
    ----------
    aws : CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToGroupsItems0Aws, default is Undefined, optional
        aws
    """


    aws?: CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToGroupsItems0Aws


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToGroupsItems0Aws:
    """
    AWSGroup is an structure that can be used to whitelisting information from AWS integration

    Attributes
    ----------
    labels : {str:str}, default is Undefined, optional
        labels
    region : str, default is Undefined, optional
        region
    securityGroupsIds : [str], default is Undefined, optional
        security groups ids
    securityGroupsNames : [str], default is Undefined, optional
        security groups names
    """


    labels?: {str:str}

    region?: str

    securityGroupsIds?: [str]

    securityGroupsNames?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToNodesItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToNodesItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToNodesItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToNodesItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToPortsItems0:
    """
    PortDenyRule is a list of ports/protocol that should be used for deny policies. This structure lacks the L7Rules since it's not supported in deny policies.

    Attributes
    ----------
    ports : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToPortsItems0PortsItems0], default is Undefined, optional
        Ports is a list of L4 port/protocol
    """


    ports?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToPortsItems0PortsItems0]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToPortsItems0PortsItems0:
    """
    PortProtocol specifies an L4 port with an optional transport protocol

    Attributes
    ----------
    endPort : int, default is Undefined, optional
        EndPort can only be an L4 port number.
    port : str, default is Undefined, required
        Port can be an L4 port number, or a name in the form of "http" or "http-8080".
    $protocol : str, default is Undefined, optional
        Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: "TCP", "UDP", "SCTP", "ANY" 
         Matching on ICMP is not supported. 
         Named port specified for a container may narrow this down, but may not contradict this.
    """


    endPort?: int

    port: str

    $protocol?: "TCP" | "UDP" | "SCTP" | "ANY"


    check:
        endPort <= 65535
        endPort >= 0
        _regex_match(str(port), r"^(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[0-9]{1,4})|([a-zA-Z0-9]-?)*[a-zA-Z](-?[a-zA-Z0-9])*$")


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToRequiresItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToRequiresItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToRequiresItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToRequiresItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToServicesItems0:
    """
    Service wraps around selectors for services

    Attributes
    ----------
    k8sService : CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToServicesItems0K8sService, default is Undefined, optional
        k8s service
    k8sServiceSelector : CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToServicesItems0K8sServiceSelector, default is Undefined, optional
        k8s service selector
    """


    k8sService?: CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToServicesItems0K8sService

    k8sServiceSelector?: CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToServicesItems0K8sServiceSelector


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToServicesItems0K8sService:
    """
    K8sService selects service by name and namespace pair

    Attributes
    ----------
    namespace : str, default is Undefined, optional
        namespace
    serviceName : str, default is Undefined, optional
        service name
    """


    namespace?: str

    serviceName?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToServicesItems0K8sServiceSelector:
    """
    K8sServiceSelector selects services by k8s labels and namespace

    Attributes
    ----------
    namespace : str, default is Undefined, optional
        namespace
    selector : CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToServicesItems0K8sServiceSelectorSelector, default is Undefined, required
        selector
    """


    namespace?: str

    selector: CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToServicesItems0K8sServiceSelectorSelector


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToServicesItems0K8sServiceSelectorSelector:
    """
    ServiceSelector is a label selector for k8s services

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToServicesItems0K8sServiceSelectorSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToServicesItems0K8sServiceSelectorSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressDenyItems0ToServicesItems0K8sServiceSelectorSelectorMatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0:
    """
    EgressRule contains all rule types which can be applied at egress, i.e. network traffic that originates inside the endpoint and exits the endpoint selected by the endpointSelector. 
     - All members of this structure are optional. If omitted or empty, the member will have no effect on the rule. 
     - If multiple members of the structure are specified, then all members must match in order for the rule to take effect. The exception to this rule is the ToRequires member; the effects of any Requires field in any rule will apply to all other rules as well. 
     - ToEndpoints, ToCIDR, ToCIDRSet, ToEntities, ToServices and ToGroups are mutually exclusive. Only one of these members may be present within an individual rule.

    Attributes
    ----------
    authentication : CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0Authentication, default is Undefined, optional
        authentication
    icmps : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0IcmpsItems0], default is Undefined, optional
        ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. 
         Example: Any endpoint with the label "app=httpd" is allowed to initiate type 8 ICMP connections.
    toCIDR : [str], default is Undefined, optional
        ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. 
         Example: Any endpoint with the label "app=database-proxy" is allowed to initiate connections to 10.2.3.0/24
    toCIDRSet : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToCIDRSetItems0], default is Undefined, optional
        ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. 
         Example: Any endpoint with the label "app=database-proxy" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.
    toEndpoints : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToEndpointsItems0], default is Undefined, optional
        ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. 
         Example: Any endpoint with the label "role=frontend" can communicate with any endpoint carrying the label "role=backend".
    toEntities : [str], default is Undefined, optional
        ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are `world`, `cluster`,`host`,`remote-node`,`kube-apiserver`, `init`, `health`,`unmanaged` and `all`.
    toFQDNs : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToFQDNsItems0], default is Undefined, optional
        ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of `ToFQDN.MatchName`s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -> IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.
    toGroups : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToGroupsItems0], default is Undefined, optional
        ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: 
         Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'
    toNodes : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToNodesItems0], default is Undefined, optional
        ToNodes is a list of nodes identified by an EndpointSelector to which endpoints subject to the rule is allowed to communicate.
    toPorts : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0], default is Undefined, optional
        ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. 
         Example: Any endpoint with the label "role=frontend" is allowed to initiate connections to destination port 8080/tcp
    toRequires : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToRequiresItems0], default is Undefined, optional
        ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. 
         Example: Any Endpoint with the label "team=A" requires any endpoint to which it communicates to also carry the label "team=A".
    toServices : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToServicesItems0], default is Undefined, optional
        ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. 
         Example: Any endpoint with the label "app=backend-app" is allowed to initiate connections to all cidrs backing the "external-service" service
    """


    authentication?: CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0Authentication

    icmps?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0IcmpsItems0]

    toCIDR?: [str]

    toCIDRSet?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToCIDRSetItems0]

    toEndpoints?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToEndpointsItems0]

    toEntities?: [str]

    toFQDNs?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToFQDNsItems0]

    toGroups?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToGroupsItems0]

    toNodes?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToNodesItems0]

    toPorts?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0]

    toRequires?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToRequiresItems0]

    toServices?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToServicesItems0]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0Authentication:
    """
    Authentication is the required authentication type for the allowed traffic, if any.

    Attributes
    ----------
    mode : str, default is Undefined, required
        Mode is the required authentication mode for the allowed traffic, if any.
    """


    mode: "disabled" | "required" | "test-always-fail"


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0IcmpsItems0:
    """
    ICMPRule is a list of ICMP fields.

    Attributes
    ----------
    fields : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0IcmpsItems0FieldsItems0], default is Undefined, optional
        Fields is a list of ICMP fields.
    """


    fields?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0IcmpsItems0FieldsItems0]


    check:
        len(fields) <= 40


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0IcmpsItems0FieldsItems0:
    """
    ICMPField is a ICMP field.

    Attributes
    ----------
    family : str, default is "IPv4", optional
        Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.
    $type : int | str, default is Undefined, required
        Type is a ICMP-type. It should be an 8bit code (0-255), or it's CamelCase name (for example, "EchoReply"). Allowed ICMP types are: Ipv4: EchoReply | DestinationUnreachable | Redirect | Echo | EchoRequest | RouterAdvertisement | RouterSelection | TimeExceeded | ParameterProblem | Timestamp | TimestampReply | Photuris | ExtendedEcho Request | ExtendedEcho Reply Ipv6: DestinationUnreachable | PacketTooBig | TimeExceeded | ParameterProblem | EchoRequest | EchoReply | MulticastListenerQuery| MulticastListenerReport | MulticastListenerDone | RouterSolicitation | RouterAdvertisement | NeighborSolicitation | NeighborAdvertisement | RedirectMessage | RouterRenumbering | ICMPNodeInformationQuery | ICMPNodeInformationResponse | InverseNeighborDiscoverySolicitation | InverseNeighborDiscoveryAdvertisement | HomeAgentAddressDiscoveryRequest | HomeAgentAddressDiscoveryReply | MobilePrefixSolicitation | MobilePrefixAdvertisement | DuplicateAddressRequestCodeSuffix | DuplicateAddressConfirmationCodeSuffix | ExtendedEchoRequest | ExtendedEchoReply
    """


    family?: "IPv4" | "IPv6" = "IPv4"

    $type: int | str


    check:
        _regex_match(str($type), r"^([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]|EchoReply|DestinationUnreachable|Redirect|Echo|RouterAdvertisement|RouterSelection|TimeExceeded|ParameterProblem|Timestamp|TimestampReply|Photuris|ExtendedEchoRequest|ExtendedEcho Reply|PacketTooBig|ParameterProblem|EchoRequest|MulticastListenerQuery|MulticastListenerReport|MulticastListenerDone|RouterSolicitation|RouterAdvertisement|NeighborSolicitation|NeighborAdvertisement|RedirectMessage|RouterRenumbering|ICMPNodeInformationQuery|ICMPNodeInformationResponse|InverseNeighborDiscoverySolicitation|InverseNeighborDiscoveryAdvertisement|HomeAgentAddressDiscoveryRequest|HomeAgentAddressDiscoveryReply|MobilePrefixSolicitation|MobilePrefixAdvertisement|DuplicateAddressRequestCodeSuffix|DuplicateAddressConfirmationCodeSuffix)$")


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToCIDRSetItems0:
    """
    CIDRRule is a rule that specifies a CIDR prefix to/from which outside communication  is allowed, along with an optional list of subnets within that CIDR prefix to/from which outside communication is not allowed.

    Attributes
    ----------
    cidr : str, default is Undefined, optional
        CIDR is a CIDR prefix / IP Block.
    cidrGroupRef : str, default is Undefined, optional
        CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress/Egress) or cannot (IngressDeny/EgressDeny) receive connections from.
    except : [str], default is Undefined, optional
        ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.
    """


    cidr?: str

    cidrGroupRef?: str

    except?: [str]


    check:
        len(cidrGroupRef) <= 253
        _regex_match(str(cidrGroupRef), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if cidrGroupRef


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToEndpointsItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToEndpointsItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToEndpointsItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToEndpointsItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToFQDNsItems0:
    """
    cilium io v2 cilium clusterwide network policy spec egress items0 to f q d ns items0

    Attributes
    ----------
    matchName : str, default is Undefined, optional
        MatchName matches literal DNS names. A trailing "." is automatically added when missing.
    matchPattern : str, default is Undefined, optional
        MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - "*" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a "*" as the leftmost character, without a following "." matches all subdomains as well as the name to the right. A trailing "." is automatically added when missing. 
         Examples: `*.cilium.io` matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not `*cilium.io` matches cilium.io and all subdomains ends with "cilium.io" except those containing "." separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with "sub" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not
    """


    matchName?: str

    matchPattern?: str


    check:
        _regex_match(str(matchName), r"^([-a-zA-Z0-9_]+[.]?)+$") if matchName
        _regex_match(str(matchPattern), r"^([-a-zA-Z0-9_*]+[.]?)+$") if matchPattern


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToGroupsItems0:
    """
    Groups structure to store all kinds of new integrations that needs a new derivative policy.

    Attributes
    ----------
    aws : CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToGroupsItems0Aws, default is Undefined, optional
        aws
    """


    aws?: CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToGroupsItems0Aws


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToGroupsItems0Aws:
    """
    AWSGroup is an structure that can be used to whitelisting information from AWS integration

    Attributes
    ----------
    labels : {str:str}, default is Undefined, optional
        labels
    region : str, default is Undefined, optional
        region
    securityGroupsIds : [str], default is Undefined, optional
        security groups ids
    securityGroupsNames : [str], default is Undefined, optional
        security groups names
    """


    labels?: {str:str}

    region?: str

    securityGroupsIds?: [str]

    securityGroupsNames?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToNodesItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToNodesItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToNodesItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToNodesItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0:
    """
    PortRule is a list of ports/protocol combinations with optional Layer 7 rules which must be met.

    Attributes
    ----------
    listener : CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0Listener, default is Undefined, optional
        listener
    originatingTLS : CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0OriginatingTLS, default is Undefined, optional
        originating TLS
    ports : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0PortsItems0], default is Undefined, optional
        Ports is a list of L4 port/protocol
    rules : CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0Rules, default is Undefined, optional
        rules
    serverNames : [str], default is Undefined, optional
        ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.
    terminatingTLS : CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0TerminatingTLS, default is Undefined, optional
        terminating TLS
    """


    listener?: CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0Listener

    originatingTLS?: CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0OriginatingTLS

    ports?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0PortsItems0]

    rules?: CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0Rules

    serverNames?: [str]

    terminatingTLS?: CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0TerminatingTLS


    check:
        len(ports) <= 40


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0Listener:
    """
    listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.

    Attributes
    ----------
    envoyConfig : CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0ListenerEnvoyConfig, default is Undefined, required
        envoy config
    name : str, default is Undefined, required
        Name is the name of the listener.
    priority : int, default is Undefined, optional
        Priority for this Listener that is used when multiple rules would apply different listeners to a policy map entry. Behavior of this is implementation dependent.
    """


    envoyConfig: CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0ListenerEnvoyConfig

    name: str

    priority?: int


    check:
        len(name) >= 1
        priority <= 100
        priority >= 1


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0ListenerEnvoyConfig:
    """
    EnvoyConfig is a reference to the CEC or CCEC resource in which the listener is defined.

    Attributes
    ----------
    kind : str, default is Undefined, optional
        Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.
    name : str, default is Undefined, required
        Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.
    """


    kind?: "CiliumEnvoyConfig" | "CiliumClusterwideEnvoyConfig"

    name: str


    check:
        len(name) >= 1


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0OriginatingTLS:
    """
    OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.

    Attributes
    ----------
    certificate : str, default is Undefined, optional
        Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.
    privateKey : str, default is Undefined, optional
        PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.
    secret : CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0OriginatingTLSSecret, default is Undefined, required
        secret
    trustedCA : str, default is Undefined, optional
        TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.
    """


    certificate?: str

    privateKey?: str

    secret: CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0OriginatingTLSSecret

    trustedCA?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0OriginatingTLSSecret:
    """
    Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the secret.
    namespace : str, default is Undefined, optional
        Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
    """


    name: str

    namespace?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0PortsItems0:
    """
    PortProtocol specifies an L4 port with an optional transport protocol

    Attributes
    ----------
    endPort : int, default is Undefined, optional
        EndPort can only be an L4 port number.
    port : str, default is Undefined, required
        Port can be an L4 port number, or a name in the form of "http" or "http-8080".
    $protocol : str, default is Undefined, optional
        Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: "TCP", "UDP", "SCTP", "ANY" 
         Matching on ICMP is not supported. 
         Named port specified for a container may narrow this down, but may not contradict this.
    """


    endPort?: int

    port: str

    $protocol?: "TCP" | "UDP" | "SCTP" | "ANY"


    check:
        endPort <= 65535
        endPort >= 0
        _regex_match(str(port), r"^(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[0-9]{1,4})|([a-zA-Z0-9]-?)*[a-zA-Z](-?[a-zA-Z0-9])*$")


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0Rules:
    """
    Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.

    Attributes
    ----------
    dns : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0RulesDNSItems0], default is Undefined, optional
        DNS-specific rules.
    http : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0RulesHTTPItems0], default is Undefined, optional
        HTTP specific rules.
    kafka : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0RulesKafkaItems0], default is Undefined, optional
        Kafka-specific rules.
    l7 : [{str:str}], default is Undefined, optional
        Key-value pair rules.
    l7proto : str, default is Undefined, optional
        Name of the L7 protocol for which the Key-value pair rules apply.
    """


    dns?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0RulesDNSItems0]

    http?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0RulesHTTPItems0]

    kafka?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0RulesKafkaItems0]

    l7?: [{str:str}]

    l7proto?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0RulesDNSItems0:
    """
    PortRuleDNS is a list of allowed DNS lookups.

    Attributes
    ----------
    matchName : str, default is Undefined, optional
        MatchName matches literal DNS names. A trailing "." is automatically added when missing.
    matchPattern : str, default is Undefined, optional
        MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - "*" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a "*" as the leftmost character, without a following "." matches all subdomains as well as the name to the right. A trailing "." is automatically added when missing. 
         Examples: `*.cilium.io` matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not `*cilium.io` matches cilium.io and all subdomains ends with "cilium.io" except those containing "." separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with "sub" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not
    """


    matchName?: str

    matchPattern?: str


    check:
        _regex_match(str(matchName), r"^([-a-zA-Z0-9_]+[.]?)+$") if matchName
        _regex_match(str(matchPattern), r"^([-a-zA-Z0-9_*]+[.]?)+$") if matchPattern


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0RulesHTTPItems0:
    """
    PortRuleHTTP is a list of HTTP protocol constraints. All fields are optional, if all fields are empty or missing, the rule does not have any effect. 
     All fields of this type are extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986.

    Attributes
    ----------
    headerMatches : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0], default is Undefined, optional
        HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.
    headers : [str], default is Undefined, optional
        Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.
    host : str, default is Undefined, optional
        Host is an extended POSIX regex matched against the host header of a request, e.g. "foo.com" 
         If omitted or empty, the value of the host header is ignored.
    method : str, default is Undefined, optional
        Method is an extended POSIX regex matched against the method of a request, e.g. "GET", "POST", "PUT", "PATCH", "DELETE", ... 
         If omitted or empty, all methods are allowed.
    path : str, default is Undefined, optional
        Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. 
         If omitted or empty, all paths are all allowed.
    """


    headerMatches?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0]

    headers?: [str]

    host?: str

    method?: str

    path?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0:
    """
    HeaderMatch extends the HeaderValue for matching requirement of a named header field against an immediate string, a secret value, or a regex.  If none of the optional fields is present, then the header value is not matched, only presence of the header is enough.

    Attributes
    ----------
    mismatch : str, default is Undefined, optional
        Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.
    name : str, default is Undefined, required
        Name identifies the header.
    secret : CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0Secret, default is Undefined, optional
        secret
    value : str, default is Undefined, optional
        Value matches the exact value of the header. Can be specified either alone or together with "Secret"; will be used as the header value if the secret can not be found in the latter case.
    """


    mismatch?: "LOG" | "ADD" | "DELETE" | "REPLACE"

    name: str

    secret?: CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0Secret

    value?: str


    check:
        len(name) >= 1


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0Secret:
    """
    Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no "Value" specified, the match will fail.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the secret.
    namespace : str, default is Undefined, optional
        Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
    """


    name: str

    namespace?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0RulesKafkaItems0:
    """
    PortRule is a list of Kafka protocol constraints. All fields are optional, if all fields are empty or missing, the rule will match all Kafka messages.

    Attributes
    ----------
    apiKey : str, default is Undefined, optional
        APIKey is a case-insensitive string matched against the key of a request, e.g. "produce", "fetch", "createtopic", "deletetopic", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys 
         If omitted or empty, and if Role is not specified, then all keys are allowed.
    apiVersion : str, default is Undefined, optional
        APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. 
         If omitted or empty, all versions are allowed.
    clientID : str, default is Undefined, optional
        ClientID is the client identifier as provided in the request. 
         From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. 
         If omitted or empty, all client identifiers are allowed.
    role : str, default is Undefined, optional
        Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as "produce" or "consume". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. 
         The following values are supported: - "produce": Allow producing to the topics specified in the rule - "consume": Allow consuming from the topics specified in the rule 
         This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. 
         If omitted or empty, and if APIKey is not specified, then all keys are allowed.
    topic : str, default is Undefined, optional
        Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. 
         This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. 
         Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. 
         If omitted or empty, all topics are allowed.
    """


    apiKey?: str

    apiVersion?: str

    clientID?: str

    role?: "produce" | "consume"

    topic?: str


    check:
        len(topic) <= 255


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0TerminatingTLS:
    """
    TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.

    Attributes
    ----------
    certificate : str, default is Undefined, optional
        Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.
    privateKey : str, default is Undefined, optional
        PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.
    secret : CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0TerminatingTLSSecret, default is Undefined, required
        secret
    trustedCA : str, default is Undefined, optional
        TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.
    """


    certificate?: str

    privateKey?: str

    secret: CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0TerminatingTLSSecret

    trustedCA?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToPortsItems0TerminatingTLSSecret:
    """
    Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the secret.
    namespace : str, default is Undefined, optional
        Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
    """


    name: str

    namespace?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToRequiresItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToRequiresItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToRequiresItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToRequiresItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToServicesItems0:
    """
    Service wraps around selectors for services

    Attributes
    ----------
    k8sService : CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToServicesItems0K8sService, default is Undefined, optional
        k8s service
    k8sServiceSelector : CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToServicesItems0K8sServiceSelector, default is Undefined, optional
        k8s service selector
    """


    k8sService?: CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToServicesItems0K8sService

    k8sServiceSelector?: CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToServicesItems0K8sServiceSelector


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToServicesItems0K8sService:
    """
    K8sService selects service by name and namespace pair

    Attributes
    ----------
    namespace : str, default is Undefined, optional
        namespace
    serviceName : str, default is Undefined, optional
        service name
    """


    namespace?: str

    serviceName?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToServicesItems0K8sServiceSelector:
    """
    K8sServiceSelector selects services by k8s labels and namespace

    Attributes
    ----------
    namespace : str, default is Undefined, optional
        namespace
    selector : CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToServicesItems0K8sServiceSelectorSelector, default is Undefined, required
        selector
    """


    namespace?: str

    selector: CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToServicesItems0K8sServiceSelectorSelector


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToServicesItems0K8sServiceSelectorSelector:
    """
    ServiceSelector is a label selector for k8s services

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToServicesItems0K8sServiceSelectorSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToServicesItems0K8sServiceSelectorSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEgressItems0ToServicesItems0K8sServiceSelectorSelectorMatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEnableDefaultDeny:
    """
    EnableDefaultDeny determines whether this policy configures the subject endpoint(s) to have a default deny mode. If enabled, this causes all traffic not explicitly allowed by a network policy to be dropped. 
     If not specified, the default is true for each traffic direction that has rules, and false otherwise. For example, if a policy only has Ingress or IngressDeny rules, then the default for ingress is true and egress is false. 
     If multiple policies apply to an endpoint, that endpoint's default deny will be enabled if any policy requests it. 
     This is useful for creating broad-based network policies that will not cause endpoints to enter default-deny mode.

    Attributes
    ----------
    egress : bool, default is Undefined, optional
        Whether or not the endpoint should have a default-deny rule applied to egress traffic.
    ingress : bool, default is Undefined, optional
        Whether or not the endpoint should have a default-deny rule applied to ingress traffic.
    """


    egress?: bool

    ingress?: bool


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEndpointSelector:
    """
    EndpointSelector selects all endpoints which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecEndpointSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecEndpointSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecEndpointSelectorMatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0:
    """
    IngressDenyRule contains all rule types which can be applied at ingress, i.e. network traffic that originates outside of the endpoint and is entering the endpoint selected by the endpointSelector. 
     - All members of this structure are optional. If omitted or empty, the member will have no effect on the rule. 
     - If multiple members are set, all of them need to match in order for the rule to take effect. The exception to this rule is FromRequires field; the effects of any Requires field in any rule will apply to all other rules as well. 
     - FromEndpoints, FromCIDR, FromCIDRSet, FromGroups and FromEntities are mutually exclusive. Only one of these members may be present within an individual rule.

    Attributes
    ----------
    fromCIDR : [str], default is Undefined, optional
        FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do *not* originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. 
         Example: Any endpoint with the label "app=my-legacy-pet" is allowed to receive connections from 10.3.9.1
    fromCIDRSet : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromCIDRSetItems0], default is Undefined, optional
        FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. 
         Example: Any endpoint with the label "app=my-legacy-pet" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.
    fromEndpoints : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromEndpointsItems0], default is Undefined, optional
        FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. 
         Example: Any endpoint with the label "role=backend" can be consumed by any endpoint carrying the label "role=frontend".
    fromEntities : [str], default is Undefined, optional
        FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are `world`, `cluster` and `host`
    fromGroups : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromGroupsItems0], default is Undefined, optional
        FromGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: 
         Example: FromGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'
    fromNodes : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromNodesItems0], default is Undefined, optional
        FromNodes is a list of nodes identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule.
    fromRequires : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromRequiresItems0], default is Undefined, optional
        FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. 
         Example: Any Endpoint with the label "team=A" requires consuming endpoint to also carry the label "team=A".
    icmps : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0IcmpsItems0], default is Undefined, optional
        ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. 
         Example: Any endpoint with the label "app=httpd" can not accept incoming type 8 ICMP connections.
    toPorts : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0ToPortsItems0], default is Undefined, optional
        ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. 
         Example: Any endpoint with the label "app=httpd" can not accept incoming connections on port 80/tcp.
    """


    fromCIDR?: [str]

    fromCIDRSet?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromCIDRSetItems0]

    fromEndpoints?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromEndpointsItems0]

    fromEntities?: [str]

    fromGroups?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromGroupsItems0]

    fromNodes?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromNodesItems0]

    fromRequires?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromRequiresItems0]

    icmps?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0IcmpsItems0]

    toPorts?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0ToPortsItems0]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromCIDRSetItems0:
    """
    CIDRRule is a rule that specifies a CIDR prefix to/from which outside communication  is allowed, along with an optional list of subnets within that CIDR prefix to/from which outside communication is not allowed.

    Attributes
    ----------
    cidr : str, default is Undefined, optional
        CIDR is a CIDR prefix / IP Block.
    cidrGroupRef : str, default is Undefined, optional
        CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress/Egress) or cannot (IngressDeny/EgressDeny) receive connections from.
    except : [str], default is Undefined, optional
        ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.
    """


    cidr?: str

    cidrGroupRef?: str

    except?: [str]


    check:
        len(cidrGroupRef) <= 253
        _regex_match(str(cidrGroupRef), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if cidrGroupRef


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromEndpointsItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromEndpointsItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromEndpointsItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromEndpointsItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromGroupsItems0:
    """
    Groups structure to store all kinds of new integrations that needs a new derivative policy.

    Attributes
    ----------
    aws : CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromGroupsItems0Aws, default is Undefined, optional
        aws
    """


    aws?: CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromGroupsItems0Aws


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromGroupsItems0Aws:
    """
    AWSGroup is an structure that can be used to whitelisting information from AWS integration

    Attributes
    ----------
    labels : {str:str}, default is Undefined, optional
        labels
    region : str, default is Undefined, optional
        region
    securityGroupsIds : [str], default is Undefined, optional
        security groups ids
    securityGroupsNames : [str], default is Undefined, optional
        security groups names
    """


    labels?: {str:str}

    region?: str

    securityGroupsIds?: [str]

    securityGroupsNames?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromNodesItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromNodesItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromNodesItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromNodesItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromRequiresItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromRequiresItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromRequiresItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0FromRequiresItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0IcmpsItems0:
    """
    ICMPRule is a list of ICMP fields.

    Attributes
    ----------
    fields : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0IcmpsItems0FieldsItems0], default is Undefined, optional
        Fields is a list of ICMP fields.
    """


    fields?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0IcmpsItems0FieldsItems0]


    check:
        len(fields) <= 40


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0IcmpsItems0FieldsItems0:
    """
    ICMPField is a ICMP field.

    Attributes
    ----------
    family : str, default is "IPv4", optional
        Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.
    $type : int | str, default is Undefined, required
        Type is a ICMP-type. It should be an 8bit code (0-255), or it's CamelCase name (for example, "EchoReply"). Allowed ICMP types are: Ipv4: EchoReply | DestinationUnreachable | Redirect | Echo | EchoRequest | RouterAdvertisement | RouterSelection | TimeExceeded | ParameterProblem | Timestamp | TimestampReply | Photuris | ExtendedEcho Request | ExtendedEcho Reply Ipv6: DestinationUnreachable | PacketTooBig | TimeExceeded | ParameterProblem | EchoRequest | EchoReply | MulticastListenerQuery| MulticastListenerReport | MulticastListenerDone | RouterSolicitation | RouterAdvertisement | NeighborSolicitation | NeighborAdvertisement | RedirectMessage | RouterRenumbering | ICMPNodeInformationQuery | ICMPNodeInformationResponse | InverseNeighborDiscoverySolicitation | InverseNeighborDiscoveryAdvertisement | HomeAgentAddressDiscoveryRequest | HomeAgentAddressDiscoveryReply | MobilePrefixSolicitation | MobilePrefixAdvertisement | DuplicateAddressRequestCodeSuffix | DuplicateAddressConfirmationCodeSuffix | ExtendedEchoRequest | ExtendedEchoReply
    """


    family?: "IPv4" | "IPv6" = "IPv4"

    $type: int | str


    check:
        _regex_match(str($type), r"^([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]|EchoReply|DestinationUnreachable|Redirect|Echo|RouterAdvertisement|RouterSelection|TimeExceeded|ParameterProblem|Timestamp|TimestampReply|Photuris|ExtendedEchoRequest|ExtendedEcho Reply|PacketTooBig|ParameterProblem|EchoRequest|MulticastListenerQuery|MulticastListenerReport|MulticastListenerDone|RouterSolicitation|RouterAdvertisement|NeighborSolicitation|NeighborAdvertisement|RedirectMessage|RouterRenumbering|ICMPNodeInformationQuery|ICMPNodeInformationResponse|InverseNeighborDiscoverySolicitation|InverseNeighborDiscoveryAdvertisement|HomeAgentAddressDiscoveryRequest|HomeAgentAddressDiscoveryReply|MobilePrefixSolicitation|MobilePrefixAdvertisement|DuplicateAddressRequestCodeSuffix|DuplicateAddressConfirmationCodeSuffix)$")


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0ToPortsItems0:
    """
    PortDenyRule is a list of ports/protocol that should be used for deny policies. This structure lacks the L7Rules since it's not supported in deny policies.

    Attributes
    ----------
    ports : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0ToPortsItems0PortsItems0], default is Undefined, optional
        Ports is a list of L4 port/protocol
    """


    ports?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0ToPortsItems0PortsItems0]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressDenyItems0ToPortsItems0PortsItems0:
    """
    PortProtocol specifies an L4 port with an optional transport protocol

    Attributes
    ----------
    endPort : int, default is Undefined, optional
        EndPort can only be an L4 port number.
    port : str, default is Undefined, required
        Port can be an L4 port number, or a name in the form of "http" or "http-8080".
    $protocol : str, default is Undefined, optional
        Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: "TCP", "UDP", "SCTP", "ANY" 
         Matching on ICMP is not supported. 
         Named port specified for a container may narrow this down, but may not contradict this.
    """


    endPort?: int

    port: str

    $protocol?: "TCP" | "UDP" | "SCTP" | "ANY"


    check:
        endPort <= 65535
        endPort >= 0
        _regex_match(str(port), r"^(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[0-9]{1,4})|([a-zA-Z0-9]-?)*[a-zA-Z](-?[a-zA-Z0-9])*$")


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0:
    """
    IngressRule contains all rule types which can be applied at ingress, i.e. network traffic that originates outside of the endpoint and is entering the endpoint selected by the endpointSelector. 
     - All members of this structure are optional. If omitted or empty, the member will have no effect on the rule. 
     - If multiple members are set, all of them need to match in order for the rule to take effect. The exception to this rule is FromRequires field; the effects of any Requires field in any rule will apply to all other rules as well. 
     - FromEndpoints, FromCIDR, FromCIDRSet and FromEntities are mutually exclusive. Only one of these members may be present within an individual rule.

    Attributes
    ----------
    authentication : CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0Authentication, default is Undefined, optional
        authentication
    fromCIDR : [str], default is Undefined, optional
        FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do *not* originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. 
         Example: Any endpoint with the label "app=my-legacy-pet" is allowed to receive connections from 10.3.9.1
    fromCIDRSet : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromCIDRSetItems0], default is Undefined, optional
        FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. 
         Example: Any endpoint with the label "app=my-legacy-pet" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.
    fromEndpoints : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromEndpointsItems0], default is Undefined, optional
        FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. 
         Example: Any endpoint with the label "role=backend" can be consumed by any endpoint carrying the label "role=frontend".
    fromEntities : [str], default is Undefined, optional
        FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are `world`, `cluster` and `host`
    fromGroups : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromGroupsItems0], default is Undefined, optional
        FromGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: 
         Example: FromGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'
    fromNodes : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromNodesItems0], default is Undefined, optional
        FromNodes is a list of nodes identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule.
    fromRequires : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromRequiresItems0], default is Undefined, optional
        FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. 
         Example: Any Endpoint with the label "team=A" requires consuming endpoint to also carry the label "team=A".
    icmps : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0IcmpsItems0], default is Undefined, optional
        ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. 
         Example: Any endpoint with the label "app=httpd" can only accept incoming type 8 ICMP connections.
    toPorts : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0], default is Undefined, optional
        ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. 
         Example: Any endpoint with the label "app=httpd" can only accept incoming connections on port 80/tcp.
    """


    authentication?: CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0Authentication

    fromCIDR?: [str]

    fromCIDRSet?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromCIDRSetItems0]

    fromEndpoints?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromEndpointsItems0]

    fromEntities?: [str]

    fromGroups?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromGroupsItems0]

    fromNodes?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromNodesItems0]

    fromRequires?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromRequiresItems0]

    icmps?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0IcmpsItems0]

    toPorts?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0Authentication:
    """
    Authentication is the required authentication type for the allowed traffic, if any.

    Attributes
    ----------
    mode : str, default is Undefined, required
        Mode is the required authentication mode for the allowed traffic, if any.
    """


    mode: "disabled" | "required" | "test-always-fail"


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromCIDRSetItems0:
    """
    CIDRRule is a rule that specifies a CIDR prefix to/from which outside communication  is allowed, along with an optional list of subnets within that CIDR prefix to/from which outside communication is not allowed.

    Attributes
    ----------
    cidr : str, default is Undefined, optional
        CIDR is a CIDR prefix / IP Block.
    cidrGroupRef : str, default is Undefined, optional
        CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress/Egress) or cannot (IngressDeny/EgressDeny) receive connections from.
    except : [str], default is Undefined, optional
        ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.
    """


    cidr?: str

    cidrGroupRef?: str

    except?: [str]


    check:
        len(cidrGroupRef) <= 253
        _regex_match(str(cidrGroupRef), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if cidrGroupRef


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromEndpointsItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromEndpointsItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromEndpointsItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromEndpointsItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromGroupsItems0:
    """
    Groups structure to store all kinds of new integrations that needs a new derivative policy.

    Attributes
    ----------
    aws : CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromGroupsItems0Aws, default is Undefined, optional
        aws
    """


    aws?: CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromGroupsItems0Aws


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromGroupsItems0Aws:
    """
    AWSGroup is an structure that can be used to whitelisting information from AWS integration

    Attributes
    ----------
    labels : {str:str}, default is Undefined, optional
        labels
    region : str, default is Undefined, optional
        region
    securityGroupsIds : [str], default is Undefined, optional
        security groups ids
    securityGroupsNames : [str], default is Undefined, optional
        security groups names
    """


    labels?: {str:str}

    region?: str

    securityGroupsIds?: [str]

    securityGroupsNames?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromNodesItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromNodesItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromNodesItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromNodesItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromRequiresItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromRequiresItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromRequiresItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0FromRequiresItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0IcmpsItems0:
    """
    ICMPRule is a list of ICMP fields.

    Attributes
    ----------
    fields : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0IcmpsItems0FieldsItems0], default is Undefined, optional
        Fields is a list of ICMP fields.
    """


    fields?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0IcmpsItems0FieldsItems0]


    check:
        len(fields) <= 40


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0IcmpsItems0FieldsItems0:
    """
    ICMPField is a ICMP field.

    Attributes
    ----------
    family : str, default is "IPv4", optional
        Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.
    $type : int | str, default is Undefined, required
        Type is a ICMP-type. It should be an 8bit code (0-255), or it's CamelCase name (for example, "EchoReply"). Allowed ICMP types are: Ipv4: EchoReply | DestinationUnreachable | Redirect | Echo | EchoRequest | RouterAdvertisement | RouterSelection | TimeExceeded | ParameterProblem | Timestamp | TimestampReply | Photuris | ExtendedEcho Request | ExtendedEcho Reply Ipv6: DestinationUnreachable | PacketTooBig | TimeExceeded | ParameterProblem | EchoRequest | EchoReply | MulticastListenerQuery| MulticastListenerReport | MulticastListenerDone | RouterSolicitation | RouterAdvertisement | NeighborSolicitation | NeighborAdvertisement | RedirectMessage | RouterRenumbering | ICMPNodeInformationQuery | ICMPNodeInformationResponse | InverseNeighborDiscoverySolicitation | InverseNeighborDiscoveryAdvertisement | HomeAgentAddressDiscoveryRequest | HomeAgentAddressDiscoveryReply | MobilePrefixSolicitation | MobilePrefixAdvertisement | DuplicateAddressRequestCodeSuffix | DuplicateAddressConfirmationCodeSuffix | ExtendedEchoRequest | ExtendedEchoReply
    """


    family?: "IPv4" | "IPv6" = "IPv4"

    $type: int | str


    check:
        _regex_match(str($type), r"^([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]|EchoReply|DestinationUnreachable|Redirect|Echo|RouterAdvertisement|RouterSelection|TimeExceeded|ParameterProblem|Timestamp|TimestampReply|Photuris|ExtendedEchoRequest|ExtendedEcho Reply|PacketTooBig|ParameterProblem|EchoRequest|MulticastListenerQuery|MulticastListenerReport|MulticastListenerDone|RouterSolicitation|RouterAdvertisement|NeighborSolicitation|NeighborAdvertisement|RedirectMessage|RouterRenumbering|ICMPNodeInformationQuery|ICMPNodeInformationResponse|InverseNeighborDiscoverySolicitation|InverseNeighborDiscoveryAdvertisement|HomeAgentAddressDiscoveryRequest|HomeAgentAddressDiscoveryReply|MobilePrefixSolicitation|MobilePrefixAdvertisement|DuplicateAddressRequestCodeSuffix|DuplicateAddressConfirmationCodeSuffix)$")


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0:
    """
    PortRule is a list of ports/protocol combinations with optional Layer 7 rules which must be met.

    Attributes
    ----------
    listener : CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0Listener, default is Undefined, optional
        listener
    originatingTLS : CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0OriginatingTLS, default is Undefined, optional
        originating TLS
    ports : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0PortsItems0], default is Undefined, optional
        Ports is a list of L4 port/protocol
    rules : CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0Rules, default is Undefined, optional
        rules
    serverNames : [str], default is Undefined, optional
        ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.
    terminatingTLS : CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0TerminatingTLS, default is Undefined, optional
        terminating TLS
    """


    listener?: CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0Listener

    originatingTLS?: CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0OriginatingTLS

    ports?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0PortsItems0]

    rules?: CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0Rules

    serverNames?: [str]

    terminatingTLS?: CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0TerminatingTLS


    check:
        len(ports) <= 40


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0Listener:
    """
    listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.

    Attributes
    ----------
    envoyConfig : CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0ListenerEnvoyConfig, default is Undefined, required
        envoy config
    name : str, default is Undefined, required
        Name is the name of the listener.
    priority : int, default is Undefined, optional
        Priority for this Listener that is used when multiple rules would apply different listeners to a policy map entry. Behavior of this is implementation dependent.
    """


    envoyConfig: CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0ListenerEnvoyConfig

    name: str

    priority?: int


    check:
        len(name) >= 1
        priority <= 100
        priority >= 1


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0ListenerEnvoyConfig:
    """
    EnvoyConfig is a reference to the CEC or CCEC resource in which the listener is defined.

    Attributes
    ----------
    kind : str, default is Undefined, optional
        Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.
    name : str, default is Undefined, required
        Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.
    """


    kind?: "CiliumEnvoyConfig" | "CiliumClusterwideEnvoyConfig"

    name: str


    check:
        len(name) >= 1


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0OriginatingTLS:
    """
    OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.

    Attributes
    ----------
    certificate : str, default is Undefined, optional
        Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.
    privateKey : str, default is Undefined, optional
        PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.
    secret : CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0OriginatingTLSSecret, default is Undefined, required
        secret
    trustedCA : str, default is Undefined, optional
        TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.
    """


    certificate?: str

    privateKey?: str

    secret: CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0OriginatingTLSSecret

    trustedCA?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0OriginatingTLSSecret:
    """
    Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the secret.
    namespace : str, default is Undefined, optional
        Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
    """


    name: str

    namespace?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0PortsItems0:
    """
    PortProtocol specifies an L4 port with an optional transport protocol

    Attributes
    ----------
    endPort : int, default is Undefined, optional
        EndPort can only be an L4 port number.
    port : str, default is Undefined, required
        Port can be an L4 port number, or a name in the form of "http" or "http-8080".
    $protocol : str, default is Undefined, optional
        Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: "TCP", "UDP", "SCTP", "ANY" 
         Matching on ICMP is not supported. 
         Named port specified for a container may narrow this down, but may not contradict this.
    """


    endPort?: int

    port: str

    $protocol?: "TCP" | "UDP" | "SCTP" | "ANY"


    check:
        endPort <= 65535
        endPort >= 0
        _regex_match(str(port), r"^(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[0-9]{1,4})|([a-zA-Z0-9]-?)*[a-zA-Z](-?[a-zA-Z0-9])*$")


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0Rules:
    """
    Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.

    Attributes
    ----------
    dns : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0RulesDNSItems0], default is Undefined, optional
        DNS-specific rules.
    http : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0RulesHTTPItems0], default is Undefined, optional
        HTTP specific rules.
    kafka : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0RulesKafkaItems0], default is Undefined, optional
        Kafka-specific rules.
    l7 : [{str:str}], default is Undefined, optional
        Key-value pair rules.
    l7proto : str, default is Undefined, optional
        Name of the L7 protocol for which the Key-value pair rules apply.
    """


    dns?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0RulesDNSItems0]

    http?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0RulesHTTPItems0]

    kafka?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0RulesKafkaItems0]

    l7?: [{str:str}]

    l7proto?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0RulesDNSItems0:
    """
    PortRuleDNS is a list of allowed DNS lookups.

    Attributes
    ----------
    matchName : str, default is Undefined, optional
        MatchName matches literal DNS names. A trailing "." is automatically added when missing.
    matchPattern : str, default is Undefined, optional
        MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - "*" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a "*" as the leftmost character, without a following "." matches all subdomains as well as the name to the right. A trailing "." is automatically added when missing. 
         Examples: `*.cilium.io` matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not `*cilium.io` matches cilium.io and all subdomains ends with "cilium.io" except those containing "." separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with "sub" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not
    """


    matchName?: str

    matchPattern?: str


    check:
        _regex_match(str(matchName), r"^([-a-zA-Z0-9_]+[.]?)+$") if matchName
        _regex_match(str(matchPattern), r"^([-a-zA-Z0-9_*]+[.]?)+$") if matchPattern


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0RulesHTTPItems0:
    """
    PortRuleHTTP is a list of HTTP protocol constraints. All fields are optional, if all fields are empty or missing, the rule does not have any effect. 
     All fields of this type are extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986.

    Attributes
    ----------
    headerMatches : [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0], default is Undefined, optional
        HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.
    headers : [str], default is Undefined, optional
        Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.
    host : str, default is Undefined, optional
        Host is an extended POSIX regex matched against the host header of a request, e.g. "foo.com" 
         If omitted or empty, the value of the host header is ignored.
    method : str, default is Undefined, optional
        Method is an extended POSIX regex matched against the method of a request, e.g. "GET", "POST", "PUT", "PATCH", "DELETE", ... 
         If omitted or empty, all methods are allowed.
    path : str, default is Undefined, optional
        Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. 
         If omitted or empty, all paths are all allowed.
    """


    headerMatches?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0]

    headers?: [str]

    host?: str

    method?: str

    path?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0:
    """
    HeaderMatch extends the HeaderValue for matching requirement of a named header field against an immediate string, a secret value, or a regex.  If none of the optional fields is present, then the header value is not matched, only presence of the header is enough.

    Attributes
    ----------
    mismatch : str, default is Undefined, optional
        Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.
    name : str, default is Undefined, required
        Name identifies the header.
    secret : CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0Secret, default is Undefined, optional
        secret
    value : str, default is Undefined, optional
        Value matches the exact value of the header. Can be specified either alone or together with "Secret"; will be used as the header value if the secret can not be found in the latter case.
    """


    mismatch?: "LOG" | "ADD" | "DELETE" | "REPLACE"

    name: str

    secret?: CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0Secret

    value?: str


    check:
        len(name) >= 1


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0Secret:
    """
    Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no "Value" specified, the match will fail.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the secret.
    namespace : str, default is Undefined, optional
        Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
    """


    name: str

    namespace?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0RulesKafkaItems0:
    """
    PortRule is a list of Kafka protocol constraints. All fields are optional, if all fields are empty or missing, the rule will match all Kafka messages.

    Attributes
    ----------
    apiKey : str, default is Undefined, optional
        APIKey is a case-insensitive string matched against the key of a request, e.g. "produce", "fetch", "createtopic", "deletetopic", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys 
         If omitted or empty, and if Role is not specified, then all keys are allowed.
    apiVersion : str, default is Undefined, optional
        APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. 
         If omitted or empty, all versions are allowed.
    clientID : str, default is Undefined, optional
        ClientID is the client identifier as provided in the request. 
         From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. 
         If omitted or empty, all client identifiers are allowed.
    role : str, default is Undefined, optional
        Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as "produce" or "consume". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. 
         The following values are supported: - "produce": Allow producing to the topics specified in the rule - "consume": Allow consuming from the topics specified in the rule 
         This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. 
         If omitted or empty, and if APIKey is not specified, then all keys are allowed.
    topic : str, default is Undefined, optional
        Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. 
         This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. 
         Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. 
         If omitted or empty, all topics are allowed.
    """


    apiKey?: str

    apiVersion?: str

    clientID?: str

    role?: "produce" | "consume"

    topic?: str


    check:
        len(topic) <= 255


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0TerminatingTLS:
    """
    TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.

    Attributes
    ----------
    certificate : str, default is Undefined, optional
        Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.
    privateKey : str, default is Undefined, optional
        PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.
    secret : CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0TerminatingTLSSecret, default is Undefined, required
        secret
    trustedCA : str, default is Undefined, optional
        TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.
    """


    certificate?: str

    privateKey?: str

    secret: CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0TerminatingTLSSecret

    trustedCA?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecIngressItems0ToPortsItems0TerminatingTLSSecret:
    """
    Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the secret.
    namespace : str, default is Undefined, optional
        Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
    """


    name: str

    namespace?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecLabelsItems0:
    """
    Label is the Cilium's representation of a container label.

    Attributes
    ----------
    key : str, default is Undefined, required
        key
    source : str, default is Undefined, optional
        Source can be one of the above values (e.g.: LabelSourceContainer).
    value : str, default is Undefined, optional
        value
    """


    key: str

    source?: str

    value?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecNodeSelector:
    """
    NodeSelector selects all nodes which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive. Can only be used in CiliumClusterwideNetworkPolicies.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecNodeSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecNodeSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecNodeSelectorMatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0:
    """
    Rule is a policy rule which must be applied to all endpoints which match the labels contained in the endpointSelector 
     Each rule is split into an ingress section which contains all rules applicable at ingress, and an egress section applicable at egress. For rule types such as `L4Rule` and `CIDR` which can be applied at both ingress and egress, both ingress and egress side have to either specifically allow the connection or one side has to be omitted. 
     Either ingress, egress, or both can be provided. If both ingress and egress are omitted, the rule has no effect.

    Attributes
    ----------
    description : str, default is Undefined, optional
        Description is a free form string, it can be used by the creator of the rule to store human readable explanation of the purpose of this rule. Rules cannot be identified by comment.
    egress : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0], default is Undefined, optional
        Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.
    egressDeny : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0], default is Undefined, optional
        EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will be denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.
    enableDefaultDeny : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EnableDefaultDeny, default is Undefined, optional
        enable default deny
    endpointSelector : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EndpointSelector, default is Undefined, optional
        endpoint selector
    ingress : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0], default is Undefined, optional
        Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.
    ingressDeny : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0], default is Undefined, optional
        IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will be denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.
    labels : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0LabelsItems0], default is Undefined, optional
        Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.
    nodeSelector : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0NodeSelector, default is Undefined, optional
        node selector
    """


    description?: str

    egress?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0]

    egressDeny?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0]

    enableDefaultDeny?: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EnableDefaultDeny

    endpointSelector?: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EndpointSelector

    ingress?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0]

    ingressDeny?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0]

    labels?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0LabelsItems0]

    nodeSelector?: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0NodeSelector


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0:
    """
    EgressDenyRule contains all rule types which can be applied at egress, i.e. network traffic that originates inside the endpoint and exits the endpoint selected by the endpointSelector. 
     - All members of this structure are optional. If omitted or empty, the member will have no effect on the rule. 
     - If multiple members of the structure are specified, then all members must match in order for the rule to take effect. The exception to this rule is the ToRequires member; the effects of any Requires field in any rule will apply to all other rules as well. 
     - ToEndpoints, ToCIDR, ToCIDRSet, ToEntities, ToServices and ToGroups are mutually exclusive. Only one of these members may be present within an individual rule.

    Attributes
    ----------
    icmps : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0IcmpsItems0], default is Undefined, optional
        ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. 
         Example: Any endpoint with the label "app=httpd" is not allowed to initiate type 8 ICMP connections.
    toCIDR : [str], default is Undefined, optional
        ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. 
         Example: Any endpoint with the label "app=database-proxy" is allowed to initiate connections to 10.2.3.0/24
    toCIDRSet : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToCIDRSetItems0], default is Undefined, optional
        ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. 
         Example: Any endpoint with the label "app=database-proxy" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.
    toEndpoints : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToEndpointsItems0], default is Undefined, optional
        ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. 
         Example: Any endpoint with the label "role=frontend" can communicate with any endpoint carrying the label "role=backend".
    toEntities : [str], default is Undefined, optional
        ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are `world`, `cluster`,`host`,`remote-node`,`kube-apiserver`, `init`, `health`,`unmanaged` and `all`.
    toGroups : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToGroupsItems0], default is Undefined, optional
        ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: 
         Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'
    toNodes : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToNodesItems0], default is Undefined, optional
        ToNodes is a list of nodes identified by an EndpointSelector to which endpoints subject to the rule is allowed to communicate.
    toPorts : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToPortsItems0], default is Undefined, optional
        ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. 
         Example: Any endpoint with the label "role=frontend" is not allowed to initiate connections to destination port 8080/tcp
    toRequires : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToRequiresItems0], default is Undefined, optional
        ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. 
         Example: Any Endpoint with the label "team=A" requires any endpoint to which it communicates to also carry the label "team=A".
    toServices : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToServicesItems0], default is Undefined, optional
        ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. 
         Example: Any endpoint with the label "app=backend-app" is allowed to initiate connections to all cidrs backing the "external-service" service
    """


    icmps?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0IcmpsItems0]

    toCIDR?: [str]

    toCIDRSet?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToCIDRSetItems0]

    toEndpoints?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToEndpointsItems0]

    toEntities?: [str]

    toGroups?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToGroupsItems0]

    toNodes?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToNodesItems0]

    toPorts?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToPortsItems0]

    toRequires?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToRequiresItems0]

    toServices?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToServicesItems0]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0IcmpsItems0:
    """
    ICMPRule is a list of ICMP fields.

    Attributes
    ----------
    fields : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0IcmpsItems0FieldsItems0], default is Undefined, optional
        Fields is a list of ICMP fields.
    """


    fields?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0IcmpsItems0FieldsItems0]


    check:
        len(fields) <= 40


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0IcmpsItems0FieldsItems0:
    """
    ICMPField is a ICMP field.

    Attributes
    ----------
    family : str, default is "IPv4", optional
        Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.
    $type : int | str, default is Undefined, required
        Type is a ICMP-type. It should be an 8bit code (0-255), or it's CamelCase name (for example, "EchoReply"). Allowed ICMP types are: Ipv4: EchoReply | DestinationUnreachable | Redirect | Echo | EchoRequest | RouterAdvertisement | RouterSelection | TimeExceeded | ParameterProblem | Timestamp | TimestampReply | Photuris | ExtendedEcho Request | ExtendedEcho Reply Ipv6: DestinationUnreachable | PacketTooBig | TimeExceeded | ParameterProblem | EchoRequest | EchoReply | MulticastListenerQuery| MulticastListenerReport | MulticastListenerDone | RouterSolicitation | RouterAdvertisement | NeighborSolicitation | NeighborAdvertisement | RedirectMessage | RouterRenumbering | ICMPNodeInformationQuery | ICMPNodeInformationResponse | InverseNeighborDiscoverySolicitation | InverseNeighborDiscoveryAdvertisement | HomeAgentAddressDiscoveryRequest | HomeAgentAddressDiscoveryReply | MobilePrefixSolicitation | MobilePrefixAdvertisement | DuplicateAddressRequestCodeSuffix | DuplicateAddressConfirmationCodeSuffix | ExtendedEchoRequest | ExtendedEchoReply
    """


    family?: "IPv4" | "IPv6" = "IPv4"

    $type: int | str


    check:
        _regex_match(str($type), r"^([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]|EchoReply|DestinationUnreachable|Redirect|Echo|RouterAdvertisement|RouterSelection|TimeExceeded|ParameterProblem|Timestamp|TimestampReply|Photuris|ExtendedEchoRequest|ExtendedEcho Reply|PacketTooBig|ParameterProblem|EchoRequest|MulticastListenerQuery|MulticastListenerReport|MulticastListenerDone|RouterSolicitation|RouterAdvertisement|NeighborSolicitation|NeighborAdvertisement|RedirectMessage|RouterRenumbering|ICMPNodeInformationQuery|ICMPNodeInformationResponse|InverseNeighborDiscoverySolicitation|InverseNeighborDiscoveryAdvertisement|HomeAgentAddressDiscoveryRequest|HomeAgentAddressDiscoveryReply|MobilePrefixSolicitation|MobilePrefixAdvertisement|DuplicateAddressRequestCodeSuffix|DuplicateAddressConfirmationCodeSuffix)$")


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToCIDRSetItems0:
    """
    CIDRRule is a rule that specifies a CIDR prefix to/from which outside communication  is allowed, along with an optional list of subnets within that CIDR prefix to/from which outside communication is not allowed.

    Attributes
    ----------
    cidr : str, default is Undefined, optional
        CIDR is a CIDR prefix / IP Block.
    cidrGroupRef : str, default is Undefined, optional
        CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress/Egress) or cannot (IngressDeny/EgressDeny) receive connections from.
    except : [str], default is Undefined, optional
        ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.
    """


    cidr?: str

    cidrGroupRef?: str

    except?: [str]


    check:
        len(cidrGroupRef) <= 253
        _regex_match(str(cidrGroupRef), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if cidrGroupRef


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToEndpointsItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToEndpointsItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToEndpointsItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToEndpointsItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToGroupsItems0:
    """
    Groups structure to store all kinds of new integrations that needs a new derivative policy.

    Attributes
    ----------
    aws : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToGroupsItems0Aws, default is Undefined, optional
        aws
    """


    aws?: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToGroupsItems0Aws


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToGroupsItems0Aws:
    """
    AWSGroup is an structure that can be used to whitelisting information from AWS integration

    Attributes
    ----------
    labels : {str:str}, default is Undefined, optional
        labels
    region : str, default is Undefined, optional
        region
    securityGroupsIds : [str], default is Undefined, optional
        security groups ids
    securityGroupsNames : [str], default is Undefined, optional
        security groups names
    """


    labels?: {str:str}

    region?: str

    securityGroupsIds?: [str]

    securityGroupsNames?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToNodesItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToNodesItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToNodesItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToNodesItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToPortsItems0:
    """
    PortDenyRule is a list of ports/protocol that should be used for deny policies. This structure lacks the L7Rules since it's not supported in deny policies.

    Attributes
    ----------
    ports : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToPortsItems0PortsItems0], default is Undefined, optional
        Ports is a list of L4 port/protocol
    """


    ports?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToPortsItems0PortsItems0]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToPortsItems0PortsItems0:
    """
    PortProtocol specifies an L4 port with an optional transport protocol

    Attributes
    ----------
    endPort : int, default is Undefined, optional
        EndPort can only be an L4 port number.
    port : str, default is Undefined, required
        Port can be an L4 port number, or a name in the form of "http" or "http-8080".
    $protocol : str, default is Undefined, optional
        Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: "TCP", "UDP", "SCTP", "ANY" 
         Matching on ICMP is not supported. 
         Named port specified for a container may narrow this down, but may not contradict this.
    """


    endPort?: int

    port: str

    $protocol?: "TCP" | "UDP" | "SCTP" | "ANY"


    check:
        endPort <= 65535
        endPort >= 0
        _regex_match(str(port), r"^(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[0-9]{1,4})|([a-zA-Z0-9]-?)*[a-zA-Z](-?[a-zA-Z0-9])*$")


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToRequiresItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToRequiresItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToRequiresItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToRequiresItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToServicesItems0:
    """
    Service wraps around selectors for services

    Attributes
    ----------
    k8sService : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToServicesItems0K8sService, default is Undefined, optional
        k8s service
    k8sServiceSelector : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToServicesItems0K8sServiceSelector, default is Undefined, optional
        k8s service selector
    """


    k8sService?: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToServicesItems0K8sService

    k8sServiceSelector?: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToServicesItems0K8sServiceSelector


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToServicesItems0K8sService:
    """
    K8sService selects service by name and namespace pair

    Attributes
    ----------
    namespace : str, default is Undefined, optional
        namespace
    serviceName : str, default is Undefined, optional
        service name
    """


    namespace?: str

    serviceName?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToServicesItems0K8sServiceSelector:
    """
    K8sServiceSelector selects services by k8s labels and namespace

    Attributes
    ----------
    namespace : str, default is Undefined, optional
        namespace
    selector : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToServicesItems0K8sServiceSelectorSelector, default is Undefined, required
        selector
    """


    namespace?: str

    selector: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToServicesItems0K8sServiceSelectorSelector


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToServicesItems0K8sServiceSelectorSelector:
    """
    ServiceSelector is a label selector for k8s services

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToServicesItems0K8sServiceSelectorSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToServicesItems0K8sServiceSelectorSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressDenyItems0ToServicesItems0K8sServiceSelectorSelectorMatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0:
    """
    EgressRule contains all rule types which can be applied at egress, i.e. network traffic that originates inside the endpoint and exits the endpoint selected by the endpointSelector. 
     - All members of this structure are optional. If omitted or empty, the member will have no effect on the rule. 
     - If multiple members of the structure are specified, then all members must match in order for the rule to take effect. The exception to this rule is the ToRequires member; the effects of any Requires field in any rule will apply to all other rules as well. 
     - ToEndpoints, ToCIDR, ToCIDRSet, ToEntities, ToServices and ToGroups are mutually exclusive. Only one of these members may be present within an individual rule.

    Attributes
    ----------
    authentication : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0Authentication, default is Undefined, optional
        authentication
    icmps : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0IcmpsItems0], default is Undefined, optional
        ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. 
         Example: Any endpoint with the label "app=httpd" is allowed to initiate type 8 ICMP connections.
    toCIDR : [str], default is Undefined, optional
        ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. 
         Example: Any endpoint with the label "app=database-proxy" is allowed to initiate connections to 10.2.3.0/24
    toCIDRSet : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToCIDRSetItems0], default is Undefined, optional
        ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. 
         Example: Any endpoint with the label "app=database-proxy" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.
    toEndpoints : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToEndpointsItems0], default is Undefined, optional
        ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. 
         Example: Any endpoint with the label "role=frontend" can communicate with any endpoint carrying the label "role=backend".
    toEntities : [str], default is Undefined, optional
        ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are `world`, `cluster`,`host`,`remote-node`,`kube-apiserver`, `init`, `health`,`unmanaged` and `all`.
    toFQDNs : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToFQDNsItems0], default is Undefined, optional
        ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of `ToFQDN.MatchName`s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -> IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules.
    toGroups : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToGroupsItems0], default is Undefined, optional
        ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: 
         Example: toGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'
    toNodes : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToNodesItems0], default is Undefined, optional
        ToNodes is a list of nodes identified by an EndpointSelector to which endpoints subject to the rule is allowed to communicate.
    toPorts : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0], default is Undefined, optional
        ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. 
         Example: Any endpoint with the label "role=frontend" is allowed to initiate connections to destination port 8080/tcp
    toRequires : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToRequiresItems0], default is Undefined, optional
        ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. 
         Example: Any Endpoint with the label "team=A" requires any endpoint to which it communicates to also carry the label "team=A".
    toServices : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToServicesItems0], default is Undefined, optional
        ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. 
         Example: Any endpoint with the label "app=backend-app" is allowed to initiate connections to all cidrs backing the "external-service" service
    """


    authentication?: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0Authentication

    icmps?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0IcmpsItems0]

    toCIDR?: [str]

    toCIDRSet?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToCIDRSetItems0]

    toEndpoints?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToEndpointsItems0]

    toEntities?: [str]

    toFQDNs?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToFQDNsItems0]

    toGroups?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToGroupsItems0]

    toNodes?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToNodesItems0]

    toPorts?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0]

    toRequires?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToRequiresItems0]

    toServices?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToServicesItems0]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0Authentication:
    """
    Authentication is the required authentication type for the allowed traffic, if any.

    Attributes
    ----------
    mode : str, default is Undefined, required
        Mode is the required authentication mode for the allowed traffic, if any.
    """


    mode: "disabled" | "required" | "test-always-fail"


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0IcmpsItems0:
    """
    ICMPRule is a list of ICMP fields.

    Attributes
    ----------
    fields : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0IcmpsItems0FieldsItems0], default is Undefined, optional
        Fields is a list of ICMP fields.
    """


    fields?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0IcmpsItems0FieldsItems0]


    check:
        len(fields) <= 40


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0IcmpsItems0FieldsItems0:
    """
    ICMPField is a ICMP field.

    Attributes
    ----------
    family : str, default is "IPv4", optional
        Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.
    $type : int | str, default is Undefined, required
        Type is a ICMP-type. It should be an 8bit code (0-255), or it's CamelCase name (for example, "EchoReply"). Allowed ICMP types are: Ipv4: EchoReply | DestinationUnreachable | Redirect | Echo | EchoRequest | RouterAdvertisement | RouterSelection | TimeExceeded | ParameterProblem | Timestamp | TimestampReply | Photuris | ExtendedEcho Request | ExtendedEcho Reply Ipv6: DestinationUnreachable | PacketTooBig | TimeExceeded | ParameterProblem | EchoRequest | EchoReply | MulticastListenerQuery| MulticastListenerReport | MulticastListenerDone | RouterSolicitation | RouterAdvertisement | NeighborSolicitation | NeighborAdvertisement | RedirectMessage | RouterRenumbering | ICMPNodeInformationQuery | ICMPNodeInformationResponse | InverseNeighborDiscoverySolicitation | InverseNeighborDiscoveryAdvertisement | HomeAgentAddressDiscoveryRequest | HomeAgentAddressDiscoveryReply | MobilePrefixSolicitation | MobilePrefixAdvertisement | DuplicateAddressRequestCodeSuffix | DuplicateAddressConfirmationCodeSuffix | ExtendedEchoRequest | ExtendedEchoReply
    """


    family?: "IPv4" | "IPv6" = "IPv4"

    $type: int | str


    check:
        _regex_match(str($type), r"^([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]|EchoReply|DestinationUnreachable|Redirect|Echo|RouterAdvertisement|RouterSelection|TimeExceeded|ParameterProblem|Timestamp|TimestampReply|Photuris|ExtendedEchoRequest|ExtendedEcho Reply|PacketTooBig|ParameterProblem|EchoRequest|MulticastListenerQuery|MulticastListenerReport|MulticastListenerDone|RouterSolicitation|RouterAdvertisement|NeighborSolicitation|NeighborAdvertisement|RedirectMessage|RouterRenumbering|ICMPNodeInformationQuery|ICMPNodeInformationResponse|InverseNeighborDiscoverySolicitation|InverseNeighborDiscoveryAdvertisement|HomeAgentAddressDiscoveryRequest|HomeAgentAddressDiscoveryReply|MobilePrefixSolicitation|MobilePrefixAdvertisement|DuplicateAddressRequestCodeSuffix|DuplicateAddressConfirmationCodeSuffix)$")


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToCIDRSetItems0:
    """
    CIDRRule is a rule that specifies a CIDR prefix to/from which outside communication  is allowed, along with an optional list of subnets within that CIDR prefix to/from which outside communication is not allowed.

    Attributes
    ----------
    cidr : str, default is Undefined, optional
        CIDR is a CIDR prefix / IP Block.
    cidrGroupRef : str, default is Undefined, optional
        CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress/Egress) or cannot (IngressDeny/EgressDeny) receive connections from.
    except : [str], default is Undefined, optional
        ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.
    """


    cidr?: str

    cidrGroupRef?: str

    except?: [str]


    check:
        len(cidrGroupRef) <= 253
        _regex_match(str(cidrGroupRef), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if cidrGroupRef


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToEndpointsItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToEndpointsItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToEndpointsItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToEndpointsItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToFQDNsItems0:
    """
    cilium io v2 cilium clusterwide network policy specs items0 egress items0 to f q d ns items0

    Attributes
    ----------
    matchName : str, default is Undefined, optional
        MatchName matches literal DNS names. A trailing "." is automatically added when missing.
    matchPattern : str, default is Undefined, optional
        MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - "*" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a "*" as the leftmost character, without a following "." matches all subdomains as well as the name to the right. A trailing "." is automatically added when missing. 
         Examples: `*.cilium.io` matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not `*cilium.io` matches cilium.io and all subdomains ends with "cilium.io" except those containing "." separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with "sub" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not
    """


    matchName?: str

    matchPattern?: str


    check:
        _regex_match(str(matchName), r"^([-a-zA-Z0-9_]+[.]?)+$") if matchName
        _regex_match(str(matchPattern), r"^([-a-zA-Z0-9_*]+[.]?)+$") if matchPattern


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToGroupsItems0:
    """
    Groups structure to store all kinds of new integrations that needs a new derivative policy.

    Attributes
    ----------
    aws : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToGroupsItems0Aws, default is Undefined, optional
        aws
    """


    aws?: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToGroupsItems0Aws


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToGroupsItems0Aws:
    """
    AWSGroup is an structure that can be used to whitelisting information from AWS integration

    Attributes
    ----------
    labels : {str:str}, default is Undefined, optional
        labels
    region : str, default is Undefined, optional
        region
    securityGroupsIds : [str], default is Undefined, optional
        security groups ids
    securityGroupsNames : [str], default is Undefined, optional
        security groups names
    """


    labels?: {str:str}

    region?: str

    securityGroupsIds?: [str]

    securityGroupsNames?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToNodesItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToNodesItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToNodesItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToNodesItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0:
    """
    PortRule is a list of ports/protocol combinations with optional Layer 7 rules which must be met.

    Attributes
    ----------
    listener : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0Listener, default is Undefined, optional
        listener
    originatingTLS : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0OriginatingTLS, default is Undefined, optional
        originating TLS
    ports : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0PortsItems0], default is Undefined, optional
        Ports is a list of L4 port/protocol
    rules : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0Rules, default is Undefined, optional
        rules
    serverNames : [str], default is Undefined, optional
        ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.
    terminatingTLS : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0TerminatingTLS, default is Undefined, optional
        terminating TLS
    """


    listener?: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0Listener

    originatingTLS?: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0OriginatingTLS

    ports?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0PortsItems0]

    rules?: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0Rules

    serverNames?: [str]

    terminatingTLS?: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0TerminatingTLS


    check:
        len(ports) <= 40


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0Listener:
    """
    listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.

    Attributes
    ----------
    envoyConfig : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0ListenerEnvoyConfig, default is Undefined, required
        envoy config
    name : str, default is Undefined, required
        Name is the name of the listener.
    priority : int, default is Undefined, optional
        Priority for this Listener that is used when multiple rules would apply different listeners to a policy map entry. Behavior of this is implementation dependent.
    """


    envoyConfig: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0ListenerEnvoyConfig

    name: str

    priority?: int


    check:
        len(name) >= 1
        priority <= 100
        priority >= 1


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0ListenerEnvoyConfig:
    """
    EnvoyConfig is a reference to the CEC or CCEC resource in which the listener is defined.

    Attributes
    ----------
    kind : str, default is Undefined, optional
        Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.
    name : str, default is Undefined, required
        Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.
    """


    kind?: "CiliumEnvoyConfig" | "CiliumClusterwideEnvoyConfig"

    name: str


    check:
        len(name) >= 1


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0OriginatingTLS:
    """
    OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.

    Attributes
    ----------
    certificate : str, default is Undefined, optional
        Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.
    privateKey : str, default is Undefined, optional
        PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.
    secret : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0OriginatingTLSSecret, default is Undefined, required
        secret
    trustedCA : str, default is Undefined, optional
        TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.
    """


    certificate?: str

    privateKey?: str

    secret: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0OriginatingTLSSecret

    trustedCA?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0OriginatingTLSSecret:
    """
    Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the secret.
    namespace : str, default is Undefined, optional
        Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
    """


    name: str

    namespace?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0PortsItems0:
    """
    PortProtocol specifies an L4 port with an optional transport protocol

    Attributes
    ----------
    endPort : int, default is Undefined, optional
        EndPort can only be an L4 port number.
    port : str, default is Undefined, required
        Port can be an L4 port number, or a name in the form of "http" or "http-8080".
    $protocol : str, default is Undefined, optional
        Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: "TCP", "UDP", "SCTP", "ANY" 
         Matching on ICMP is not supported. 
         Named port specified for a container may narrow this down, but may not contradict this.
    """


    endPort?: int

    port: str

    $protocol?: "TCP" | "UDP" | "SCTP" | "ANY"


    check:
        endPort <= 65535
        endPort >= 0
        _regex_match(str(port), r"^(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[0-9]{1,4})|([a-zA-Z0-9]-?)*[a-zA-Z](-?[a-zA-Z0-9])*$")


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0Rules:
    """
    Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.

    Attributes
    ----------
    dns : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0RulesDNSItems0], default is Undefined, optional
        DNS-specific rules.
    http : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0RulesHTTPItems0], default is Undefined, optional
        HTTP specific rules.
    kafka : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0RulesKafkaItems0], default is Undefined, optional
        Kafka-specific rules.
    l7 : [{str:str}], default is Undefined, optional
        Key-value pair rules.
    l7proto : str, default is Undefined, optional
        Name of the L7 protocol for which the Key-value pair rules apply.
    """


    dns?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0RulesDNSItems0]

    http?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0RulesHTTPItems0]

    kafka?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0RulesKafkaItems0]

    l7?: [{str:str}]

    l7proto?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0RulesDNSItems0:
    """
    PortRuleDNS is a list of allowed DNS lookups.

    Attributes
    ----------
    matchName : str, default is Undefined, optional
        MatchName matches literal DNS names. A trailing "." is automatically added when missing.
    matchPattern : str, default is Undefined, optional
        MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - "*" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a "*" as the leftmost character, without a following "." matches all subdomains as well as the name to the right. A trailing "." is automatically added when missing. 
         Examples: `*.cilium.io` matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not `*cilium.io` matches cilium.io and all subdomains ends with "cilium.io" except those containing "." separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with "sub" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not
    """


    matchName?: str

    matchPattern?: str


    check:
        _regex_match(str(matchName), r"^([-a-zA-Z0-9_]+[.]?)+$") if matchName
        _regex_match(str(matchPattern), r"^([-a-zA-Z0-9_*]+[.]?)+$") if matchPattern


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0RulesHTTPItems0:
    """
    PortRuleHTTP is a list of HTTP protocol constraints. All fields are optional, if all fields are empty or missing, the rule does not have any effect. 
     All fields of this type are extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986.

    Attributes
    ----------
    headerMatches : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0], default is Undefined, optional
        HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.
    headers : [str], default is Undefined, optional
        Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.
    host : str, default is Undefined, optional
        Host is an extended POSIX regex matched against the host header of a request, e.g. "foo.com" 
         If omitted or empty, the value of the host header is ignored.
    method : str, default is Undefined, optional
        Method is an extended POSIX regex matched against the method of a request, e.g. "GET", "POST", "PUT", "PATCH", "DELETE", ... 
         If omitted or empty, all methods are allowed.
    path : str, default is Undefined, optional
        Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. 
         If omitted or empty, all paths are all allowed.
    """


    headerMatches?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0]

    headers?: [str]

    host?: str

    method?: str

    path?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0:
    """
    HeaderMatch extends the HeaderValue for matching requirement of a named header field against an immediate string, a secret value, or a regex.  If none of the optional fields is present, then the header value is not matched, only presence of the header is enough.

    Attributes
    ----------
    mismatch : str, default is Undefined, optional
        Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.
    name : str, default is Undefined, required
        Name identifies the header.
    secret : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0Secret, default is Undefined, optional
        secret
    value : str, default is Undefined, optional
        Value matches the exact value of the header. Can be specified either alone or together with "Secret"; will be used as the header value if the secret can not be found in the latter case.
    """


    mismatch?: "LOG" | "ADD" | "DELETE" | "REPLACE"

    name: str

    secret?: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0Secret

    value?: str


    check:
        len(name) >= 1


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0Secret:
    """
    Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no "Value" specified, the match will fail.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the secret.
    namespace : str, default is Undefined, optional
        Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
    """


    name: str

    namespace?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0RulesKafkaItems0:
    """
    PortRule is a list of Kafka protocol constraints. All fields are optional, if all fields are empty or missing, the rule will match all Kafka messages.

    Attributes
    ----------
    apiKey : str, default is Undefined, optional
        APIKey is a case-insensitive string matched against the key of a request, e.g. "produce", "fetch", "createtopic", "deletetopic", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys 
         If omitted or empty, and if Role is not specified, then all keys are allowed.
    apiVersion : str, default is Undefined, optional
        APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. 
         If omitted or empty, all versions are allowed.
    clientID : str, default is Undefined, optional
        ClientID is the client identifier as provided in the request. 
         From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. 
         If omitted or empty, all client identifiers are allowed.
    role : str, default is Undefined, optional
        Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as "produce" or "consume". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. 
         The following values are supported: - "produce": Allow producing to the topics specified in the rule - "consume": Allow consuming from the topics specified in the rule 
         This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. 
         If omitted or empty, and if APIKey is not specified, then all keys are allowed.
    topic : str, default is Undefined, optional
        Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. 
         This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. 
         Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. 
         If omitted or empty, all topics are allowed.
    """


    apiKey?: str

    apiVersion?: str

    clientID?: str

    role?: "produce" | "consume"

    topic?: str


    check:
        len(topic) <= 255


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0TerminatingTLS:
    """
    TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.

    Attributes
    ----------
    certificate : str, default is Undefined, optional
        Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.
    privateKey : str, default is Undefined, optional
        PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.
    secret : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0TerminatingTLSSecret, default is Undefined, required
        secret
    trustedCA : str, default is Undefined, optional
        TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.
    """


    certificate?: str

    privateKey?: str

    secret: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0TerminatingTLSSecret

    trustedCA?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToPortsItems0TerminatingTLSSecret:
    """
    Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the secret.
    namespace : str, default is Undefined, optional
        Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
    """


    name: str

    namespace?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToRequiresItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToRequiresItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToRequiresItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToRequiresItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToServicesItems0:
    """
    Service wraps around selectors for services

    Attributes
    ----------
    k8sService : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToServicesItems0K8sService, default is Undefined, optional
        k8s service
    k8sServiceSelector : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToServicesItems0K8sServiceSelector, default is Undefined, optional
        k8s service selector
    """


    k8sService?: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToServicesItems0K8sService

    k8sServiceSelector?: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToServicesItems0K8sServiceSelector


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToServicesItems0K8sService:
    """
    K8sService selects service by name and namespace pair

    Attributes
    ----------
    namespace : str, default is Undefined, optional
        namespace
    serviceName : str, default is Undefined, optional
        service name
    """


    namespace?: str

    serviceName?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToServicesItems0K8sServiceSelector:
    """
    K8sServiceSelector selects services by k8s labels and namespace

    Attributes
    ----------
    namespace : str, default is Undefined, optional
        namespace
    selector : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToServicesItems0K8sServiceSelectorSelector, default is Undefined, required
        selector
    """


    namespace?: str

    selector: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToServicesItems0K8sServiceSelectorSelector


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToServicesItems0K8sServiceSelectorSelector:
    """
    ServiceSelector is a label selector for k8s services

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToServicesItems0K8sServiceSelectorSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToServicesItems0K8sServiceSelectorSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EgressItems0ToServicesItems0K8sServiceSelectorSelectorMatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EnableDefaultDeny:
    """
    EnableDefaultDeny determines whether this policy configures the subject endpoint(s) to have a default deny mode. If enabled, this causes all traffic not explicitly allowed by a network policy to be dropped. 
     If not specified, the default is true for each traffic direction that has rules, and false otherwise. For example, if a policy only has Ingress or IngressDeny rules, then the default for ingress is true and egress is false. 
     If multiple policies apply to an endpoint, that endpoint's default deny will be enabled if any policy requests it. 
     This is useful for creating broad-based network policies that will not cause endpoints to enter default-deny mode.

    Attributes
    ----------
    egress : bool, default is Undefined, optional
        Whether or not the endpoint should have a default-deny rule applied to egress traffic.
    ingress : bool, default is Undefined, optional
        Whether or not the endpoint should have a default-deny rule applied to ingress traffic.
    """


    egress?: bool

    ingress?: bool


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EndpointSelector:
    """
    EndpointSelector selects all endpoints which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EndpointSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EndpointSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0EndpointSelectorMatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0:
    """
    IngressDenyRule contains all rule types which can be applied at ingress, i.e. network traffic that originates outside of the endpoint and is entering the endpoint selected by the endpointSelector. 
     - All members of this structure are optional. If omitted or empty, the member will have no effect on the rule. 
     - If multiple members are set, all of them need to match in order for the rule to take effect. The exception to this rule is FromRequires field; the effects of any Requires field in any rule will apply to all other rules as well. 
     - FromEndpoints, FromCIDR, FromCIDRSet, FromGroups and FromEntities are mutually exclusive. Only one of these members may be present within an individual rule.

    Attributes
    ----------
    fromCIDR : [str], default is Undefined, optional
        FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do *not* originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. 
         Example: Any endpoint with the label "app=my-legacy-pet" is allowed to receive connections from 10.3.9.1
    fromCIDRSet : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromCIDRSetItems0], default is Undefined, optional
        FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. 
         Example: Any endpoint with the label "app=my-legacy-pet" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.
    fromEndpoints : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromEndpointsItems0], default is Undefined, optional
        FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. 
         Example: Any endpoint with the label "role=backend" can be consumed by any endpoint carrying the label "role=frontend".
    fromEntities : [str], default is Undefined, optional
        FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are `world`, `cluster` and `host`
    fromGroups : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromGroupsItems0], default is Undefined, optional
        FromGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: 
         Example: FromGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'
    fromNodes : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromNodesItems0], default is Undefined, optional
        FromNodes is a list of nodes identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule.
    fromRequires : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromRequiresItems0], default is Undefined, optional
        FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. 
         Example: Any Endpoint with the label "team=A" requires consuming endpoint to also carry the label "team=A".
    icmps : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0IcmpsItems0], default is Undefined, optional
        ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. 
         Example: Any endpoint with the label "app=httpd" can not accept incoming type 8 ICMP connections.
    toPorts : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0ToPortsItems0], default is Undefined, optional
        ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. 
         Example: Any endpoint with the label "app=httpd" can not accept incoming connections on port 80/tcp.
    """


    fromCIDR?: [str]

    fromCIDRSet?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromCIDRSetItems0]

    fromEndpoints?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromEndpointsItems0]

    fromEntities?: [str]

    fromGroups?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromGroupsItems0]

    fromNodes?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromNodesItems0]

    fromRequires?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromRequiresItems0]

    icmps?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0IcmpsItems0]

    toPorts?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0ToPortsItems0]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromCIDRSetItems0:
    """
    CIDRRule is a rule that specifies a CIDR prefix to/from which outside communication  is allowed, along with an optional list of subnets within that CIDR prefix to/from which outside communication is not allowed.

    Attributes
    ----------
    cidr : str, default is Undefined, optional
        CIDR is a CIDR prefix / IP Block.
    cidrGroupRef : str, default is Undefined, optional
        CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress/Egress) or cannot (IngressDeny/EgressDeny) receive connections from.
    except : [str], default is Undefined, optional
        ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.
    """


    cidr?: str

    cidrGroupRef?: str

    except?: [str]


    check:
        len(cidrGroupRef) <= 253
        _regex_match(str(cidrGroupRef), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if cidrGroupRef


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromEndpointsItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromEndpointsItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromEndpointsItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromEndpointsItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromGroupsItems0:
    """
    Groups structure to store all kinds of new integrations that needs a new derivative policy.

    Attributes
    ----------
    aws : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromGroupsItems0Aws, default is Undefined, optional
        aws
    """


    aws?: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromGroupsItems0Aws


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromGroupsItems0Aws:
    """
    AWSGroup is an structure that can be used to whitelisting information from AWS integration

    Attributes
    ----------
    labels : {str:str}, default is Undefined, optional
        labels
    region : str, default is Undefined, optional
        region
    securityGroupsIds : [str], default is Undefined, optional
        security groups ids
    securityGroupsNames : [str], default is Undefined, optional
        security groups names
    """


    labels?: {str:str}

    region?: str

    securityGroupsIds?: [str]

    securityGroupsNames?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromNodesItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromNodesItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromNodesItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromNodesItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromRequiresItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromRequiresItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromRequiresItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0FromRequiresItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0IcmpsItems0:
    """
    ICMPRule is a list of ICMP fields.

    Attributes
    ----------
    fields : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0IcmpsItems0FieldsItems0], default is Undefined, optional
        Fields is a list of ICMP fields.
    """


    fields?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0IcmpsItems0FieldsItems0]


    check:
        len(fields) <= 40


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0IcmpsItems0FieldsItems0:
    """
    ICMPField is a ICMP field.

    Attributes
    ----------
    family : str, default is "IPv4", optional
        Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.
    $type : int | str, default is Undefined, required
        Type is a ICMP-type. It should be an 8bit code (0-255), or it's CamelCase name (for example, "EchoReply"). Allowed ICMP types are: Ipv4: EchoReply | DestinationUnreachable | Redirect | Echo | EchoRequest | RouterAdvertisement | RouterSelection | TimeExceeded | ParameterProblem | Timestamp | TimestampReply | Photuris | ExtendedEcho Request | ExtendedEcho Reply Ipv6: DestinationUnreachable | PacketTooBig | TimeExceeded | ParameterProblem | EchoRequest | EchoReply | MulticastListenerQuery| MulticastListenerReport | MulticastListenerDone | RouterSolicitation | RouterAdvertisement | NeighborSolicitation | NeighborAdvertisement | RedirectMessage | RouterRenumbering | ICMPNodeInformationQuery | ICMPNodeInformationResponse | InverseNeighborDiscoverySolicitation | InverseNeighborDiscoveryAdvertisement | HomeAgentAddressDiscoveryRequest | HomeAgentAddressDiscoveryReply | MobilePrefixSolicitation | MobilePrefixAdvertisement | DuplicateAddressRequestCodeSuffix | DuplicateAddressConfirmationCodeSuffix | ExtendedEchoRequest | ExtendedEchoReply
    """


    family?: "IPv4" | "IPv6" = "IPv4"

    $type: int | str


    check:
        _regex_match(str($type), r"^([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]|EchoReply|DestinationUnreachable|Redirect|Echo|RouterAdvertisement|RouterSelection|TimeExceeded|ParameterProblem|Timestamp|TimestampReply|Photuris|ExtendedEchoRequest|ExtendedEcho Reply|PacketTooBig|ParameterProblem|EchoRequest|MulticastListenerQuery|MulticastListenerReport|MulticastListenerDone|RouterSolicitation|RouterAdvertisement|NeighborSolicitation|NeighborAdvertisement|RedirectMessage|RouterRenumbering|ICMPNodeInformationQuery|ICMPNodeInformationResponse|InverseNeighborDiscoverySolicitation|InverseNeighborDiscoveryAdvertisement|HomeAgentAddressDiscoveryRequest|HomeAgentAddressDiscoveryReply|MobilePrefixSolicitation|MobilePrefixAdvertisement|DuplicateAddressRequestCodeSuffix|DuplicateAddressConfirmationCodeSuffix)$")


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0ToPortsItems0:
    """
    PortDenyRule is a list of ports/protocol that should be used for deny policies. This structure lacks the L7Rules since it's not supported in deny policies.

    Attributes
    ----------
    ports : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0ToPortsItems0PortsItems0], default is Undefined, optional
        Ports is a list of L4 port/protocol
    """


    ports?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0ToPortsItems0PortsItems0]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressDenyItems0ToPortsItems0PortsItems0:
    """
    PortProtocol specifies an L4 port with an optional transport protocol

    Attributes
    ----------
    endPort : int, default is Undefined, optional
        EndPort can only be an L4 port number.
    port : str, default is Undefined, required
        Port can be an L4 port number, or a name in the form of "http" or "http-8080".
    $protocol : str, default is Undefined, optional
        Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: "TCP", "UDP", "SCTP", "ANY" 
         Matching on ICMP is not supported. 
         Named port specified for a container may narrow this down, but may not contradict this.
    """


    endPort?: int

    port: str

    $protocol?: "TCP" | "UDP" | "SCTP" | "ANY"


    check:
        endPort <= 65535
        endPort >= 0
        _regex_match(str(port), r"^(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[0-9]{1,4})|([a-zA-Z0-9]-?)*[a-zA-Z](-?[a-zA-Z0-9])*$")


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0:
    """
    IngressRule contains all rule types which can be applied at ingress, i.e. network traffic that originates outside of the endpoint and is entering the endpoint selected by the endpointSelector. 
     - All members of this structure are optional. If omitted or empty, the member will have no effect on the rule. 
     - If multiple members are set, all of them need to match in order for the rule to take effect. The exception to this rule is FromRequires field; the effects of any Requires field in any rule will apply to all other rules as well. 
     - FromEndpoints, FromCIDR, FromCIDRSet and FromEntities are mutually exclusive. Only one of these members may be present within an individual rule.

    Attributes
    ----------
    authentication : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0Authentication, default is Undefined, optional
        authentication
    fromCIDR : [str], default is Undefined, optional
        FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do *not* originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. 
         Example: Any endpoint with the label "app=my-legacy-pet" is allowed to receive connections from 10.3.9.1
    fromCIDRSet : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromCIDRSetItems0], default is Undefined, optional
        FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. 
         Example: Any endpoint with the label "app=my-legacy-pet" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.
    fromEndpoints : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromEndpointsItems0], default is Undefined, optional
        FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. 
         Example: Any endpoint with the label "role=backend" can be consumed by any endpoint carrying the label "role=frontend".
    fromEntities : [str], default is Undefined, optional
        FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are `world`, `cluster` and `host`
    fromGroups : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromGroupsItems0], default is Undefined, optional
        FromGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: 
         Example: FromGroups: - aws: securityGroupsIds: - 'sg-XXXXXXXXXXXXX'
    fromNodes : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromNodesItems0], default is Undefined, optional
        FromNodes is a list of nodes identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule.
    fromRequires : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromRequiresItems0], default is Undefined, optional
        FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. 
         Example: Any Endpoint with the label "team=A" requires consuming endpoint to also carry the label "team=A".
    icmps : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0IcmpsItems0], default is Undefined, optional
        ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. 
         Example: Any endpoint with the label "app=httpd" can only accept incoming type 8 ICMP connections.
    toPorts : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0], default is Undefined, optional
        ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. 
         Example: Any endpoint with the label "app=httpd" can only accept incoming connections on port 80/tcp.
    """


    authentication?: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0Authentication

    fromCIDR?: [str]

    fromCIDRSet?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromCIDRSetItems0]

    fromEndpoints?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromEndpointsItems0]

    fromEntities?: [str]

    fromGroups?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromGroupsItems0]

    fromNodes?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromNodesItems0]

    fromRequires?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromRequiresItems0]

    icmps?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0IcmpsItems0]

    toPorts?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0Authentication:
    """
    Authentication is the required authentication type for the allowed traffic, if any.

    Attributes
    ----------
    mode : str, default is Undefined, required
        Mode is the required authentication mode for the allowed traffic, if any.
    """


    mode: "disabled" | "required" | "test-always-fail"


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromCIDRSetItems0:
    """
    CIDRRule is a rule that specifies a CIDR prefix to/from which outside communication  is allowed, along with an optional list of subnets within that CIDR prefix to/from which outside communication is not allowed.

    Attributes
    ----------
    cidr : str, default is Undefined, optional
        CIDR is a CIDR prefix / IP Block.
    cidrGroupRef : str, default is Undefined, optional
        CIDRGroupRef is a reference to a CiliumCIDRGroup object. A CiliumCIDRGroup contains a list of CIDRs that the endpoint, subject to the rule, can (Ingress/Egress) or cannot (IngressDeny/EgressDeny) receive connections from.
    except : [str], default is Undefined, optional
        ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr, using ExceptCIDRs together with CIDRGroupRef is not supported yet. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.
    """


    cidr?: str

    cidrGroupRef?: str

    except?: [str]


    check:
        len(cidrGroupRef) <= 253
        _regex_match(str(cidrGroupRef), r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$") if cidrGroupRef


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromEndpointsItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromEndpointsItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromEndpointsItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromEndpointsItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromGroupsItems0:
    """
    Groups structure to store all kinds of new integrations that needs a new derivative policy.

    Attributes
    ----------
    aws : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromGroupsItems0Aws, default is Undefined, optional
        aws
    """


    aws?: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromGroupsItems0Aws


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromGroupsItems0Aws:
    """
    AWSGroup is an structure that can be used to whitelisting information from AWS integration

    Attributes
    ----------
    labels : {str:str}, default is Undefined, optional
        labels
    region : str, default is Undefined, optional
        region
    securityGroupsIds : [str], default is Undefined, optional
        security groups ids
    securityGroupsNames : [str], default is Undefined, optional
        security groups names
    """


    labels?: {str:str}

    region?: str

    securityGroupsIds?: [str]

    securityGroupsNames?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromNodesItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromNodesItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromNodesItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromNodesItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromRequiresItems0:
    """
    EndpointSelector is a wrapper for k8s LabelSelector.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromRequiresItems0MatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromRequiresItems0MatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0FromRequiresItems0MatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0IcmpsItems0:
    """
    ICMPRule is a list of ICMP fields.

    Attributes
    ----------
    fields : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0IcmpsItems0FieldsItems0], default is Undefined, optional
        Fields is a list of ICMP fields.
    """


    fields?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0IcmpsItems0FieldsItems0]


    check:
        len(fields) <= 40


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0IcmpsItems0FieldsItems0:
    """
    ICMPField is a ICMP field.

    Attributes
    ----------
    family : str, default is "IPv4", optional
        Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.
    $type : int | str, default is Undefined, required
        Type is a ICMP-type. It should be an 8bit code (0-255), or it's CamelCase name (for example, "EchoReply"). Allowed ICMP types are: Ipv4: EchoReply | DestinationUnreachable | Redirect | Echo | EchoRequest | RouterAdvertisement | RouterSelection | TimeExceeded | ParameterProblem | Timestamp | TimestampReply | Photuris | ExtendedEcho Request | ExtendedEcho Reply Ipv6: DestinationUnreachable | PacketTooBig | TimeExceeded | ParameterProblem | EchoRequest | EchoReply | MulticastListenerQuery| MulticastListenerReport | MulticastListenerDone | RouterSolicitation | RouterAdvertisement | NeighborSolicitation | NeighborAdvertisement | RedirectMessage | RouterRenumbering | ICMPNodeInformationQuery | ICMPNodeInformationResponse | InverseNeighborDiscoverySolicitation | InverseNeighborDiscoveryAdvertisement | HomeAgentAddressDiscoveryRequest | HomeAgentAddressDiscoveryReply | MobilePrefixSolicitation | MobilePrefixAdvertisement | DuplicateAddressRequestCodeSuffix | DuplicateAddressConfirmationCodeSuffix | ExtendedEchoRequest | ExtendedEchoReply
    """


    family?: "IPv4" | "IPv6" = "IPv4"

    $type: int | str


    check:
        _regex_match(str($type), r"^([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]|EchoReply|DestinationUnreachable|Redirect|Echo|RouterAdvertisement|RouterSelection|TimeExceeded|ParameterProblem|Timestamp|TimestampReply|Photuris|ExtendedEchoRequest|ExtendedEcho Reply|PacketTooBig|ParameterProblem|EchoRequest|MulticastListenerQuery|MulticastListenerReport|MulticastListenerDone|RouterSolicitation|RouterAdvertisement|NeighborSolicitation|NeighborAdvertisement|RedirectMessage|RouterRenumbering|ICMPNodeInformationQuery|ICMPNodeInformationResponse|InverseNeighborDiscoverySolicitation|InverseNeighborDiscoveryAdvertisement|HomeAgentAddressDiscoveryRequest|HomeAgentAddressDiscoveryReply|MobilePrefixSolicitation|MobilePrefixAdvertisement|DuplicateAddressRequestCodeSuffix|DuplicateAddressConfirmationCodeSuffix)$")


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0:
    """
    PortRule is a list of ports/protocol combinations with optional Layer 7 rules which must be met.

    Attributes
    ----------
    listener : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0Listener, default is Undefined, optional
        listener
    originatingTLS : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0OriginatingTLS, default is Undefined, optional
        originating TLS
    ports : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0PortsItems0], default is Undefined, optional
        Ports is a list of L4 port/protocol
    rules : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0Rules, default is Undefined, optional
        rules
    serverNames : [str], default is Undefined, optional
        ServerNames is a list of allowed TLS SNI values. If not empty, then TLS must be present and one of the provided SNIs must be indicated in the TLS handshake.
    terminatingTLS : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0TerminatingTLS, default is Undefined, optional
        terminating TLS
    """


    listener?: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0Listener

    originatingTLS?: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0OriginatingTLS

    ports?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0PortsItems0]

    rules?: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0Rules

    serverNames?: [str]

    terminatingTLS?: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0TerminatingTLS


    check:
        len(ports) <= 40


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0Listener:
    """
    listener specifies the name of a custom Envoy listener to which this traffic should be redirected to.

    Attributes
    ----------
    envoyConfig : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0ListenerEnvoyConfig, default is Undefined, required
        envoy config
    name : str, default is Undefined, required
        Name is the name of the listener.
    priority : int, default is Undefined, optional
        Priority for this Listener that is used when multiple rules would apply different listeners to a policy map entry. Behavior of this is implementation dependent.
    """


    envoyConfig: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0ListenerEnvoyConfig

    name: str

    priority?: int


    check:
        len(name) >= 1
        priority <= 100
        priority >= 1


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0ListenerEnvoyConfig:
    """
    EnvoyConfig is a reference to the CEC or CCEC resource in which the listener is defined.

    Attributes
    ----------
    kind : str, default is Undefined, optional
        Kind is the resource type being referred to. Defaults to CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig for CiliumNetworkPolicy and CiliumClusterwideNetworkPolicy, respectively. The only case this is currently explicitly needed is when referring to a CiliumClusterwideEnvoyConfig from CiliumNetworkPolicy, as using a namespaced listener from a cluster scoped policy is not allowed.
    name : str, default is Undefined, required
        Name is the resource name of the CiliumEnvoyConfig or CiliumClusterwideEnvoyConfig where the listener is defined in.
    """


    kind?: "CiliumEnvoyConfig" | "CiliumClusterwideEnvoyConfig"

    name: str


    check:
        len(name) >= 1


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0OriginatingTLS:
    """
    OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.

    Attributes
    ----------
    certificate : str, default is Undefined, optional
        Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.
    privateKey : str, default is Undefined, optional
        PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.
    secret : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0OriginatingTLSSecret, default is Undefined, required
        secret
    trustedCA : str, default is Undefined, optional
        TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.
    """


    certificate?: str

    privateKey?: str

    secret: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0OriginatingTLSSecret

    trustedCA?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0OriginatingTLSSecret:
    """
    Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the secret.
    namespace : str, default is Undefined, optional
        Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
    """


    name: str

    namespace?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0PortsItems0:
    """
    PortProtocol specifies an L4 port with an optional transport protocol

    Attributes
    ----------
    endPort : int, default is Undefined, optional
        EndPort can only be an L4 port number.
    port : str, default is Undefined, required
        Port can be an L4 port number, or a name in the form of "http" or "http-8080".
    $protocol : str, default is Undefined, optional
        Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: "TCP", "UDP", "SCTP", "ANY" 
         Matching on ICMP is not supported. 
         Named port specified for a container may narrow this down, but may not contradict this.
    """


    endPort?: int

    port: str

    $protocol?: "TCP" | "UDP" | "SCTP" | "ANY"


    check:
        endPort <= 65535
        endPort >= 0
        _regex_match(str(port), r"^(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[0-9]{1,4})|([a-zA-Z0-9]-?)*[a-zA-Z](-?[a-zA-Z0-9])*$")


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0Rules:
    """
    Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.

    Attributes
    ----------
    dns : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0RulesDNSItems0], default is Undefined, optional
        DNS-specific rules.
    http : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0RulesHTTPItems0], default is Undefined, optional
        HTTP specific rules.
    kafka : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0RulesKafkaItems0], default is Undefined, optional
        Kafka-specific rules.
    l7 : [{str:str}], default is Undefined, optional
        Key-value pair rules.
    l7proto : str, default is Undefined, optional
        Name of the L7 protocol for which the Key-value pair rules apply.
    """


    dns?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0RulesDNSItems0]

    http?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0RulesHTTPItems0]

    kafka?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0RulesKafkaItems0]

    l7?: [{str:str}]

    l7proto?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0RulesDNSItems0:
    """
    PortRuleDNS is a list of allowed DNS lookups.

    Attributes
    ----------
    matchName : str, default is Undefined, optional
        MatchName matches literal DNS names. A trailing "." is automatically added when missing.
    matchPattern : str, default is Undefined, optional
        MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - "*" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a "*" as the leftmost character, without a following "." matches all subdomains as well as the name to the right. A trailing "." is automatically added when missing. 
         Examples: `*.cilium.io` matches subomains of cilium at that level www.cilium.io and blog.cilium.io match, cilium.io and google.com do not `*cilium.io` matches cilium.io and all subdomains ends with "cilium.io" except those containing "." separator, subcilium.io and sub-cilium.io match, www.cilium.io and blog.cilium.io does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with "sub" sub.cilium.io and subdomain.cilium.io match, www.cilium.io, blog.cilium.io, cilium.io and google.com do not
    """


    matchName?: str

    matchPattern?: str


    check:
        _regex_match(str(matchName), r"^([-a-zA-Z0-9_]+[.]?)+$") if matchName
        _regex_match(str(matchPattern), r"^([-a-zA-Z0-9_*]+[.]?)+$") if matchPattern


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0RulesHTTPItems0:
    """
    PortRuleHTTP is a list of HTTP protocol constraints. All fields are optional, if all fields are empty or missing, the rule does not have any effect. 
     All fields of this type are extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986.

    Attributes
    ----------
    headerMatches : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0], default is Undefined, optional
        HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.
    headers : [str], default is Undefined, optional
        Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.
    host : str, default is Undefined, optional
        Host is an extended POSIX regex matched against the host header of a request, e.g. "foo.com" 
         If omitted or empty, the value of the host header is ignored.
    method : str, default is Undefined, optional
        Method is an extended POSIX regex matched against the method of a request, e.g. "GET", "POST", "PUT", "PATCH", "DELETE", ... 
         If omitted or empty, all methods are allowed.
    path : str, default is Undefined, optional
        Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. 
         If omitted or empty, all paths are all allowed.
    """


    headerMatches?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0]

    headers?: [str]

    host?: str

    method?: str

    path?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0:
    """
    HeaderMatch extends the HeaderValue for matching requirement of a named header field against an immediate string, a secret value, or a regex.  If none of the optional fields is present, then the header value is not matched, only presence of the header is enough.

    Attributes
    ----------
    mismatch : str, default is Undefined, optional
        Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.
    name : str, default is Undefined, required
        Name identifies the header.
    secret : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0Secret, default is Undefined, optional
        secret
    value : str, default is Undefined, optional
        Value matches the exact value of the header. Can be specified either alone or together with "Secret"; will be used as the header value if the secret can not be found in the latter case.
    """


    mismatch?: "LOG" | "ADD" | "DELETE" | "REPLACE"

    name: str

    secret?: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0Secret

    value?: str


    check:
        len(name) >= 1


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0RulesHTTPItems0HeaderMatchesItems0Secret:
    """
    Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no "Value" specified, the match will fail.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the secret.
    namespace : str, default is Undefined, optional
        Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
    """


    name: str

    namespace?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0RulesKafkaItems0:
    """
    PortRule is a list of Kafka protocol constraints. All fields are optional, if all fields are empty or missing, the rule will match all Kafka messages.

    Attributes
    ----------
    apiKey : str, default is Undefined, optional
        APIKey is a case-insensitive string matched against the key of a request, e.g. "produce", "fetch", "createtopic", "deletetopic", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys 
         If omitted or empty, and if Role is not specified, then all keys are allowed.
    apiVersion : str, default is Undefined, optional
        APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. 
         If omitted or empty, all versions are allowed.
    clientID : str, default is Undefined, optional
        ClientID is the client identifier as provided in the request. 
         From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. 
         If omitted or empty, all client identifiers are allowed.
    role : str, default is Undefined, optional
        Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as "produce" or "consume". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. 
         The following values are supported: - "produce": Allow producing to the topics specified in the rule - "consume": Allow consuming from the topics specified in the rule 
         This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. 
         If omitted or empty, and if APIKey is not specified, then all keys are allowed.
    topic : str, default is Undefined, optional
        Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. 
         This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. 
         Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. 
         If omitted or empty, all topics are allowed.
    """


    apiKey?: str

    apiVersion?: str

    clientID?: str

    role?: "produce" | "consume"

    topic?: str


    check:
        len(topic) <= 255


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0TerminatingTLS:
    """
    TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.

    Attributes
    ----------
    certificate : str, default is Undefined, optional
        Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.
    privateKey : str, default is Undefined, optional
        PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.
    secret : CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0TerminatingTLSSecret, default is Undefined, required
        secret
    trustedCA : str, default is Undefined, optional
        TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.
    """


    certificate?: str

    privateKey?: str

    secret: CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0TerminatingTLSSecret

    trustedCA?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0IngressItems0ToPortsItems0TerminatingTLSSecret:
    """
    Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items: - 'ca.crt'  - Which represents the trusted CA to verify remote source. - 'tls.crt' - Which represents the public key certificate. - 'tls.key' - Which represents the private key matching the public key certificate.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name is the name of the secret.
    namespace : str, default is Undefined, optional
        Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
    """


    name: str

    namespace?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0LabelsItems0:
    """
    Label is the Cilium's representation of a container label.

    Attributes
    ----------
    key : str, default is Undefined, required
        key
    source : str, default is Undefined, optional
        Source can be one of the above values (e.g.: LabelSourceContainer).
    value : str, default is Undefined, optional
        value
    """


    key: str

    source?: str

    value?: str


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0NodeSelector:
    """
    NodeSelector selects all nodes which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive. Can only be used in CiliumClusterwideNetworkPolicies.

    Attributes
    ----------
    matchExpressions : [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0NodeSelectorMatchExpressionsItems0], default is Undefined, optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : {str:str}, default is Undefined, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """


    matchExpressions?: [CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0NodeSelectorMatchExpressionsItems0]

    matchLabels?: {str:str}


    check:
        all _, matchLabels in matchLabels {len(matchLabels) <= _regex_match(str(matchLabels), r"^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$") if matchLabels } if matchLabels


schema CiliumIoV2CiliumClusterwideNetworkPolicySpecsItems0NodeSelectorMatchExpressionsItems0:
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, default is Undefined, required
        key is the label key that the selector applies to.
    operator : str, default is Undefined, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], default is Undefined, optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """


    key: str

    operator: "In" | "NotIn" | "Exists" | "DoesNotExist"

    values?: [str]


schema CiliumIoV2CiliumClusterwideNetworkPolicyStatus:
    """
    Status is the status of the Cilium policy rule. 
     The reason this field exists in this structure is due a bug in the k8s code-generator that doesn't create a `UpdateStatus` method because the field does not exist in the structure.

    Attributes
    ----------
    conditions : [CiliumIoV2CiliumClusterwideNetworkPolicyStatusConditionsItems0], default is Undefined, optional
        conditions
    derivativePolicies : {str:CiliumIoV2CiliumClusterwideNetworkPolicyStatusDerivativePoliciesAnon}, default is Undefined, optional
        DerivativePolicies is the status of all policies derived from the Cilium policy
    """


    conditions?: [CiliumIoV2CiliumClusterwideNetworkPolicyStatusConditionsItems0]

    derivativePolicies?: {str:CiliumIoV2CiliumClusterwideNetworkPolicyStatusDerivativePoliciesAnon}


schema CiliumIoV2CiliumClusterwideNetworkPolicyStatusConditionsItems0:
    """
    cilium io v2 cilium clusterwide network policy status conditions items0

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, optional
        The last time the condition transitioned from one status to another.
    message : str, default is Undefined, optional
        A human readable message indicating details about the transition.
    reason : str, default is Undefined, optional
        The reason for the condition's last transition.
    status : str, default is Undefined, required
        The status of the condition, one of True, False, or Unknown
    $type : str, default is Undefined, required
        The type of the policy condition
    """


    lastTransitionTime?: str

    message?: str

    reason?: str

    status: str

    $type: str


schema CiliumIoV2CiliumClusterwideNetworkPolicyStatusDerivativePoliciesAnon:
    """
    CiliumNetworkPolicyNodeStatus is the status of a Cilium policy rule for a specific node.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations corresponds to the Annotations in the ObjectMeta of the CNP that have been realized on the node for CNP. That is, if a CNP has been imported and has been assigned annotation X=Y by the user, Annotations in CiliumNetworkPolicyNodeStatus will be X=Y once the CNP that was imported corresponding to Annotation X=Y has been realized on the node.
    enforcing : bool, default is Undefined, optional
        Enforcing is set to true once all endpoints present at the time the policy has been imported are enforcing this policy.
    error : str, default is Undefined, optional
        Error describes any error that occurred when parsing or importing the policy, or realizing the policy for the endpoints to which it applies on the node.
    lastUpdated : str, default is Undefined, optional
        LastUpdated contains the last time this status was updated
    localPolicyRevision : int, default is Undefined, optional
        Revision is the policy revision of the repository which first implemented this policy.
    ok : bool, default is Undefined, optional
        OK is true when the policy has been parsed and imported successfully into the in-memory policy repository on the node.
    """


    annotations?: {str:str}

    enforcing?: bool

    error?: str

    lastUpdated?: str

    localPolicyRevision?: int

    ok?: bool


