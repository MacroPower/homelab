# https://artifacthub.io/packages/helm/argo/argo-cd

global:
  logging:
    format: json

configs:
  ## General Argo CD configuration
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
  ##
  ## Configured for improved Crossplane support
  ## Ref: https://docs.crossplane.io/knowledge-base/integrations/argo-cd-crossplane/
  ##
  cm:
    application.resourceTrackingMethod: annotation
    kustomize.buildOptions: --enable-helm --load-restrictor LoadRestrictionsNone

    ## Use existing system-level ignoreDifferences customizations to ignore
    ## resource updates.
    resource.compareoptions: |
      ignoreDifferencesOnResourceUpdates: true

    ## Dex configuration for Authentik
    ## Ref: https://docs.goauthentik.io/integrations/services/argocd/#argocd-configuration
    ## Ref: https://dexidp.io/docs/connectors/oauth/
    ##
    url: https://argocd.home.macro.network
    dex.config: |
      connectors:
        - name: authentik
          id: authentik
          type: oidc
          config:
            issuer: https://authentik.home.macro.network/application/o/argocd/
            clientID: $dex.authentik.clientID
            clientSecret: $dex.authentik.clientSecret
            insecureEnableGroups: true
            scopes:
              - openid
              - profile
              - email

  cmp:
    create: true
    plugins:
      kcl:
        version: v1.0
        generate:
          command: [sh]
          args:
            - -c
            - >-
              kcl run

    resource.exclusions: |
      - apiGroups:
          - cilium.io
        kinds:
          - CiliumEndpoint
          - CiliumIdentity
          - PodInfo
        clusters:
          - "*"
      - apiGroups:
          - "*"
        kinds:
          - ProviderConfigUsage
        clusters:
          - "*"
      - apiGroups:
          - kyverno.io
        kinds:
          - AdmissionReport
          - BackgroundScanReport
          - ClusterAdmissionReport
          - ClusterBackgroundScanReport
        clusters:
          - '*'
      - apiGroups:
          - aquasecurity.github.io
        kinds:
          - ConfigAuditReport
          - ExposedSecretReport
          - RbacAssessmentReport
          - SbomReport
          - VulnerabilityReport
        clusters:
          - "*"
      - apiGroups:
          - wgpolicyk8s.io
        kinds:
          - PolicyReport
        clusters:
          - "*"
    resource.customizations: |
      "*.upbound.io/*":
        health.lua: |
          health_status = {
            status = "Progressing",
            message = "Provisioning ..."
          }

          local function contains (table, val)
            for i, v in ipairs(table) do
              if v == val then
                return true
              end
            end
            return false
          end

          local has_no_status = {
            "ProviderConfig",
            "ProviderConfigUsage"
          }

          if obj.status == nil and contains(has_no_status, obj.kind) then
            health_status.status = "Healthy"
            health_status.message = "Resource is up-to-date."
            return health_status
          end

          if obj.status == nil or obj.status.conditions == nil then
            if obj.kind == "ProviderConfig" and obj.status.users ~= nil then
              health_status.status = "Healthy"
              health_status.message = "Resource is in use."
              return health_status
            end
            return health_status
          end

          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "LastAsyncOperation" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if condition.type == "Synced" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if condition.type == "Ready" then
              if condition.status == "True" then
                health_status.status = "Healthy"
                health_status.message = "Resource is up-to-date."
                return health_status
              end
            end
          end

          return health_status

      "*.crossplane.io/*":
        health.lua: |
          health_status = {
            status = "Progressing",
            message = "Provisioning ..."
          }

          local function contains (table, val)
            for i, v in ipairs(table) do
              if v == val then
                return true
              end
            end
            return false
          end

          local has_no_status = {
            "Composition",
            "CompositionRevision",
            "DeploymentRuntimeConfig",
            "ControllerConfig",
            "ProviderConfig",
            "ProviderConfigUsage"
          }

          if obj.status == nil and contains(has_no_status, obj.kind) then
              health_status.status = "Healthy"
              health_status.message = "Resource is up-to-date."
            return health_status
          end

          if obj.status == nil or obj.status.conditions == nil then
            if obj.kind == "ProviderConfig" and obj.status.users ~= nil then
              health_status.status = "Healthy"
              health_status.message = "Resource is in use."
              return health_status
            end
            return health_status
          end

          if obj.status == nil or obj.status.conditions == nil then
            return health_status
          end

          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "LastAsyncOperation" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if condition.type == "Synced" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if contains({"Ready", "Healthy", "Offered", "Established"}, condition.type) then
              if condition.status == "True" then
                health_status.status = "Healthy"
                health_status.message = "Resource is up-to-date."
                return health_status
              end
            end
          end

          return health_status

      "templates.kluctl.io/*":
        health.lua: |
          health_status = {
            status = "Progressing",
            message = "Provisioning ..."
          }

          local function contains (table, val)
            for i, v in ipairs(table) do
              if v == val then
                return true
              end
            end
            return false
          end

          if obj.status == nil or obj.status.conditions == nil then
            return health_status
          end

          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "LastAsyncOperation" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if condition.type == "Synced" then
              if condition.status == "False" then
                health_status.status = "Degraded"
                health_status.message = condition.message
                return health_status
              end
            end

            if contains({"Ready", "Healthy", "Offered", "Established"}, condition.type) then
              if condition.status == "True" then
                health_status.status = "Healthy"
                health_status.message = "Resource is up-to-date."
                return health_status
              end
            end
          end

          return health_status

    resource.customizations.health.argoproj.io_Application: |
      hs = {}
      hs.status = "Progressing"
      hs.message = ""
      if obj.status ~= nil then
        if obj.status.health ~= nil then
          hs.status = obj.status.health.status
          if obj.status.health.message ~= nil then
            hs.message = obj.status.health.message
          end
        end
      end
      return hs

  ## Argo CD configuration parameters
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cmd-params-cm.yaml
  ##
  params:
    server.insecure: "true"
    application.namespaces: "*"
    applicationsetcontroller.enable.new.git.file.globbing: true

  rbac:
    policy.csv: |
      g, ArgoCD Admins, role:admin
      g, ArgoCD Editors, role:readonly

  repositories:
    spegel:
      url: ghcr.io/spegel-org/helm-charts
      name: ghcr-registry
      enableOCI: "true"
      type: "helm"
    bjw-s:
      url: ghcr.io/bjw-s/helm
      name: bjw-s-registry
      enableOCI: "true"
      type: "helm"

redis:
  enabled: false

externalRedis:
  host: "argocd-redis-dragonfly.argocd.svc"
  port: 6379
  username: default
  existingSecret: argocd-credentials

controller:
  replicas: 3
  resources:
    requests:
      cpu: 500m
      memory: 2Gi

server:
  replicas: 3
  resources:
    requests:
      cpu: 200m
      memory: 250Mi

repoServer:
  replicas: 2
  nodeSelector:
    kubernetes.io/arch: amd64
  resources:
    requests:
      cpu: 500m
      memory: 500Mi
  extraContainers:
    - name: kcl-plugin
      command: [/var/run/argocd/argocd-cmp-server]
      image: kcllang/kcl:v0.9.6
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
        # Remove this volumeMount if you've chosen to bake the config file into the sidecar image.
        - mountPath: /home/argocd/cmp-server/config/plugin.yaml
          subPath: kcl.yaml
          name: kcl-plugin-config
        - mountPath: /tmp
          name: cmp-tmp
  volumes:
    - name: kcl-plugin-config
      configMap:
        name: argocd-cmp-cm
    - name: cmp-tmp
      emptyDir: {}

applicationSet:
  replicaCount: 3
  resources: &StdResources
    requests:
      cpu: 50m
      memory: 100Mi

notifications:
  resources: *StdResources

dex:
  resources: *StdResources
  initImage:
    resources: *StdResources
