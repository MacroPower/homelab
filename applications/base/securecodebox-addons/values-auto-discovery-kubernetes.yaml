# https://www.securecodebox.io/docs/auto-discovery/overview
# https://artifacthub.io/packages/helm/securecodebox/auto-discovery-kubernetes

config:
  # config is using kubebuilder config framework, it may look like this is a crd but its not, see https://book.kubebuilder.io/component-config-tutorial/tutorial.html
  apiVersion: config.securecodebox.io/v1
  kind: AutoDiscoveryConfig

  cluster:
    name: docker-desktop
  resourceInclusion:
    mode: enabled-per-namespace

  serviceAutoDiscovery:
    enabled: true
    # -- interval in which every service is re-checked for updated pods, if service object is updated directly this the service will get reconciled immediately
    passiveReconcileInterval: 1m
    scanConfigs:
      # -- scanType used for the scans created by the serviceAutoDiscovery
      - scanType: zap-advanced-scan
        # -- unique name to distinguish scans
        name: "zap"
        # -- parameters used for the scans created by the serviceAutoDiscovery, all parameters support templating
        parameters:
          - "-t"
          - "{{ .Host.Type }}://{{ .Service.Name }}.{{ .Service.Namespace }}.svc:{{ .Host.Port }}"
        # -- interval in which scans are automatically repeated. If the target is updated (meaning a new image revision is deployed) the scan will repeated beforehand and the interval is reset.
        repeatInterval: "168h"
        # -- labels to be added to the scans started by the auto-discovery, all label values support templating
        labels: {}
        # -- annotations to be added to the scans started by the auto-discovery, all annotation values support templating
        annotations:
          defectdojo.securecodebox.io/product-name: "{{ .Cluster.Name }} | {{ .Namespace.Name }} | {{ .Target.Name }}"
          defectdojo.securecodebox.io/product-tags: "cluster/{{ .Cluster.Name }},namespace/{{ .Namespace.Name }}"
          defectdojo.securecodebox.io/engagement-name: "{{ .Target.Name }}"
          defectdojo.securecodebox.io/engagement-version: "{{if (index .Target.Labels `app.kubernetes.io/version`) }}{{ index .Target.Labels `app.kubernetes.io/version` }}{{end}}"
        # -- volumes to add to the scan job, see: https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#volumes
        # the fields: `name`, `secret.secretName`, `configMap.name` of each volume support templating
        volumes: []
        # -- volumeMounts to add to the scan job, see: https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#volumes-1
        # the fields: `name`, `mountPath`, `subPath`, `subPathExpr` of each volumeMount support templating
        volumeMounts: []
        # -- HookSelector allows to specify a LabelSelector with which the hooks are selected, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
        # Both matchLabels and matchExpressions are supported.
        # All values in the matchLabels map support templating.
        # MatchExpressions support templating in the `key` field and in every entry in the `values` list. If a value in the list renders to an empty string it is removed from the list.
        hookSelector: {}
