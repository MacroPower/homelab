authentik:
  log_level: info
  postgres:
    host: "{{ .Release.Name }}-postgresql"
  redis:
    host: "{{ .Release.Name }}-redis-master"

server:
  replicas: 2
  serviceMonitor: &serviceMonitor
    enabled: true
    interval: 30s
    scrapeTimeout: 3s
  env: &env
    - name: AUTHENTIK_SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: authentik-credentials
          key: AUTHENTIK_SECRET_KEY
    - name: AUTHENTIK_BOOTSTRAP_PASSWORD
      valueFrom:
        secretKeyRef:
          name: authentik-credentials
          key: AUTHENTIK_BOOTSTRAP_PASSWORD
    - name: AUTHENTIK_BOOTSTRAP_TOKEN
      valueFrom:
        secretKeyRef:
          name: authentik-credentials
          key: AUTHENTIK_BOOTSTRAP_TOKEN
    - name: AUTHENTIK_BOOTSTRAP_EMAIL
      valueFrom:
        secretKeyRef:
          name: authentik-credentials
          key: AUTHENTIK_BOOTSTRAP_EMAIL
    - name: AUTHENTIK_REDIS__PASSWORD
      valueFrom:
        secretKeyRef:
          name: authentik-credentials
          key: AUTHENTIK_REDIS_PASS
    - name: AUTHENTIK_POSTGRESQL__PASSWORD
      valueFrom:
        secretKeyRef:
          name: authentik-postgres-credentials
          key: postgresql-password
  resources:
    requests:
      cpu: 50m
      memory: 1Gi
    limits:
      memory: 1Gi

worker:
  replicas: 2
  serviceMonitor: *serviceMonitor
  env: *env
  resources:
    requests:
      cpu: 10m
      memory: 500Mi
    limits:
      memory: 500Mi

prometheus:
  rules:
    enabled: true

postgresql:
  enabled: true
  existingSecret: authentik-postgres-credentials
  persistence:
    enabled: true
    accessModes:
      - ReadWriteOnce

redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: true
    existingSecret: authentik-credentials
    existingSecretPasswordKey: AUTHENTIK_REDIS_PASS
  sentinel:
    enabled: false
  master:
    persistence:
      enabled: true
      accessModes:
        - ReadWriteOnce
