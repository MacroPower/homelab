---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ocis-authentik-ns-secrets
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: authentik-ns-secrets
subjects:
  - kind: ServiceAccount
    name: ocis-authentik-ns-secrets
    namespace: ocis

---
apiVersion: tf.upbound.io/v1beta1
kind: Workspace
metadata:
  name: authentik-ocis
spec:
  providerConfigRef:
    name: authentik
  writeConnectionSecretToRef:
    namespace: authentik
    name: authentik-ocis
  forProvider:
    source: Inline
    varFiles:
      - source: SecretKey
        format: HCL
        secretKeyRef:
          namespace: authentik
          name: authentik-cluster-credentials
          key: authentik.tfvars
    module: |
      variable "authentik_cluster_cookie_domain" {
        type = string
      }

      variable "authentik_cluster_external_host" {
        type = string
      }

      variable "authentik_cluster_external_domain" {
        type = string
      }

      locals {
        domain_name = "owncloud.${var.authentik_cluster_external_domain}"
      }

      data "authentik_flow" "default_authentication" {
        slug = "default-authentication-flow"
      }

      data "authentik_flow" "default_authorization" {
        slug = "default-provider-authorization-explicit-consent"
      }

      data "authentik_certificate_key_pair" "cert" {
        name = "Authentik Certificate"
      }

      data "authentik_scope_mapping" "oauth2" {
        managed_list = [
          "goauthentik.io/providers/oauth2/scope-email",
          "goauthentik.io/providers/oauth2/scope-openid",
          "goauthentik.io/providers/oauth2/scope-profile",
        ]
      }

      data "authentik_scope_mapping" "oauth2_offline" {
        managed_list = [
          "goauthentik.io/providers/oauth2/scope-offline_access",
        ]
      }

      data "authentik_user" "akadmin" {
        username = "akadmin"
      }

      # https://helgeklein.com/blog/owncloud-infinite-scale-with-openid-connect-authentication-for-home-networks/#sso-via-authentik-owncloud-openid-connect-authentication
      resource "authentik_provider_oauth2" "owncloud_web_auth_provider" {
        name          = "owncloud-web"
        client_type   = "public"
        client_id     = "ocis"
        redirect_uris = [
          "https://${local.domain_name}",
          "https://${local.domain_name}/oidc-callback.html",
          "https://${local.domain_name}/oidc-silent-redirect.html",
        ]
        property_mappings   = data.authentik_scope_mapping.oauth2.ids
        authentication_flow = data.authentik_flow.default_authentication.id
        authorization_flow  = data.authentik_flow.default_authorization.id
        signing_key         = data.authentik_certificate_key_pair.cert.id
      }

      resource "authentik_provider_oauth2" "owncloud_desktop_auth_provider" {
        name          = "owncloud-desktop"
        client_id     = "xdXOt13JKxym1B1QcEncf2XDkLAexMBFwiT9j6EfhhHFJhs2KM9jbjTmf8JBXE69"
        client_secret = "UBntmLjC2yYCeHwsyj73Uwo9TAaecAetRwMw0xYcvNL9yRdLSUi0hUAHfvCHFeFh"
        redirect_uris = [
          "http://127.0.0.1(:.*)?",
          "http://localhost(:.*)?",
        ]
        property_mappings   = concat(data.authentik_scope_mapping.oauth2_offline.ids, data.authentik_scope_mapping.oauth2.ids)
        authorization_flow  = data.authentik_flow.default_authorization.id
        authentication_flow = data.authentik_flow.default_authentication.id
        signing_key         = data.authentik_certificate_key_pair.cert.id
      }

      resource "authentik_application" "owncloud_web_application" {
        name              = local.domain_name
        slug              = "owncloud-web"
        protocol_provider = authentik_provider_oauth2.owncloud_web_auth_provider.id
      }

      resource "authentik_application" "owncloud_desktop_application" {
        name              = "ownCloud Desktop"
        slug              = "owncloud-desktop"
        meta_launch_url   = "blank://blank"
        protocol_provider = authentik_provider_oauth2.owncloud_desktop_auth_provider.id
      }

      resource "authentik_group" "owncloud_admin" {
        name   = "ocisAdmin"
        users  = [data.authentik_user.akadmin.id]
      }

      resource "authentik_group" "owncloud_space_admin" {
        name   = "ocisSpaceAdmin"
        parent = authentik_group.owncloud_admin.id
      }

      resource "authentik_group" "owncloud_user" {
        name   = "ocisUser"
        parent = authentik_group.owncloud_space_admin.id
      }

      resource "authentik_group" "owncloud_guest" {
        name   = "ocisGuest"
        parent = authentik_group.owncloud_user.id
      }

      locals {
        base_dn = join(",", [for part in split(".", local.domain_name) : "DC=${part}"])
      }

      resource "random_password" "ocis_service_account" {
        length  = 30
        lower   = true
        numeric = true
        upper   = true
        special = false
      }

      resource "authentik_user" "ocis_service_account" {
        username = "ocis"
        type     = "service_account"
        password = random_password.ocis_service_account.result
      }

      resource "authentik_group" "owncloud_ldap_search" {
        name   = "ocisLdapSearch"
        users  = [data.authentik_user.akadmin.id, authentik_user.ocis_service_account.id]
      }

      resource "authentik_provider_ldap" "owncloud" {
        name            = "owncloud-ldap"
        base_dn         = local.base_dn
        bind_flow       = data.authentik_flow.default_authentication.id
        tls_server_name = var.authentik_cluster_external_host
        search_group    = authentik_group.owncloud_ldap_search.id
        certificate     = data.authentik_certificate_key_pair.cert.id
      }

      resource "authentik_application" "owncloud_ldap" {
        name              = local.base_dn
        slug              = "owncloud-ldap"
        protocol_provider = authentik_provider_ldap.owncloud.id
      }

      resource "authentik_service_connection_kubernetes" "local_owncloud_ldap" {
        name  = "local-owncloud-ldap"
        local = true
      }

      resource "authentik_outpost" "owncloud_ldap" {
        name = "ownCloud LDAP Outpost"
        type = "ldap"
        protocol_providers = [
          authentik_provider_ldap.owncloud.id
        ]
        service_connection = authentik_service_connection_kubernetes.local_owncloud_ldap.id
        config = jsonencode({
          log_level                      = "info"
          docker_labels                  = null
          authentik_host                 = "https://authentik.home.macro.network"
          docker_network                 = null
          container_image                = null
          docker_map_ports               = true
          kubernetes_replicas            = 1
          kubernetes_namespace           = "authentik"
          authentik_host_browser         = ""
          object_naming_template         = "ak-outpost-%(name)s"
          authentik_host_insecure        = false
          kubernetes_json_patches        = null
          kubernetes_service_type        = "ClusterIP"
          kubernetes_image_pull_secrets  = []
          kubernetes_ingress_class_name  = null
          kubernetes_disabled_components = []
          kubernetes_ingress_annotations = {}
          kubernetes_ingress_secret_name = "authentik-outpost-tls"
        })
      }

      output "ocis_service_account_password" {
        value     = random_password.ocis_service_account.result
        sensitive = true
      }
