# https://artifacthub.io/packages/helm/harbor/harbor

externalURL: https://harbor.home.macro.network

expose:
  # Set how to expose the service. Set the type as "ingress", "clusterIP", "nodePort" or "loadBalancer"
  # and fill the information in the corresponding section
  type: ingress
  tls:
    enabled: true
    certSource: none # set by ingress controller
  ingress:
    hosts:
      core: harbor.home.macro.network
    className: traefik
    annotations:
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
      gethomepage.dev/enabled: "true"
      gethomepage.dev/external: "true"
      gethomepage.dev/name: "Harbor"
      gethomepage.dev/description: "Artifact registry with pull-through cache"
      gethomepage.dev/group: "Cluster Management"
      gethomepage.dev/icon: "harbor"
      gethomepage.dev/href: "https://harbor.home.macro.network"
      gethomepage.dev/siteMonitor: "http://harbor-portal.harbor.svc:80"
      gethomepage.dev/podSelector: ""

# The internal TLS used for harbor components secure communicating. In order to enable https
# in each component tls cert files need to provided in advance.
internalTLS:
  enabled: false

persistence:
  enabled: true
  # Setting it to "keep" to avoid removing PVCs during a helm delete
  # operation. Leaving it empty will delete PVCs after the chart deleted
  # (this does not apply for PVCs that are created for internal database
  # and redis components, i.e. they are never deleted automatically)
  resourcePolicy: "keep"
  persistentVolumeClaim:
    registry:
      storageClass: "-"
    jobservice:
      jobLog:
        storageClass: "-"
    database:
      storageClass: ceph-block
      accessMode: ReadWriteOnce
      size: 1Gi
    redis:
      storageClass: ceph-block
      accessMode: ReadWriteOnce
      size: 1Gi

  # https://distribution.github.io/distribution/storage-drivers/
  imageChartStorage:
    # Specify whether to disable `redirect` for images and chart storage
    # https://distribution.github.io/distribution/about/configuration/#redirect
    disableredirect: false
    type: s3
    s3:
      bucket: harbor
      regionendpoint: http://rook-ceph-rgw-ceph-objectstore.rook-ceph.svc
      # Secrets are defined in the registry extraEnvVars.
      secure: false

# debug, info, warning, error or fatal
logLevel: info

existingSecretAdminPassword: harbor-credentials
existingSecretAdminPasswordKey: adminPassword

existingSecretSecretKey: harbor-key

# Run the migration job via helm hook
enableMigrateHelmHook: false

portal:
  replicas: 2
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  extraEnvVars: []

core:
  replicas: 2
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  extraEnvVars: []
  ## User settings configuration json string
  configureUserSettings: {}
  existingSecret: harbor-core-credentials
  existingSecretKey: secret
  # Fill the name of a kubernetes secret if you want to use your own
  # TLS certificate and private key for token encryption/decryption.
  # The secret must contain keys named:
  # "tls.key" - the private key
  # "tls.crt" - the certificate
  secretName: ""
  # If not specifying a preexisting secret, a secret can be created from tokenKey and tokenCert and used instead.
  # If none of secretName, tokenKey, and tokenCert are specified, an ephemeral key and certificate will be autogenerated.
  # tokenKey and tokenCert must BOTH be set or BOTH unset.
  # The tokenKey value is formatted as a multiline string containing a PEM-encoded RSA key, indented one more than tokenKey on the following line.
  # The XSRF key. Will be generated automatically if it isn't specified
  xsrfKey: ""
  # If using existingSecret, the key is defined by core.existingXsrfSecretKey
  existingXsrfSecret: ""
  # If using existingSecret, the key
  existingXsrfSecretKey: CSRF_KEY

jobservice:
  replicas: 2
  maxJobWorkers: 10
  # The logger for jobs: "file", "database" or "stdout"
  jobLoggers: [stdout]
  # resources:
  #   requests:
  #     memory: 256Mi
  #     cpu: 100m
  extraEnvVars: []
  existingSecret: harbor-jobservice-credentials
  existingSecretKey: JOBSERVICE_SECRET

registry:
  replicas: 2
  registry:
    # resources:
    #  requests:
    #    memory: 256Mi
    #    cpu: 100m
    extraEnvVars:
      - name: REGISTRY_STORAGE_S3_ACCESSKEY
        valueFrom:
          secretKeyRef:
            name: harbor-bucket
            key: AWS_ACCESS_KEY_ID
      - name: REGISTRY_STORAGE_S3_SECRETKEY
        valueFrom:
          secretKeyRef:
            name: harbor-bucket
            key: AWS_SECRET_ACCESS_KEY
  controller:
    # resources:
    #  requests:
    #    memory: 256Mi
    #    cpu: 100m
    extraEnvVars: []
  existingSecret: harbor-registry-credentials
  existingSecretKey: REGISTRY_HTTP_SECRET
  # If true, the registry returns relative URLs in Location headers. The client is responsible for resolving the correct URL.
  relativeurls: false
  credentials:
    username: "harbor"
    existingSecret: harbor-registry-credentials
  upload_purging:
    enabled: true
    age: 168h
    interval: 24h
    dryrun: false

trivy:
  enabled: false

database:
  type: external
  external:
    host: postgres-shared-rw.postgres-shared.svc
    port: "5432"
    username: harbor
    coreDatabase: harbor
    password: "password"
    # The existingSecret key must be "password"
    existingSecret: harbor-database-credentials
    sslmode: require

redis:
  type: external
  external:
    addr: "harbor-redis-dragonfly.harbor.svc:6379"
    # # The existingSecret key must be "REDIS_PASSWORD"
    # existingSecret: harbor-redis-credentials

exporter:
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  cacheDuration: 23
  cacheCleanInterval: 14400

metrics:
  enabled: true
  serviceMonitor:
    enabled: false

trace:
  enabled: true
  provider: otel
  sample_rate: 1
  otel:
    endpoint: main-collector.opentelemetry.svc:4318
    url_path: /v1/traces
    compression: false
    insecure: true

# cache layer configurations
# if this feature enabled, harbor will cache the resource
# `project/project_metadata/repository/artifact/manifest` in the redis
# which help to improve the performance of high concurrent pulling manifest.
cache:
  # default is not enabled.
  enabled: false
  # default keep cache for one day.
  expireHours: 24
