operatorNamespace: &namespace rook-ceph

monitoring:
  enabled: true
  createPrometheusRules: true

toolbox:
  enabled: true

configOverride: |
  [global]
  bdev_enable_discard = true
  bdev_async_discard = true
  osd_class_update_on_start = false

cephClusterSpec:
  network:
    provider: host
    connections:
      compression:
        enabled: true
  crashCollector:
    disable: false
  dashboard:
    enabled: true
    urlPrefix: /
    ssl: false
    prometheusEndpoint: http://prometheus-operated.prometheus.svc:9090
  mgr:
    modules:
      - name: pg_autoscaler
        enabled: true
      - name: orchestrator
        enabled: true
      - name: rook
        enabled: true
  storage:
    useAllNodes: false
    useAllDevices: false
    config:
      osdsPerDevice: "1"
    nodes:
      - name: knode13
        devices:
          - name: "/dev/nvme0n1"
      - name: knode14
        devices:
          - name: "/dev/nvme0n1"
      - name: knode15
        devices:
          - name: "/dev/nvme0n1"

cephBlockPools:
  - name: ceph-blockpool
    spec:
      failureDomain: zone
      replicated:
        size: 2
    storageClass:
      enabled: true
      name: ceph-block
      isDefault: true
      reclaimPolicy: Delete
      allowVolumeExpansion: true
      # See https://github.com/rook/rook/blob/master/Documentation/ceph-block.md#provision-storage for available configuration
      parameters: &blockParameters
        # (optional) mapOptions is a comma-separated list of map options.
        # For krbd options refer
        # https://docs.ceph.com/docs/master/man/8/rbd/#kernel-rbd-krbd-options
        # For nbd options refer
        # https://docs.ceph.com/docs/master/man/8/rbd-nbd/#options
        # mapOptions: lock_on_read,queue_depth=1024

        # (optional) unmapOptions is a comma-separated list of unmap options.
        # For krbd options refer
        # https://docs.ceph.com/docs/master/man/8/rbd/#kernel-rbd-krbd-options
        # For nbd options refer
        # https://docs.ceph.com/docs/master/man/8/rbd-nbd/#options
        # unmapOptions: force

        # RBD image format. Defaults to "2".
        imageFormat: "2"

        # RBD image features, equivalent to OR'd bitfield value: 63
        # Available for imageFormat: "2". Older releases of CSI RBD
        # support only the `layering` feature. The Linux kernel (KRBD) supports the
        # full feature complement as of 5.4
        imageFeatures: layering,fast-diff,object-map,deep-flatten,exclusive-lock
        # These secrets contain Ceph admin credentials.
        csi.storage.k8s.io/provisioner-secret-name: rook-csi-rbd-provisioner
        csi.storage.k8s.io/provisioner-secret-namespace: *namespace
        csi.storage.k8s.io/controller-expand-secret-name: rook-csi-rbd-provisioner
        csi.storage.k8s.io/controller-expand-secret-namespace: *namespace
        csi.storage.k8s.io/node-stage-secret-name: rook-csi-rbd-node
        csi.storage.k8s.io/node-stage-secret-namespace: *namespace
        # Specify the filesystem type of the volume. If not specified, csi-provisioner
        # will set default as `ext4`. Note that `xfs` is not recommended due to potential deadlock
        # in hyperconverged settings where the volume is mounted on the same node as the osds.
        csi.storage.k8s.io/fstype: ext4

cephFileSystems:
  - name: ceph-filesystem
    spec:
      metadataPool:
        failureDomain: zone
        replicated:
          size: 2
      dataPools:
        - failureDomain: zone
          replicated:
            size: 2
          name: data0
      metadataServer:
        activeCount: 1
        activeStandby: true
        resources:
          requests:
            cpu: 100m
            memory: 4Gi
          limits:
            cpu: 2000m
            memory: 4Gi
    storageClass:
      enabled: true
      isDefault: false
      name: ceph-filesystem
      pool: data0
      reclaimPolicy: Delete
      allowVolumeExpansion: true
      # See https://github.com/rook/rook/blob/master/Documentation/ceph-filesystem.md#provision-storage for available configuration
      parameters:
        # The secrets contain Ceph admin credentials.
        csi.storage.k8s.io/provisioner-secret-name: rook-csi-cephfs-provisioner
        csi.storage.k8s.io/provisioner-secret-namespace: *namespace
        csi.storage.k8s.io/controller-expand-secret-name: rook-csi-cephfs-provisioner
        csi.storage.k8s.io/controller-expand-secret-namespace: *namespace
        csi.storage.k8s.io/node-stage-secret-name: rook-csi-cephfs-node
        csi.storage.k8s.io/node-stage-secret-namespace: *namespace
        # Specify the filesystem type of the volume. If not specified, csi-provisioner
        # will set default as `ext4`. Note that `xfs` is not recommended due to potential deadlock
        # in hyperconverged settings where the volume is mounted on the same node as the osds.
        csi.storage.k8s.io/fstype: ext4

cephObjectStores:
  - name: ceph-objectstore
    spec:
      metadataPool:
        failureDomain: zone
        replicated:
          size: 2
      dataPool:
        failureDomain: zone
        erasureCoded:
          dataChunks: 2
          codingChunks: 1
      preservePoolsOnDelete: true
      gateway:
        port: 80
        resources:
          requests:
            cpu: 100m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        instances: 2
    storageClass:
      enabled: true
      name: ceph-bucket
      reclaimPolicy: Delete
      parameters:
        region: ceph-objectstore
