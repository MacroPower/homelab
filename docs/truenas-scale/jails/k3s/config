startup=0
gpu_passthrough_intel=0
gpu_passthrough_nvidia=0
# Turning off seccomp filtering improves performance at the expense of security
seccomp=1

# Use bridge networking to provide an isolated network namespace,
# so kubernetes can manage firewall rules
# Alternatively use --network-macvlan=eno1 instead of --network-bridge
# Ensure to change eno1/br1 to the interface name you want to use
# You may want to add additional options here, e.g. bind mounts
# For k3s we allow the use of keyrings and cgroups,
# You should add capability perf_event_open for tools like intel_gpu_top.
# A bind mount is used to give k3s access to circular message buffer (/dev/kmsg)
# Get syscall-filter groups with `systemd-analyze syscall-filter`.
systemd_nspawn_user_args=--network-macvlan=bond0
    --resolv-conf=bind-host
    --system-call-filter='@known'
    --capability=all
    --bind=/dev/kmsg
    --bind=/sys/fs/bpf
    --bind=/mnt/main/system
    # You can mount additional paths/devices like this:
    # --bind=/dev/ttyUSB0

# Script to run on the HOST before starting the jail
# Load kernel module and config kernel settings required for k8s/containerd
pre_start_hook=#!/usr/bin/bash
    set -euo pipefail
    echo 'PRE_START_HOOK'
    # Set kernel parameters
    # Enable IP forwarding
    echo 1 > /proc/sys/net/ipv4/ip_forward
    # # Ensure that bridge traffic is processed by iptables (if using br nw)
    # echo 1 > /proc/sys/net/bridge/bridge-nf-call-iptables
    # echo 1 > /proc/sys/net/bridge/bridge-nf-call-ip6tables
    # Set memory overcommit - needed for k3s kubelet
    echo 1 > /proc/sys/vm/overcommit_memory
    # Optional, increase inotify instances and watches. May be needed when
    # running many apps
    echo 1280 > /proc/sys/fs/inotify/max_user_instances
    echo 655360 > /proc/sys/fs/inotify/max_user_watches
    # # Increase max tracked connections in conntrack
    # echo 196608 > /proc/sys/net/netfilter/nf_conntrack_max
    # # required for bridging and filtering network traffic
    # modprobe br_netfilter
    # used for container storage
    modprobe overlay
    # enable nat and packet filter modules
    modprobe iptable_nat
    modprobe iptable_mangle
    modprobe iptable_raw
    modprobe iptable_filter
    # ipv6
    modprobe ip6_tables
    modprobe ip6table_mangle
    modprobe ip6table_raw
    modprobe ip6table_filter
    # Requirements for L7 and FQDN Policies
    modprobe xt_socket

# Only used while creating the jail
distro=debian
release=bookworm

# Install k3s, dependencies, helm inside jail
# https://docs.k3s.io/quick-start
initial_setup=#!/usr/bin/bash
    set -euo pipefail

    # Configure worker LAN interface with static IP
    sh -c 'cat <<EOF > /etc/systemd/network/mv-dhcp.network
    [Match]
    Virtualization=container
    Name=mv-*

    [Network]
    DHCP=no
    Address=10.10.5.1/16
    Address=2603:6010:5300:ad0a::5001/64
    DNS=10.10.0.1
    DNS=2603:6010:5300:ad0a::
    Domains=home.macro.network

    [Route]
    Gateway=10.10.0.1
    Destination=0.0.0.0/0
    GatewayOnLink=yes

    [Route]
    Gateway=2603:6010:5300:ad0a::
    Destination=::/0
    GatewayOnLink=yes
    EOF'
    systemctl stop systemd-networkd.service
    ip addr flush dev mv-bond0
    systemctl start systemd-networkd.service

    # Install dependencies
    apt-get update && apt-get install curl jq git bpftool -y

    # Configure k3s
    mkdir -p /etc/k3s
    sh -c 'cat <<EOF > /etc/k3s/config.yaml
    cluster-init: true
    node-name: "nas01"
    node-ip: "10.10.5.1,2603:6010:5300:ad0a::5001"
    cluster-domain: "nas01.home.macro.network"
    service-cidr: "10.132.0.0/16,2603:6010:5300:ad84::/108"
    cluster-cidr: "10.133.0.0/16,2603:6010:5300:ad85::/64"
    cluster-dns: "10.132.0.10,2603:6010:5300:ad84::a"
    tls-san:
      - "kube.nas01.home.macro.network"
      - "127.0.0.1"
    flannel-backend: none
    disable-network-policy: true
    disable-kube-proxy: true
    disable-helm-controller: true
    disable:
      - traefik
      - metrics-server
      - servicelb
      - local-storage
    kubelet-arg:
      - "node-ip=0.0.0.0" # To proritize IPv4 traffic
      - "feature-gates=InPlacePodVerticalScaling=true,MemoryQoS=true"
    kube-controller-manager-arg:
      - "bind-address=0.0.0.0"
      - "node-cidr-mask-size-ipv4=20"
      - "node-cidr-mask-size-ipv6=80"
      - "allocate-node-cidrs=true"
      - "feature-gates=InPlacePodVerticalScaling=true,MemoryQoS=true"
      - "tls-cipher-suites=TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_GCM_SHA384"
    kube-scheduler-arg:
      - "bind-address=0.0.0.0"
      - "feature-gates=InPlacePodVerticalScaling=true,MemoryQoS=true"
      - "tls-cipher-suites=TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_GCM_SHA384"
    kube-apiserver-arg:
      - "feature-gates=InPlacePodVerticalScaling=true,MemoryQoS=true"
      - "tls-cipher-suites=TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_GCM_SHA384"
    EOF'

    # Setup k3s
    curl -sfL https://get.k3s.io | \
    INSTALL_K3S_CHANNEL='v1.30' \
    INSTALL_K3S_EXEC='server --config=/etc/k3s/config.yaml' \
    sh -s -

    mkdir -p ~/.kube
    cp /etc/rancher/k3s/k3s.yaml ~/.kube/config

    kubectl version

    TS=$(date --iso-8601=s)
    cat /etc/rancher/k3s/k3s.yaml > /mnt/main/system/k3s/config-$TS.yaml
    chown -R 3000:3000 /mnt/main/system/k3s/config-$TS.yaml
    chmod -R 700 /mnt/main/system/k3s/config-$TS.yaml

# You generally will not need to change the options below
systemd_run_default_args=--property=KillMode=mixed
    --property=Type=notify
    --property=RestartForceExitStatus=133
    --property=SuccessExitStatus=133
    --property=Delegate=yes
    --property=TasksMax=infinity
    --collect
    --setenv=SYSTEMD_NSPAWN_LOCK=0

systemd_nspawn_default_args=--keep-unit
    --quiet
    --boot
    --bind-ro=/sys/module
    --inaccessible=/sys/module/apparmor
