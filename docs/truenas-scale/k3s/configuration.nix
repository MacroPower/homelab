{ modulesPath, config, lib, pkgs, ... }:

let
  # Host configuration
  hostName = "knas01";
  domain = "cin.macro.network";
  fqdn = "${hostName}.${domain}";

  # Network configuration
  interface = "eth0";
  ipv4Address = "10.10.12.1";
  ipv4Prefix = 16;
  ipv6Address = "fc42:0:0:a::1201";
  ipv6Prefix = 64;

  # Gateway configuration
  ipv4Gateway = "10.10.0.1";
  ipv6Gateway = "fc42:0:0:a::";

  # DNS configuration
  dnsServers = [ ipv4Gateway ipv6Gateway ];

  # K3s network configuration
  serviceIpv4Cidr = "10.132.0.0/16";
  serviceIpv6Cidr = "fc42:0:0:84::/108";
  clusterIpv4Cidr = "10.133.0.0/16";
  clusterIpv6Cidr = "fc42:0:0:85::/64";
  clusterIpv4Dns = "10.132.0.10";
  clusterIpv6Dns = "fc42:0:0:84::a";

  # K3s configuration
  k3sVersion = "1.31";
  k3sDataPath = "/mnt/main/containers/k3s/data";
  k3sConfigPath = "/mnt/main/containers/k3s/config";
  k3sConfigGroup = 3000;

  # Kube configuration
  tlsCipherSuites = "TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256";
  featureGates = "KubeletInUserNamespace=true,InPlacePodVerticalScaling=true,MemoryQoS=true";

in {
  imports = [
    # Include the default incus configuration.
    "${modulesPath}/virtualisation/lxc-container.nix"
    # Include the container-specific autogenerated configuration.
    ./incus.nix
  ];

  # Kernel parameters required for K3s
  boot = {
    kernel.sysctl = {
      "net.ipv4.ip_forward" = 1;
      "vm.overcommit_memory" = 1;
      "fs.inotify.max_user_instances" = 1280;
      "fs.inotify.max_user_watches" = 655360;
    };

    # Load required kernel modules
    kernelModules = [
      "overlay"
      "iptable_nat"
      "iptable_mangle"
      "iptable_raw"
      "iptable_filter"
      "ip6_tables"
      "ip6table_mangle"
      "ip6table_raw"
      "ip6table_filter"
      "xt_socket"
    ];
  };

  # Network configuration
  networking = {
    hostName = hostName;

    dhcpcd.enable = false;
    useDHCP = false;
    useHostResolvConf = false;

    # Configure the network interface with static IPs
    interfaces.${interface} = {
      ipv4.addresses = [{
        address = ipv4Address;
        prefixLength = ipv4Prefix;
      }];
      ipv6.addresses = [{
        address = ipv6Address;
        prefixLength = ipv6Prefix;
      }];
    };

    # DNS configuration
    nameservers = dnsServers;
    search = [ domain ];

    # Default gateway configuration
    defaultGateway = {
      address = ipv4Gateway;
      interface = interface;
    };
    defaultGateway6 = {
      address = ipv6Gateway;
      interface = interface;
    };

    firewall = {
      enable = true;
      checkReversePath = false;
      allowedTCPPorts = [
        80
        443
        6443
      ];
      allowedUDPPorts = [];
    };
  };

  # K3s configuration
  services.k3s = {
    enable = true;
    role = "server";

    # https://docs.k3s.io/cli/server
    extraFlags = toString [
      "--cluster-init"
      "--node-name=${hostName}"
      "--node-ip=${ipv4Address},${ipv6Address}"
      "--service-cidr=${serviceIpv4Cidr},${serviceIpv6Cidr}"
      "--cluster-cidr=${clusterIpv4Cidr},${clusterIpv6Cidr}"
      "--cluster-dns=${clusterIpv4Dns},${clusterIpv6Dns}"
      "--tls-san=${fqdn}"
      "--tls-san=127.0.0.1"
      "--flannel-backend=none"
      "--disable-network-policy"
      "--disable-kube-proxy"
      "--disable-helm-controller"
      "--disable=traefik,metrics-server,servicelb,local-storage"
      "--kubelet-arg=node-ip=0.0.0.0"
      "--kubelet-arg=feature-gates=${featureGates}"
      "--kube-controller-manager-arg=bind-address=0.0.0.0"
      "--kube-controller-manager-arg=node-cidr-mask-size-ipv4=20"
      "--kube-controller-manager-arg=node-cidr-mask-size-ipv6=80"
      "--kube-controller-manager-arg=allocate-node-cidrs=true"
      "--kube-controller-manager-arg=feature-gates=${featureGates}"
      "--kube-controller-manager-arg=tls-cipher-suites=${tlsCipherSuites}"
      "--kube-scheduler-arg=bind-address=0.0.0.0"
      "--kube-scheduler-arg=feature-gates=${featureGates}"
      "--kube-scheduler-arg=tls-cipher-suites=${tlsCipherSuites}"
      "--kube-apiserver-arg=feature-gates=${featureGates}"
      "--kube-apiserver-arg=tls-cipher-suites=${tlsCipherSuites}"
      "--write-kubeconfig=${k3sConfigPath}/kubeconfig.yaml"
      "--write-kubeconfig-mode=600"
      "--write-kubeconfig-group=${toString k3sConfigGroup}"
      "--data-dir=${k3sDataPath}"
    ];

    # Specify K3s version
    package = pkgs."k3s_${builtins.replaceStrings ["."] ["_"] k3sVersion}";
  };

  # System packages required for K3s
  environment.systemPackages = with pkgs; [
    curl
    jq
    git
    bpftools
    kubectl
  ];

  system.stateVersion = "24.11";
}
